
STM32746G_DISCOVERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000075bc  0800ebd8  0800ebd8  0001ebd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016194  08016194  00026194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801619c  0801619c  0002619c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080161a0  080161a0  000261a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000ac  20000000  080161a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010c94  200000ac  08016250  000300ac  2**2
                  ALLOC
  8 ._user_heap_stack 00000660  20010d40  08016250  00030d40  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY
 10 .TxDescripSection 00000080  2004c080  2004c080  0003c080  2**2
                  ALLOC
 11 .debug_line   00045c6a  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0005c8c4  00000000  00000000  00075d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bc32  00000000  00000000  000d260a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002230  00000000  00000000  000de240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00122a8c  00000000  00000000  000e0470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003a88  00000000  00000000  00202f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00028196  00000000  00000000  00206988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037dc4  00000000  00000000  0022eb1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002668e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007368  00000000  00000000  00266938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .RxDecripSection 00000080  2004c000  2004c000  0003c000  2**2
                  ALLOC
 22 .RxarraySection 000017d0  2004c100  2004c100  0003c100  2**0
                  ALLOC
 23 .TxarraySection 000017d0  2004d8d0  2004d8d0  0003d8d0  2**0
                  ALLOC

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ebc0 	.word	0x0800ebc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b0 	.word	0x200000b0
 800020c:	0800ebc0 	.word	0x0800ebc0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000610 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005de:	e003      	b.n	80005e8 <LoopCopyDataInit>

080005e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005e6:	3104      	adds	r1, #4

080005e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005e8:	480b      	ldr	r0, [pc, #44]	; (8000618 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005f0:	d3f6      	bcc.n	80005e0 <CopyDataInit>
  ldr  r2, =_sbss
 80005f2:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005f4:	e002      	b.n	80005fc <LoopFillZerobss>

080005f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005f8:	f842 3b04 	str.w	r3, [r2], #4

080005fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000600:	d3f9      	bcc.n	80005f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000602:	f001 fb09 	bl	8001c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000606:	f00d f9fb 	bl	800da00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800060a:	f000 fb1d 	bl	8000c48 <main>
  bx  lr    
 800060e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000610:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000614:	080161a4 	.word	0x080161a4
  ldr  r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800061c:	200000ac 	.word	0x200000ac
  ldr  r2, =_sbss
 8000620:	200000ac 	.word	0x200000ac
  ldr  r3, = _ebss
 8000624:	20010d40 	.word	0x20010d40

08000628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000628:	e7fe      	b.n	8000628 <ADC_IRQHandler>
	...

0800062c <_sbrk>:




caddr_t _sbrk(int incr)
{
 800062c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <_sbrk+0x34>)
{
 8000630:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000632:	6819      	ldr	r1, [r3, #0]
 8000634:	b909      	cbnz	r1, 800063a <_sbrk+0xe>
		heap_end = &end;
 8000636:	490b      	ldr	r1, [pc, #44]	; (8000664 <_sbrk+0x38>)
 8000638:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800063a:	490b      	ldr	r1, [pc, #44]	; (8000668 <_sbrk+0x3c>)
	prev_heap_end = heap_end;
 800063c:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800063e:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8000640:	4402      	add	r2, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000642:	6809      	ldr	r1, [r1, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 8000644:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 8000648:	428a      	cmp	r2, r1
 800064a:	d906      	bls.n	800065a <_sbrk+0x2e>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800064c:	f00d f9d2 	bl	800d9f4 <__errno>
 8000650:	230c      	movs	r3, #12
 8000652:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000658:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800065a:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800065c:	e7fc      	b.n	8000658 <_sbrk+0x2c>
 800065e:	bf00      	nop
 8000660:	200000c8 	.word	0x200000c8
 8000664:	20010d40 	.word	0x20010d40
 8000668:	e000ed08 	.word	0xe000ed08

0800066c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800066c:	2001      	movs	r0, #1
 800066e:	4770      	bx	lr

08000670 <_kill>:

int _kill(int pid, int sig)
{
 8000670:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000672:	f00d f9bf 	bl	800d9f4 <__errno>
 8000676:	2316      	movs	r3, #22
 8000678:	6003      	str	r3, [r0, #0]
	return -1;
}
 800067a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800067e:	bd08      	pop	{r3, pc}

08000680 <_exit>:

void _exit (int status)
{
 8000680:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000682:	f00d f9b7 	bl	800d9f4 <__errno>
 8000686:	2316      	movs	r3, #22
 8000688:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 800068a:	e7fe      	b.n	800068a <_exit+0xa>

0800068c <_write>:
}

int _write(int file, char *ptr, int len)
{
 800068c:	b570      	push	{r4, r5, r6, lr}
 800068e:	460e      	mov	r6, r1
 8000690:	4614      	mov	r4, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000692:	2500      	movs	r5, #0
 8000694:	42a5      	cmp	r5, r4
 8000696:	db01      	blt.n	800069c <_write+0x10>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 8000698:	4620      	mov	r0, r4
 800069a:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 800069c:	5d70      	ldrb	r0, [r6, r5]
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069e:	3501      	adds	r5, #1
		   __io_putchar( *ptr++ );
 80006a0:	f000 fdfa 	bl	8001298 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a4:	e7f6      	b.n	8000694 <_write+0x8>

080006a6 <_close>:

int _close(int file)
{
	return -1;
}
 80006a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006aa:	4770      	bx	lr

080006ac <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80006ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80006b0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80006b2:	604b      	str	r3, [r1, #4]
}
 80006b4:	4770      	bx	lr

080006b6 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80006b6:	2001      	movs	r0, #1
 80006b8:	4770      	bx	lr

080006ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80006ba:	2000      	movs	r0, #0
 80006bc:	4770      	bx	lr

080006be <_read>:

int _read(int file, char *ptr, int len)
{
 80006be:	b570      	push	{r4, r5, r6, lr}
 80006c0:	460e      	mov	r6, r1
 80006c2:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c4:	2500      	movs	r5, #0
 80006c6:	42a5      	cmp	r5, r4
 80006c8:	db01      	blt.n	80006ce <_read+0x10>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 80006ca:	4620      	mov	r0, r4
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 80006ce:	f3af 8000 	nop.w
 80006d2:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d4:	3501      	adds	r5, #1
 80006d6:	e7f6      	b.n	80006c6 <_read+0x8>

080006d8 <User_notification>:
  * @param  netif: the network interface
  * @retval None
  */
void User_notification(struct netif *netif) 
{
  if (netif_is_up(netif))
 80006d8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80006dc:	f013 0f01 	tst.w	r3, #1
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <User_notification+0x24>)
 80006e2:	d002      	beq.n	80006ea <User_notification+0x12>
  {
#ifdef USE_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
    /* Update DHCP state machine */
    DHCP_state = DHCP_LINK_DOWN;
#endif  /* USE_DHCP */
    LCD_UsrLog ("The network cable is not connected \n");
  } 
}
 80006e8:	4770      	bx	lr
    DHCP_state = DHCP_LINK_DOWN;
 80006ea:	2205      	movs	r2, #5
    LCD_UsrLog ("The network cable is not connected \n");
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <User_notification+0x28>)
    DHCP_state = DHCP_LINK_DOWN;
 80006ee:	701a      	strb	r2, [r3, #0]
    LCD_UsrLog ("The network cable is not connected \n");
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <User_notification+0x2c>)
 80006f2:	4a05      	ldr	r2, [pc, #20]	; (8000708 <User_notification+0x30>)
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	f00d ba51 	b.w	800db9c <puts>
 80006fa:	bf00      	nop
 80006fc:	200000cc 	.word	0x200000cc
 8000700:	08012a8c 	.word	0x08012a8c
 8000704:	2000a6c8 	.word	0x2000a6c8
 8000708:	ff000080 	.word	0xff000080

0800070c <DHCP_thread>:
  * @brief  DHCP Process
  * @param  argument: network interface
  * @retval None
  */
void DHCP_thread(void const * argument)
{
 800070c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000710:	4604      	mov	r4, r0
 8000712:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp;
  uint8_t iptxt[20];
  
  for (;;)
  {
    switch (DHCP_state)
 8000714:	4d30      	ldr	r5, [pc, #192]	; (80007d8 <DHCP_thread+0xcc>)
            
            /* Stop DHCP */
            dhcp_stop(netif);
            
            /* Static address used */
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 8000716:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80007f4 <DHCP_thread+0xe8>
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800071a:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80007f8 <DHCP_thread+0xec>
    switch (DHCP_state)
 800071e:	782a      	ldrb	r2, [r5, #0]
 8000720:	2a02      	cmp	r2, #2
 8000722:	b2d3      	uxtb	r3, r2
 8000724:	d016      	beq.n	8000754 <DHCP_thread+0x48>
 8000726:	2b05      	cmp	r3, #5
 8000728:	d04f      	beq.n	80007ca <DHCP_thread+0xbe>
 800072a:	2b01      	cmp	r3, #1
 800072c:	d10e      	bne.n	800074c <DHCP_thread+0x40>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 800072e:	2300      	movs	r3, #0
        dhcp_start(netif);
 8000730:	4620      	mov	r0, r4
        ip_addr_set_zero_ip4(&netif->netmask);
 8000732:	e9c4 3301 	strd	r3, r3, [r4, #4]
        ip_addr_set_zero_ip4(&netif->gw);       
 8000736:	60e3      	str	r3, [r4, #12]
        dhcp_start(netif);
 8000738:	f006 f882 	bl	8006840 <dhcp_start>
        DHCP_state = DHCP_WAIT_ADDRESS;
 800073c:	2302      	movs	r3, #2
        LCD_UsrLog ("  State: Looking for DHCP server ...\n");
 800073e:	4a27      	ldr	r2, [pc, #156]	; (80007dc <DHCP_thread+0xd0>)
        DHCP_state = DHCP_WAIT_ADDRESS;
 8000740:	702b      	strb	r3, [r5, #0]
        LCD_UsrLog ("  State: Looking for DHCP server ...\n");
 8000742:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <DHCP_thread+0xd4>)
 8000744:	4827      	ldr	r0, [pc, #156]	; (80007e4 <DHCP_thread+0xd8>)
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	f00d fa28 	bl	800db9c <puts>
    break;
    default: break;
    }
    
    /* wait 250 ms */
    osDelay(250);
 800074c:	20fa      	movs	r0, #250	; 0xfa
 800074e:	f004 fcce 	bl	80050ee <osDelay>
    switch (DHCP_state)
 8000752:	e7e4      	b.n	800071e <DHCP_thread+0x12>
        if (dhcp_supplied_address(netif)) 
 8000754:	4620      	mov	r0, r4
 8000756:	f006 f805 	bl	8006764 <dhcp_supplied_address>
 800075a:	b180      	cbz	r0, 800077e <DHCP_thread+0x72>
          DHCP_state = DHCP_ADDRESS_ASSIGNED;	
 800075c:	2303      	movs	r3, #3
          sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));   
 800075e:	1d20      	adds	r0, r4, #4
          DHCP_state = DHCP_ADDRESS_ASSIGNED;	
 8000760:	702b      	strb	r3, [r5, #0]
          sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));   
 8000762:	f007 f83b 	bl	80077dc <ip4addr_ntoa>
 8000766:	4601      	mov	r1, r0
 8000768:	a803      	add	r0, sp, #12
 800076a:	f00d fa5f 	bl	800dc2c <strcpy>
          LCD_UsrLog ("IP address assigned by a DHCP server: %s\n", iptxt);
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <DHCP_thread+0xd4>)
 8000770:	4a1a      	ldr	r2, [pc, #104]	; (80007dc <DHCP_thread+0xd0>)
 8000772:	a903      	add	r1, sp, #12
 8000774:	481c      	ldr	r0, [pc, #112]	; (80007e8 <DHCP_thread+0xdc>)
 8000776:	601a      	str	r2, [r3, #0]
            LCD_UsrLog ("Static IP address: %s\n", iptxt);  
 8000778:	f00d f98a 	bl	800da90 <iprintf>
 800077c:	e7e6      	b.n	800074c <DHCP_thread+0x40>
          if (dhcp->tries > MAX_DHCP_TRIES)
 800077e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000780:	799b      	ldrb	r3, [r3, #6]
 8000782:	2b04      	cmp	r3, #4
 8000784:	d9e2      	bls.n	800074c <DHCP_thread+0x40>
            DHCP_state = DHCP_TIMEOUT;
 8000786:	2304      	movs	r3, #4
            dhcp_stop(netif);
 8000788:	4620      	mov	r0, r4
            LCD_UsrLog ("DHCP Timeout !! \n");
 800078a:	4e15      	ldr	r6, [pc, #84]	; (80007e0 <DHCP_thread+0xd4>)
            DHCP_state = DHCP_TIMEOUT;
 800078c:	702b      	strb	r3, [r5, #0]
            dhcp_stop(netif);
 800078e:	f006 f9a5 	bl	8006adc <dhcp_stop>
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 8000792:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 8000796:	aa01      	add	r2, sp, #4
 8000798:	4669      	mov	r1, sp
 800079a:	4620      	mov	r0, r4
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 800079c:	f8cd 8000 	str.w	r8, [sp]
            LCD_UsrLog ("DHCP Timeout !! \n");
 80007a0:	4f0e      	ldr	r7, [pc, #56]	; (80007dc <DHCP_thread+0xd0>)
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 80007a2:	e9cd 3901 	strd	r3, r9, [sp, #4]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 80007a6:	ab02      	add	r3, sp, #8
 80007a8:	f007 ffa0 	bl	80086ec <netif_set_addr>
            sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));
 80007ac:	1d20      	adds	r0, r4, #4
 80007ae:	f007 f815 	bl	80077dc <ip4addr_ntoa>
 80007b2:	4601      	mov	r1, r0
 80007b4:	a803      	add	r0, sp, #12
 80007b6:	f00d fa39 	bl	800dc2c <strcpy>
            LCD_UsrLog ("DHCP Timeout !! \n");
 80007ba:	480c      	ldr	r0, [pc, #48]	; (80007ec <DHCP_thread+0xe0>)
 80007bc:	6037      	str	r7, [r6, #0]
 80007be:	f00d f9ed 	bl	800db9c <puts>
            LCD_UsrLog ("Static IP address: %s\n", iptxt);  
 80007c2:	a903      	add	r1, sp, #12
 80007c4:	480a      	ldr	r0, [pc, #40]	; (80007f0 <DHCP_thread+0xe4>)
 80007c6:	6037      	str	r7, [r6, #0]
 80007c8:	e7d6      	b.n	8000778 <DHCP_thread+0x6c>
      dhcp_stop(netif);
 80007ca:	4620      	mov	r0, r4
 80007cc:	f006 f986 	bl	8006adc <dhcp_stop>
      DHCP_state = DHCP_OFF; 
 80007d0:	2300      	movs	r3, #0
 80007d2:	702b      	strb	r3, [r5, #0]
    break;
 80007d4:	e7ba      	b.n	800074c <DHCP_thread+0x40>
 80007d6:	bf00      	nop
 80007d8:	200000cc 	.word	0x200000cc
 80007dc:	ff000080 	.word	0xff000080
 80007e0:	2000a6c8 	.word	0x2000a6c8
 80007e4:	08012ab0 	.word	0x08012ab0
 80007e8:	08012ad5 	.word	0x08012ad5
 80007ec:	08012aff 	.word	0x08012aff
 80007f0:	08012b10 	.word	0x08012b10
 80007f4:	0a00a8c0 	.word	0x0a00a8c0
 80007f8:	0100a8c0 	.word	0x0100a8c0

080007fc <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80007fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 8000800:	4a24      	ldr	r2, [pc, #144]	; (8000894 <low_level_output+0x98>)
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;

  DmaTxDesc = EthHandle.TxDesc;
  bufferoffset = 0;
 8000802:	f04f 0800 	mov.w	r8, #0
{
 8000806:	460c      	mov	r4, r1
    /* Get bytes in current lwIP buffer */
    byteslefttocopy = q->len;
    payloadoffset = 0;
    
    /* Check if the length of data to copy is bigger than Tx buffer size*/
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000808:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 800080c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
 800080e:	4647      	mov	r7, r8
 8000810:	4691      	mov	r9, r2
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 8000812:	68b3      	ldr	r3, [r6, #8]
  for(q = p; q != NULL; q = q->next)
 8000814:	b92c      	cbnz	r4, 8000822 <low_level_output+0x26>
    bufferoffset = bufferoffset + byteslefttocopy;
    framelength = framelength + byteslefttocopy;
  }
 
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&EthHandle, framelength);
 8000816:	4639      	mov	r1, r7
 8000818:	481e      	ldr	r0, [pc, #120]	; (8000894 <low_level_output+0x98>)
 800081a:	f001 fe0d 	bl	8002438 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800081e:	4620      	mov	r0, r4
 8000820:	e004      	b.n	800082c <low_level_output+0x30>
    if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000822:	6832      	ldr	r2, [r6, #0]
 8000824:	2a00      	cmp	r2, #0
 8000826:	da11      	bge.n	800084c <low_level_output+0x50>
      errval = ERR_USE;
 8000828:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((EthHandle.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800082c:	f8d9 3000 	ldr.w	r3, [r9]
 8000830:	f241 0214 	movw	r2, #4116	; 0x1014
 8000834:	5899      	ldr	r1, [r3, r2]
 8000836:	0689      	lsls	r1, r1, #26
 8000838:	d505      	bpl.n	8000846 <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    EthHandle.Instance->DMASR = ETH_DMASR_TUS;
 800083a:	2120      	movs	r1, #32
 800083c:	5099      	str	r1, [r3, r2]
    
    /* Resume DMA transmission*/
    EthHandle.Instance->DMATPDR = 0;
 800083e:	f241 0204 	movw	r2, #4100	; 0x1004
 8000842:	2100      	movs	r1, #0
 8000844:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 8000846:	b003      	add	sp, #12
 8000848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    byteslefttocopy = q->len;
 800084c:	8962      	ldrh	r2, [r4, #10]
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800084e:	4645      	mov	r5, r8
    payloadoffset = 0;
 8000850:	f04f 0a00 	mov.w	sl, #0
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000854:	eb05 0802 	add.w	r8, r5, r2
 8000858:	6861      	ldr	r1, [r4, #4]
 800085a:	1958      	adds	r0, r3, r5
 800085c:	45d8      	cmp	r8, fp
 800085e:	4451      	add	r1, sl
 8000860:	d808      	bhi.n	8000874 <low_level_output+0x78>
    memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8000862:	e9cd 2300 	strd	r2, r3, [sp]
 8000866:	f00d f8fd 	bl	800da64 <memcpy>
    framelength = framelength + byteslefttocopy;
 800086a:	9a00      	ldr	r2, [sp, #0]
  for(q = p; q != NULL; q = q->next)
 800086c:	6824      	ldr	r4, [r4, #0]
    framelength = framelength + byteslefttocopy;
 800086e:	4417      	add	r7, r2
  for(q = p; q != NULL; q = q->next)
 8000870:	9b01      	ldr	r3, [sp, #4]
 8000872:	e7cf      	b.n	8000814 <low_level_output+0x18>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8000874:	ebab 0505 	sub.w	r5, fp, r5
 8000878:	462a      	mov	r2, r5
 800087a:	f00d f8f3 	bl	800da64 <memcpy>
      DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800087e:	68f6      	ldr	r6, [r6, #12]
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000880:	6833      	ldr	r3, [r6, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	dbd0      	blt.n	8000828 <low_level_output+0x2c>
      payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8000886:	44aa      	add	sl, r5
      framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8000888:	442f      	add	r7, r5
      buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800088a:	68b3      	ldr	r3, [r6, #8]
      byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800088c:	f2a8 52f4 	subw	r2, r8, #1524	; 0x5f4
      bufferoffset = 0;
 8000890:	2500      	movs	r5, #0
 8000892:	e7df      	b.n	8000854 <low_level_output+0x58>
 8000894:	20006998 	.word	0x20006998

08000898 <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input( void const * argument )
{
 8000898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800089c:	4680      	mov	r8, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800089e:	4c3a      	ldr	r4, [pc, #232]	; (8000988 <ethernetif_input+0xf0>)
 80008a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008a4:	6820      	ldr	r0, [r4, #0]
 80008a6:	f004 fc8d 	bl	80051c4 <osSemaphoreWait>
 80008aa:	2800      	cmp	r0, #0
 80008ac:	d1f8      	bne.n	80008a0 <ethernetif_input+0x8>
  if(HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
 80008ae:	4e37      	ldr	r6, [pc, #220]	; (800098c <ethernetif_input+0xf4>)
    {
      do
      {
        LOCK_TCPIP_CORE();
 80008b0:	4837      	ldr	r0, [pc, #220]	; (8000990 <ethernetif_input+0xf8>)
 80008b2:	f00c f9d1 	bl	800cc58 <sys_mutex_lock>
  if(HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
 80008b6:	4630      	mov	r0, r6
 80008b8:	f001 fe30 	bl	800251c <HAL_ETH_GetReceivedFrame_IT>
 80008bc:	4605      	mov	r5, r0
 80008be:	b130      	cbz	r0, 80008ce <ethernetif_input+0x36>
    return NULL;
 80008c0:	2400      	movs	r4, #0
          {
            pbuf_free(p);
          }
        }

        UNLOCK_TCPIP_CORE();
 80008c2:	4833      	ldr	r0, [pc, #204]	; (8000990 <ethernetif_input+0xf8>)
 80008c4:	f00c f9cd 	bl	800cc62 <sys_mutex_unlock>

      }while(p!=NULL);
 80008c8:	2c00      	cmp	r4, #0
 80008ca:	d1f0      	bne.n	80008ae <ethernetif_input+0x16>
 80008cc:	e7e7      	b.n	800089e <ethernetif_input+0x6>
  len = EthHandle.RxFrameInfos.length;
 80008ce:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
  if (len > 0)
 80008d0:	bb01      	cbnz	r1, 8000914 <ethernetif_input+0x7c>
  struct pbuf *p = NULL, *q = NULL;
 80008d2:	2400      	movs	r4, #0
  dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 80008d4:	6b33      	ldr	r3, [r6, #48]	; 0x30
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 80008d6:	2200      	movs	r2, #0
 80008d8:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 80008da:	4282      	cmp	r2, r0
 80008dc:	d14d      	bne.n	800097a <ethernetif_input+0xe2>
  EthHandle.RxFrameInfos.SegCount =0;
 80008de:	2300      	movs	r3, #0
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80008e0:	f241 0214 	movw	r2, #4116	; 0x1014
  EthHandle.RxFrameInfos.SegCount =0;
 80008e4:	63b3      	str	r3, [r6, #56]	; 0x38
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80008e6:	6833      	ldr	r3, [r6, #0]
 80008e8:	5899      	ldr	r1, [r3, r2]
 80008ea:	0609      	lsls	r1, r1, #24
 80008ec:	d505      	bpl.n	80008fa <ethernetif_input+0x62>
    EthHandle.Instance->DMASR = ETH_DMASR_RBUS;
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	5099      	str	r1, [r3, r2]
    EthHandle.Instance->DMARPDR = 0;
 80008f2:	f241 0208 	movw	r2, #4104	; 0x1008
 80008f6:	2100      	movs	r1, #0
 80008f8:	5099      	str	r1, [r3, r2]
        if (p != NULL)
 80008fa:	2c00      	cmp	r4, #0
 80008fc:	d0e0      	beq.n	80008c0 <ethernetif_input+0x28>
          if (netif->input( p, netif) != ERR_OK )
 80008fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8000902:	4641      	mov	r1, r8
 8000904:	4620      	mov	r0, r4
 8000906:	4798      	blx	r3
 8000908:	2800      	cmp	r0, #0
 800090a:	d0da      	beq.n	80008c2 <ethernetif_input+0x2a>
            pbuf_free(p);
 800090c:	4620      	mov	r0, r4
 800090e:	f008 f8b3 	bl	8008a78 <pbuf_free>
 8000912:	e7d6      	b.n	80008c2 <ethernetif_input+0x2a>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8000914:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 8000918:	6c37      	ldr	r7, [r6, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800091a:	f008 f915 	bl	8008b48 <pbuf_alloc>
  if (p != NULL)
 800091e:	4604      	mov	r4, r0
 8000920:	2800      	cmp	r0, #0
 8000922:	d0d6      	beq.n	80008d2 <ethernetif_input+0x3a>
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 8000924:	46b9      	mov	r9, r7
    dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 8000926:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
 800092a:	4607      	mov	r7, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800092c:	f240 5bf4 	movw	fp, #1524	; 0x5f4
      byteslefttocopy = q->len;
 8000930:	f8b7 e00a 	ldrh.w	lr, [r7, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000934:	46ac      	mov	ip, r5
      payloadoffset = 0;
 8000936:	2300      	movs	r3, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000938:	eb0c 050e 	add.w	r5, ip, lr
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	eb09 010c 	add.w	r1, r9, ip
 8000942:	455d      	cmp	r5, fp
 8000944:	4418      	add	r0, r3
 8000946:	d806      	bhi.n	8000956 <ethernetif_input+0xbe>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8000948:	4672      	mov	r2, lr
 800094a:	f00d f88b 	bl	800da64 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800094e:	683f      	ldr	r7, [r7, #0]
 8000950:	2f00      	cmp	r7, #0
 8000952:	d1ed      	bne.n	8000930 <ethernetif_input+0x98>
 8000954:	e7be      	b.n	80008d4 <ethernetif_input+0x3c>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8000956:	ebab 020c 	sub.w	r2, fp, ip
 800095a:	9301      	str	r3, [sp, #4]
 800095c:	9200      	str	r2, [sp, #0]
 800095e:	f00d f881 	bl	800da64 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8000962:	f8da a00c 	ldr.w	sl, [sl, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8000966:	f2a5 5ef4 	subw	lr, r5, #1524	; 0x5f4
        bufferoffset = 0;
 800096a:	f04f 0c00 	mov.w	ip, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800096e:	f8da 9008 	ldr.w	r9, [sl, #8]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8000972:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000976:	4413      	add	r3, r2
        bufferoffset = 0;
 8000978:	e7de      	b.n	8000938 <ethernetif_input+0xa0>
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800097a:	6819      	ldr	r1, [r3, #0]
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 800097c:	3201      	adds	r2, #1
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800097e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8000982:	6019      	str	r1, [r3, #0]
    dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8000984:	68db      	ldr	r3, [r3, #12]
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 8000986:	e7a8      	b.n	80008da <ethernetif_input+0x42>
 8000988:	200000d0 	.word	0x200000d0
 800098c:	20006998 	.word	0x20006998
 8000990:	2000a7b0 	.word	0x2000a7b0

08000994 <HAL_ETH_MspInit>:
{
 8000994:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4c2e      	ldr	r4, [pc, #184]	; (8000a50 <HAL_ETH_MspInit+0xbc>)
{
 8000998:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 800099a:	2500      	movs	r5, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800099c:	482d      	ldr	r0, [pc, #180]	; (8000a54 <HAL_ETH_MspInit+0xc0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80009a0:	a907      	add	r1, sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6323      	str	r3, [r4, #48]	; 0x30
 80009a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	9301      	str	r3, [sp, #4]
 80009b0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6323      	str	r3, [r4, #48]	; 0x30
 80009ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009bc:	f003 0304 	and.w	r3, r3, #4
 80009c0:	9302      	str	r3, [sp, #8]
 80009c2:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ca:	6323      	str	r3, [r4, #48]	; 0x30
 80009cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d2:	9303      	str	r3, [sp, #12]
 80009d4:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 80009da:	2302      	movs	r3, #2
 80009dc:	e9cd 3508 	strd	r3, r5, [sp, #32]
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 80009e0:	230b      	movs	r3, #11
 80009e2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 80009e4:	2386      	movs	r3, #134	; 0x86
 80009e6:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80009e8:	f001 ffc4 	bl	8002974 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 80009ec:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80009ee:	a907      	add	r1, sp, #28
 80009f0:	4819      	ldr	r0, [pc, #100]	; (8000a58 <HAL_ETH_MspInit+0xc4>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 80009f2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80009f4:	f001 ffbe 	bl	8002974 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 80009f8:	f646 0304 	movw	r3, #26628	; 0x6804
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80009fc:	a907      	add	r1, sp, #28
 80009fe:	4817      	ldr	r0, [pc, #92]	; (8000a5c <HAL_ETH_MspInit+0xc8>)
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 8000a00:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a02:	f001 ffb7 	bl	8002974 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8000a06:	462a      	mov	r2, r5
 8000a08:	2107      	movs	r1, #7
 8000a0a:	203d      	movs	r0, #61	; 0x3d
 8000a0c:	f001 f972 	bl	8001cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000a10:	203d      	movs	r0, #61	; 0x3d
 8000a12:	f001 f9a1 	bl	8001d58 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH_CLK_ENABLE();
 8000a16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a1c:	6323      	str	r3, [r4, #48]	; 0x30
 8000a1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a24:	9304      	str	r3, [sp, #16]
 8000a26:	9b04      	ldr	r3, [sp, #16]
 8000a28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a2e:	6323      	str	r3, [r4, #48]	; 0x30
 8000a30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a36:	9305      	str	r3, [sp, #20]
 8000a38:	9b05      	ldr	r3, [sp, #20]
 8000a3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a40:	6323      	str	r3, [r4, #48]	; 0x30
 8000a42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a48:	9306      	str	r3, [sp, #24]
 8000a4a:	9b06      	ldr	r3, [sp, #24]
}
 8000a4c:	b00d      	add	sp, #52	; 0x34
 8000a4e:	bd30      	pop	{r4, r5, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40021800 	.word	0x40021800

08000a60 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8000a60:	4b01      	ldr	r3, [pc, #4]	; (8000a68 <HAL_ETH_RxCpltCallback+0x8>)
 8000a62:	6818      	ldr	r0, [r3, #0]
 8000a64:	f004 bbd4 	b.w	8005210 <osSemaphoreRelease>
 8000a68:	200000d0 	.word	0x200000d0

08000a6c <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 8000a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000a6e:	4604      	mov	r4, r0
{
 8000a70:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000a72:	b930      	cbnz	r0, 8000a82 <ethernetif_init+0x16>
 8000a74:	4b30      	ldr	r3, [pc, #192]	; (8000b38 <ethernetif_init+0xcc>)
 8000a76:	f240 12e9 	movw	r2, #489	; 0x1e9
 8000a7a:	4930      	ldr	r1, [pc, #192]	; (8000b3c <ethernetif_init+0xd0>)
 8000a7c:	4830      	ldr	r0, [pc, #192]	; (8000b40 <ethernetif_init+0xd4>)
 8000a7e:	f00d f807 	bl	800da90 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8000a82:	f247 4373 	movw	r3, #29811	; 0x7473
  EthHandle.Init.Speed = ETH_SPEED_100M;
 8000a86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  netif->name[0] = IFNAME0;
 8000a8a:	8663      	strh	r3, [r4, #50]	; 0x32

  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <ethernetif_init+0xd8>)
 8000a8e:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 8000a90:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <ethernetif_init+0xdc>)
 8000a92:	61a3      	str	r3, [r4, #24]
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 8000a94:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <ethernetif_init+0xe0>)
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	889b      	ldrh	r3, [r3, #4]
 8000a9a:	9001      	str	r0, [sp, #4]
 8000a9c:	f8ad 3008 	strh.w	r3, [sp, #8]
  EthHandle.Instance = ETH;  
 8000aa0:	482b      	ldr	r0, [pc, #172]	; (8000b50 <ethernetif_init+0xe4>)
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <ethernetif_init+0xe8>)
 8000aa4:	6003      	str	r3, [r0, #0]
  EthHandle.Init.MACAddr = macaddress;
 8000aa6:	ab01      	add	r3, sp, #4
 8000aa8:	6143      	str	r3, [r0, #20]
  EthHandle.Init.Speed = ETH_SPEED_100M;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e9c0 3201 	strd	r3, r2, [r0, #4]
  EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  EthHandle.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8000ab4:	6183      	str	r3, [r0, #24]
  EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000ab6:	2300      	movs	r3, #0
  EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000ab8:	60c2      	str	r2, [r0, #12]
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000aba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000abe:	61c3      	str	r3, [r0, #28]
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000ac0:	6202      	str	r2, [r0, #32]
  EthHandle.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000ac2:	8203      	strh	r3, [r0, #16]
  if (HAL_ETH_Init(&EthHandle) == HAL_OK)
 8000ac4:	f001 fe1c 	bl	8002700 <HAL_ETH_Init>
 8000ac8:	b928      	cbnz	r0, 8000ad6 <ethernetif_init+0x6a>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8000aca:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	4a1f      	ldr	r2, [pc, #124]	; (8000b58 <ethernetif_init+0xec>)
 8000ada:	4920      	ldr	r1, [pc, #128]	; (8000b5c <ethernetif_init+0xf0>)
  osSemaphoreDef(SEM);
 8000adc:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8000ade:	481c      	ldr	r0, [pc, #112]	; (8000b50 <ethernetif_init+0xe4>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000ae0:	ad03      	add	r5, sp, #12
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8000ae2:	f001 fc33 	bl	800234c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&EthHandle, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <ethernetif_init+0xf4>)
 8000aea:	491e      	ldr	r1, [pc, #120]	; (8000b64 <ethernetif_init+0xf8>)
 8000aec:	4818      	ldr	r0, [pc, #96]	; (8000b50 <ethernetif_init+0xe4>)
 8000aee:	f001 fc69 	bl	80023c4 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[2] =  MAC_ADDR2;
 8000af2:	4a1d      	ldr	r2, [pc, #116]	; (8000b68 <ethernetif_init+0xfc>)
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <ethernetif_init+0x100>)
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8000af6:	2101      	movs	r1, #1
 8000af8:	4668      	mov	r0, sp
  osSemaphoreDef(SEM);
 8000afa:	9700      	str	r7, [sp, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000afc:	4e1c      	ldr	r6, [pc, #112]	; (8000b70 <ethernetif_init+0x104>)
  netif->hwaddr[2] =  MAC_ADDR2;
 8000afe:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
 8000b02:	2306      	movs	r3, #6
 8000b04:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8000b08:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8000b0c:	f043 030a 	orr.w	r3, r3, #10
 8000b10:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8000b14:	f004 fb40 	bl	8005198 <osSemaphoreCreate>
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <ethernetif_init+0x108>)
 8000b1a:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000b1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b20:	6833      	ldr	r3, [r6, #0]
  osThreadCreate (osThread(EthIf), netif);
 8000b22:	4621      	mov	r1, r4
 8000b24:	a803      	add	r0, sp, #12
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000b26:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 8000b28:	f004 fac4 	bl	80050b4 <osThreadCreate>
  HAL_ETH_Start(&EthHandle);
 8000b2c:	4808      	ldr	r0, [pc, #32]	; (8000b50 <ethernetif_init+0xe4>)
 8000b2e:	f001 fee3 	bl	80028f8 <HAL_ETH_Start>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8000b32:	4638      	mov	r0, r7
 8000b34:	b009      	add	sp, #36	; 0x24
 8000b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b38:	08012b2d 	.word	0x08012b2d
 8000b3c:	080130fa 	.word	0x080130fa
 8000b40:	08012bab 	.word	0x08012bab
 8000b44:	080070d5 	.word	0x080070d5
 8000b48:	080007fd 	.word	0x080007fd
 8000b4c:	08012bd3 	.word	0x08012bd3
 8000b50:	20006998 	.word	0x20006998
 8000b54:	40028000 	.word	0x40028000
 8000b58:	2004d8d0 	.word	0x2004d8d0
 8000b5c:	2004c080 	.word	0x2004c080
 8000b60:	2004c100 	.word	0x2004c100
 8000b64:	2004c000 	.word	0x2004c000
 8000b68:	030205dc 	.word	0x030205dc
 8000b6c:	2a060504 	.word	0x2a060504
 8000b70:	0800ebd8 	.word	0x0800ebd8
 8000b74:	200000d0 	.word	0x200000d0

08000b78 <sys_now>:
  * @param  None
  * @retval Time
  */
u32_t sys_now(void)
{
  return HAL_GetTick();
 8000b78:	f001 b892 	b.w	8001ca0 <HAL_GetTick>

08000b7c <StartThread>:
  * @brief  Start Thread 
  * @param  argument not used
  * @retval None
  */
static void StartThread(void const * argument)
{ 
 8000b7c:	b500      	push	{lr}
 8000b7e:	b08d      	sub	sp, #52	; 0x34
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
#endif /* USE_DHCP */
  
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000b80:	4c27      	ldr	r4, [pc, #156]	; (8000c20 <StartThread+0xa4>)
  * @retval None
  */
static void BSP_Config(void)
{
  /* Initialize the LCD */
  BSP_LCD_Init();
 8000b82:	f000 feab 	bl	80018dc <BSP_LCD_Init>
  
  /* Initialize the LCD Layers */
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 8000b86:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f000 fc70 	bl	8001470 <BSP_LCD_LayerDefaultInit>
  
  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 fca5 	bl	80014e0 <BSP_LCD_SelectLayer>
  
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000b96:	4823      	ldr	r0, [pc, #140]	; (8000c24 <StartThread+0xa8>)
 8000b98:	f000 fcbc 	bl	8001514 <BSP_LCD_SetFont>
  
  /* Initialize LCD Log module */
  LCD_LOG_Init();
 8000b9c:	f000 fab8 	bl	8001110 <LCD_LOG_Init>
  
  /* Show Header and Footer texts */
  LCD_LOG_SetHeader((uint8_t *)"Home assistant");
 8000ba0:	4821      	ldr	r0, [pc, #132]	; (8000c28 <StartThread+0xac>)
 8000ba2:	f000 fabf 	bl	8001124 <LCD_LOG_SetHeader>
  LCD_LOG_SetFooter((uint8_t *)"JGD-OPT");
 8000ba6:	4821      	ldr	r0, [pc, #132]	; (8000c2c <StartThread+0xb0>)
 8000ba8:	f000 faf2 	bl	8001190 <LCD_LOG_SetFooter>
  
  LCD_UsrLog ((char *)"  State: Ethernet Initialization ...\n");
 8000bac:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <StartThread+0xb4>)
 8000bae:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <StartThread+0xb8>)
 8000bb0:	4821      	ldr	r0, [pc, #132]	; (8000c38 <StartThread+0xbc>)
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	f00c fff2 	bl	800db9c <puts>
  tcpip_init(NULL, NULL);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4608      	mov	r0, r1
 8000bbc:	f004 fea8 	bl	8005910 <tcpip_init>
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <StartThread+0xc0>)
  ip_addr_set_zero_ip4(&ipaddr);
 8000bc2:	2300      	movs	r3, #0
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000bc4:	a905      	add	r1, sp, #20
 8000bc6:	9202      	str	r2, [sp, #8]
 8000bc8:	4620      	mov	r0, r4
 8000bca:	4a1d      	ldr	r2, [pc, #116]	; (8000c40 <StartThread+0xc4>)
  ip_addr_set_zero_ip4(&gw);
 8000bcc:	9307      	str	r3, [sp, #28]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000bce:	e9cd 3200 	strd	r3, r2, [sp]
  ip_addr_set_zero_ip4(&netmask);
 8000bd2:	e9cd 3305 	strd	r3, r3, [sp, #20]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000bd6:	aa06      	add	r2, sp, #24
 8000bd8:	ab07      	add	r3, sp, #28
 8000bda:	f007 fdb3 	bl	8008744 <netif_add>
  netif_set_default(&gnetif);
 8000bde:	4620      	mov	r0, r4
 8000be0:	f007 fe48 	bl	8008874 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8000be4:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    netif_set_up(&gnetif);
 8000be8:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8000bea:	075b      	lsls	r3, r3, #29
 8000bec:	d514      	bpl.n	8000c18 <StartThread+0x9c>
    netif_set_up(&gnetif);
 8000bee:	f007 fe47 	bl	8008880 <netif_set_up>
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8000bf2:	4d14      	ldr	r5, [pc, #80]	; (8000c44 <StartThread+0xc8>)
 8000bf4:	ac07      	add	r4, sp, #28
  User_notification(&gnetif);
 8000bf6:	480a      	ldr	r0, [pc, #40]	; (8000c20 <StartThread+0xa4>)
 8000bf8:	f7ff fd6e 	bl	80006d8 <User_notification>
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8000bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c00:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 8000c02:	a807      	add	r0, sp, #28
 8000c04:	4906      	ldr	r1, [pc, #24]	; (8000c20 <StartThread+0xa4>)
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8000c06:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 8000c08:	f004 fa54 	bl	80050b4 <osThreadCreate>
  mqtt_client_init();
 8000c0c:	f000 f9a4 	bl	8000f58 <mqtt_client_init>
    osThreadTerminate(NULL);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f004 fa67 	bl	80050e4 <osThreadTerminate>
  for( ;; )
 8000c16:	e7fb      	b.n	8000c10 <StartThread+0x94>
    netif_set_down(&gnetif);
 8000c18:	f007 fe4c 	bl	80088b4 <netif_set_down>
 8000c1c:	e7e9      	b.n	8000bf2 <StartThread+0x76>
 8000c1e:	bf00      	nop
 8000c20:	200069e0 	.word	0x200069e0
 8000c24:	20000000 	.word	0x20000000
 8000c28:	08012be5 	.word	0x08012be5
 8000c2c:	08012bf4 	.word	0x08012bf4
 8000c30:	2000a6c8 	.word	0x2000a6c8
 8000c34:	ff000080 	.word	0xff000080
 8000c38:	08012bfc 	.word	0x08012bfc
 8000c3c:	080058f5 	.word	0x080058f5
 8000c40:	08000a6d 	.word	0x08000a6d
 8000c44:	0800ebec 	.word	0x0800ebec

08000c48 <main>:
{
 8000c48:	b500      	push	{lr}
 8000c4a:	b093      	sub	sp, #76	; 0x4c
  HAL_MPU_Disable();
  
  /* Configure the MPU as Normal Non Cacheable for Ethernet Buffers in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x2004C000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000c4c:	4c49      	ldr	r4, [pc, #292]	; (8000d74 <main+0x12c>)
  HAL_MPU_Disable();
 8000c4e:	f001 f891 	bl	8001d74 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c52:	2301      	movs	r3, #1
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c54:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c56:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000c5a:	4b47      	ldr	r3, [pc, #284]	; (8000d78 <main+0x130>)
 8000c5c:	e9cd 4307 	strd	r4, r3, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c64:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c66:	f001 f8a7 	bl	8001db8 <HAL_MPU_ConfigRegion>
  
  /* Configure the MPU as Device for Ethernet Descriptors in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c6a:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.BaseAddress = 0x2004C000;
 8000c6e:	9407      	str	r4, [sp, #28]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c70:	4c42      	ldr	r4, [pc, #264]	; (8000d7c <main+0x134>)

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c72:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c74:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c78:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 8000c7c:	e9cd 4308 	strd	r4, r3, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c80:	f001 f89a 	bl	8001db8 <HAL_MPU_ConfigRegion>
  
  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c84:	2004      	movs	r0, #4
 8000c86:	f001 f885 	bl	8001d94 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c8e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c92:	4b3b      	ldr	r3, [pc, #236]	; (8000d80 <main+0x138>)
 8000c94:	2100      	movs	r1, #0
 8000c96:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c9e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ca2:	695a      	ldr	r2, [r3, #20]
 8000ca4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ca8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000caa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cae:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000cb2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cba:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cbe:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cc2:	f3c2 00c9 	ubfx	r0, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000cc6:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000cca:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ccc:	ea02 0604 	and.w	r6, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cd0:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cd2:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cd6:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cd8:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8000cdc:	d2f9      	bcs.n	8000cd2 <main+0x8a>
    } while(sets-- != 0U);
 8000cde:	3a20      	subs	r2, #32
 8000ce0:	f112 0f20 	cmn.w	r2, #32
 8000ce4:	d1f2      	bne.n	8000ccc <main+0x84>
 8000ce6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000cea:	695a      	ldr	r2, [r3, #20]
 8000cec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000cf0:	615a      	str	r2, [r3, #20]
 8000cf2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cf6:	f3bf 8f6f 	isb	sy
  HAL_Init();  
 8000cfa:	f000 ffb3 	bl	8001c64 <HAL_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d02:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d04:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000d06:	2019      	movs	r0, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d08:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0a:	e9cd 1306 	strd	r1, r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d16:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000d1a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d1e:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d22:	2309      	movs	r3, #9
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d24:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d26:	9311      	str	r3, [sp, #68]	; 0x44
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d28:	f002 f86a 	bl	8002e00 <HAL_RCC_OscConfig>
 8000d2c:	b100      	cbz	r0, 8000d30 <main+0xe8>
  while(1)
 8000d2e:	e7fe      	b.n	8000d2e <main+0xe6>
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d30:	f002 f82e 	bl	8002d90 <HAL_PWREx_EnableOverDrive>
 8000d34:	b100      	cbz	r0, 8000d38 <main+0xf0>
  while(1)
 8000d36:	e7fe      	b.n	8000d36 <main+0xee>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000d38:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000d3a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	9003      	str	r0, [sp, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d40:	2107      	movs	r1, #7
 8000d42:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d44:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d50:	f002 fa42 	bl	80031d8 <HAL_RCC_ClockConfig>
 8000d54:	4606      	mov	r6, r0
 8000d56:	b100      	cbz	r0, 8000d5a <main+0x112>
  while(1)
 8000d58:	e7fe      	b.n	8000d58 <main+0x110>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8000d5a:	4d0a      	ldr	r5, [pc, #40]	; (8000d84 <main+0x13c>)
 8000d5c:	ac06      	add	r4, sp, #24
 8000d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d62:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(Start), NULL);
 8000d64:	4631      	mov	r1, r6
 8000d66:	a806      	add	r0, sp, #24
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8000d68:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 8000d6a:	f004 f9a3 	bl	80050b4 <osThreadCreate>
  osKernelStart();
 8000d6e:	f004 f995 	bl	800509c <osKernelStart>
  for( ;; );
 8000d72:	e7fe      	b.n	8000d72 <main+0x12a>
 8000d74:	2004c000 	.word	0x2004c000
 8000d78:	0301000d 	.word	0x0301000d
 8000d7c:	03000007 	.word	0x03000007
 8000d80:	e000ed00 	.word	0xe000ed00
 8000d84:	0800ec00 	.word	0x0800ec00

08000d88 <mqtt_sub_request_cb>:
static void mqtt_sub_request_cb(void *arg, err_t result)
{
	/* Just print the result code here for simplicity,
     normal behaviour would be to take some action if subscribe fails like
     notifying user, retry subscribe or disconnect from server */
	LCD_UsrLog((char *)"  mqtt_sub_request_cb %d\n", result);
 8000d88:	4b02      	ldr	r3, [pc, #8]	; (8000d94 <mqtt_sub_request_cb+0xc>)
 8000d8a:	4a03      	ldr	r2, [pc, #12]	; (8000d98 <mqtt_sub_request_cb+0x10>)
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <mqtt_sub_request_cb+0x14>)
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	f00c be7e 	b.w	800da90 <iprintf>
 8000d94:	2000a6c8 	.word	0x2000a6c8
 8000d98:	ff000080 	.word	0xff000080
 8000d9c:	08012c21 	.word	0x08012c21

08000da0 <mqtt_incoming_publish_cb>:
If RAM and CPU budget allows it, the easiest implementation might be to just take a copy of
the topic string and use it in mqtt_incoming_data_cb
*/
static int inpub_id;
static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 8000da0:	b510      	push	{r4, lr}
 8000da2:	460c      	mov	r4, r1

  /* Decode topic string into a user defined reference */
  if(strcmp(topic, "JGD-OPT_temperature") == 0) {
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <mqtt_incoming_publish_cb+0x24>)
 8000da6:	4620      	mov	r0, r4
 8000da8:	f7ff fa32 	bl	8000210 <strcmp>
 8000dac:	b908      	cbnz	r0, 8000db2 <mqtt_incoming_publish_cb+0x12>
    inpub_id = TOPIC_TEMPERATURE;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <mqtt_incoming_publish_cb+0x28>)
 8000db0:	6018      	str	r0, [r3, #0]
  }
    /* Decode topic string into a user defined reference */
  if(strcmp(topic, "JGD-OPT_humidity") == 0) {
 8000db2:	4906      	ldr	r1, [pc, #24]	; (8000dcc <mqtt_incoming_publish_cb+0x2c>)
 8000db4:	4620      	mov	r0, r4
 8000db6:	f7ff fa2b 	bl	8000210 <strcmp>
 8000dba:	b910      	cbnz	r0, 8000dc2 <mqtt_incoming_publish_cb+0x22>
    inpub_id = TOPIC_HUMIDITY;
 8000dbc:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <mqtt_incoming_publish_cb+0x28>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]
  }  
}
 8000dc2:	bd10      	pop	{r4, pc}
 8000dc4:	08012c3b 	.word	0x08012c3b
 8000dc8:	200000d4 	.word	0x200000d4
 8000dcc:	08012c4f 	.word	0x08012c4f

08000dd0 <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{

  if(flags & MQTT_DATA_FLAG_LAST) {
 8000dd0:	07db      	lsls	r3, r3, #31
{
 8000dd2:	b570      	push	{r4, r5, r6, lr}
 8000dd4:	460d      	mov	r5, r1
 8000dd6:	b08e      	sub	sp, #56	; 0x38
 8000dd8:	4614      	mov	r4, r2
  if(flags & MQTT_DATA_FLAG_LAST) {
 8000dda:	d51c      	bpl.n	8000e16 <mqtt_incoming_data_cb+0x46>

	  if(inpub_id == TOPIC_HUMIDITY) {
 8000ddc:	4e11      	ldr	r6, [pc, #68]	; (8000e24 <mqtt_incoming_data_cb+0x54>)
 8000dde:	6832      	ldr	r2, [r6, #0]
 8000de0:	2a01      	cmp	r2, #1
 8000de2:	d10d      	bne.n	8000e00 <mqtt_incoming_data_cb+0x30>
		  char str[50];
		  for(int i = 0; i < len; i++) {
 8000de4:	2300      	movs	r3, #0
 8000de6:	a901      	add	r1, sp, #4
 8000de8:	e002      	b.n	8000df0 <mqtt_incoming_data_cb+0x20>
			  str[i] = (char) data[i];
 8000dea:	5cea      	ldrb	r2, [r5, r3]
 8000dec:	54ca      	strb	r2, [r1, r3]
		  for(int i = 0; i < len; i++) {
 8000dee:	3301      	adds	r3, #1
 8000df0:	429c      	cmp	r4, r3
 8000df2:	dcfa      	bgt.n	8000dea <mqtt_incoming_data_cb+0x1a>
		  }
		  LCD_UsrLog((char *)"Humidity %s\n", str);
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <mqtt_incoming_data_cb+0x58>)
 8000df6:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <mqtt_incoming_data_cb+0x5c>)
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <mqtt_incoming_data_cb+0x60>)
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	f00c fe48 	bl	800da90 <iprintf>
	  }

	  if(inpub_id == TOPIC_TEMPERATURE) {
 8000e00:	6833      	ldr	r3, [r6, #0]
 8000e02:	b943      	cbnz	r3, 8000e16 <mqtt_incoming_data_cb+0x46>
 8000e04:	a901      	add	r1, sp, #4
		  char str[50];
		  for(int i = 0; i < len; i++) {
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	db07      	blt.n	8000e1a <mqtt_incoming_data_cb+0x4a>
			  str[i] = (char) data[i];
		  }
		  LCD_UsrLog((char *)"Temperature %s\n", str);
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <mqtt_incoming_data_cb+0x58>)
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <mqtt_incoming_data_cb+0x5c>)
 8000e0e:	4809      	ldr	r0, [pc, #36]	; (8000e34 <mqtt_incoming_data_cb+0x64>)
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	f00c fe3d 	bl	800da90 <iprintf>
	  }

  }
}
 8000e16:	b00e      	add	sp, #56	; 0x38
 8000e18:	bd70      	pop	{r4, r5, r6, pc}
			  str[i] = (char) data[i];
 8000e1a:	5cea      	ldrb	r2, [r5, r3]
 8000e1c:	54ca      	strb	r2, [r1, r3]
		  for(int i = 0; i < len; i++) {
 8000e1e:	3301      	adds	r3, #1
 8000e20:	e7f1      	b.n	8000e06 <mqtt_incoming_data_cb+0x36>
 8000e22:	bf00      	nop
 8000e24:	200000d4 	.word	0x200000d4
 8000e28:	2000a6c8 	.word	0x2000a6c8
 8000e2c:	ff000080 	.word	0xff000080
 8000e30:	08012c60 	.word	0x08012c60
 8000e34:	08012c6d 	.word	0x08012c6d

08000e38 <example_do_connect>:
{
 8000e38:	b510      	push	{r4, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	4604      	mov	r4, r0
	memset(&ci, 0, sizeof(ci));
 8000e3e:	2218      	movs	r2, #24
 8000e40:	2100      	movs	r1, #0
 8000e42:	a804      	add	r0, sp, #16
 8000e44:	f00c fe1c 	bl	800da80 <memset>
	ci.client_id = "lwip_test";
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <example_do_connect+0x44>)
	err = mqtt_client_connect(client, &ip_addr, MQTT_PORT, mqtt_connection_cb, 0, &ci);
 8000e4a:	f240 725b 	movw	r2, #1883	; 0x75b
 8000e4e:	a902      	add	r1, sp, #8
	ci.client_id = "lwip_test";
 8000e50:	9303      	str	r3, [sp, #12]
	err = mqtt_client_connect(client, &ip_addr, MQTT_PORT, mqtt_connection_cb, 0, &ci);
 8000e52:	4620      	mov	r0, r4
	IP4_ADDR(&ip_addr, 192,168,1,122);
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <example_do_connect+0x48>)
 8000e56:	9302      	str	r3, [sp, #8]
	err = mqtt_client_connect(client, &ip_addr, MQTT_PORT, mqtt_connection_cb, 0, &ci);
 8000e58:	ab03      	add	r3, sp, #12
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <example_do_connect+0x4c>)
 8000e62:	f00c fc4b 	bl	800d6fc <mqtt_client_connect>
	LCD_UsrLog((char *)"mqtt_client_connect err=%d\n", err);
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <example_do_connect+0x50>)
 8000e68:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <example_do_connect+0x54>)
	err = mqtt_client_connect(client, &ip_addr, MQTT_PORT, mqtt_connection_cb, 0, &ci);
 8000e6a:	4601      	mov	r1, r0
	LCD_UsrLog((char *)"mqtt_client_connect err=%d\n", err);
 8000e6c:	4808      	ldr	r0, [pc, #32]	; (8000e90 <example_do_connect+0x58>)
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	f00c fe0e 	bl	800da90 <iprintf>
		osDelay(200);
 8000e74:	20c8      	movs	r0, #200	; 0xc8
 8000e76:	f004 f93a 	bl	80050ee <osDelay>
	for ( ;; ) {
 8000e7a:	e7fb      	b.n	8000e74 <example_do_connect+0x3c>
 8000e7c:	08012c7d 	.word	0x08012c7d
 8000e80:	7a01a8c0 	.word	0x7a01a8c0
 8000e84:	08000ead 	.word	0x08000ead
 8000e88:	2000a6c8 	.word	0x2000a6c8
 8000e8c:	ff000080 	.word	0xff000080
 8000e90:	08012c87 	.word	0x08012c87

08000e94 <mqtt>:
{
 8000e94:	b500      	push	{lr}
 8000e96:	b0fd      	sub	sp, #500	; 0x1f4
	memset(&static_client, 0, sizeof(mqtt_client_t));
 8000e98:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4668      	mov	r0, sp
 8000ea0:	f00c fdee 	bl	800da80 <memset>
	example_do_connect(&static_client);
 8000ea4:	4668      	mov	r0, sp
 8000ea6:	f7ff ffc7 	bl	8000e38 <example_do_connect>
	...

08000eac <mqtt_connection_cb>:
{
 8000eac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	LCD_UsrLog((char *)"mqtt_connection_cb: %d\n", status);
 8000eb0:	4e1d      	ldr	r6, [pc, #116]	; (8000f28 <mqtt_connection_cb+0x7c>)
{
 8000eb2:	4614      	mov	r4, r2
	LCD_UsrLog((char *)"mqtt_connection_cb: %d\n", status);
 8000eb4:	4f1d      	ldr	r7, [pc, #116]	; (8000f2c <mqtt_connection_cb+0x80>)
{
 8000eb6:	4605      	mov	r5, r0
 8000eb8:	4688      	mov	r8, r1
	LCD_UsrLog((char *)"mqtt_connection_cb: %d\n", status);
 8000eba:	481d      	ldr	r0, [pc, #116]	; (8000f30 <mqtt_connection_cb+0x84>)
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	6037      	str	r7, [r6, #0]
 8000ec0:	f00c fde6 	bl	800da90 <iprintf>
		LCD_UsrLog((char *)"mqtt_connection_cb: Successfully connected\n");
 8000ec4:	6037      	str	r7, [r6, #0]
	if (status == MQTT_CONNECT_ACCEPTED)
 8000ec6:	bb3c      	cbnz	r4, 8000f18 <mqtt_connection_cb+0x6c>
		err = mqtt_subscribe(client, "JGD-OPT_temperature", 0, mqtt_sub_request_cb, arg);
 8000ec8:	f04f 0901 	mov.w	r9, #1
		LCD_UsrLog((char *)"mqtt_connection_cb: Successfully connected\n");
 8000ecc:	4819      	ldr	r0, [pc, #100]	; (8000f34 <mqtt_connection_cb+0x88>)
 8000ece:	f00c fe65 	bl	800db9c <puts>
		err = mqtt_subscribe(client, "JGD-OPT_temperature", 0, mqtt_sub_request_cb, arg);
 8000ed2:	4622      	mov	r2, r4
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <mqtt_connection_cb+0x8c>)
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	4918      	ldr	r1, [pc, #96]	; (8000f3c <mqtt_connection_cb+0x90>)
 8000eda:	e9cd 8900 	strd	r8, r9, [sp]
 8000ede:	f00c fb4d 	bl	800d57c <mqtt_sub_unsub>
 8000ee2:	4601      	mov	r1, r0
		LCD_UsrLog((char *)"subscribe topic JGD-OPT_temperature: %d\n", err);
 8000ee4:	4816      	ldr	r0, [pc, #88]	; (8000f40 <mqtt_connection_cb+0x94>)
 8000ee6:	6037      	str	r7, [r6, #0]
 8000ee8:	f00c fdd2 	bl	800da90 <iprintf>
		err = mqtt_subscribe(client, "JGD-OPT_humidity", 0, mqtt_sub_request_cb, arg);
 8000eec:	4622      	mov	r2, r4
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <mqtt_connection_cb+0x8c>)
 8000ef0:	4914      	ldr	r1, [pc, #80]	; (8000f44 <mqtt_connection_cb+0x98>)
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	e9cd 8900 	strd	r8, r9, [sp]
 8000ef8:	f00c fb40 	bl	800d57c <mqtt_sub_unsub>
 8000efc:	4601      	mov	r1, r0
		LCD_UsrLog((char *)"subscribe topic JGD-OPT_humidity: %d\n", err);
 8000efe:	4812      	ldr	r0, [pc, #72]	; (8000f48 <mqtt_connection_cb+0x9c>)
 8000f00:	6037      	str	r7, [r6, #0]
 8000f02:	f00c fdc5 	bl	800da90 <iprintf>
		mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 8000f06:	4643      	mov	r3, r8
 8000f08:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <mqtt_connection_cb+0xa0>)
 8000f0a:	4911      	ldr	r1, [pc, #68]	; (8000f50 <mqtt_connection_cb+0xa4>)
 8000f0c:	4628      	mov	r0, r5
}
 8000f0e:	b003      	add	sp, #12
 8000f10:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 8000f14:	f00c bbda 	b.w	800d6cc <mqtt_set_inpub_callback>
		LCD_UsrLog((char *)"mqtt_connection_cb: Disconnected, reason: %d\n", status);
 8000f18:	4621      	mov	r1, r4
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <mqtt_connection_cb+0xa8>)
 8000f1c:	f00c fdb8 	bl	800da90 <iprintf>
		example_do_connect(client);
 8000f20:	4628      	mov	r0, r5
 8000f22:	f7ff ff89 	bl	8000e38 <example_do_connect>
 8000f26:	bf00      	nop
 8000f28:	2000a6c8 	.word	0x2000a6c8
 8000f2c:	ff000080 	.word	0xff000080
 8000f30:	08012ca3 	.word	0x08012ca3
 8000f34:	08012cbb 	.word	0x08012cbb
 8000f38:	08000d89 	.word	0x08000d89
 8000f3c:	08012c3b 	.word	0x08012c3b
 8000f40:	08012ce6 	.word	0x08012ce6
 8000f44:	08012c4f 	.word	0x08012c4f
 8000f48:	08012d0f 	.word	0x08012d0f
 8000f4c:	08000dd1 	.word	0x08000dd1
 8000f50:	08000da1 	.word	0x08000da1
 8000f54:	08012d35 	.word	0x08012d35

08000f58 <mqtt_client_init>:
{
 8000f58:	b530      	push	{r4, r5, lr}
	LCD_UsrLog((char *)"Waiting 5s before start MQTT\n");
 8000f5a:	4c0d      	ldr	r4, [pc, #52]	; (8000f90 <mqtt_client_init+0x38>)
{
 8000f5c:	b087      	sub	sp, #28
	LCD_UsrLog((char *)"Waiting 5s before start MQTT\n");
 8000f5e:	4d0d      	ldr	r5, [pc, #52]	; (8000f94 <mqtt_client_init+0x3c>)
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <mqtt_client_init+0x40>)
 8000f62:	6025      	str	r5, [r4, #0]
 8000f64:	f00c fe1a 	bl	800db9c <puts>
	osDelay(5000);
 8000f68:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f6c:	f004 f8bf 	bl	80050ee <osDelay>
	LCD_UsrLog((char *)"Starting MQTT\n");
 8000f70:	6025      	str	r5, [r4, #0]
	osThreadDef(MQTT, mqtt, osPriorityLow, 0, configMINIMAL_STACK_SIZE);
 8000f72:	4d0a      	ldr	r5, [pc, #40]	; (8000f9c <mqtt_client_init+0x44>)
 8000f74:	ac01      	add	r4, sp, #4
	LCD_UsrLog((char *)"Starting MQTT\n");
 8000f76:	480a      	ldr	r0, [pc, #40]	; (8000fa0 <mqtt_client_init+0x48>)
 8000f78:	f00c fe10 	bl	800db9c <puts>
	osThreadDef(MQTT, mqtt, osPriorityLow, 0, configMINIMAL_STACK_SIZE);
 8000f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f80:	682b      	ldr	r3, [r5, #0]
	osThreadCreate(osThread(MQTT), NULL);
 8000f82:	2100      	movs	r1, #0
 8000f84:	a801      	add	r0, sp, #4
	osThreadDef(MQTT, mqtt, osPriorityLow, 0, configMINIMAL_STACK_SIZE);
 8000f86:	6023      	str	r3, [r4, #0]
	osThreadCreate(osThread(MQTT), NULL);
 8000f88:	f004 f894 	bl	80050b4 <osThreadCreate>
}
 8000f8c:	b007      	add	sp, #28
 8000f8e:	bd30      	pop	{r4, r5, pc}
 8000f90:	2000a6c8 	.word	0x2000a6c8
 8000f94:	ff000080 	.word	0xff000080
 8000f98:	08012d63 	.word	0x08012d63
 8000f9c:	0800ec14 	.word	0x0800ec14
 8000fa0:	08012d80 	.word	0x08012d80

08000fa4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_MspInit+0x2c>)
{
 8000fa6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000faa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fae:	641a      	str	r2, [r3, #64]	; 0x40
 8000fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000fb6:	9200      	str	r2, [sp, #0]
 8000fb8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000fc0:	645a      	str	r2, [r3, #68]	; 0x44
 8000fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fcc:	b002      	add	sp, #8
 8000fce:	4770      	bx	lr
 8000fd0:	40023800 	.word	0x40023800

08000fd4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8000fd4:	6802      	ldr	r2, [r0, #0]
{
 8000fd6:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <HAL_TIM_Base_MspInit+0x24>)
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d10a      	bne.n	8000ff4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fde:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8000fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fe4:	f042 0201 	orr.w	r2, r2, #1
 8000fe8:	645a      	str	r2, [r3, #68]	; 0x44
 8000fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ff4:	b002      	add	sp, #8
 8000ff6:	4770      	bx	lr
 8000ff8:	40010000 	.word	0x40010000

08000ffc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8000ffc:	4601      	mov	r1, r0
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2036      	movs	r0, #54	; 0x36
{
 8001002:	b510      	push	{r4, lr}
 8001004:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001006:	f000 fe75 	bl	8001cf4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800100a:	2036      	movs	r0, #54	; 0x36
 800100c:	f000 fea4 	bl	8001d58 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <HAL_InitTick+0x74>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001012:	a901      	add	r1, sp, #4
 8001014:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001018:	f042 0210 	orr.w	r2, r2, #16
 800101c:	641a      	str	r2, [r3, #64]	; 0x40
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f003 0310 	and.w	r3, r3, #16
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001028:	f002 f98c 	bl	8003344 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 800102c:	9b06      	ldr	r3, [sp, #24]
 800102e:	b9c3      	cbnz	r3, 8001062 <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001030:	f002 f978 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8001034:	4c0f      	ldr	r4, [pc, #60]	; (8001074 <HAL_InitTick+0x78>)
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_InitTick+0x7c>)
 8001038:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 800103a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800103e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_InitTick+0x80>)
 8001042:	fbb0 f0f3 	udiv	r0, r0, r3
 8001046:	3801      	subs	r0, #1
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 8001048:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 800104a:	6060      	str	r0, [r4, #4]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800104c:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 800104e:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001052:	f002 fdbf 	bl	8003bd4 <HAL_TIM_Base_Init>
 8001056:	b940      	cbnz	r0, 800106a <HAL_InitTick+0x6e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8001058:	4620      	mov	r0, r4
 800105a:	f002 fc63 	bl	8003924 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800105e:	b008      	add	sp, #32
 8001060:	bd10      	pop	{r4, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001062:	f002 f95f 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8001066:	0040      	lsls	r0, r0, #1
 8001068:	e7e4      	b.n	8001034 <HAL_InitTick+0x38>
  return HAL_ERROR;
 800106a:	2001      	movs	r0, #1
 800106c:	e7f7      	b.n	800105e <HAL_InitTick+0x62>
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	20006a18 	.word	0x20006a18
 8001078:	40001000 	.word	0x40001000
 800107c:	000f4240 	.word	0x000f4240

08001080 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 8001080:	f000 be02 	b.w	8001c88 <HAL_IncTick>

08001084 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8001084:	4801      	ldr	r0, [pc, #4]	; (800108c <TIM6_DAC_IRQHandler+0x8>)
 8001086:	f002 bc8f 	b.w	80039a8 <HAL_TIM_IRQHandler>
 800108a:	bf00      	nop
 800108c:	20006a18 	.word	0x20006a18

08001090 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001090:	4770      	bx	lr

08001092 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler>

08001094 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001094:	e7fe      	b.n	8001094 <MemManage_Handler>

08001096 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001096:	e7fe      	b.n	8001096 <BusFault_Handler>

08001098 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001098:	e7fe      	b.n	8001098 <UsageFault_Handler>

0800109a <DebugMon_Handler>:
 800109a:	4770      	bx	lr

0800109c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 800109c:	f004 b920 	b.w	80052e0 <osSystickHandler>

080010a0 <ETH_IRQHandler>:
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 80010a0:	4801      	ldr	r0, [pc, #4]	; (80010a8 <ETH_IRQHandler+0x8>)
 80010a2:	f001 ba82 	b.w	80025aa <HAL_ETH_IRQHandler>
 80010a6:	bf00      	nop
 80010a8:	20006998 	.word	0x20006998

080010ac <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <LCD_LOG_DeInit+0x34>)
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 80010ae:	2101      	movs	r1, #1
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 80010b0:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <LCD_LOG_DeInit+0x38>)
 80010b2:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <LCD_LOG_DeInit+0x3c>)
 80010b8:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top = 0;
 80010ba:	4a0c      	ldr	r2, [pc, #48]	; (80010ec <LCD_LOG_DeInit+0x40>)
 80010bc:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 80010be:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <LCD_LOG_DeInit+0x44>)
 80010c0:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top_bak = 0;
 80010c2:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <LCD_LOG_DeInit+0x48>)
 80010c4:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 80010c6:	4a0c      	ldr	r2, [pc, #48]	; (80010f8 <LCD_LOG_DeInit+0x4c>)
 80010c8:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_invert= ENABLE;
 80010ca:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <LCD_LOG_DeInit+0x50>)
 80010cc:	7011      	strb	r1, [r2, #0]
  LCD_ScrollActive = DISABLE;
 80010ce:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <LCD_LOG_DeInit+0x54>)
 80010d0:	7013      	strb	r3, [r2, #0]
  LCD_Lock = DISABLE;
 80010d2:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <LCD_LOG_DeInit+0x58>)
 80010d4:	7013      	strb	r3, [r2, #0]
  LCD_Scrolled = DISABLE;
 80010d6:	4a0c      	ldr	r2, [pc, #48]	; (8001108 <LCD_LOG_DeInit+0x5c>)
 80010d8:	7013      	strb	r3, [r2, #0]
  LCD_ScrollBackStep = 0;
 80010da:	4a0c      	ldr	r2, [pc, #48]	; (800110c <LCD_LOG_DeInit+0x60>)
 80010dc:	8013      	strh	r3, [r2, #0]
}
 80010de:	4770      	bx	lr
 80010e0:	2000a6c8 	.word	0x2000a6c8
 80010e4:	ff000080 	.word	0xff000080
 80010e8:	20006a6a 	.word	0x20006a6a
 80010ec:	20006a70 	.word	0x20006a70
 80010f0:	20006a68 	.word	0x20006a68
 80010f4:	20006a66 	.word	0x20006a66
 80010f8:	20006a64 	.word	0x20006a64
 80010fc:	20006a6c 	.word	0x20006a6c
 8001100:	20006a72 	.word	0x20006a72
 8001104:	20006a6d 	.word	0x20006a6d
 8001108:	20006a6e 	.word	0x20006a6e
 800110c:	2000a6cc 	.word	0x2000a6cc

08001110 <LCD_LOG_Init>:
{
 8001110:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
 8001112:	f7ff ffcb 	bl	80010ac <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 8001116:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800111a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 800111e:	f000 ba0d 	b.w	800153c <BSP_LCD_Clear>
	...

08001124 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 8001124:	b570      	push	{r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 8001126:	4c16      	ldr	r4, [pc, #88]	; (8001180 <LCD_LOG_SetHeader+0x5c>)
{
 8001128:	4605      	mov	r5, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800112a:	4e16      	ldr	r6, [pc, #88]	; (8001184 <LCD_LOG_SetHeader+0x60>)
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 800112c:	4620      	mov	r0, r4
 800112e:	f000 f9f1 	bl	8001514 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8001132:	4630      	mov	r0, r6
 8001134:	f000 f9da 	bl	80014ec <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 8001138:	f000 f982 	bl	8001440 <BSP_LCD_GetXSize>
 800113c:	88e3      	ldrh	r3, [r4, #6]
 800113e:	2100      	movs	r1, #0
 8001140:	b282      	uxth	r2, r0
 8001142:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001146:	4608      	mov	r0, r1
 8001148:	b29b      	uxth	r3, r3
 800114a:	f000 faef 	bl	800172c <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 800114e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001152:	f000 f9cb 	bl	80014ec <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8001156:	4630      	mov	r0, r6
 8001158:	f000 f9d2 	bl	8001500 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 800115c:	462a      	mov	r2, r5
 800115e:	88e1      	ldrh	r1, [r4, #6]
 8001160:	2301      	movs	r3, #1
 8001162:	2000      	movs	r0, #0
 8001164:	f000 fa76 	bl	8001654 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8001168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800116c:	f000 f9c8 	bl	8001500 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <LCD_LOG_SetHeader+0x64>)
 8001172:	f000 f9bb 	bl	80014ec <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <LCD_LOG_SetHeader+0x68>)
}
 8001178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800117c:	f000 b9ca 	b.w	8001514 <BSP_LCD_SetFont>
 8001180:	20000018 	.word	0x20000018
 8001184:	ff0000ff 	.word	0xff0000ff
 8001188:	ff000080 	.word	0xff000080
 800118c:	20000010 	.word	0x20000010

08001190 <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 8001190:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8001192:	4c1d      	ldr	r4, [pc, #116]	; (8001208 <LCD_LOG_SetFooter+0x78>)
{
 8001194:	4605      	mov	r5, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8001196:	4e1d      	ldr	r6, [pc, #116]	; (800120c <LCD_LOG_SetFooter+0x7c>)
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8001198:	4620      	mov	r0, r4
 800119a:	f000 f9bb 	bl	8001514 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800119e:	4630      	mov	r0, r6
 80011a0:	f000 f9a4 	bl	80014ec <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 80011a4:	f000 f958 	bl	8001458 <BSP_LCD_GetYSize>
 80011a8:	88e3      	ldrh	r3, [r4, #6]
 80011aa:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80011ae:	33fc      	adds	r3, #252	; 0xfc
 80011b0:	1819      	adds	r1, r3, r0
 80011b2:	b289      	uxth	r1, r1
 80011b4:	9101      	str	r1, [sp, #4]
 80011b6:	f000 f943 	bl	8001440 <BSP_LCD_GetXSize>
 80011ba:	88e3      	ldrh	r3, [r4, #6]
 80011bc:	b282      	uxth	r2, r0
 80011be:	9901      	ldr	r1, [sp, #4]
 80011c0:	2000      	movs	r0, #0
 80011c2:	3304      	adds	r3, #4
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	f000 fab1 	bl	800172c <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 80011ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011ce:	f000 f98d 	bl	80014ec <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80011d2:	4630      	mov	r0, r6
 80011d4:	f000 f994 	bl	8001500 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 80011d8:	f000 f93e 	bl	8001458 <BSP_LCD_GetYSize>
 80011dc:	88e1      	ldrh	r1, [r4, #6]
 80011de:	2301      	movs	r3, #1
 80011e0:	462a      	mov	r2, r5
 80011e2:	1a41      	subs	r1, r0, r1
 80011e4:	2000      	movs	r0, #0
 80011e6:	b289      	uxth	r1, r1
 80011e8:	f000 fa34 	bl	8001654 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f0:	f000 f986 	bl	8001500 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 80011f4:	4806      	ldr	r0, [pc, #24]	; (8001210 <LCD_LOG_SetFooter+0x80>)
 80011f6:	f000 f979 	bl	80014ec <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 80011fa:	4620      	mov	r0, r4
}
 80011fc:	b002      	add	sp, #8
 80011fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8001202:	f000 b987 	b.w	8001514 <BSP_LCD_SetFont>
 8001206:	bf00      	nop
 8001208:	20000010 	.word	0x20000010
 800120c:	ff0000ff 	.word	0xff0000ff
 8001210:	ff000080 	.word	0xff000080

08001214 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8001214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8001218:	4d1c      	ldr	r5, [pc, #112]	; (800128c <LCD_LOG_UpdateDisplay+0x78>)
 800121a:	4a1d      	ldr	r2, [pc, #116]	; (8001290 <LCD_LOG_UpdateDisplay+0x7c>)
 800121c:	882b      	ldrh	r3, [r5, #0]
 800121e:	8812      	ldrh	r2, [r2, #0]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	4f1c      	ldr	r7, [pc, #112]	; (8001294 <LCD_LOG_UpdateDisplay+0x80>)
 8001224:	d811      	bhi.n	800124a <LCD_LOG_UpdateDisplay+0x36>
 8001226:	4293      	cmp	r3, r2
 8001228:	d311      	bcc.n	800124e <LCD_LOG_UpdateDisplay+0x3a>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 800122a:	2484      	movs	r4, #132	; 0x84
 800122c:	fb04 7303 	mla	r3, r4, r3, r7
 8001230:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8001234:	f000 f95a 	bl	80014ec <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8001238:	8829      	ldrh	r1, [r5, #0]
 800123a:	1d08      	adds	r0, r1, #4
 800123c:	fb04 7101 	mla	r1, r4, r1, r7
 8001240:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 8001242:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8001246:	f000 ba5d 	b.w	8001704 <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 800124a:	4293      	cmp	r3, r2
 800124c:	d201      	bcs.n	8001252 <LCD_LOG_UpdateDisplay+0x3e>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 800124e:	3375      	adds	r3, #117	; 0x75
 8001250:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
 8001252:	3b10      	subs	r3, #16
 8001254:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8001256:	f04f 0875 	mov.w	r8, #117	; 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800125a:	f04f 0984 	mov.w	r9, #132	; 0x84
    ptr = length - YWINDOW_SIZE + 1;
 800125e:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8001260:	19a1      	adds	r1, r4, r6
 8001262:	fbb1 f5f8 	udiv	r5, r1, r8
 8001266:	fb08 1515 	mls	r5, r8, r5, r1
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800126a:	fb09 7505 	mla	r5, r9, r5, r7
 800126e:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 8001272:	f000 f93b 	bl	80014ec <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8001276:	1d30      	adds	r0, r6, #4
 8001278:	3601      	adds	r6, #1
 800127a:	4629      	mov	r1, r5
 800127c:	b280      	uxth	r0, r0
 800127e:	f000 fa41 	bl	8001704 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8001282:	2e11      	cmp	r6, #17
 8001284:	d1ec      	bne.n	8001260 <LCD_LOG_UpdateDisplay+0x4c>
}
 8001286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800128a:	bf00      	nop
 800128c:	20006a68 	.word	0x20006a68
 8001290:	20006a70 	.word	0x20006a70
 8001294:	20006a74 	.word	0x20006a74

08001298 <__io_putchar>:
{
 8001298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800129c:	4605      	mov	r5, r0
  sFONT *cFont = BSP_LCD_GetFont();
 800129e:	f000 f943 	bl	8001528 <BSP_LCD_GetFont>
  if(LCD_Lock == DISABLE)
 80012a2:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <__io_putchar+0x100>)
  sFONT *cFont = BSP_LCD_GetFont();
 80012a4:	4680      	mov	r8, r0
  if(LCD_Lock == DISABLE)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	bb43      	cbnz	r3, 80012fc <__io_putchar+0x64>
    if(LCD_ScrollActive == ENABLE)
 80012aa:	4a3c      	ldr	r2, [pc, #240]	; (800139c <__io_putchar+0x104>)
 80012ac:	4c3c      	ldr	r4, [pc, #240]	; (80013a0 <__io_putchar+0x108>)
 80012ae:	7811      	ldrb	r1, [r2, #0]
 80012b0:	2901      	cmp	r1, #1
 80012b2:	d10b      	bne.n	80012cc <__io_putchar+0x34>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 80012b4:	493b      	ldr	r1, [pc, #236]	; (80013a4 <__io_putchar+0x10c>)
      LCD_ScrollActive = DISABLE;
 80012b6:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 80012b8:	8809      	ldrh	r1, [r1, #0]
      LCD_Scrolled = DISABLE;
 80012ba:	4a3b      	ldr	r2, [pc, #236]	; (80013a8 <__io_putchar+0x110>)
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 80012bc:	8021      	strh	r1, [r4, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80012be:	493b      	ldr	r1, [pc, #236]	; (80013ac <__io_putchar+0x114>)
      LCD_Scrolled = DISABLE;
 80012c0:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80012c2:	8808      	ldrh	r0, [r1, #0]
      LCD_ScrollBackStep = 0;
 80012c4:	4a3a      	ldr	r2, [pc, #232]	; (80013b0 <__io_putchar+0x118>)
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80012c6:	493b      	ldr	r1, [pc, #236]	; (80013b4 <__io_putchar+0x11c>)
      LCD_ScrollBackStep = 0;
 80012c8:	8013      	strh	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80012ca:	8008      	strh	r0, [r1, #0]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 80012cc:	4f3a      	ldr	r7, [pc, #232]	; (80013b8 <__io_putchar+0x120>)
 80012ce:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80013c4 <__io_putchar+0x12c>
 80012d2:	883e      	ldrh	r6, [r7, #0]
 80012d4:	f000 f8b4 	bl	8001440 <BSP_LCD_GetXSize>
 80012d8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80012dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80012e0:	4286      	cmp	r6, r0
 80012e2:	463e      	mov	r6, r7
 80012e4:	d20d      	bcs.n	8001302 <__io_putchar+0x6a>
 80012e6:	2d0a      	cmp	r5, #10
 80012e8:	d00b      	beq.n	8001302 <__io_putchar+0x6a>
 80012ea:	883a      	ldrh	r2, [r7, #0]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80012ec:	8823      	ldrh	r3, [r4, #0]
 80012ee:	1c51      	adds	r1, r2, #1
 80012f0:	8039      	strh	r1, [r7, #0]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80012f2:	2184      	movs	r1, #132	; 0x84
 80012f4:	fb01 9903 	mla	r9, r1, r3, r9
 80012f8:	f809 5002 	strb.w	r5, [r9, r2]
}
 80012fc:	4628      	mov	r0, r5
 80012fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8001302:	4f2c      	ldr	r7, [pc, #176]	; (80013b4 <__io_putchar+0x11c>)
 8001304:	8822      	ldrh	r2, [r4, #0]
 8001306:	883b      	ldrh	r3, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d809      	bhi.n	8001320 <__io_putchar+0x88>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 800130c:	4a2b      	ldr	r2, [pc, #172]	; (80013bc <__io_putchar+0x124>)
 800130e:	7811      	ldrb	r1, [r2, #0]
 8001310:	2900      	cmp	r1, #0
 8001312:	d134      	bne.n	800137e <__io_putchar+0xe6>
          LCD_CacheBuffer_yptr_top++;
 8001314:	3301      	adds	r3, #1
 8001316:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8001318:	2b75      	cmp	r3, #117	; 0x75
          LCD_CacheBuffer_yptr_top++;
 800131a:	bf14      	ite	ne
 800131c:	803b      	strhne	r3, [r7, #0]
            LCD_CacheBuffer_yptr_top = 0;  
 800131e:	8039      	strheq	r1, [r7, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001320:	f8b6 a000 	ldrh.w	sl, [r6]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8001324:	f04f 0b84 	mov.w	fp, #132	; 0x84
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001328:	f000 f88a 	bl	8001440 <BSP_LCD_GetXSize>
 800132c:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8001330:	2320      	movs	r3, #32
 8001332:	fbb0 f0f2 	udiv	r0, r0, r2
 8001336:	4550      	cmp	r0, sl
 8001338:	d824      	bhi.n	8001384 <__io_putchar+0xec>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800133a:	8823      	ldrh	r3, [r4, #0]
 800133c:	2284      	movs	r2, #132	; 0x84
      LCD_CacheBuffer_xptr = 0;
 800133e:	f04f 0800 	mov.w	r8, #0
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8001342:	fb02 9303 	mla	r3, r2, r3, r9
 8001346:	4a1e      	ldr	r2, [pc, #120]	; (80013c0 <__io_putchar+0x128>)
      LCD_CacheBuffer_xptr = 0;
 8001348:	f8a6 8000 	strh.w	r8, [r6]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      LCD_LOG_UpdateDisplay (); 
 8001352:	f7ff ff5f 	bl	8001214 <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
 8001356:	8823      	ldrh	r3, [r4, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 800135c:	2b75      	cmp	r3, #117	; 0x75
        LCD_CacheBuffer_yptr_top = 1;    
 800135e:	bf05      	ittet	eq
 8001360:	2301      	moveq	r3, #1
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8001362:	4a16      	ldreq	r2, [pc, #88]	; (80013bc <__io_putchar+0x124>)
      LCD_CacheBuffer_yptr_bottom ++; 
 8001364:	8023      	strhne	r3, [r4, #0]
        LCD_CacheBuffer_yptr_bottom = 0;
 8001366:	f8a4 8000 	strheq.w	r8, [r4]
        LCD_CacheBuffer_yptr_top = 1;    
 800136a:	bf04      	itt	eq
 800136c:	803b      	strheq	r3, [r7, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 800136e:	7013      	strbeq	r3, [r2, #0]
      if( ch != '\n')
 8001370:	2d0a      	cmp	r5, #10
 8001372:	d0c3      	beq.n	80012fc <__io_putchar+0x64>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8001374:	8832      	ldrh	r2, [r6, #0]
 8001376:	8823      	ldrh	r3, [r4, #0]
 8001378:	1c51      	adds	r1, r2, #1
 800137a:	8031      	strh	r1, [r6, #0]
 800137c:	e7b9      	b.n	80012f2 <__io_putchar+0x5a>
          LCD_CacheBuffer_yptr_invert= DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	7013      	strb	r3, [r2, #0]
 8001382:	e7cd      	b.n	8001320 <__io_putchar+0x88>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8001384:	8831      	ldrh	r1, [r6, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001386:	f10a 0a01 	add.w	sl, sl, #1
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800138a:	8822      	ldrh	r2, [r4, #0]
 800138c:	1c48      	adds	r0, r1, #1
 800138e:	fb0b 9202 	mla	r2, fp, r2, r9
 8001392:	8030      	strh	r0, [r6, #0]
 8001394:	5453      	strb	r3, [r2, r1]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001396:	e7c7      	b.n	8001328 <__io_putchar+0x90>
 8001398:	20006a6d 	.word	0x20006a6d
 800139c:	20006a72 	.word	0x20006a72
 80013a0:	20006a68 	.word	0x20006a68
 80013a4:	20006a64 	.word	0x20006a64
 80013a8:	20006a6e 	.word	0x20006a6e
 80013ac:	20006a66 	.word	0x20006a66
 80013b0:	2000a6cc 	.word	0x2000a6cc
 80013b4:	20006a70 	.word	0x20006a70
 80013b8:	20006a6a 	.word	0x20006a6a
 80013bc:	20006a6c 	.word	0x20006a6c
 80013c0:	2000a6c8 	.word	0x2000a6c8
 80013c4:	20006a74 	.word	0x20006a74

080013c8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80013c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80013cc:	4c19      	ldr	r4, [pc, #100]	; (8001434 <LL_FillBuffer+0x6c>)
{
 80013ce:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80013d0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 80013d4:	460e      	mov	r6, r1
 80013d6:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80013d8:	2134      	movs	r1, #52	; 0x34
 80013da:	4a17      	ldr	r2, [pc, #92]	; (8001438 <LL_FillBuffer+0x70>)
{
 80013dc:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80013de:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80013e0:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80013e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
{
 80013e4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80013e8:	fb01 2303 	mla	r3, r1, r3, r2
 80013ec:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80013ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80013f0:	2d02      	cmp	r5, #2
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80013f2:	60e3      	str	r3, [r4, #12]
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80013f4:	bf18      	it	ne
 80013f6:	2500      	movne	r5, #0
  hDma2dHandler.Instance = DMA2D;
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <LL_FillBuffer+0x74>)
 80013fa:	60a5      	str	r5, [r4, #8]
 80013fc:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80013fe:	f000 fe06 	bl	800200e <HAL_DMA2D_Init>
 8001402:	b9a0      	cbnz	r0, 800142e <LL_FillBuffer+0x66>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001404:	4649      	mov	r1, r9
 8001406:	4620      	mov	r0, r4
 8001408:	f000 fec8 	bl	800219c <HAL_DMA2D_ConfigLayer>
 800140c:	b978      	cbnz	r0, 800142e <LL_FillBuffer+0x66>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	4632      	mov	r2, r6
 8001412:	4651      	mov	r1, sl
 8001414:	4620      	mov	r0, r4
 8001416:	f8cd 8000 	str.w	r8, [sp]
 800141a:	f000 fe24 	bl	8002066 <HAL_DMA2D_Start>
 800141e:	b930      	cbnz	r0, 800142e <LL_FillBuffer+0x66>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001420:	210a      	movs	r1, #10
 8001422:	4620      	mov	r0, r4
      }
    }
  } 
}
 8001424:	b002      	add	sp, #8
 8001426:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800142a:	f000 be36 	b.w	800209a <HAL_DMA2D_PollForTransfer>
}
 800142e:	b002      	add	sp, #8
 8001430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001434:	200000d8 	.word	0x200000d8
 8001438:	2000a6d0 	.word	0x2000a6d0
 800143c:	4002b000 	.word	0x4002b000

08001440 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <BSP_LCD_GetXSize+0x10>)
 8001442:	2134      	movs	r1, #52	; 0x34
 8001444:	4a03      	ldr	r2, [pc, #12]	; (8001454 <BSP_LCD_GetXSize+0x14>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	fb01 2303 	mla	r3, r1, r3, r2
}
 800144c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800144e:	4770      	bx	lr
 8001450:	200000d8 	.word	0x200000d8
 8001454:	2000a6d0 	.word	0x2000a6d0

08001458 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <BSP_LCD_GetYSize+0x10>)
 800145a:	2134      	movs	r1, #52	; 0x34
 800145c:	4a03      	ldr	r2, [pc, #12]	; (800146c <BSP_LCD_GetYSize+0x14>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	fb01 2303 	mla	r3, r1, r3, r2
}
 8001464:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001466:	4770      	bx	lr
 8001468:	200000d8 	.word	0x200000d8
 800146c:	2000a6d0 	.word	0x2000a6d0

08001470 <BSP_LCD_LayerDefaultInit>:
{     
 8001470:	b570      	push	{r4, r5, r6, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001472:	4d18      	ldr	r5, [pc, #96]	; (80014d4 <BSP_LCD_LayerDefaultInit+0x64>)
{     
 8001474:	4604      	mov	r4, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001476:	2634      	movs	r6, #52	; 0x34
 8001478:	4817      	ldr	r0, [pc, #92]	; (80014d8 <BSP_LCD_LayerDefaultInit+0x68>)
 800147a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
{     
 800147c:	b08e      	sub	sp, #56	; 0x38
  layer_cfg.WindowX0 = 0;
 800147e:	2300      	movs	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001480:	fb06 0202 	mla	r2, r6, r2, r0
  layer_cfg.FBStartAdress = FB_Address;
 8001484:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 8001486:	21ff      	movs	r1, #255	; 0xff
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001488:	6e16      	ldr	r6, [r2, #96]	; 0x60
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800148a:	6e52      	ldr	r2, [r2, #100]	; 0x64
  layer_cfg.WindowX0 = 0;
 800148c:	9301      	str	r3, [sp, #4]
  layer_cfg.Backcolor.Blue = 0;
 800148e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
 8001492:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001496:	e9cd 2304 	strd	r2, r3, [sp, #16]
  layer_cfg.Alpha0 = 0;
 800149a:	e9cd 1306 	strd	r1, r3, [sp, #24]
  layer_cfg.WindowY0 = 0;
 800149e:	e9cd 6302 	strd	r6, r3, [sp, #8]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80014a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80014a6:	2307      	movs	r3, #7
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80014a8:	e9cd 620b 	strd	r6, r2, [sp, #44]	; 0x2c
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80014ac:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80014b0:	4622      	mov	r2, r4
 80014b2:	a901      	add	r1, sp, #4
 80014b4:	f001 fc3c 	bl	8002d30 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80014b8:	200c      	movs	r0, #12
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014be:	fb00 5004 	mla	r0, r0, r4, r5
 80014c2:	6483      	str	r3, [r0, #72]	; 0x48
  DrawProp[LayerIndex].pFont     = &Font24;
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <BSP_LCD_LayerDefaultInit+0x6c>)
 80014c6:	64c3      	str	r3, [r0, #76]	; 0x4c
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80014c8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80014cc:	6443      	str	r3, [r0, #68]	; 0x44
}
 80014ce:	b00e      	add	sp, #56	; 0x38
 80014d0:	bd70      	pop	{r4, r5, r6, pc}
 80014d2:	bf00      	nop
 80014d4:	200000d8 	.word	0x200000d8
 80014d8:	2000a6d0 	.word	0x2000a6d0
 80014dc:	20000000 	.word	0x20000000

080014e0 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80014e0:	4b01      	ldr	r3, [pc, #4]	; (80014e8 <BSP_LCD_SelectLayer+0x8>)
 80014e2:	6418      	str	r0, [r3, #64]	; 0x40
} 
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	200000d8 	.word	0x200000d8

080014ec <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 80014ec:	4a03      	ldr	r2, [pc, #12]	; (80014fc <BSP_LCD_SetTextColor+0x10>)
 80014ee:	210c      	movs	r1, #12
 80014f0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014f2:	fb01 2303 	mla	r3, r1, r3, r2
 80014f6:	6458      	str	r0, [r3, #68]	; 0x44
}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	200000d8 	.word	0x200000d8

08001500 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8001500:	4a03      	ldr	r2, [pc, #12]	; (8001510 <BSP_LCD_SetBackColor+0x10>)
 8001502:	210c      	movs	r1, #12
 8001504:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001506:	fb01 2303 	mla	r3, r1, r3, r2
 800150a:	6498      	str	r0, [r3, #72]	; 0x48
}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	200000d8 	.word	0x200000d8

08001514 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8001514:	4a03      	ldr	r2, [pc, #12]	; (8001524 <BSP_LCD_SetFont+0x10>)
 8001516:	210c      	movs	r1, #12
 8001518:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800151a:	fb01 2303 	mla	r3, r1, r3, r2
 800151e:	64d8      	str	r0, [r3, #76]	; 0x4c
}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	200000d8 	.word	0x200000d8

08001528 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8001528:	4a03      	ldr	r2, [pc, #12]	; (8001538 <BSP_LCD_GetFont+0x10>)
 800152a:	210c      	movs	r1, #12
 800152c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800152e:	fb01 2303 	mla	r3, r1, r3, r2
}
 8001532:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200000d8 	.word	0x200000d8

0800153c <BSP_LCD_Clear>:
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <BSP_LCD_Clear+0x24>)
{ 
 800153e:	b513      	push	{r0, r1, r4, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001540:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001542:	2134      	movs	r1, #52	; 0x34
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <BSP_LCD_Clear+0x28>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001546:	9001      	str	r0, [sp, #4]
 8001548:	4620      	mov	r0, r4
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800154a:	fb01 3104 	mla	r1, r1, r4, r3
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800154e:	2300      	movs	r3, #0
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	e9d1 2318 	ldrd	r2, r3, [r1, #96]	; 0x60
 8001556:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 8001558:	f7ff ff36 	bl	80013c8 <LL_FillBuffer>
}
 800155c:	b002      	add	sp, #8
 800155e:	bd10      	pop	{r4, pc}
 8001560:	200000d8 	.word	0x200000d8
 8001564:	2000a6d0 	.word	0x2000a6d0

08001568 <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <BSP_LCD_DrawPixel+0x2c>)
{
 800156a:	b530      	push	{r4, r5, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	2534      	movs	r5, #52	; 0x34
 8001570:	4c09      	ldr	r4, [pc, #36]	; (8001598 <BSP_LCD_DrawPixel+0x30>)
 8001572:	fb05 4303 	mla	r3, r5, r3, r4
 8001576:	e9d3 4517 	ldrd	r4, r5, [r3, #92]	; 0x5c
 800157a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157c:	fb05 0101 	mla	r1, r5, r1, r0
 8001580:	2b02      	cmp	r3, #2
 8001582:	d103      	bne.n	800158c <BSP_LCD_DrawPixel+0x24>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001584:	b292      	uxth	r2, r2
 8001586:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
}
 800158a:	bd30      	pop	{r4, r5, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800158c:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
}
 8001590:	e7fb      	b.n	800158a <BSP_LCD_DrawPixel+0x22>
 8001592:	bf00      	nop
 8001594:	200000d8 	.word	0x200000d8
 8001598:	2000a6d0 	.word	0x2000a6d0

0800159c <BSP_LCD_DisplayChar>:
{
 800159c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015a0:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015a2:	f1a2 0520 	sub.w	r5, r2, #32
  for(i = 0; i < height; i++)
 80015a6:	f04f 0800 	mov.w	r8, #0
{
 80015aa:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015ae:	4828      	ldr	r0, [pc, #160]	; (8001650 <BSP_LCD_DisplayChar+0xb4>)
 80015b0:	210c      	movs	r1, #12
 80015b2:	f8d0 b040 	ldr.w	fp, [r0, #64]	; 0x40
 80015b6:	fb01 010b 	mla	r1, r1, fp, r0
 80015ba:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80015bc:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 80015c0:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 80015c4:	f109 0607 	add.w	r6, r9, #7
 80015c8:	680a      	ldr	r2, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015ca:	fb0a f505 	mul.w	r5, sl, r5
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80015ce:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 80015d0:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
 80015d4:	fb06 2505 	mla	r5, r6, r5, r2
      if(line & (1 << (width- j + offset- 1))) 
 80015d8:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80015dc:	fa52 f380 	uxtab	r3, r2, r0
 80015e0:	9302      	str	r3, [sp, #8]
 80015e2:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
 80015e4:	45d0      	cmp	r8, sl
 80015e6:	eb03 0108 	add.w	r1, r3, r8
 80015ea:	b289      	uxth	r1, r1
 80015ec:	d302      	bcc.n	80015f4 <BSP_LCD_DisplayChar+0x58>
}
 80015ee:	b005      	add	sp, #20
 80015f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 80015f4:	2e01      	cmp	r6, #1
 80015f6:	782c      	ldrb	r4, [r5, #0]
 80015f8:	d004      	beq.n	8001604 <BSP_LCD_DisplayChar+0x68>
 80015fa:	2e02      	cmp	r6, #2
 80015fc:	d109      	bne.n	8001612 <BSP_LCD_DisplayChar+0x76>
      line =  (pchar[0]<< 8) | pchar[1];      
 80015fe:	882c      	ldrh	r4, [r5, #0]
 8001600:	ba64      	rev16	r4, r4
 8001602:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 8001604:	2700      	movs	r7, #0
 8001606:	45b9      	cmp	r9, r7
 8001608:	d80a      	bhi.n	8001620 <BSP_LCD_DisplayChar+0x84>
  for(i = 0; i < height; i++)
 800160a:	f108 0801 	add.w	r8, r8, #1
 800160e:	4435      	add	r5, r6
 8001610:	e7e7      	b.n	80015e2 <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001612:	786a      	ldrb	r2, [r5, #1]
 8001614:	0424      	lsls	r4, r4, #16
 8001616:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800161a:	78aa      	ldrb	r2, [r5, #2]
 800161c:	4314      	orrs	r4, r2
      break;
 800161e:	e7f1      	b.n	8001604 <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
 8001620:	9b00      	ldr	r3, [sp, #0]
 8001622:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001624:	9103      	str	r1, [sp, #12]
 8001626:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 8001628:	9b02      	ldr	r3, [sp, #8]
 800162a:	eba3 0c07 	sub.w	ip, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <BSP_LCD_DisplayChar+0xb4>)
 8001630:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 8001632:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 8001634:	fa02 f20c 	lsl.w	r2, r2, ip
 8001638:	4222      	tst	r2, r4
 800163a:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800163e:	fb02 320b 	mla	r2, r2, fp, r3
 8001642:	bf14      	ite	ne
 8001644:	6c52      	ldrne	r2, [r2, #68]	; 0x44
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001646:	6c92      	ldreq	r2, [r2, #72]	; 0x48
 8001648:	f7ff ff8e 	bl	8001568 <BSP_LCD_DrawPixel>
 800164c:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
 800164e:	e7da      	b.n	8001606 <BSP_LCD_DisplayChar+0x6a>
 8001650:	200000d8 	.word	0x200000d8

08001654 <BSP_LCD_DisplayStringAt>:
{
 8001654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001658:	4605      	mov	r5, r0
 800165a:	468a      	mov	sl, r1
 800165c:	4616      	mov	r6, r2
  while (*ptr++) size ++ ;
 800165e:	4614      	mov	r4, r2
 8001660:	f812 0b01 	ldrb.w	r0, [r2], #1
 8001664:	2800      	cmp	r0, #0
 8001666:	d1fa      	bne.n	800165e <BSP_LCD_DisplayStringAt+0xa>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001668:	4824      	ldr	r0, [pc, #144]	; (80016fc <BSP_LCD_DisplayStringAt+0xa8>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800166a:	220c      	movs	r2, #12
  switch (Mode)
 800166c:	2b01      	cmp	r3, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800166e:	6c01      	ldr	r1, [r0, #64]	; 0x40
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001670:	fb02 0201 	mla	r2, r2, r1, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001674:	f04f 0034 	mov.w	r0, #52	; 0x34
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001678:	6cd7      	ldr	r7, [r2, #76]	; 0x4c
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800167a:	4a21      	ldr	r2, [pc, #132]	; (8001700 <BSP_LCD_DisplayStringAt+0xac>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800167c:	f8b7 e004 	ldrh.w	lr, [r7, #4]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001680:	fb00 2001 	mla	r0, r0, r1, r2
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001684:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8001686:	fbb0 f0fe 	udiv	r0, r0, lr
  switch (Mode)
 800168a:	d021      	beq.n	80016d0 <BSP_LCD_DisplayStringAt+0x7c>
 800168c:	2b02      	cmp	r3, #2
 800168e:	d027      	beq.n	80016e0 <BSP_LCD_DisplayStringAt+0x8c>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001690:	b22b      	sxth	r3, r5
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001692:	f04f 0834 	mov.w	r8, #52	; 0x34
    ref_column = 1;
 8001696:	f04f 0900 	mov.w	r9, #0
 800169a:	2b00      	cmp	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800169c:	fb08 2801 	mla	r8, r8, r1, r2
    ref_column = 1;
 80016a0:	bfd8      	it	le
 80016a2:	2501      	movle	r5, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80016a4:	88bc      	ldrh	r4, [r7, #4]
 80016a6:	fa1f f389 	uxth.w	r3, r9
 80016aa:	f8d8 0060 	ldr.w	r0, [r8, #96]	; 0x60
 80016ae:	f816 2009 	ldrb.w	r2, [r6, r9]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80016b2:	f109 0901 	add.w	r9, r9, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80016b6:	fb04 0313 	mls	r3, r4, r3, r0
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	42a3      	cmp	r3, r4
 80016be:	bf34      	ite	cc
 80016c0:	2300      	movcc	r3, #0
 80016c2:	2301      	movcs	r3, #1
 80016c4:	2a00      	cmp	r2, #0
 80016c6:	bf08      	it	eq
 80016c8:	2300      	moveq	r3, #0
 80016ca:	b97b      	cbnz	r3, 80016ec <BSP_LCD_DisplayStringAt+0x98>
}
 80016cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80016d0:	1b34      	subs	r4, r6, r4
 80016d2:	4404      	add	r4, r0
 80016d4:	fb0e f404 	mul.w	r4, lr, r4
 80016d8:	eb05 0054 	add.w	r0, r5, r4, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80016dc:	b285      	uxth	r5, r0
      break;
 80016de:	e7d7      	b.n	8001690 <BSP_LCD_DisplayStringAt+0x3c>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80016e0:	1b34      	subs	r4, r6, r4
 80016e2:	4404      	add	r4, r0
 80016e4:	fb14 f40e 	smulbb	r4, r4, lr
 80016e8:	1b60      	subs	r0, r4, r5
 80016ea:	e7f7      	b.n	80016dc <BSP_LCD_DisplayStringAt+0x88>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80016ec:	4628      	mov	r0, r5
 80016ee:	4651      	mov	r1, sl
 80016f0:	f7ff ff54 	bl	800159c <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80016f4:	88b8      	ldrh	r0, [r7, #4]
 80016f6:	4428      	add	r0, r5
 80016f8:	b285      	uxth	r5, r0
    i++;
 80016fa:	e7d3      	b.n	80016a4 <BSP_LCD_DisplayStringAt+0x50>
 80016fc:	200000d8 	.word	0x200000d8
 8001700:	2000a6d0 	.word	0x2000a6d0

08001704 <BSP_LCD_DisplayStringAtLine>:
{  
 8001704:	b410      	push	{r4}
  return DrawProp[ActiveLayer].pFont;
 8001706:	4c08      	ldr	r4, [pc, #32]	; (8001728 <BSP_LCD_DisplayStringAtLine+0x24>)
{  
 8001708:	460a      	mov	r2, r1
  return DrawProp[ActiveLayer].pFont;
 800170a:	210c      	movs	r1, #12
 800170c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800170e:	fb01 4303 	mla	r3, r1, r3, r4
}
 8001712:	f85d 4b04 	ldr.w	r4, [sp], #4
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001718:	88db      	ldrh	r3, [r3, #6]
 800171a:	fb13 f000 	smulbb	r0, r3, r0
 800171e:	2303      	movs	r3, #3
 8001720:	b281      	uxth	r1, r0
 8001722:	2000      	movs	r0, #0
 8001724:	f7ff bf96 	b.w	8001654 <BSP_LCD_DisplayStringAt>
 8001728:	200000d8 	.word	0x200000d8

0800172c <BSP_LCD_FillRect>:
{
 800172c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800172e:	4d0f      	ldr	r5, [pc, #60]	; (800176c <BSP_LCD_FillRect+0x40>)
 8001730:	240c      	movs	r4, #12
 8001732:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 8001734:	fb04 5407 	mla	r4, r4, r7, r5
 8001738:	2534      	movs	r5, #52	; 0x34
 800173a:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800173e:	4c0c      	ldr	r4, [pc, #48]	; (8001770 <BSP_LCD_FillRect+0x44>)
 8001740:	fb05 4507 	mla	r5, r5, r7, r4
 8001744:	e9d5 4617 	ldrd	r4, r6, [r5, #92]	; 0x5c
 8001748:	fb06 0101 	mla	r1, r6, r1, r0
 800174c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800174e:	1ab6      	subs	r6, r6, r2
 8001750:	f8cd c004 	str.w	ip, [sp, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001754:	2802      	cmp	r0, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001756:	4638      	mov	r0, r7
 8001758:	9600      	str	r6, [sp, #0]
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800175a:	bf0c      	ite	eq
 800175c:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001760:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001764:	f7ff fe30 	bl	80013c8 <LL_FillBuffer>
}
 8001768:	b003      	add	sp, #12
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	200000d8 	.word	0x200000d8
 8001770:	2000a6d0 	.word	0x2000a6d0

08001774 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001774:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001776:	484c      	ldr	r0, [pc, #304]	; (80018a8 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800177a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 800177e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001780:	645a      	str	r2, [r3, #68]	; 0x44
{
 8001782:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001786:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001788:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800178a:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 800178c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001790:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001794:	4e45      	ldr	r6, [pc, #276]	; (80018ac <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001796:	9200      	str	r2, [sp, #0]
 8001798:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800179a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800179c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
 80017a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017a4:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80017a8:	9201      	str	r2, [sp, #4]
 80017aa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ae:	f042 0210 	orr.w	r2, r2, #16
 80017b2:	631a      	str	r2, [r3, #48]	; 0x30
 80017b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b6:	f002 0210 	and.w	r2, r2, #16
 80017ba:	9202      	str	r2, [sp, #8]
 80017bc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017c4:	631a      	str	r2, [r3, #48]	; 0x30
 80017c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80017cc:	9203      	str	r2, [sp, #12]
 80017ce:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80017d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
 80017d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017da:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80017de:	9204      	str	r2, [sp, #16]
 80017e0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e8:	631a      	str	r2, [r3, #48]	; 0x30
 80017ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ec:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80017f0:	9205      	str	r2, [sp, #20]
 80017f2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80017f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
 80017fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017fe:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001802:	9206      	str	r2, [sp, #24]
 8001804:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8001806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800180c:	631a      	str	r2, [r3, #48]	; 0x30
 800180e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001810:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001814:	9207      	str	r2, [sp, #28]
 8001816:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800181a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001822:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001828:	9308      	str	r3, [sp, #32]
 800182a:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800182c:	2310      	movs	r3, #16
 800182e:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001834:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001838:	f001 f89c 	bl	8002974 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800183c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800183e:	a909      	add	r1, sp, #36	; 0x24
 8001840:	481b      	ldr	r0, [pc, #108]	; (80018b0 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001842:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001844:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001848:	f001 f894 	bl	8002974 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800184c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001850:	a909      	add	r1, sp, #36	; 0x24
 8001852:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001854:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001856:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800185a:	f001 f88b 	bl	8002974 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800185e:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001862:	a909      	add	r1, sp, #36	; 0x24
 8001864:	4813      	ldr	r0, [pc, #76]	; (80018b4 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001866:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001868:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800186c:	f001 f882 	bl	8002974 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001870:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001872:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001874:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001876:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001878:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800187c:	4c0e      	ldr	r4, [pc, #56]	; (80018b8 <BSP_LCD_MspInit+0x144>)
 800187e:	4620      	mov	r0, r4
 8001880:	f001 f878 	bl	8002974 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001884:	a909      	add	r1, sp, #36	; 0x24
 8001886:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001888:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800188a:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800188c:	f001 f872 	bl	8002974 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001890:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001892:	a909      	add	r1, sp, #36	; 0x24
 8001894:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001896:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800189a:	f001 f86b 	bl	8002974 <HAL_GPIO_Init>
}
 800189e:	b00f      	add	sp, #60	; 0x3c
 80018a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40022000 	.word	0x40022000
 80018b0:	40021800 	.word	0x40021800
 80018b4:	40022400 	.word	0x40022400
 80018b8:	40022800 	.word	0x40022800

080018bc <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80018bc:	4806      	ldr	r0, [pc, #24]	; (80018d8 <BSP_LCD_ClockConfig+0x1c>)
 80018be:	2308      	movs	r3, #8
 80018c0:	65c3      	str	r3, [r0, #92]	; 0x5c
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80018c2:	23c0      	movs	r3, #192	; 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80018c4:	305c      	adds	r0, #92	; 0x5c
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80018c6:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80018c8:	2305      	movs	r3, #5
 80018ca:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80018cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018d0:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80018d2:	f001 bd55 	b.w	8003380 <HAL_RCCEx_PeriphCLKConfig>
 80018d6:	bf00      	nop
 80018d8:	200000d8 	.word	0x200000d8

080018dc <BSP_LCD_Init>:
{    
 80018dc:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80018de:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80018e0:	4c24      	ldr	r4, [pc, #144]	; (8001974 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80018e2:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80018e4:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80018e6:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80018ea:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80018ee:	e9c4 2305 	strd	r2, r3, [r4, #20]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80018f2:	230b      	movs	r3, #11
 80018f4:	e9c4 1307 	strd	r1, r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80018f8:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80018fc:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80018fe:	e9c4 3009 	strd	r3, r0, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001902:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001906:	4620      	mov	r0, r4
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001908:	e9c4 3c0b 	strd	r3, ip, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800190c:	f7ff ffd6 	bl	80018bc <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001910:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
 8001914:	f44f 7388 	mov.w	r3, #272	; 0x110
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001918:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800191a:	e9c4 e318 	strd	lr, r3, [r4, #96]	; 0x60
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001922:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001926:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800192a:	e9c4 3303 	strd	r3, r3, [r4, #12]
  hLtdcHandler.Instance = LTDC;
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <BSP_LCD_Init+0x9c>)
 8001930:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001932:	f001 fa2a 	bl	8002d8a <HAL_LTDC_GetState>
 8001936:	4601      	mov	r1, r0
 8001938:	b910      	cbnz	r0, 8001940 <BSP_LCD_Init+0x64>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800193a:	4620      	mov	r0, r4
 800193c:	f7ff ff1a 	bl	8001774 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8001940:	480c      	ldr	r0, [pc, #48]	; (8001974 <BSP_LCD_Init+0x98>)
 8001942:	f001 f989 	bl	8002c58 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001946:	2201      	movs	r2, #1
 8001948:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194c:	480b      	ldr	r0, [pc, #44]	; (800197c <BSP_LCD_Init+0xa0>)
 800194e:	f001 f8f7 	bl	8002b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001952:	2201      	movs	r2, #1
 8001954:	2108      	movs	r1, #8
 8001956:	480a      	ldr	r0, [pc, #40]	; (8001980 <BSP_LCD_Init+0xa4>)
 8001958:	f001 f8f2 	bl	8002b40 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 800195c:	f000 f91e 	bl	8001b9c <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 8001960:	4a08      	ldr	r2, [pc, #32]	; (8001984 <BSP_LCD_Init+0xa8>)
 8001962:	210c      	movs	r1, #12
}
 8001964:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
 8001966:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001968:	fb01 2303 	mla	r3, r1, r3, r2
 800196c:	4a06      	ldr	r2, [pc, #24]	; (8001988 <BSP_LCD_Init+0xac>)
 800196e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001970:	bd10      	pop	{r4, pc}
 8001972:	bf00      	nop
 8001974:	2000a6d0 	.word	0x2000a6d0
 8001978:	40016800 	.word	0x40016800
 800197c:	40022000 	.word	0x40022000
 8001980:	40022800 	.word	0x40022800
 8001984:	200000d8 	.word	0x200000d8
 8001988:	20000000 	.word	0x20000000

0800198c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800198c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001990:	4c21      	ldr	r4, [pc, #132]	; (8001a18 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001992:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001994:	4d21      	ldr	r5, [pc, #132]	; (8001a1c <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
 8001996:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800199a:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800199c:	4621      	mov	r1, r4
{
 800199e:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80019a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a4:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 80019a6:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80019aa:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 80019ae:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80019b2:	f001 ff8e 	bl	80038d2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80019b6:	4630      	mov	r0, r6
 80019b8:	f000 f978 	bl	8001cac <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80019bc:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80019be:	4621      	mov	r1, r4
 80019c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c4:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80019c6:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 80019ca:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80019ce:	f001 ff80 	bl	80038d2 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80019d2:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80019d4:	4621      	mov	r1, r4
 80019d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019da:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80019dc:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 80019e0:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 80019e2:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80019e6:	f001 ff74 	bl	80038d2 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80019ea:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80019ee:	4621      	mov	r1, r4
 80019f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80019f4:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80019f6:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80019f8:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 80019fa:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80019fc:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8001a00:	9b01      	ldr	r3, [sp, #4]
 8001a02:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001a04:	f001 ff65 	bl	80038d2 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001a08:	4649      	mov	r1, r9
 8001a0a:	4628      	mov	r0, r5
}
 8001a0c:	b003      	add	sp, #12
 8001a0e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001a12:	f001 bf75 	b.w	8003900 <HAL_SDRAM_ProgramRefreshRate>
 8001a16:	bf00      	nop
 8001a18:	200001b8 	.word	0x200001b8
 8001a1c:	2000a778 	.word	0x2000a778

08001a20 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a20:	4b55      	ldr	r3, [pc, #340]	; (8001b78 <BSP_SDRAM_MspInit+0x158>)
 8001a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a24:	f042 0201 	orr.w	r2, r2, #1
{  
 8001a28:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a2a:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8001a2c:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 8001a30:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001a32:	a909      	add	r1, sp, #36	; 0x24
 8001a34:	4851      	ldr	r0, [pc, #324]	; (8001b7c <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a36:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001a3a:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a3c:	9201      	str	r2, [sp, #4]
 8001a3e:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8001a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a42:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
 8001a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a4a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001a4e:	9202      	str	r2, [sp, #8]
 8001a50:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a54:	f042 0204 	orr.w	r2, r2, #4
 8001a58:	631a      	str	r2, [r3, #48]	; 0x30
 8001a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a5c:	f002 0204 	and.w	r2, r2, #4
 8001a60:	9203      	str	r2, [sp, #12]
 8001a62:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a66:	f042 0208 	orr.w	r2, r2, #8
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a6e:	f002 0208 	and.w	r2, r2, #8
 8001a72:	9204      	str	r2, [sp, #16]
 8001a74:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a78:	f042 0210 	orr.w	r2, r2, #16
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a80:	f002 0210 	and.w	r2, r2, #16
 8001a84:	9205      	str	r2, [sp, #20]
 8001a86:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a8a:	f042 0220 	orr.w	r2, r2, #32
 8001a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a92:	f002 0220 	and.w	r2, r2, #32
 8001a96:	9206      	str	r2, [sp, #24]
 8001a98:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8001aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001aa8:	9207      	str	r2, [sp, #28]
 8001aaa:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ab2:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001ab4:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abc:	9308      	str	r3, [sp, #32]
 8001abe:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001ac6:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001ac8:	230c      	movs	r3, #12
 8001aca:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001acc:	2308      	movs	r3, #8
 8001ace:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001ad0:	f000 ff50 	bl	8002974 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001ad4:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001ad8:	a909      	add	r1, sp, #36	; 0x24
 8001ada:	4829      	ldr	r0, [pc, #164]	; (8001b80 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001adc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001ade:	f000 ff49 	bl	8002974 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001ae2:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001ae6:	a909      	add	r1, sp, #36	; 0x24
 8001ae8:	4826      	ldr	r0, [pc, #152]	; (8001b84 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001aea:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001aec:	f000 ff42 	bl	8002974 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001af0:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001af4:	a909      	add	r1, sp, #36	; 0x24
 8001af6:	4824      	ldr	r0, [pc, #144]	; (8001b88 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001af8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001afa:	f000 ff3b 	bl	8002974 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001afe:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001b02:	a909      	add	r1, sp, #36	; 0x24
 8001b04:	4821      	ldr	r0, [pc, #132]	; (8001b8c <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001b06:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001b08:	f000 ff34 	bl	8002974 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001b0c:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001b0e:	a909      	add	r1, sp, #36	; 0x24
 8001b10:	481f      	ldr	r0, [pc, #124]	; (8001b90 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001b12:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001b14:	f000 ff2e 	bl	8002974 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001b18:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001b1a:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001b1c:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001b20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001b24:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001b26:	641c      	str	r4, [r3, #64]	; 0x40
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001b28:	62dc      	str	r4, [r3, #44]	; 0x2c
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001b2a:	e9c3 4205 	strd	r4, r2, [r3, #20]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b32:	e9c3 1207 	strd	r1, r2, [r3, #28]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b3a:	e9c3 0209 	strd	r0, r2, [r3, #36]	; 0x24
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001b3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001b42:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001b46:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001b48:	e9c3 240e 	strd	r2, r4, [r3, #56]	; 0x38
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001b4c:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <BSP_SDRAM_MspInit+0x178>)
 8001b4e:	f845 2f10 	str.w	r2, [r5, #16]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001b52:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001b54:	6335      	str	r5, [r6, #48]	; 0x30
 8001b56:	649e      	str	r6, [r3, #72]	; 0x48
  HAL_DMA_DeInit(&dma_handle);
 8001b58:	f000 f9ec 	bl	8001f34 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001b5c:	4628      	mov	r0, r5
 8001b5e:	f000 f969 	bl	8001e34 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001b62:	4622      	mov	r2, r4
 8001b64:	210f      	movs	r1, #15
 8001b66:	2038      	movs	r0, #56	; 0x38
 8001b68:	f000 f8c4 	bl	8001cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001b6c:	2038      	movs	r0, #56	; 0x38
 8001b6e:	f000 f8f3 	bl	8001d58 <HAL_NVIC_EnableIRQ>
}
 8001b72:	b00e      	add	sp, #56	; 0x38
 8001b74:	bd70      	pop	{r4, r5, r6, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40021400 	.word	0x40021400
 8001b8c:	40021800 	.word	0x40021800
 8001b90:	40021c00 	.word	0x40021c00
 8001b94:	200001b8 	.word	0x200001b8
 8001b98:	40026410 	.word	0x40026410

08001b9c <BSP_SDRAM_Init>:
{ 
 8001b9c:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001b9e:	4c1a      	ldr	r4, [pc, #104]	; (8001c08 <BSP_SDRAM_Init+0x6c>)
  Timing.ExitSelfRefreshDelay = 7;
 8001ba0:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <BSP_SDRAM_Init+0x70>)
  Timing.SelfRefreshTime      = 4;
 8001ba4:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 8001ba6:	4d1a      	ldr	r5, [pc, #104]	; (8001c10 <BSP_SDRAM_Init+0x74>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001ba8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001bac:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001bae:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001bb0:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
 8001bb2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  Timing.ExitSelfRefreshDelay = 7;
 8001bb6:	e9c5 311c 	strd	r3, r1, [r5, #112]	; 0x70
  Timing.RowCycleDelay        = 7;
 8001bba:	e9c5 211e 	strd	r2, r1, [r5, #120]	; 0x78
  Timing.RPDelay              = 2;
 8001bbe:	e9c5 3320 	strd	r3, r3, [r5, #128]	; 0x80
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001bc6:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001bc8:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001bd0:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001bd2:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bda:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001bde:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001be0:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001be4:	f7ff ff1c 	bl	8001a20 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001be8:	f105 0170 	add.w	r1, r5, #112	; 0x70
 8001bec:	4620      	mov	r0, r4
 8001bee:	4c09      	ldr	r4, [pc, #36]	; (8001c14 <BSP_SDRAM_Init+0x78>)
 8001bf0:	f001 fe4f 	bl	8003892 <HAL_SDRAM_Init>
 8001bf4:	3800      	subs	r0, #0
 8001bf6:	bf18      	it	ne
 8001bf8:	2001      	movne	r0, #1
 8001bfa:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001bfc:	f240 6003 	movw	r0, #1539	; 0x603
 8001c00:	f7ff fec4 	bl	800198c <BSP_SDRAM_Initialization_sequence>
}
 8001c04:	7820      	ldrb	r0, [r4, #0]
 8001c06:	bd38      	pop	{r3, r4, r5, pc}
 8001c08:	2000a778 	.word	0x2000a778
 8001c0c:	a0000140 	.word	0xa0000140
 8001c10:	200001b8 	.word	0x200001b8
 8001c14:	20000028 	.word	0x20000028

08001c18 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c18:	490f      	ldr	r1, [pc, #60]	; (8001c58 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c1a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c1c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <SystemInit+0x44>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	f042 0201 	orr.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001c32:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001c3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c3e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <SystemInit+0x48>)
 8001c42:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c4c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c52:	608b      	str	r3, [r1, #8]
#endif
}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000ed00 	.word	0xe000ed00
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	24003010 	.word	0x24003010

08001c64 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_Init+0x20>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c66:	2003      	movs	r0, #3
{
 8001c68:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8001c6a:	6813      	ldr	r3, [r2, #0]
 8001c6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c70:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c72:	f000 f82d 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c76:	200f      	movs	r0, #15
 8001c78:	f7ff f9c0 	bl	8000ffc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c7c:	f7ff f992 	bl	8000fa4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001c80:	2000      	movs	r0, #0
 8001c82:	bd08      	pop	{r3, pc}
 8001c84:	40023c00 	.word	0x40023c00

08001c88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c88:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <HAL_IncTick+0x10>)
 8001c8a:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <HAL_IncTick+0x14>)
 8001c8c:	6811      	ldr	r1, [r2, #0]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	440b      	add	r3, r1
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	2000a7ac 	.word	0x2000a7ac
 8001c9c:	20000030 	.word	0x20000030

08001ca0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ca0:	4b01      	ldr	r3, [pc, #4]	; (8001ca8 <HAL_GetTick+0x8>)
 8001ca2:	6818      	ldr	r0, [r3, #0]
}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	2000a7ac 	.word	0x2000a7ac

08001cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b538      	push	{r3, r4, r5, lr}
 8001cae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001cb0:	f7ff fff6 	bl	8001ca0 <HAL_GetTick>
 8001cb4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb8:	bf1e      	ittt	ne
 8001cba:	4b04      	ldrne	r3, [pc, #16]	; (8001ccc <HAL_Delay+0x20>)
 8001cbc:	781b      	ldrbne	r3, [r3, #0]
 8001cbe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc0:	f7ff ffee 	bl	8001ca0 <HAL_GetTick>
 8001cc4:	1b43      	subs	r3, r0, r5
 8001cc6:	42a3      	cmp	r3, r4
 8001cc8:	d3fa      	bcc.n	8001cc0 <HAL_Delay+0x14>
  {
  }
}
 8001cca:	bd38      	pop	{r3, r4, r5, pc}
 8001ccc:	20000030 	.word	0x20000030

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4907      	ldr	r1, [pc, #28]	; (8001cf0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cde:	0412      	lsls	r2, r2, #16
 8001ce0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001cec:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf6:	b530      	push	{r4, r5, lr}
 8001cf8:	68dc      	ldr	r4, [r3, #12]
 8001cfa:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cfe:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d04:	2d04      	cmp	r5, #4
 8001d06:	bf28      	it	cs
 8001d08:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d10:	bf8c      	ite	hi
 8001d12:	3c03      	subhi	r4, #3
 8001d14:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d16:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d1c:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	fa01 f104 	lsl.w	r1, r1, r4
 8001d2c:	ea41 0302 	orr.w	r3, r1, r2
 8001d30:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001d34:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001d36:	db06      	blt.n	8001d46 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d38:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001d3c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001d40:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001d44:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	f000 000f 	and.w	r0, r0, #15
 8001d4a:	4a02      	ldr	r2, [pc, #8]	; (8001d54 <HAL_NVIC_SetPriority+0x60>)
 8001d4c:	5413      	strb	r3, [r2, r0]
 8001d4e:	e7f9      	b.n	8001d44 <HAL_NVIC_SetPriority+0x50>
 8001d50:	e000ed00 	.word	0xe000ed00
 8001d54:	e000ed14 	.word	0xe000ed14

08001d58 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	db08      	blt.n	8001d6e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5c:	0942      	lsrs	r2, r0, #5
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f000 001f 	and.w	r0, r0, #31
 8001d64:	fa03 f000 	lsl.w	r0, r3, r0
 8001d68:	4b01      	ldr	r3, [pc, #4]	; (8001d70 <HAL_NVIC_EnableIRQ+0x18>)
 8001d6a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d6e:	4770      	bx	lr
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d74:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <HAL_MPU_Disable+0x18>)
 8001d7a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d80:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d82:	2200      	movs	r2, #0
 8001d84:	4b02      	ldr	r3, [pc, #8]	; (8001d90 <HAL_MPU_Disable+0x1c>)
 8001d86:	605a      	str	r2, [r3, #4]
}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00
 8001d90:	e000ed90 	.word	0xe000ed90

08001d94 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d94:	4a06      	ldr	r2, [pc, #24]	; (8001db0 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d96:	f040 0001 	orr.w	r0, r0, #1
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_MPU_Enable+0x20>)
 8001d9c:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d9e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001da6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001daa:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00
 8001db4:	e000ed90 	.word	0xe000ed90

08001db8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001db8:	7843      	ldrb	r3, [r0, #1]
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <HAL_MPU_ConfigRegion+0x4c>)
{
 8001dbc:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8001dbe:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 8001dc0:	7801      	ldrb	r1, [r0, #0]
 8001dc2:	b1d9      	cbz	r1, 8001dfc <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001dc4:	6843      	ldr	r3, [r0, #4]
 8001dc6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001dc8:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dca:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001dcc:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dce:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dd2:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001dd4:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dd6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001dda:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ddc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001de0:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001de2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001de6:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001de8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001dec:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001df2:	7a01      	ldrb	r1, [r0, #8]
 8001df4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001df8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001dfa:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8001dfc:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8001dfe:	6111      	str	r1, [r2, #16]
}
 8001e00:	e7fb      	b.n	8001dfa <HAL_MPU_ConfigRegion+0x42>
 8001e02:	bf00      	nop
 8001e04:	e000ed90 	.word	0xe000ed90

08001e08 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e08:	6803      	ldr	r3, [r0, #0]
{
 8001e0a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e0c:	2018      	movs	r0, #24
 8001e0e:	b2d9      	uxtb	r1, r3
 8001e10:	3910      	subs	r1, #16
 8001e12:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8001e16:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e18:	4c05      	ldr	r4, [pc, #20]	; (8001e30 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001e1a:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e1c:	5c20      	ldrb	r0, [r4, r0]
 8001e1e:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e20:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8001e24:	f020 0003 	bic.w	r0, r0, #3
 8001e28:	bf88      	it	hi
 8001e2a:	3004      	addhi	r0, #4
 8001e2c:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001e2e:	bd10      	pop	{r4, pc}
 8001e30:	0801291c 	.word	0x0801291c

08001e34 <HAL_DMA_Init>:
{
 8001e34:	b570      	push	{r4, r5, r6, lr}
 8001e36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7ff ff32 	bl	8001ca0 <HAL_GetTick>
 8001e3c:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001e3e:	2c00      	cmp	r4, #0
 8001e40:	d073      	beq.n	8001f2a <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
 8001e42:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8001e44:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001e46:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001e50:	6813      	ldr	r3, [r2, #0]
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e58:	6821      	ldr	r1, [r4, #0]
 8001e5a:	680b      	ldr	r3, [r1, #0]
 8001e5c:	07d8      	lsls	r0, r3, #31
 8001e5e:	d42f      	bmi.n	8001ec0 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8001e60:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e62:	4d33      	ldr	r5, [pc, #204]	; (8001f30 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e64:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e66:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e68:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	68e2      	ldr	r2, [r4, #12]
 8001e70:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e72:	6922      	ldr	r2, [r4, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	6962      	ldr	r2, [r4, #20]
 8001e78:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7a:	69e2      	ldr	r2, [r4, #28]
 8001e7c:	4303      	orrs	r3, r0
 8001e7e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e80:	6a22      	ldr	r2, [r4, #32]
 8001e82:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e86:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e88:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e8c:	bf02      	ittt	eq
 8001e8e:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8001e92:	4335      	orreq	r5, r6
 8001e94:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e96:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8001e98:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001e9a:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e9c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001ea0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ea4:	d133      	bne.n	8001f0e <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8001ea6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ea8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001eaa:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001eac:	b37d      	cbz	r5, 8001f0e <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eae:	b990      	cbnz	r0, 8001ed6 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8001eb0:	2a01      	cmp	r2, #1
 8001eb2:	d021      	beq.n	8001ef8 <HAL_DMA_Init+0xc4>
 8001eb4:	f032 0202 	bics.w	r2, r2, #2
 8001eb8:	d129      	bne.n	8001f0e <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eba:	01ea      	lsls	r2, r5, #7
 8001ebc:	d527      	bpl.n	8001f0e <HAL_DMA_Init+0xda>
 8001ebe:	e01e      	b.n	8001efe <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ec0:	f7ff feee 	bl	8001ca0 <HAL_GetTick>
 8001ec4:	1b40      	subs	r0, r0, r5
 8001ec6:	2805      	cmp	r0, #5
 8001ec8:	d9c6      	bls.n	8001e58 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eca:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ecc:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ece:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001ed0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001ed4:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ed6:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001eda:	d114      	bne.n	8001f06 <HAL_DMA_Init+0xd2>
    switch (tmp)
 8001edc:	2a03      	cmp	r2, #3
 8001ede:	d816      	bhi.n	8001f0e <HAL_DMA_Init+0xda>
 8001ee0:	a001      	add	r0, pc, #4	; (adr r0, 8001ee8 <HAL_DMA_Init+0xb4>)
 8001ee2:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001ee6:	bf00      	nop
 8001ee8:	08001eff 	.word	0x08001eff
 8001eec:	08001ebb 	.word	0x08001ebb
 8001ef0:	08001eff 	.word	0x08001eff
 8001ef4:	08001ef9 	.word	0x08001ef9
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ef8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001efc:	d107      	bne.n	8001f0e <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001efe:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8001f00:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f02:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001f04:	e7e4      	b.n	8001ed0 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8001f06:	2a02      	cmp	r2, #2
 8001f08:	d9f9      	bls.n	8001efe <HAL_DMA_Init+0xca>
 8001f0a:	2a03      	cmp	r2, #3
 8001f0c:	d0d5      	beq.n	8001eba <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8001f0e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f10:	4620      	mov	r0, r4
 8001f12:	f7ff ff79 	bl	8001e08 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f16:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001f18:	233f      	movs	r3, #63	; 0x3f
 8001f1a:	4093      	lsls	r3, r2
 8001f1c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001f20:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f22:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001f24:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001f28:	e7d4      	b.n	8001ed4 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	e7d2      	b.n	8001ed4 <HAL_DMA_Init+0xa0>
 8001f2e:	bf00      	nop
 8001f30:	f010803f 	.word	0xf010803f

08001f34 <HAL_DMA_DeInit>:
{
 8001f34:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8001f36:	4605      	mov	r5, r0
 8001f38:	b320      	cbz	r0, 8001f84 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001f3a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	b2dc      	uxtb	r4, r3
 8001f42:	d01d      	beq.n	8001f80 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8001f44:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8001f46:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001f50:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8001f52:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001f54:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8001f56:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001f58:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8001f5a:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001f5c:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f5e:	f7ff ff53 	bl	8001e08 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f62:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001f64:	233f      	movs	r3, #63	; 0x3f
 8001f66:	4093      	lsls	r3, r2
 8001f68:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6a:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8001f6c:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001f70:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8001f74:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8001f78:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8001f7c:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 8001f80:	4620      	mov	r0, r4
 8001f82:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001f84:	2401      	movs	r4, #1
 8001f86:	e7fb      	b.n	8001f80 <HAL_DMA_DeInit+0x4c>

08001f88 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001f88:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8001f8a:	6804      	ldr	r4, [r0, #0]
 8001f8c:	9d04      	ldr	r5, [sp, #16]
 8001f8e:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8001f90:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8001f94:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8001f98:	4333      	orrs	r3, r6
 8001f9a:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001f9c:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001f9e:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001fa0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001fa4:	d130      	bne.n	8002008 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001fa6:	6886      	ldr	r6, [r0, #8]
 8001fa8:	b11e      	cbz	r6, 8001fb2 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001faa:	2e01      	cmp	r6, #1
 8001fac:	d103      	bne.n	8001fb6 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001fae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001fb2:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001fb4:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001fb6:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001fb8:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001fbc:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001fc0:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001fc2:	d107      	bne.n	8001fd4 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8001fc4:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8001fc6:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001fc8:	02db      	lsls	r3, r3, #11
 8001fca:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8001fce:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8001fd2:	e7ee      	b.n	8001fb2 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001fd4:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001fd6:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001fda:	d10a      	bne.n	8001ff2 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8001fdc:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8001fde:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001fe0:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8001fe2:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001fe4:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8001fe8:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8001fec:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8001ff0:	e7df      	b.n	8001fb2 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8001ff2:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8001ff4:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001ff6:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 8001ff8:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001ffa:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8001ffe:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 8002002:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8002006:	e7d4      	b.n	8001fb2 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002008:	60e1      	str	r1, [r4, #12]
}
 800200a:	e7d3      	b.n	8001fb4 <DMA2D_SetConfig+0x2c>

0800200c <HAL_DMA2D_MspInit>:
}
 800200c:	4770      	bx	lr

0800200e <HAL_DMA2D_Init>:
{
 800200e:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8002010:	4604      	mov	r4, r0
 8002012:	b330      	cbz	r0, 8002062 <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002014:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002018:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800201c:	b91b      	cbnz	r3, 8002026 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 800201e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002022:	f7ff fff3 	bl	800200c <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002026:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002028:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800202a:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800202c:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800202e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002032:	6813      	ldr	r3, [r2, #0]
 8002034:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002038:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800203a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800203c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800203e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002040:	f023 0307 	bic.w	r3, r3, #7
 8002044:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002046:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002048:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800204a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800204c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002050:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002054:	430b      	orrs	r3, r1
 8002056:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002058:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800205a:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800205c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002060:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002062:	2001      	movs	r0, #1
 8002064:	e7fc      	b.n	8002060 <HAL_DMA2D_Init+0x52>

08002066 <HAL_DMA2D_Start>:
{
 8002066:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8002068:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
 800206c:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 800206e:	2d01      	cmp	r5, #1
 8002070:	f04f 0502 	mov.w	r5, #2
 8002074:	d00f      	beq.n	8002096 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002076:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 800207a:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800207c:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 800207e:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002082:	9500      	str	r5, [sp, #0]
 8002084:	f7ff ff80 	bl	8001f88 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002088:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 800208a:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 800208c:	6813      	ldr	r3, [r2, #0]
 800208e:	4333      	orrs	r3, r6
 8002090:	6013      	str	r3, [r2, #0]
}
 8002092:	b002      	add	sp, #8
 8002094:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8002096:	4628      	mov	r0, r5
 8002098:	e7fb      	b.n	8002092 <HAL_DMA2D_Start+0x2c>

0800209a <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 800209a:	2300      	movs	r3, #0
{
 800209c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800209e:	9301      	str	r3, [sp, #4]
{
 80020a0:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80020a2:	6803      	ldr	r3, [r0, #0]
{
 80020a4:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	07db      	lsls	r3, r3, #31
 80020aa:	d417      	bmi.n	80020dc <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80020ac:	6822      	ldr	r2, [r4, #0]
 80020ae:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80020b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020b2:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80020b4:	069e      	lsls	r6, r3, #26
 80020b6:	d506      	bpl.n	80020c6 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 80020b8:	f7ff fdf2 	bl	8001ca0 <HAL_GetTick>
 80020bc:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	06d2      	lsls	r2, r2, #27
 80020c4:	d543      	bpl.n	800214e <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 80020ca:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80020cc:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80020ce:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 80020d0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80020d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80020d8:	b002      	add	sp, #8
 80020da:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 80020dc:	f7ff fde0 	bl	8001ca0 <HAL_GetTick>
 80020e0:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80020e2:	6823      	ldr	r3, [r4, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	0792      	lsls	r2, r2, #30
 80020e8:	d4e0      	bmi.n	80020ac <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80020ee:	9a01      	ldr	r2, [sp, #4]
 80020f0:	f012 0f21 	tst.w	r2, #33	; 0x21
 80020f4:	d017      	beq.n	8002126 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80020f6:	9a01      	ldr	r2, [sp, #4]
 80020f8:	0695      	lsls	r5, r2, #26
 80020fa:	d503      	bpl.n	8002104 <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80020fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80020fe:	f042 0202 	orr.w	r2, r2, #2
 8002102:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002104:	9a01      	ldr	r2, [sp, #4]
 8002106:	07d0      	lsls	r0, r2, #31
 8002108:	d503      	bpl.n	8002112 <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800210a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800210c:	f042 0201 	orr.w	r2, r2, #1
 8002110:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002112:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002114:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002116:	2304      	movs	r3, #4
        return HAL_ERROR;
 8002118:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800211a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 800211e:	2300      	movs	r3, #0
 8002120:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002124:	e7d8      	b.n	80020d8 <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 8002126:	1c69      	adds	r1, r5, #1
 8002128:	d0dc      	beq.n	80020e4 <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800212a:	f7ff fdb9 	bl	8001ca0 <HAL_GetTick>
 800212e:	1b80      	subs	r0, r0, r6
 8002130:	42a8      	cmp	r0, r5
 8002132:	d801      	bhi.n	8002138 <HAL_DMA2D_PollForTransfer+0x9e>
 8002134:	2d00      	cmp	r5, #0
 8002136:	d1d4      	bne.n	80020e2 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002138:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800213a:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800213c:	f043 0320 	orr.w	r3, r3, #32
 8002140:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
 8002142:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002144:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002148:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 800214c:	e7c4      	b.n	80020d8 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002152:	9a01      	ldr	r2, [sp, #4]
 8002154:	f012 0f29 	tst.w	r2, #41	; 0x29
 8002158:	d016      	beq.n	8002188 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800215a:	9a01      	ldr	r2, [sp, #4]
 800215c:	0716      	lsls	r6, r2, #28
 800215e:	d503      	bpl.n	8002168 <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002160:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002162:	f042 0204 	orr.w	r2, r2, #4
 8002166:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002168:	9a01      	ldr	r2, [sp, #4]
 800216a:	0695      	lsls	r5, r2, #26
 800216c:	d503      	bpl.n	8002176 <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800216e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002170:	f042 0202 	orr.w	r2, r2, #2
 8002174:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002176:	9a01      	ldr	r2, [sp, #4]
 8002178:	07d0      	lsls	r0, r2, #31
 800217a:	d503      	bpl.n	8002184 <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800217c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002184:	2229      	movs	r2, #41	; 0x29
 8002186:	e7c5      	b.n	8002114 <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 8002188:	1c69      	adds	r1, r5, #1
 800218a:	d099      	beq.n	80020c0 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800218c:	f7ff fd88 	bl	8001ca0 <HAL_GetTick>
 8002190:	1b80      	subs	r0, r0, r6
 8002192:	42a8      	cmp	r0, r5
 8002194:	d8d0      	bhi.n	8002138 <HAL_DMA2D_PollForTransfer+0x9e>
 8002196:	2d00      	cmp	r5, #0
 8002198:	d191      	bne.n	80020be <HAL_DMA2D_PollForTransfer+0x24>
 800219a:	e7cd      	b.n	8002138 <HAL_DMA2D_PollForTransfer+0x9e>

0800219c <HAL_DMA2D_ConfigLayer>:
{
 800219c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 800219e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	f04f 0302 	mov.w	r3, #2
 80021a8:	d02b      	beq.n	8002202 <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021aa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80021ae:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80021b0:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80021b4:	4f1c      	ldr	r7, [pc, #112]	; (8002228 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 80021b6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80021ba:	010e      	lsls	r6, r1, #4
 80021bc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80021be:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 80021c2:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80021c6:	3c09      	subs	r4, #9
 80021c8:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80021ca:	bf96      	itet	ls
 80021cc:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80021d0:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80021d4:	431a      	orrls	r2, r3
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80021d6:	6803      	ldr	r3, [r0, #0]
 80021d8:	b9a9      	cbnz	r1, 8002206 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80021da:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80021dc:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80021de:	ea01 0107 	and.w	r1, r1, r7
 80021e2:	ea42 0201 	orr.w	r2, r2, r1
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80021e8:	6982      	ldr	r2, [r0, #24]
 80021ea:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80021ec:	d803      	bhi.n	80021f6 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80021ee:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80021f0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80021f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80021f6:	2301      	movs	r3, #1
 80021f8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80021fc:	2300      	movs	r3, #0
 80021fe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8002202:	4618      	mov	r0, r3
}
 8002204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002206:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002208:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800220a:	ea01 0107 	and.w	r1, r1, r7
 800220e:	ea42 0201 	orr.w	r2, r2, r1
 8002212:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002214:	eb00 0206 	add.w	r2, r0, r6
 8002218:	6992      	ldr	r2, [r2, #24]
 800221a:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800221c:	d8eb      	bhi.n	80021f6 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800221e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8002222:	621d      	str	r5, [r3, #32]
 8002224:	e7e7      	b.n	80021f6 <HAL_DMA2D_ConfigLayer+0x5a>
 8002226:	bf00      	nop
 8002228:	00fcfff0 	.word	0x00fcfff0

0800222c <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 800222c:	2300      	movs	r3, #0
{
 800222e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002230:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 8002234:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002236:	6803      	ldr	r3, [r0, #0]
{
 8002238:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800223a:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800223c:	591a      	ldr	r2, [r3, r4]
 800223e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002242:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 8002244:	591b      	ldr	r3, [r3, r4]
 8002246:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002248:	f7ff fd30 	bl	8001cac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800224c:	682b      	ldr	r3, [r5, #0]
 800224e:	9a01      	ldr	r2, [sp, #4]
 8002250:	511a      	str	r2, [r3, r4]
}
 8002252:	b003      	add	sp, #12
 8002254:	bd30      	pop	{r4, r5, pc}
	...

08002258 <ETH_MACDMAConfig>:
{
 8002258:	b570      	push	{r4, r5, r6, lr}
 800225a:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800225c:	b129      	cbz	r1, 800226a <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
 800225e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002262:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002266:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800226a:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 800226c:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800226e:	2b00      	cmp	r3, #0
  tmpreg = (heth->Instance)->MACCR;
 8002270:	6810      	ldr	r0, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002272:	bf0c      	ite	eq
 8002274:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8002278:	2100      	movne	r1, #0
                       macinit.LoopbackMode |
 800227a:	e9d4 3502 	ldrd	r3, r5, [r4, #8]
 800227e:	432b      	orrs	r3, r5
                       (heth->Init).DuplexMode | 
 8002280:	430b      	orrs	r3, r1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002282:	492d      	ldr	r1, [pc, #180]	; (8002338 <ETH_MACDMAConfig+0xe0>)
 8002284:	4001      	ands	r1, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002286:	2001      	movs	r0, #1
 8002288:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800228a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800228e:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8002290:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002292:	f7ff fd0b 	bl	8001cac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002296:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002298:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800229a:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 800229c:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800229e:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 80022a0:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a2:	f7ff fd03 	bl	8001cac <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80022a6:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a8:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 80022aa:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80022ac:	2500      	movs	r5, #0
 80022ae:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80022b0:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 80022b2:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80022b4:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80022b8:	0412      	lsls	r2, r2, #16
 80022ba:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80022c0:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 80022c2:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022c4:	f7ff fcf2 	bl	8001cac <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80022c8:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ca:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 80022cc:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022ce:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 80022d0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022d2:	f7ff fceb 	bl	8001cac <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80022d6:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022d8:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <ETH_MACDMAConfig+0xe4>)
    (heth->Instance)->MACVLANTR = tmpreg;
 80022dc:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 80022de:	f241 0518 	movw	r5, #4120	; 0x1018
 80022e2:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80022e4:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022e6:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80022ea:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80022ee:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 80022f0:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f2:	f7ff fcdb 	bl	8001cac <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80022f6:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f8:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022fa:	4a11      	ldr	r2, [pc, #68]	; (8002340 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->DMAOMR = tmpreg;
 80022fc:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002302:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8002304:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002306:	f7ff fcd1 	bl	8001cac <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800230a:	6822      	ldr	r2, [r4, #0]
 800230c:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8002310:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002312:	69a3      	ldr	r3, [r4, #24]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d107      	bne.n	8002328 <ETH_MACDMAConfig+0xd0>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002318:	f241 011c 	movw	r1, #4124	; 0x101c
 800231c:	5853      	ldr	r3, [r2, r1]
 800231e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002326:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002328:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800232a:	4a06      	ldr	r2, [pc, #24]	; (8002344 <ETH_MACDMAConfig+0xec>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800232c:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800232e:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002330:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <ETH_MACDMAConfig+0xf0>)
 8002334:	601a      	str	r2, [r3, #0]
}
 8002336:	bd70      	pop	{r4, r5, r6, pc}
 8002338:	ff20810f 	.word	0xff20810f
 800233c:	f8de3f23 	.word	0xf8de3f23
 8002340:	02c12080 	.word	0x02c12080
 8002344:	40028040 	.word	0x40028040
 8002348:	40028044 	.word	0x40028044

0800234c <HAL_ETH_DMATxDescListInit>:
{
 800234c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8002350:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8002354:	2c01      	cmp	r4, #1
 8002356:	f04f 0402 	mov.w	r4, #2
 800235a:	d031      	beq.n	80023c0 <HAL_ETH_DMATxDescListInit+0x74>
 800235c:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800235e:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002362:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  for(i=0; i < TxBuffCount; i++)
 8002366:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 8002368:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800236c:	f240 5cf4 	movw	ip, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 8002370:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 8002372:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
  heth->TxDesc = DMATxDescTab;
 8002376:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 8002378:	429d      	cmp	r5, r3
 800237a:	d10c      	bne.n	8002396 <HAL_ETH_DMATxDescListInit+0x4a>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800237c:	6802      	ldr	r2, [r0, #0]
 800237e:	f241 0310 	movw	r3, #4112	; 0x1010
 8002382:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8002384:	2301      	movs	r3, #1
 8002386:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800238a:	2300      	movs	r3, #0
 800238c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8002390:	4618      	mov	r0, r3
}
 8002392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002396:	fb0c 2605 	mla	r6, ip, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800239a:	6027      	str	r7, [r4, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800239c:	60a6      	str	r6, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800239e:	69c6      	ldr	r6, [r0, #28]
 80023a0:	b91e      	cbnz	r6, 80023aa <HAL_ETH_DMATxDescListInit+0x5e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80023a2:	6826      	ldr	r6, [r4, #0]
 80023a4:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80023a8:	6026      	str	r6, [r4, #0]
    if(i < (TxBuffCount-1))
 80023aa:	f104 0620 	add.w	r6, r4, #32
 80023ae:	45ae      	cmp	lr, r5
 80023b0:	bf94      	ite	ls
 80023b2:	4688      	movls	r8, r1
 80023b4:	46b0      	movhi	r8, r6
 80023b6:	3501      	adds	r5, #1
 80023b8:	f8c4 800c 	str.w	r8, [r4, #12]
  for(i=0; i < TxBuffCount; i++)
 80023bc:	4634      	mov	r4, r6
 80023be:	e7db      	b.n	8002378 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 80023c0:	4620      	mov	r0, r4
 80023c2:	e7e6      	b.n	8002392 <HAL_ETH_DMATxDescListInit+0x46>

080023c4 <HAL_ETH_DMARxDescListInit>:
{
 80023c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(heth);
 80023c8:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80023cc:	2c01      	cmp	r4, #1
 80023ce:	f04f 0402 	mov.w	r4, #2
 80023d2:	d02f      	beq.n	8002434 <HAL_ETH_DMARxDescListInit+0x70>
 80023d4:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80023d6:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80023da:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  for(i=0; i < RxBuffCount; i++)
 80023de:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 80023e0:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80023e4:	f244 5cf4 	movw	ip, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 80023e8:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80023ea:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 80023ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
  heth->RxDesc = DMARxDescTab; 
 80023f2:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 80023f4:	42ab      	cmp	r3, r5
 80023f6:	d10c      	bne.n	8002412 <HAL_ETH_DMARxDescListInit+0x4e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80023f8:	6802      	ldr	r2, [r0, #0]
 80023fa:	f241 030c 	movw	r3, #4108	; 0x100c
 80023fe:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8002400:	2301      	movs	r3, #1
 8002402:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002406:	2300      	movs	r3, #0
 8002408:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800240c:	4618      	mov	r0, r3
}
 800240e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002412:	fb0e 2605 	mla	r6, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002416:	6027      	str	r7, [r4, #0]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002418:	60a6      	str	r6, [r4, #8]
 800241a:	f104 0620 	add.w	r6, r4, #32
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800241e:	f8c4 c004 	str.w	ip, [r4, #4]
    if(i < (RxBuffCount-1))
 8002422:	45a8      	cmp	r8, r5
 8002424:	bf94      	ite	ls
 8002426:	4689      	movls	r9, r1
 8002428:	46b1      	movhi	r9, r6
 800242a:	3501      	adds	r5, #1
 800242c:	f8c4 900c 	str.w	r9, [r4, #12]
  for(i=0; i < RxBuffCount; i++)
 8002430:	4634      	mov	r4, r6
 8002432:	e7df      	b.n	80023f4 <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_LOCK(heth);
 8002434:	4620      	mov	r0, r4
 8002436:	e7ea      	b.n	800240e <HAL_ETH_DMARxDescListInit+0x4a>

08002438 <HAL_ETH_TransmitFrame>:
{
 8002438:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 800243a:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800243e:	2b01      	cmp	r3, #1
 8002440:	f04f 0302 	mov.w	r3, #2
 8002444:	d066      	beq.n	8002514 <HAL_ETH_TransmitFrame+0xdc>
 8002446:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8002448:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800244c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 8002450:	b929      	cbnz	r1, 800245e <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8002452:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002456:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 800245a:	4610      	mov	r0, r2
}
 800245c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800245e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002460:	681c      	ldr	r4, [r3, #0]
 8002462:	2c00      	cmp	r4, #0
 8002464:	da06      	bge.n	8002474 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002466:	2312      	movs	r3, #18
 8002468:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800246c:	2300      	movs	r3, #0
 800246e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8002472:	e7f2      	b.n	800245a <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002474:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8002478:	42a1      	cmp	r1, r4
 800247a:	d92c      	bls.n	80024d6 <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800247c:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002480:	fb04 1412 	mls	r4, r4, r2, r1
 8002484:	b32c      	cbz	r4, 80024d2 <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 8002486:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8002488:	4c23      	ldr	r4, [pc, #140]	; (8002518 <HAL_ETH_TransmitFrame+0xe0>)
 800248a:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800248e:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 8002492:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8002494:	fb04 1102 	mla	r1, r4, r2, r1
    for (i=0; i< bufcount; i++)
 8002498:	2400      	movs	r4, #0
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800249a:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800249e:	681d      	ldr	r5, [r3, #0]
 80024a0:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 80024a4:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 80024a6:	b91c      	cbnz	r4, 80024b0 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80024a8:	681d      	ldr	r5, [r3, #0]
 80024aa:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 80024ae:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 80024b0:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80024b2:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 80024b4:	d104      	bne.n	80024c0 <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80024b6:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80024b8:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80024ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80024be:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80024c0:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 80024c2:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80024c4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 80024c8:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80024ca:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80024cc:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 80024ce:	d1e6      	bne.n	800249e <HAL_ETH_TransmitFrame+0x66>
 80024d0:	e00d      	b.n	80024ee <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 80024d2:	2a01      	cmp	r2, #1
 80024d4:	d1d8      	bne.n	8002488 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80024d6:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80024d8:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80024dc:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80024e0:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80024e2:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024ea:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80024ec:	68db      	ldr	r3, [r3, #12]
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80024ee:	f241 0214 	movw	r2, #4116	; 0x1014
 80024f2:	62c3      	str	r3, [r0, #44]	; 0x2c
 80024f4:	6803      	ldr	r3, [r0, #0]
 80024f6:	5899      	ldr	r1, [r3, r2]
 80024f8:	0749      	lsls	r1, r1, #29
 80024fa:	d505      	bpl.n	8002508 <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80024fc:	2104      	movs	r1, #4
 80024fe:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 8002500:	f241 0204 	movw	r2, #4100	; 0x1004
 8002504:	2100      	movs	r1, #0
 8002506:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8002508:	2301      	movs	r3, #1
 800250a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800250e:	2300      	movs	r3, #0
 8002510:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8002514:	4618      	mov	r0, r3
 8002516:	e7a1      	b.n	800245c <HAL_ETH_TransmitFrame+0x24>
 8002518:	fffffa0c 	.word	0xfffffa0c

0800251c <HAL_ETH_GetReceivedFrame_IT>:
{
 800251c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 800251e:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8002522:	2b01      	cmp	r3, #1
 8002524:	f04f 0302 	mov.w	r3, #2
 8002528:	d03b      	beq.n	80025a2 <HAL_ETH_GetReceivedFrame_IT+0x86>
 800252a:	2201      	movs	r2, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800252c:	2405      	movs	r4, #5
  heth->State = HAL_ETH_STATE_BUSY;
 800252e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      heth->RxFrameInfos.SegCount = 1;   
 8002532:	4611      	mov	r1, r2
  __HAL_LOCK(heth);
 8002534:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002538:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2a00      	cmp	r2, #0
 800253e:	db01      	blt.n	8002544 <HAL_ETH_GetReceivedFrame_IT+0x28>
 8002540:	3c01      	subs	r4, #1
 8002542:	d106      	bne.n	8002552 <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8002544:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8002546:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8002548:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800254c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8002550:	e027      	b.n	80025a2 <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68dd      	ldr	r5, [r3, #12]
 8002556:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800255a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800255e:	d103      	bne.n	8002568 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002560:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8002562:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002564:	6285      	str	r5, [r0, #40]	; 0x28
 8002566:	e7e7      	b.n	8002538 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002568:	681e      	ldr	r6, [r3, #0]
 800256a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800256c:	f416 7f40 	tst.w	r6, #768	; 0x300
 8002570:	f102 0201 	add.w	r2, r2, #1
 8002574:	d101      	bne.n	800257a <HAL_ETH_GetReceivedFrame_IT+0x5e>
      (heth->RxFrameInfos.SegCount)++;
 8002576:	6382      	str	r2, [r0, #56]	; 0x38
 8002578:	e7f4      	b.n	8002564 <HAL_ETH_GetReceivedFrame_IT+0x48>
      if ((heth->RxFrameInfos.SegCount) == 1)
 800257a:	2a01      	cmp	r2, #1
      (heth->RxFrameInfos.SegCount)++;
 800257c:	e9c0 320d 	strd	r3, r2, [r0, #52]	; 0x34
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002580:	bf08      	it	eq
 8002582:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f3c3 430d 	ubfx	r3, r3, #16, #14
 800258a:	3b04      	subs	r3, #4
 800258c:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800258e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002590:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002592:	6285      	str	r5, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002594:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8002596:	2301      	movs	r3, #1
 8002598:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800259c:	2300      	movs	r3, #0
 800259e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	bd70      	pop	{r4, r5, r6, pc}

080025a6 <HAL_ETH_TxCpltCallback>:
 80025a6:	4770      	bx	lr

080025a8 <HAL_ETH_ErrorCallback>:
 80025a8:	4770      	bx	lr

080025aa <HAL_ETH_IRQHandler>:
{
 80025aa:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80025ac:	6802      	ldr	r2, [r0, #0]
 80025ae:	f241 0614 	movw	r6, #4116	; 0x1014
{
 80025b2:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80025b4:	5995      	ldr	r5, [r2, r6]
 80025b6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80025ba:	d021      	beq.n	8002600 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 80025bc:	f7fe fa50 	bl	8000a60 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80025c0:	6823      	ldr	r3, [r4, #0]
 80025c2:	2240      	movs	r2, #64	; 0x40
 80025c4:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80025cc:	2300      	movs	r3, #0
 80025ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	f241 0514 	movw	r5, #4116	; 0x1014
 80025d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025dc:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80025de:	595b      	ldr	r3, [r3, r5]
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	d50c      	bpl.n	80025fe <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 80025e4:	4620      	mov	r0, r4
 80025e6:	f7ff ffdf 	bl	80025a8 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80025ea:	6823      	ldr	r3, [r4, #0]
 80025ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025f0:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80025f8:	2300      	movs	r3, #0
 80025fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80025fe:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002600:	5993      	ldr	r3, [r2, r6]
 8002602:	07da      	lsls	r2, r3, #31
 8002604:	d5e5      	bpl.n	80025d2 <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 8002606:	f7ff ffce 	bl	80025a6 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800260a:	2301      	movs	r3, #1
 800260c:	6822      	ldr	r2, [r4, #0]
 800260e:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 8002610:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002614:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002618:	e7db      	b.n	80025d2 <HAL_ETH_IRQHandler+0x28>

0800261a <HAL_ETH_ReadPHYRegister>:
{
 800261a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800261c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8002620:	4606      	mov	r6, r0
 8002622:	4615      	mov	r5, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002624:	2b82      	cmp	r3, #130	; 0x82
 8002626:	d031      	beq.n	800268c <HAL_ETH_ReadPHYRegister+0x72>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002628:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800262a:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800262c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002630:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002634:	8a34      	ldrh	r4, [r6, #16]
  tmpreg = heth->Instance->MACMIIAR;
 8002636:	6803      	ldr	r3, [r0, #0]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002638:	02e4      	lsls	r4, r4, #11
  tmpreg = heth->Instance->MACMIIAR;
 800263a:	6918      	ldr	r0, [r3, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800263c:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800263e:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002642:	430c      	orrs	r4, r1
 8002644:	4304      	orrs	r4, r0
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002646:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 800264a:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 800264c:	f7ff fb28 	bl	8001ca0 <HAL_GetTick>
 8002650:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002652:	f014 0401 	ands.w	r4, r4, #1
 8002656:	d108      	bne.n	800266a <HAL_ETH_ReadPHYRegister+0x50>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002658:	6833      	ldr	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 800265a:	4620      	mov	r0, r4
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	b29b      	uxth	r3, r3
 8002660:	602b      	str	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 8002662:	2301      	movs	r3, #1
 8002664:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
  return HAL_OK;
 8002668:	e00c      	b.n	8002684 <HAL_ETH_ReadPHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800266a:	f7ff fb19 	bl	8001ca0 <HAL_GetTick>
 800266e:	1bc0      	subs	r0, r0, r7
 8002670:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002674:	d307      	bcc.n	8002686 <HAL_ETH_ReadPHYRegister+0x6c>
      heth->State= HAL_ETH_STATE_READY;
 8002676:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8002678:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800267a:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800267e:	2300      	movs	r3, #0
 8002680:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
}
 8002684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8002686:	6833      	ldr	r3, [r6, #0]
 8002688:	691c      	ldr	r4, [r3, #16]
 800268a:	e7e2      	b.n	8002652 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 800268c:	2002      	movs	r0, #2
 800268e:	e7f9      	b.n	8002684 <HAL_ETH_ReadPHYRegister+0x6a>

08002690 <HAL_ETH_WritePHYRegister>:
{
 8002690:	b570      	push	{r4, r5, r6, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002692:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8002696:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002698:	2b42      	cmp	r3, #66	; 0x42
 800269a:	d02f      	beq.n	80026fc <HAL_ETH_WritePHYRegister+0x6c>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800269c:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800269e:	0189      	lsls	r1, r1, #6
 80026a0:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80026a2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80026a6:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80026aa:	8a2c      	ldrh	r4, [r5, #16]
  tmpreg = heth->Instance->MACMIIAR;
 80026ac:	6803      	ldr	r3, [r0, #0]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80026ae:	02e4      	lsls	r4, r4, #11
  tmpreg = heth->Instance->MACMIIAR;
 80026b0:	6918      	ldr	r0, [r3, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80026b2:	b2a4      	uxth	r4, r4
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80026b4:	615a      	str	r2, [r3, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80026b6:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80026ba:	430c      	orrs	r4, r1
 80026bc:	4304      	orrs	r4, r0
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80026be:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIAR = tmpreg;
 80026c2:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 80026c4:	f7ff faec 	bl	8001ca0 <HAL_GetTick>
 80026c8:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026ca:	f014 0401 	ands.w	r4, r4, #1
 80026ce:	d104      	bne.n	80026da <HAL_ETH_WritePHYRegister+0x4a>
  heth->State = HAL_ETH_STATE_READY;
 80026d0:	2301      	movs	r3, #1
  return HAL_OK; 
 80026d2:	4620      	mov	r0, r4
  heth->State = HAL_ETH_STATE_READY;
 80026d4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 80026d8:	e00c      	b.n	80026f4 <HAL_ETH_WritePHYRegister+0x64>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80026da:	f7ff fae1 	bl	8001ca0 <HAL_GetTick>
 80026de:	1b80      	subs	r0, r0, r6
 80026e0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80026e4:	d307      	bcc.n	80026f6 <HAL_ETH_WritePHYRegister+0x66>
      heth->State= HAL_ETH_STATE_READY;
 80026e6:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 80026e8:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 80026ea:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80026ee:	2300      	movs	r3, #0
 80026f0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 80026f4:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 80026f6:	682b      	ldr	r3, [r5, #0]
 80026f8:	691c      	ldr	r4, [r3, #16]
 80026fa:	e7e6      	b.n	80026ca <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 80026fc:	2002      	movs	r0, #2
 80026fe:	e7f9      	b.n	80026f4 <HAL_ETH_WritePHYRegister+0x64>

08002700 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8002700:	2300      	movs	r3, #0
{
 8002702:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8002704:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8002706:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8002708:	2800      	cmp	r0, #0
 800270a:	f000 80de 	beq.w	80028ca <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 800270e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8002712:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002716:	b91b      	cbnz	r3, 8002720 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8002718:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800271c:	f7fe f93a 	bl	8000994 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002720:	4b6b      	ldr	r3, [pc, #428]	; (80028d0 <HAL_ETH_Init+0x1d0>)
 8002722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002724:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002728:	645a      	str	r2, [r3, #68]	; 0x44
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002734:	4b67      	ldr	r3, [pc, #412]	; (80028d4 <HAL_ETH_Init+0x1d4>)
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800273c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	6a21      	ldr	r1, [r4, #32]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002754:	f7ff faa4 	bl	8001ca0 <HAL_GetTick>
 8002758:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800275a:	6823      	ldr	r3, [r4, #0]
 800275c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	07d0      	lsls	r0, r2, #31
 8002764:	d41d      	bmi.n	80027a2 <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 8002766:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8002768:	f000 fdd6 	bl	8003318 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 800276c:	4b5a      	ldr	r3, [pc, #360]	; (80028d8 <HAL_ETH_Init+0x1d8>)
 800276e:	4a5b      	ldr	r2, [pc, #364]	; (80028dc <HAL_ETH_Init+0x1dc>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002770:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8002774:	4403      	add	r3, r0
 8002776:	4293      	cmp	r3, r2
 8002778:	d222      	bcs.n	80027c0 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800277a:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800277e:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002780:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002784:	2100      	movs	r1, #0
 8002786:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002788:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800278a:	f7ff ff81 	bl	8002690 <HAL_ETH_WritePHYRegister>
 800278e:	4605      	mov	r5, r0
 8002790:	b368      	cbz	r0, 80027ee <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 8002792:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8002794:	2101      	movs	r1, #1
 8002796:	4620      	mov	r0, r4
 8002798:	f7ff fd5e 	bl	8002258 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800279c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80027a0:	e00b      	b.n	80027ba <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80027a2:	f7ff fa7d 	bl	8001ca0 <HAL_GetTick>
 80027a6:	1b40      	subs	r0, r0, r5
 80027a8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80027ac:	d9d5      	bls.n	800275a <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80027ae:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 80027b0:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80027b2:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80027b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80027ba:	4628      	mov	r0, r5
 80027bc:	b003      	add	sp, #12
 80027be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80027c0:	4b47      	ldr	r3, [pc, #284]	; (80028e0 <HAL_ETH_Init+0x1e0>)
 80027c2:	4a48      	ldr	r2, [pc, #288]	; (80028e4 <HAL_ETH_Init+0x1e4>)
 80027c4:	4403      	add	r3, r0
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d802      	bhi.n	80027d0 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80027ca:	f045 050c 	orr.w	r5, r5, #12
 80027ce:	e7d6      	b.n	800277e <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80027d0:	4b45      	ldr	r3, [pc, #276]	; (80028e8 <HAL_ETH_Init+0x1e8>)
 80027d2:	4a46      	ldr	r2, [pc, #280]	; (80028ec <HAL_ETH_Init+0x1ec>)
 80027d4:	4403      	add	r3, r0
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d3d1      	bcc.n	800277e <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80027da:	4b45      	ldr	r3, [pc, #276]	; (80028f0 <HAL_ETH_Init+0x1f0>)
 80027dc:	4a45      	ldr	r2, [pc, #276]	; (80028f4 <HAL_ETH_Init+0x1f4>)
 80027de:	4403      	add	r3, r0
 80027e0:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80027e2:	bf94      	ite	ls
 80027e4:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80027e8:	f045 0510 	orrhi.w	r5, r5, #16
 80027ec:	e7c7      	b.n	800277e <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 80027ee:	f640 70ff 	movw	r0, #4095	; 0xfff
 80027f2:	f7ff fa5b 	bl	8001cac <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80027f6:	6863      	ldr	r3, [r4, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d054      	beq.n	80028a6 <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 80027fc:	f7ff fa50 	bl	8001ca0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002800:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002804:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002806:	466a      	mov	r2, sp
 8002808:	2101      	movs	r1, #1
 800280a:	4620      	mov	r0, r4
 800280c:	f7ff ff05 	bl	800261a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002810:	f7ff fa46 	bl	8001ca0 <HAL_GetTick>
 8002814:	1b80      	subs	r0, r0, r6
 8002816:	42b8      	cmp	r0, r7
 8002818:	d90b      	bls.n	8002832 <HAL_ETH_Init+0x132>
        ETH_MACDMAConfig(heth, err);
 800281a:	2101      	movs	r1, #1
 800281c:	4620      	mov	r0, r4
 800281e:	f7ff fd1b 	bl	8002258 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8002822:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8002824:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8002826:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800282a:	2300      	movs	r3, #0
 800282c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8002830:	e7c3      	b.n	80027ba <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002832:	9b00      	ldr	r3, [sp, #0]
 8002834:	0759      	lsls	r1, r3, #29
 8002836:	d5e6      	bpl.n	8002806 <HAL_ETH_Init+0x106>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002838:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800283c:	2100      	movs	r1, #0
 800283e:	4620      	mov	r0, r4
 8002840:	f7ff ff26 	bl	8002690 <HAL_ETH_WritePHYRegister>
 8002844:	2800      	cmp	r0, #0
 8002846:	d1a4      	bne.n	8002792 <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8002848:	f7ff fa2a 	bl	8001ca0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800284c:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002850:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002852:	466a      	mov	r2, sp
 8002854:	2101      	movs	r1, #1
 8002856:	4620      	mov	r0, r4
 8002858:	f7ff fedf 	bl	800261a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800285c:	f7ff fa20 	bl	8001ca0 <HAL_GetTick>
 8002860:	1b80      	subs	r0, r0, r6
 8002862:	42b8      	cmp	r0, r7
 8002864:	d8d9      	bhi.n	800281a <HAL_ETH_Init+0x11a>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002866:	9b00      	ldr	r3, [sp, #0]
 8002868:	069a      	lsls	r2, r3, #26
 800286a:	d5f2      	bpl.n	8002852 <HAL_ETH_Init+0x152>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800286c:	466a      	mov	r2, sp
 800286e:	211f      	movs	r1, #31
 8002870:	4620      	mov	r0, r4
 8002872:	f7ff fed2 	bl	800261a <HAL_ETH_ReadPHYRegister>
 8002876:	2800      	cmp	r0, #0
 8002878:	d18b      	bne.n	8002792 <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800287a:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800287c:	f013 0210 	ands.w	r2, r3, #16
 8002880:	bf18      	it	ne
 8002882:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002886:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_100M;
 8002888:	bf58      	it	pl
 800288a:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 800288e:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002890:	bf4c      	ite	mi
 8002892:	60a0      	strmi	r0, [r4, #8]
      (heth->Init).Speed = ETH_SPEED_100M;
 8002894:	60a3      	strpl	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8002896:	2100      	movs	r1, #0
 8002898:	4620      	mov	r0, r4
 800289a:	f7ff fcdd 	bl	8002258 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800289e:	2301      	movs	r3, #1
 80028a0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 80028a4:	e789      	b.n	80027ba <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80028a6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80028aa:	4629      	mov	r1, r5
 80028ac:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80028ae:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80028b0:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 80028b4:	b292      	uxth	r2, r2
 80028b6:	f7ff feeb 	bl	8002690 <HAL_ETH_WritePHYRegister>
 80028ba:	2800      	cmp	r0, #0
 80028bc:	f47f af69 	bne.w	8002792 <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 80028c0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80028c4:	f7ff f9f2 	bl	8001cac <HAL_Delay>
 80028c8:	e7e5      	b.n	8002896 <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 80028ca:	2501      	movs	r5, #1
 80028cc:	e775      	b.n	80027ba <HAL_ETH_Init+0xba>
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40013800 	.word	0x40013800
 80028d8:	feced300 	.word	0xfeced300
 80028dc:	00e4e1c0 	.word	0x00e4e1c0
 80028e0:	fde9f140 	.word	0xfde9f140
 80028e4:	017d783f 	.word	0x017d783f
 80028e8:	fc6c7900 	.word	0xfc6c7900
 80028ec:	02625a00 	.word	0x02625a00
 80028f0:	fa0a1f00 	.word	0xfa0a1f00
 80028f4:	02faf07f 	.word	0x02faf07f

080028f8 <HAL_ETH_Start>:
{  
 80028f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(heth);
 80028fa:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{  
 80028fe:	4604      	mov	r4, r0
 8002900:	2002      	movs	r0, #2
  __HAL_LOCK(heth);
 8002902:	2b01      	cmp	r3, #1
 8002904:	d033      	beq.n	800296e <HAL_ETH_Start+0x76>
 8002906:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 8002908:	2500      	movs	r5, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800290a:	6823      	ldr	r3, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800290c:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002910:	4630      	mov	r0, r6
  __IO uint32_t tmpreg = 0;
 8002912:	9501      	str	r5, [sp, #4]
  __HAL_LOCK(heth);
 8002914:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	f042 0208 	orr.w	r2, r2, #8
 800291e:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002924:	f7ff f9c2 	bl	8001cac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002928:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800292a:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8002930:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	f042 0204 	orr.w	r2, r2, #4
 8002938:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800293e:	f7ff f9b5 	bl	8001cac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002942:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 8002944:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 8002946:	9a00      	ldr	r2, [sp, #0]
 8002948:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 800294a:	f7ff fc6f 	bl	800222c <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800294e:	6822      	ldr	r2, [r4, #0]
 8002950:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8002954:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002956:	58d1      	ldr	r1, [r2, r3]
 8002958:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800295c:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800295e:	58d1      	ldr	r1, [r2, r3]
 8002960:	f041 0102 	orr.w	r1, r1, #2
 8002964:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8002966:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800296a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800296e:	b002      	add	sp, #8
 8002970:	bd70      	pop	{r4, r5, r6, pc}
	...

08002974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002978:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002b38 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800297e:	4a6c      	ldr	r2, [pc, #432]	; (8002b30 <HAL_GPIO_Init+0x1bc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002980:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8002b3c <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 8002984:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002986:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8002988:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800298a:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 800298e:	43ac      	bics	r4, r5
 8002990:	f040 80b4 	bne.w	8002afc <HAL_GPIO_Init+0x188>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002994:	684c      	ldr	r4, [r1, #4]
 8002996:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800299a:	2503      	movs	r5, #3
 800299c:	f024 0c10 	bic.w	ip, r4, #16
 80029a0:	fa05 f50e 	lsl.w	r5, r5, lr
 80029a4:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
 80029a8:	43ed      	mvns	r5, r5
 80029aa:	2f01      	cmp	r7, #1
 80029ac:	d811      	bhi.n	80029d2 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->OSPEEDR; 
 80029ae:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029b0:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80029b4:	68cf      	ldr	r7, [r1, #12]
 80029b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80029ba:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80029be:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80029c0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c2:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80029c6:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80029ca:	409f      	lsls	r7, r3
 80029cc:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80029d0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80029d2:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029d4:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029d8:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80029dc:	688f      	ldr	r7, [r1, #8]
 80029de:	fa07 f70e 	lsl.w	r7, r7, lr
 80029e2:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 80029e6:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e8:	d116      	bne.n	8002a18 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 80029ea:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029ee:	f003 0b07 	and.w	fp, r3, #7
 80029f2:	f04f 0c0f 	mov.w	ip, #15
 80029f6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80029fa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80029fe:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a02:	fa0c fc0b 	lsl.w	ip, ip, fp
 8002a06:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a0a:	690f      	ldr	r7, [r1, #16]
 8002a0c:	fa07 f70b 	lsl.w	r7, r7, fp
 8002a10:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8002a14:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8002a18:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a1a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a1c:	f004 0703 	and.w	r7, r4, #3
 8002a20:	fa07 fe0e 	lsl.w	lr, r7, lr
 8002a24:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 8002a28:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a2a:	00e5      	lsls	r5, r4, #3
 8002a2c:	d566      	bpl.n	8002afc <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8002a32:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a36:	f003 0c03 	and.w	ip, r3, #3
 8002a3a:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3e:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8002a42:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a46:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4a:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8002a4e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002a52:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8002a56:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8002a5a:	9501      	str	r5, [sp, #4]
 8002a5c:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a5e:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 8002a62:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a66:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a6a:	4d32      	ldr	r5, [pc, #200]	; (8002b34 <HAL_GPIO_Init+0x1c0>)
 8002a6c:	42a8      	cmp	r0, r5
 8002a6e:	d04c      	beq.n	8002b0a <HAL_GPIO_Init+0x196>
 8002a70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a74:	42a8      	cmp	r0, r5
 8002a76:	d04a      	beq.n	8002b0e <HAL_GPIO_Init+0x19a>
 8002a78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a7c:	42a8      	cmp	r0, r5
 8002a7e:	d048      	beq.n	8002b12 <HAL_GPIO_Init+0x19e>
 8002a80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a84:	42a8      	cmp	r0, r5
 8002a86:	d046      	beq.n	8002b16 <HAL_GPIO_Init+0x1a2>
 8002a88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a8c:	42a8      	cmp	r0, r5
 8002a8e:	d044      	beq.n	8002b1a <HAL_GPIO_Init+0x1a6>
 8002a90:	4548      	cmp	r0, r9
 8002a92:	d044      	beq.n	8002b1e <HAL_GPIO_Init+0x1aa>
 8002a94:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002a98:	42a8      	cmp	r0, r5
 8002a9a:	d042      	beq.n	8002b22 <HAL_GPIO_Init+0x1ae>
 8002a9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002aa0:	42a8      	cmp	r0, r5
 8002aa2:	d040      	beq.n	8002b26 <HAL_GPIO_Init+0x1b2>
 8002aa4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002aa8:	42a8      	cmp	r0, r5
 8002aaa:	d03e      	beq.n	8002b2a <HAL_GPIO_Init+0x1b6>
 8002aac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ab0:	42a8      	cmp	r0, r5
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2509      	moveq	r5, #9
 8002ab6:	250a      	movne	r5, #10
 8002ab8:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002abc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ac0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ac4:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8002ac6:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8002aca:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002acc:	bf0c      	ite	eq
 8002ace:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002ad0:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ad2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8002ad6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8002ad8:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8002ada:	bf0c      	ite	eq
 8002adc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002ade:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ae0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8002ae4:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002ae6:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002ae8:	bf0c      	ite	eq
 8002aea:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002aec:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aee:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8002af0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002af2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8002af4:	bf54      	ite	pl
 8002af6:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8002af8:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8002afa:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002afc:	3301      	adds	r3, #1
 8002afe:	2b10      	cmp	r3, #16
 8002b00:	f47f af40 	bne.w	8002984 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 8002b04:	b003      	add	sp, #12
 8002b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b0a:	2500      	movs	r5, #0
 8002b0c:	e7d4      	b.n	8002ab8 <HAL_GPIO_Init+0x144>
 8002b0e:	2501      	movs	r5, #1
 8002b10:	e7d2      	b.n	8002ab8 <HAL_GPIO_Init+0x144>
 8002b12:	2502      	movs	r5, #2
 8002b14:	e7d0      	b.n	8002ab8 <HAL_GPIO_Init+0x144>
 8002b16:	2503      	movs	r5, #3
 8002b18:	e7ce      	b.n	8002ab8 <HAL_GPIO_Init+0x144>
 8002b1a:	2504      	movs	r5, #4
 8002b1c:	e7cc      	b.n	8002ab8 <HAL_GPIO_Init+0x144>
 8002b1e:	2505      	movs	r5, #5
 8002b20:	e7ca      	b.n	8002ab8 <HAL_GPIO_Init+0x144>
 8002b22:	2506      	movs	r5, #6
 8002b24:	e7c8      	b.n	8002ab8 <HAL_GPIO_Init+0x144>
 8002b26:	2507      	movs	r5, #7
 8002b28:	e7c6      	b.n	8002ab8 <HAL_GPIO_Init+0x144>
 8002b2a:	2508      	movs	r5, #8
 8002b2c:	e7c4      	b.n	8002ab8 <HAL_GPIO_Init+0x144>
 8002b2e:	bf00      	nop
 8002b30:	40013c00 	.word	0x40013c00
 8002b34:	40020000 	.word	0x40020000
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40021400 	.word	0x40021400

08002b40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b40:	b10a      	cbz	r2, 8002b46 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b42:	6181      	str	r1, [r0, #24]
  }
}
 8002b44:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b46:	0409      	lsls	r1, r1, #16
 8002b48:	e7fb      	b.n	8002b42 <HAL_GPIO_WritePin+0x2>

08002b4a <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002b4a:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002b4c:	f8d1 c000 	ldr.w	ip, [r1]
{
 8002b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002b54:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002b56:	6804      	ldr	r4, [r0, #0]
 8002b58:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002b5a:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002b5e:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002b60:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002b62:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002b66:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002b6a:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002b6c:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002b70:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002b74:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002b76:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002b78:	68e0      	ldr	r0, [r4, #12]
 8002b7a:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8002b7e:	4430      	add	r0, r6
 8002b80:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002b84:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002b86:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002b88:	68e0      	ldr	r0, [r4, #12]
 8002b8a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002b8e:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002b90:	6898      	ldr	r0, [r3, #8]
 8002b92:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8002b96:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002b98:	6888      	ldr	r0, [r1, #8]
 8002b9a:	68e6      	ldr	r6, [r4, #12]
 8002b9c:	3001      	adds	r0, #1
 8002b9e:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002ba2:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002ba4:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002ba6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002baa:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002bac:	6918      	ldr	r0, [r3, #16]
 8002bae:	f020 0007 	bic.w	r0, r0, #7
 8002bb2:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002bb4:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002bb6:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002bb8:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002bbc:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002bc0:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002bc4:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8002bc8:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8002bcc:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8002bd0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8002bd4:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002bd6:	6958      	ldr	r0, [r3, #20]
 8002bd8:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002bdc:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002bde:	6948      	ldr	r0, [r1, #20]
 8002be0:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002be2:	69d8      	ldr	r0, [r3, #28]
 8002be4:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8002be8:	f020 0007 	bic.w	r0, r0, #7
 8002bec:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002bee:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8002bf2:	4305      	orrs	r5, r0
 8002bf4:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002bf6:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002bf8:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002bfa:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002bfe:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002c00:	b31e      	cbz	r6, 8002c4a <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002c02:	2e01      	cmp	r6, #1
 8002c04:	d023      	beq.n	8002c4e <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002c06:	1eb0      	subs	r0, r6, #2
 8002c08:	2802      	cmp	r0, #2
 8002c0a:	d922      	bls.n	8002c52 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002c0c:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8002c0e:	bf0c      	ite	eq
 8002c10:	2002      	moveq	r0, #2
 8002c12:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002c14:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002c16:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002c1a:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8002c1e:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002c20:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002c22:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002c24:	4345      	muls	r5, r0
 8002c26:	4378      	muls	r0, r7
 8002c28:	3003      	adds	r0, #3
 8002c2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002c2e:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002c30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c32:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8002c36:	f020 0007 	bic.w	r0, r0, #7
 8002c3a:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002c3c:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002c3e:	58a3      	ldr	r3, [r4, r2]
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	50a3      	str	r3, [r4, r2]
}
 8002c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8002c4a:	2004      	movs	r0, #4
 8002c4c:	e7e2      	b.n	8002c14 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8002c4e:	2003      	movs	r0, #3
 8002c50:	e7e0      	b.n	8002c14 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8002c52:	2002      	movs	r0, #2
 8002c54:	e7de      	b.n	8002c14 <LTDC_SetConfig+0xca>

08002c56 <HAL_LTDC_MspInit>:
}
 8002c56:	4770      	bx	lr

08002c58 <HAL_LTDC_Init>:
{
 8002c58:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	d063      	beq.n	8002d28 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002c60:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8002c64:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c68:	b91b      	cbnz	r3, 8002c72 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8002c6a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002c6e:	f7ff fff2 	bl	8002c56 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c72:	2302      	movs	r3, #2
 8002c74:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002c78:	6823      	ldr	r3, [r4, #0]
 8002c7a:	699a      	ldr	r2, [r3, #24]
 8002c7c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002c80:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c82:	6999      	ldr	r1, [r3, #24]
 8002c84:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8002c88:	4302      	orrs	r2, r0
 8002c8a:	68e0      	ldr	r0, [r4, #12]
 8002c8c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002c8e:	6920      	ldr	r0, [r4, #16]
 8002c90:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002c92:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c94:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002c96:	4925      	ldr	r1, [pc, #148]	; (8002d2c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c98:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002ca6:	69a0      	ldr	r0, [r4, #24]
 8002ca8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002caa:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002cac:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	400a      	ands	r2, r1
 8002cb2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002cba:	6a20      	ldr	r0, [r4, #32]
 8002cbc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002cbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002cc0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002cce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002cd0:	4302      	orrs	r2, r0
 8002cd2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	4011      	ands	r1, r2
 8002cd8:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002cda:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002ce2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002ce8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002cea:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002cee:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002cf2:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002cf6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002cf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cfa:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002d04:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002d08:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d0e:	f042 0206 	orr.w	r2, r2, #6
 8002d12:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8002d1c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002d1e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002d22:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8002d26:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002d28:	2001      	movs	r0, #1
 8002d2a:	e7fc      	b.n	8002d26 <HAL_LTDC_Init+0xce>
 8002d2c:	f000f800 	.word	0xf000f800

08002d30 <HAL_LTDC_ConfigLayer>:
{
 8002d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8002d34:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8002d38:	4606      	mov	r6, r0
 8002d3a:	460f      	mov	r7, r1
 8002d3c:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	f04f 0002 	mov.w	r0, #2
 8002d44:	d01f      	beq.n	8002d86 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002d46:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8002d48:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002d4c:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d4e:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002d52:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8002d56:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002d5a:	3438      	adds	r4, #56	; 0x38
 8002d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d68:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002d6a:	4630      	mov	r0, r6
 8002d6c:	4662      	mov	r2, ip
 8002d6e:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002d70:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002d72:	f7ff feea 	bl	8002b4a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002d76:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8002d78:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002d7a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002d7e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002d82:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8002d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002d8a <HAL_LTDC_GetState>:
  return hltdc->State;
 8002d8a:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8002d92:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d96:	4c19      	ldr	r4, [pc, #100]	; (8002dfc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dae:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002db0:	f7fe ff76 	bl	8001ca0 <HAL_GetTick>
 8002db4:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002db6:	6863      	ldr	r3, [r4, #4]
 8002db8:	03da      	lsls	r2, r3, #15
 8002dba:	d50c      	bpl.n	8002dd6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002dbc:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002dbe:	4d0f      	ldr	r5, [pc, #60]	; (8002dfc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc4:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002dc6:	f7fe ff6b 	bl	8001ca0 <HAL_GetTick>
 8002dca:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002dcc:	686b      	ldr	r3, [r5, #4]
 8002dce:	039b      	lsls	r3, r3, #14
 8002dd0:	d50a      	bpl.n	8002de8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	e006      	b.n	8002de4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002dd6:	f7fe ff63 	bl	8001ca0 <HAL_GetTick>
 8002dda:	1b40      	subs	r0, r0, r5
 8002ddc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002de0:	d9e9      	bls.n	8002db6 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8002de2:	2003      	movs	r0, #3
}
 8002de4:	b003      	add	sp, #12
 8002de6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002de8:	f7fe ff5a 	bl	8001ca0 <HAL_GetTick>
 8002dec:	1b00      	subs	r0, r0, r4
 8002dee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002df2:	d9eb      	bls.n	8002dcc <HAL_PWREx_EnableOverDrive+0x3c>
 8002df4:	e7f5      	b.n	8002de2 <HAL_PWREx_EnableOverDrive+0x52>
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40007000 	.word	0x40007000

08002e00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e04:	4604      	mov	r4, r0
 8002e06:	b340      	cbz	r0, 8002e5a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e08:	6803      	ldr	r3, [r0, #0]
 8002e0a:	07d8      	lsls	r0, r3, #31
 8002e0c:	d410      	bmi.n	8002e30 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0e:	6823      	ldr	r3, [r4, #0]
 8002e10:	0799      	lsls	r1, r3, #30
 8002e12:	d464      	bmi.n	8002ede <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	0719      	lsls	r1, r3, #28
 8002e18:	f100 80aa 	bmi.w	8002f70 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	075a      	lsls	r2, r3, #29
 8002e20:	f100 80cb 	bmi.w	8002fba <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e24:	69a2      	ldr	r2, [r4, #24]
 8002e26:	2a00      	cmp	r2, #0
 8002e28:	f040 8134 	bne.w	8003094 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	e02b      	b.n	8002e88 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e30:	4b96      	ldr	r3, [pc, #600]	; (800308c <HAL_RCC_OscConfig+0x28c>)
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	f002 020c 	and.w	r2, r2, #12
 8002e38:	2a04      	cmp	r2, #4
 8002e3a:	d007      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	f002 020c 	and.w	r2, r2, #12
 8002e42:	2a08      	cmp	r2, #8
 8002e44:	d10b      	bne.n	8002e5e <HAL_RCC_OscConfig+0x5e>
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	0252      	lsls	r2, r2, #9
 8002e4a:	d508      	bpl.n	8002e5e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	4b8f      	ldr	r3, [pc, #572]	; (800308c <HAL_RCC_OscConfig+0x28c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	039b      	lsls	r3, r3, #14
 8002e52:	d5dc      	bpl.n	8002e0e <HAL_RCC_OscConfig+0xe>
 8002e54:	6863      	ldr	r3, [r4, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1d9      	bne.n	8002e0e <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	e014      	b.n	8002e88 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5e:	6862      	ldr	r2, [r4, #4]
 8002e60:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002e64:	d113      	bne.n	8002e8e <HAL_RCC_OscConfig+0x8e>
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e6c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e6e:	f7fe ff17 	bl	8001ca0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	4e86      	ldr	r6, [pc, #536]	; (800308c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002e74:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	6833      	ldr	r3, [r6, #0]
 8002e78:	039f      	lsls	r7, r3, #14
 8002e7a:	d4c8      	bmi.n	8002e0e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e7c:	f7fe ff10 	bl	8001ca0 <HAL_GetTick>
 8002e80:	1b40      	subs	r0, r0, r5
 8002e82:	2864      	cmp	r0, #100	; 0x64
 8002e84:	d9f7      	bls.n	8002e76 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8002e86:	2003      	movs	r0, #3
}
 8002e88:	b002      	add	sp, #8
 8002e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e8e:	4d7f      	ldr	r5, [pc, #508]	; (800308c <HAL_RCC_OscConfig+0x28c>)
 8002e90:	682b      	ldr	r3, [r5, #0]
 8002e92:	b992      	cbnz	r2, 8002eba <HAL_RCC_OscConfig+0xba>
 8002e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e98:	602b      	str	r3, [r5, #0]
 8002e9a:	682b      	ldr	r3, [r5, #0]
 8002e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ea2:	f7fe fefd 	bl	8001ca0 <HAL_GetTick>
 8002ea6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea8:	682b      	ldr	r3, [r5, #0]
 8002eaa:	0398      	lsls	r0, r3, #14
 8002eac:	d5af      	bpl.n	8002e0e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eae:	f7fe fef7 	bl	8001ca0 <HAL_GetTick>
 8002eb2:	1b80      	subs	r0, r0, r6
 8002eb4:	2864      	cmp	r0, #100	; 0x64
 8002eb6:	d9f7      	bls.n	8002ea8 <HAL_RCC_OscConfig+0xa8>
 8002eb8:	e7e5      	b.n	8002e86 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eba:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_OscConfig+0xd0>
 8002ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec4:	602b      	str	r3, [r5, #0]
 8002ec6:	682b      	ldr	r3, [r5, #0]
 8002ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ecc:	602b      	str	r3, [r5, #0]
 8002ece:	e7ce      	b.n	8002e6e <HAL_RCC_OscConfig+0x6e>
 8002ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed4:	602b      	str	r3, [r5, #0]
 8002ed6:	682b      	ldr	r3, [r5, #0]
 8002ed8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002edc:	e7f6      	b.n	8002ecc <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ede:	4b6b      	ldr	r3, [pc, #428]	; (800308c <HAL_RCC_OscConfig+0x28c>)
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	f012 0f0c 	tst.w	r2, #12
 8002ee6:	d007      	beq.n	8002ef8 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	f002 020c 	and.w	r2, r2, #12
 8002eee:	2a08      	cmp	r2, #8
 8002ef0:	d111      	bne.n	8002f16 <HAL_RCC_OscConfig+0x116>
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	0251      	lsls	r1, r2, #9
 8002ef6:	d40e      	bmi.n	8002f16 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef8:	4b64      	ldr	r3, [pc, #400]	; (800308c <HAL_RCC_OscConfig+0x28c>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	0792      	lsls	r2, r2, #30
 8002efe:	d502      	bpl.n	8002f06 <HAL_RCC_OscConfig+0x106>
 8002f00:	68e2      	ldr	r2, [r4, #12]
 8002f02:	2a01      	cmp	r2, #1
 8002f04:	d1a9      	bne.n	8002e5a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	6921      	ldr	r1, [r4, #16]
 8002f0a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002f0e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002f12:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f14:	e77e      	b.n	8002e14 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f16:	68e2      	ldr	r2, [r4, #12]
 8002f18:	b1c2      	cbz	r2, 8002f4c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8002f1a:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1c:	4d5b      	ldr	r5, [pc, #364]	; (800308c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f24:	f7fe febc 	bl	8001ca0 <HAL_GetTick>
 8002f28:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2a:	682b      	ldr	r3, [r5, #0]
 8002f2c:	079f      	lsls	r7, r3, #30
 8002f2e:	d507      	bpl.n	8002f40 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f30:	682b      	ldr	r3, [r5, #0]
 8002f32:	6922      	ldr	r2, [r4, #16]
 8002f34:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002f38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002f3c:	602b      	str	r3, [r5, #0]
 8002f3e:	e769      	b.n	8002e14 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f40:	f7fe feae 	bl	8001ca0 <HAL_GetTick>
 8002f44:	1b80      	subs	r0, r0, r6
 8002f46:	2802      	cmp	r0, #2
 8002f48:	d9ef      	bls.n	8002f2a <HAL_RCC_OscConfig+0x12a>
 8002f4a:	e79c      	b.n	8002e86 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8002f4c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4e:	4e4f      	ldr	r6, [pc, #316]	; (800308c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8002f50:	f022 0201 	bic.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f56:	f7fe fea3 	bl	8001ca0 <HAL_GetTick>
 8002f5a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5c:	6833      	ldr	r3, [r6, #0]
 8002f5e:	0798      	lsls	r0, r3, #30
 8002f60:	f57f af58 	bpl.w	8002e14 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f64:	f7fe fe9c 	bl	8001ca0 <HAL_GetTick>
 8002f68:	1b40      	subs	r0, r0, r5
 8002f6a:	2802      	cmp	r0, #2
 8002f6c:	d9f6      	bls.n	8002f5c <HAL_RCC_OscConfig+0x15c>
 8002f6e:	e78a      	b.n	8002e86 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f70:	6963      	ldr	r3, [r4, #20]
 8002f72:	4d46      	ldr	r5, [pc, #280]	; (800308c <HAL_RCC_OscConfig+0x28c>)
 8002f74:	b183      	cbz	r3, 8002f98 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8002f76:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002f7e:	f7fe fe8f 	bl	8001ca0 <HAL_GetTick>
 8002f82:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f84:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002f86:	079b      	lsls	r3, r3, #30
 8002f88:	f53f af48 	bmi.w	8002e1c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8c:	f7fe fe88 	bl	8001ca0 <HAL_GetTick>
 8002f90:	1b80      	subs	r0, r0, r6
 8002f92:	2802      	cmp	r0, #2
 8002f94:	d9f6      	bls.n	8002f84 <HAL_RCC_OscConfig+0x184>
 8002f96:	e776      	b.n	8002e86 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8002f98:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002f9a:	f023 0301 	bic.w	r3, r3, #1
 8002f9e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002fa0:	f7fe fe7e 	bl	8001ca0 <HAL_GetTick>
 8002fa4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002fa8:	079f      	lsls	r7, r3, #30
 8002faa:	f57f af37 	bpl.w	8002e1c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fae:	f7fe fe77 	bl	8001ca0 <HAL_GetTick>
 8002fb2:	1b80      	subs	r0, r0, r6
 8002fb4:	2802      	cmp	r0, #2
 8002fb6:	d9f6      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x1a6>
 8002fb8:	e765      	b.n	8002e86 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fba:	4b34      	ldr	r3, [pc, #208]	; (800308c <HAL_RCC_OscConfig+0x28c>)
 8002fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fbe:	00d0      	lsls	r0, r2, #3
 8002fc0:	d427      	bmi.n	8003012 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8002fc4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	9301      	str	r3, [sp, #4]
 8002fd4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd6:	4d2e      	ldr	r5, [pc, #184]	; (8003090 <HAL_RCC_OscConfig+0x290>)
 8002fd8:	682b      	ldr	r3, [r5, #0]
 8002fda:	05d9      	lsls	r1, r3, #23
 8002fdc:	d51b      	bpl.n	8003016 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fde:	68a3      	ldr	r3, [r4, #8]
 8002fe0:	4d2a      	ldr	r5, [pc, #168]	; (800308c <HAL_RCC_OscConfig+0x28c>)
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d127      	bne.n	8003036 <HAL_RCC_OscConfig+0x236>
 8002fe6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002ff2:	f7fe fe55 	bl	8001ca0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff6:	4e25      	ldr	r6, [pc, #148]	; (800308c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002ff8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffa:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002ffc:	079b      	lsls	r3, r3, #30
 8002ffe:	d53f      	bpl.n	8003080 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8003000:	2f00      	cmp	r7, #0
 8003002:	f43f af0f 	beq.w	8002e24 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003006:	4a21      	ldr	r2, [pc, #132]	; (800308c <HAL_RCC_OscConfig+0x28c>)
 8003008:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800300a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800300e:	6413      	str	r3, [r2, #64]	; 0x40
 8003010:	e708      	b.n	8002e24 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8003012:	2700      	movs	r7, #0
 8003014:	e7df      	b.n	8002fd6 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8003016:	682b      	ldr	r3, [r5, #0]
 8003018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800301e:	f7fe fe3f 	bl	8001ca0 <HAL_GetTick>
 8003022:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003024:	682b      	ldr	r3, [r5, #0]
 8003026:	05da      	lsls	r2, r3, #23
 8003028:	d4d9      	bmi.n	8002fde <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302a:	f7fe fe39 	bl	8001ca0 <HAL_GetTick>
 800302e:	1b80      	subs	r0, r0, r6
 8003030:	2864      	cmp	r0, #100	; 0x64
 8003032:	d9f7      	bls.n	8003024 <HAL_RCC_OscConfig+0x224>
 8003034:	e727      	b.n	8002e86 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003036:	b9ab      	cbnz	r3, 8003064 <HAL_RCC_OscConfig+0x264>
 8003038:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	672b      	str	r3, [r5, #112]	; 0x70
 8003044:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003046:	f023 0304 	bic.w	r3, r3, #4
 800304a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800304c:	f7fe fe28 	bl	8001ca0 <HAL_GetTick>
 8003050:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003052:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003054:	0798      	lsls	r0, r3, #30
 8003056:	d5d3      	bpl.n	8003000 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003058:	f7fe fe22 	bl	8001ca0 <HAL_GetTick>
 800305c:	1b80      	subs	r0, r0, r6
 800305e:	4540      	cmp	r0, r8
 8003060:	d9f7      	bls.n	8003052 <HAL_RCC_OscConfig+0x252>
 8003062:	e710      	b.n	8002e86 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003064:	2b05      	cmp	r3, #5
 8003066:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003068:	d103      	bne.n	8003072 <HAL_RCC_OscConfig+0x272>
 800306a:	f043 0304 	orr.w	r3, r3, #4
 800306e:	672b      	str	r3, [r5, #112]	; 0x70
 8003070:	e7b9      	b.n	8002fe6 <HAL_RCC_OscConfig+0x1e6>
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	672b      	str	r3, [r5, #112]	; 0x70
 8003078:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800307a:	f023 0304 	bic.w	r3, r3, #4
 800307e:	e7b5      	b.n	8002fec <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7fe fe0e 	bl	8001ca0 <HAL_GetTick>
 8003084:	1b40      	subs	r0, r0, r5
 8003086:	4540      	cmp	r0, r8
 8003088:	d9b7      	bls.n	8002ffa <HAL_RCC_OscConfig+0x1fa>
 800308a:	e6fc      	b.n	8002e86 <HAL_RCC_OscConfig+0x86>
 800308c:	40023800 	.word	0x40023800
 8003090:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003094:	4d38      	ldr	r5, [pc, #224]	; (8003178 <HAL_RCC_OscConfig+0x378>)
 8003096:	68ab      	ldr	r3, [r5, #8]
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b08      	cmp	r3, #8
 800309e:	d041      	beq.n	8003124 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 80030a0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80030a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030aa:	d12e      	bne.n	800310a <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80030ac:	f7fe fdf8 	bl	8001ca0 <HAL_GetTick>
 80030b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	682b      	ldr	r3, [r5, #0]
 80030b4:	0199      	lsls	r1, r3, #6
 80030b6:	d422      	bmi.n	80030fe <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	1e5a      	subs	r2, r3, #1
 80030be:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80030c2:	430b      	orrs	r3, r1
 80030c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80030c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80030ca:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80030ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80030d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80030d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030d8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80030da:	682b      	ldr	r3, [r5, #0]
 80030dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80030e2:	f7fe fddd 	bl	8001ca0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e6:	4d24      	ldr	r5, [pc, #144]	; (8003178 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 80030e8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ea:	682b      	ldr	r3, [r5, #0]
 80030ec:	019a      	lsls	r2, r3, #6
 80030ee:	f53f ae9d 	bmi.w	8002e2c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fe fdd5 	bl	8001ca0 <HAL_GetTick>
 80030f6:	1b00      	subs	r0, r0, r4
 80030f8:	2802      	cmp	r0, #2
 80030fa:	d9f6      	bls.n	80030ea <HAL_RCC_OscConfig+0x2ea>
 80030fc:	e6c3      	b.n	8002e86 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fe:	f7fe fdcf 	bl	8001ca0 <HAL_GetTick>
 8003102:	1b80      	subs	r0, r0, r6
 8003104:	2802      	cmp	r0, #2
 8003106:	d9d4      	bls.n	80030b2 <HAL_RCC_OscConfig+0x2b2>
 8003108:	e6bd      	b.n	8002e86 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800310a:	f7fe fdc9 	bl	8001ca0 <HAL_GetTick>
 800310e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003110:	682b      	ldr	r3, [r5, #0]
 8003112:	019b      	lsls	r3, r3, #6
 8003114:	f57f ae8a 	bpl.w	8002e2c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003118:	f7fe fdc2 	bl	8001ca0 <HAL_GetTick>
 800311c:	1b00      	subs	r0, r0, r4
 800311e:	2802      	cmp	r0, #2
 8003120:	d9f6      	bls.n	8003110 <HAL_RCC_OscConfig+0x310>
 8003122:	e6b0      	b.n	8002e86 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003124:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8003126:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003128:	f43f ae97 	beq.w	8002e5a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003130:	69e1      	ldr	r1, [r4, #28]
 8003132:	428a      	cmp	r2, r1
 8003134:	f47f ae91 	bne.w	8002e5a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003138:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313c:	6a21      	ldr	r1, [r4, #32]
 800313e:	428a      	cmp	r2, r1
 8003140:	f47f ae8b 	bne.w	8002e5a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003144:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003148:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800314a:	401a      	ands	r2, r3
 800314c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003150:	f47f ae83 	bne.w	8002e5a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003154:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003156:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800315a:	0852      	lsrs	r2, r2, #1
 800315c:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800315e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003162:	f47f ae7a 	bne.w	8002e5a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003166:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800316a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800316c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003170:	f43f ae5c 	beq.w	8002e2c <HAL_RCC_OscConfig+0x2c>
 8003174:	e671      	b.n	8002e5a <HAL_RCC_OscConfig+0x5a>
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800

0800317c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800317c:	4913      	ldr	r1, [pc, #76]	; (80031cc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800317e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003180:	688b      	ldr	r3, [r1, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b04      	cmp	r3, #4
 8003188:	d01b      	beq.n	80031c2 <HAL_RCC_GetSysClockFreq+0x46>
 800318a:	2b08      	cmp	r3, #8
 800318c:	d11b      	bne.n	80031c6 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800318e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003190:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003192:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003194:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003198:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80031a0:	bf1a      	itte	ne
 80031a2:	480b      	ldrne	r0, [pc, #44]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x54>)
 80031a4:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a6:	480b      	ldreq	r0, [pc, #44]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x58>)
 80031a8:	fba1 0100 	umull	r0, r1, r1, r0
 80031ac:	f7fd f898 	bl	80002e0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_RCC_GetSysClockFreq+0x50>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80031b8:	3301      	adds	r3, #1
 80031ba:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80031bc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80031c0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031c2:	4803      	ldr	r0, [pc, #12]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x54>)
 80031c4:	e7fc      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80031c6:	4803      	ldr	r0, [pc, #12]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80031c8:	e7fa      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x44>
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800
 80031d0:	017d7840 	.word	0x017d7840
 80031d4:	00f42400 	.word	0x00f42400

080031d8 <HAL_RCC_ClockConfig>:
{
 80031d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031dc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80031de:	4604      	mov	r4, r0
 80031e0:	b910      	cbnz	r0, 80031e8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80031e2:	2001      	movs	r0, #1
}
 80031e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e8:	4a46      	ldr	r2, [pc, #280]	; (8003304 <HAL_RCC_ClockConfig+0x12c>)
 80031ea:	6813      	ldr	r3, [r2, #0]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	428b      	cmp	r3, r1
 80031f2:	d328      	bcc.n	8003246 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f4:	6822      	ldr	r2, [r4, #0]
 80031f6:	0797      	lsls	r7, r2, #30
 80031f8:	d430      	bmi.n	800325c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031fa:	07d0      	lsls	r0, r2, #31
 80031fc:	d444      	bmi.n	8003288 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031fe:	4a41      	ldr	r2, [pc, #260]	; (8003304 <HAL_RCC_ClockConfig+0x12c>)
 8003200:	6813      	ldr	r3, [r2, #0]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	42ab      	cmp	r3, r5
 8003208:	d867      	bhi.n	80032da <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320a:	6822      	ldr	r2, [r4, #0]
 800320c:	0751      	lsls	r1, r2, #29
 800320e:	d470      	bmi.n	80032f2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003210:	0713      	lsls	r3, r2, #28
 8003212:	d507      	bpl.n	8003224 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003214:	4a3c      	ldr	r2, [pc, #240]	; (8003308 <HAL_RCC_ClockConfig+0x130>)
 8003216:	6921      	ldr	r1, [r4, #16]
 8003218:	6893      	ldr	r3, [r2, #8]
 800321a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800321e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003222:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003224:	f7ff ffaa 	bl	800317c <HAL_RCC_GetSysClockFreq>
 8003228:	4b37      	ldr	r3, [pc, #220]	; (8003308 <HAL_RCC_ClockConfig+0x130>)
 800322a:	4a38      	ldr	r2, [pc, #224]	; (800330c <HAL_RCC_ClockConfig+0x134>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003232:	5cd3      	ldrb	r3, [r2, r3]
 8003234:	40d8      	lsrs	r0, r3
 8003236:	4b36      	ldr	r3, [pc, #216]	; (8003310 <HAL_RCC_ClockConfig+0x138>)
 8003238:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800323a:	4b36      	ldr	r3, [pc, #216]	; (8003314 <HAL_RCC_ClockConfig+0x13c>)
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	f7fd fedd 	bl	8000ffc <HAL_InitTick>
  return HAL_OK;
 8003242:	2000      	movs	r0, #0
 8003244:	e7ce      	b.n	80031e4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	6813      	ldr	r3, [r2, #0]
 8003248:	f023 030f 	bic.w	r3, r3, #15
 800324c:	430b      	orrs	r3, r1
 800324e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003250:	6813      	ldr	r3, [r2, #0]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	428b      	cmp	r3, r1
 8003258:	d1c3      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xa>
 800325a:	e7cb      	b.n	80031f4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	f012 0f04 	tst.w	r2, #4
 8003260:	4b29      	ldr	r3, [pc, #164]	; (8003308 <HAL_RCC_ClockConfig+0x130>)
 8003262:	d003      	beq.n	800326c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003264:	6899      	ldr	r1, [r3, #8]
 8003266:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 800326a:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326c:	0716      	lsls	r6, r2, #28
 800326e:	d503      	bpl.n	8003278 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003270:	6899      	ldr	r1, [r3, #8]
 8003272:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8003276:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003278:	4923      	ldr	r1, [pc, #140]	; (8003308 <HAL_RCC_ClockConfig+0x130>)
 800327a:	68a0      	ldr	r0, [r4, #8]
 800327c:	688b      	ldr	r3, [r1, #8]
 800327e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003282:	4303      	orrs	r3, r0
 8003284:	608b      	str	r3, [r1, #8]
 8003286:	e7b8      	b.n	80031fa <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003288:	6861      	ldr	r1, [r4, #4]
 800328a:	4b1f      	ldr	r3, [pc, #124]	; (8003308 <HAL_RCC_ClockConfig+0x130>)
 800328c:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003290:	d11b      	bne.n	80032ca <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003296:	d0a4      	beq.n	80031e2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003298:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	4f1a      	ldr	r7, [pc, #104]	; (8003308 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a0:	f022 0203 	bic.w	r2, r2, #3
 80032a4:	430a      	orrs	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80032a8:	f7fe fcfa 	bl	8001ca0 <HAL_GetTick>
 80032ac:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	6862      	ldr	r2, [r4, #4]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80032ba:	d0a0      	beq.n	80031fe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032bc:	f7fe fcf0 	bl	8001ca0 <HAL_GetTick>
 80032c0:	1b80      	subs	r0, r0, r6
 80032c2:	4540      	cmp	r0, r8
 80032c4:	d9f3      	bls.n	80032ae <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80032c6:	2003      	movs	r0, #3
 80032c8:	e78c      	b.n	80031e4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ca:	2902      	cmp	r1, #2
 80032cc:	d102      	bne.n	80032d4 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ce:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80032d2:	e7e0      	b.n	8003296 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	f012 0f02 	tst.w	r2, #2
 80032d8:	e7dd      	b.n	8003296 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	6813      	ldr	r3, [r2, #0]
 80032dc:	f023 030f 	bic.w	r3, r3, #15
 80032e0:	432b      	orrs	r3, r5
 80032e2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e4:	6813      	ldr	r3, [r2, #0]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	42ab      	cmp	r3, r5
 80032ec:	f47f af79 	bne.w	80031e2 <HAL_RCC_ClockConfig+0xa>
 80032f0:	e78b      	b.n	800320a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032f2:	4905      	ldr	r1, [pc, #20]	; (8003308 <HAL_RCC_ClockConfig+0x130>)
 80032f4:	68e0      	ldr	r0, [r4, #12]
 80032f6:	688b      	ldr	r3, [r1, #8]
 80032f8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80032fc:	4303      	orrs	r3, r0
 80032fe:	608b      	str	r3, [r1, #8]
 8003300:	e786      	b.n	8003210 <HAL_RCC_ClockConfig+0x38>
 8003302:	bf00      	nop
 8003304:	40023c00 	.word	0x40023c00
 8003308:	40023800 	.word	0x40023800
 800330c:	08012904 	.word	0x08012904
 8003310:	2000002c 	.word	0x2000002c
 8003314:	20000034 	.word	0x20000034

08003318 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003318:	4b01      	ldr	r3, [pc, #4]	; (8003320 <HAL_RCC_GetHCLKFreq+0x8>)
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	2000002c 	.word	0x2000002c

08003324 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003326:	4a05      	ldr	r2, [pc, #20]	; (800333c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800332e:	5cd3      	ldrb	r3, [r2, r3]
 8003330:	4a03      	ldr	r2, [pc, #12]	; (8003340 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003332:	6810      	ldr	r0, [r2, #0]
}
 8003334:	40d8      	lsrs	r0, r3
 8003336:	4770      	bx	lr
 8003338:	40023800 	.word	0x40023800
 800333c:	08012914 	.word	0x08012914
 8003340:	2000002c 	.word	0x2000002c

08003344 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003344:	230f      	movs	r3, #15
 8003346:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_RCC_GetClockConfig+0x34>)
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	f002 0203 	and.w	r2, r2, #3
 8003350:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003358:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003360:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	08db      	lsrs	r3, r3, #3
 8003366:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800336a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <HAL_RCC_GetClockConfig+0x38>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	600b      	str	r3, [r1, #0]
}
 8003376:	4770      	bx	lr
 8003378:	40023800 	.word	0x40023800
 800337c:	40023c00 	.word	0x40023c00

08003380 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003380:	6803      	ldr	r3, [r0, #0]
{
 8003382:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003386:	f013 0601 	ands.w	r6, r3, #1
{
 800338a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800338c:	d00b      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800338e:	4aaa      	ldr	r2, [pc, #680]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003390:	6891      	ldr	r1, [r2, #8]
 8003392:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8003396:	6091      	str	r1, [r2, #8]
 8003398:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800339a:	6891      	ldr	r1, [r2, #8]
 800339c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800339e:	fab6 f686 	clz	r6, r6
 80033a2:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033a4:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033a6:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80033aa:	d012      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033ac:	49a2      	ldr	r1, [pc, #648]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80033ae:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80033b0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033b4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033b8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80033bc:	bf08      	it	eq
 80033be:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033c0:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033c4:	bf16      	itet	ne
 80033c6:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80033ca:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033cc:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033ce:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033d2:	02df      	lsls	r7, r3, #11
 80033d4:	d510      	bpl.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033d6:	4898      	ldr	r0, [pc, #608]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80033d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80033da:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033de:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033e2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80033e6:	ea42 0201 	orr.w	r2, r2, r1
 80033ea:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033ee:	f000 8184 	beq.w	80036fa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80033f2:	2900      	cmp	r1, #0
 80033f4:	bf08      	it	eq
 80033f6:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80033f8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80033fc:	bf18      	it	ne
 80033fe:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003400:	0698      	lsls	r0, r3, #26
 8003402:	d531      	bpl.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003404:	4b8c      	ldr	r3, [pc, #560]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003406:	4f8d      	ldr	r7, [pc, #564]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	9301      	str	r3, [sp, #4]
 8003418:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003422:	f7fe fc3d 	bl	8001ca0 <HAL_GetTick>
 8003426:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	05d9      	lsls	r1, r3, #23
 800342c:	f140 8167 	bpl.w	80036fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003430:	4f81      	ldr	r7, [pc, #516]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003432:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003434:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003438:	f040 816c 	bne.w	8003714 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800343c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800343e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003442:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003446:	4a7c      	ldr	r2, [pc, #496]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003448:	f040 818a 	bne.w	8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800344c:	6891      	ldr	r1, [r2, #8]
 800344e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8003452:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003456:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800345a:	4301      	orrs	r1, r0
 800345c:	6091      	str	r1, [r2, #8]
 800345e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003462:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003464:	430b      	orrs	r3, r1
 8003466:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	06d8      	lsls	r0, r3, #27
 800346c:	d50c      	bpl.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800346e:	4a72      	ldr	r2, [pc, #456]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003470:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003474:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003478:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800347c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003480:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003482:	4301      	orrs	r1, r0
 8003484:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003488:	0459      	lsls	r1, r3, #17
 800348a:	d508      	bpl.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800348c:	496a      	ldr	r1, [pc, #424]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800348e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003490:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003494:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003498:	4302      	orrs	r2, r0
 800349a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800349e:	041a      	lsls	r2, r3, #16
 80034a0:	d508      	bpl.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034a2:	4965      	ldr	r1, [pc, #404]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80034a4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80034a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80034aa:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80034ae:	4302      	orrs	r2, r0
 80034b0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034b4:	03df      	lsls	r7, r3, #15
 80034b6:	d508      	bpl.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034b8:	495f      	ldr	r1, [pc, #380]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80034ba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80034bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80034c0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80034c4:	4302      	orrs	r2, r0
 80034c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034ca:	0398      	lsls	r0, r3, #14
 80034cc:	d508      	bpl.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034ce:	495a      	ldr	r1, [pc, #360]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80034d0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80034d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80034d6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80034da:	4302      	orrs	r2, r0
 80034dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034e0:	0659      	lsls	r1, r3, #25
 80034e2:	d508      	bpl.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034e4:	4954      	ldr	r1, [pc, #336]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80034e6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80034e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80034ec:	f022 0203 	bic.w	r2, r2, #3
 80034f0:	4302      	orrs	r2, r0
 80034f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034f6:	061a      	lsls	r2, r3, #24
 80034f8:	d508      	bpl.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034fa:	494f      	ldr	r1, [pc, #316]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80034fc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80034fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003502:	f022 020c 	bic.w	r2, r2, #12
 8003506:	4302      	orrs	r2, r0
 8003508:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800350c:	05df      	lsls	r7, r3, #23
 800350e:	d508      	bpl.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003510:	4949      	ldr	r1, [pc, #292]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003512:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003514:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003518:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800351c:	4302      	orrs	r2, r0
 800351e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003522:	0598      	lsls	r0, r3, #22
 8003524:	d508      	bpl.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003526:	4944      	ldr	r1, [pc, #272]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003528:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800352a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800352e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003532:	4302      	orrs	r2, r0
 8003534:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003538:	0559      	lsls	r1, r3, #21
 800353a:	d508      	bpl.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800353c:	493e      	ldr	r1, [pc, #248]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800353e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003540:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003544:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003548:	4302      	orrs	r2, r0
 800354a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800354e:	051a      	lsls	r2, r3, #20
 8003550:	d508      	bpl.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003552:	4939      	ldr	r1, [pc, #228]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003556:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800355a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800355e:	4302      	orrs	r2, r0
 8003560:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003564:	04df      	lsls	r7, r3, #19
 8003566:	d508      	bpl.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003568:	4933      	ldr	r1, [pc, #204]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800356a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800356c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003570:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003574:	4302      	orrs	r2, r0
 8003576:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800357a:	0498      	lsls	r0, r3, #18
 800357c:	d508      	bpl.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800357e:	492e      	ldr	r1, [pc, #184]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003580:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003582:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003586:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800358a:	4302      	orrs	r2, r0
 800358c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003590:	0259      	lsls	r1, r3, #9
 8003592:	d508      	bpl.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003594:	4928      	ldr	r1, [pc, #160]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003596:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003598:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800359c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80035a0:	4302      	orrs	r2, r0
 80035a2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035a6:	029a      	lsls	r2, r3, #10
 80035a8:	d50c      	bpl.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035aa:	4823      	ldr	r0, [pc, #140]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80035ac:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80035ae:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80035b2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035b6:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80035ba:	bf08      	it	eq
 80035bc:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035be:	430a      	orrs	r2, r1
 80035c0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80035c4:	f013 0f08 	tst.w	r3, #8
 80035c8:	bf18      	it	ne
 80035ca:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035cc:	035f      	lsls	r7, r3, #13
 80035ce:	d508      	bpl.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035d0:	4919      	ldr	r1, [pc, #100]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80035d2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80035d4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80035d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035dc:	4302      	orrs	r2, r0
 80035de:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035e2:	0218      	lsls	r0, r3, #8
 80035e4:	d509      	bpl.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035e6:	4914      	ldr	r1, [pc, #80]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80035e8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80035ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80035f0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80035f4:	4302      	orrs	r2, r0
 80035f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035fa:	2e01      	cmp	r6, #1
 80035fc:	f000 80b4 	beq.w	8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003600:	0199      	lsls	r1, r3, #6
 8003602:	f100 80b1 	bmi.w	8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003606:	2d01      	cmp	r5, #1
 8003608:	d175      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800360a:	4d0b      	ldr	r5, [pc, #44]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800360c:	682b      	ldr	r3, [r5, #0]
 800360e:	462e      	mov	r6, r5
 8003610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003614:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003616:	f7fe fb43 	bl	8001ca0 <HAL_GetTick>
 800361a:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	f100 8126 	bmi.w	8003870 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003624:	6822      	ldr	r2, [r4, #0]
 8003626:	0315      	lsls	r5, r2, #12
 8003628:	d501      	bpl.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800362a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800362c:	b143      	cbz	r3, 8003640 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800362e:	02d0      	lsls	r0, r2, #11
 8003630:	d521      	bpl.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003632:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003634:	b9fb      	cbnz	r3, 8003676 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8003636:	e003      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003638:	40023800 	.word	0x40023800
 800363c:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003640:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003644:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003648:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800364c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003650:	430b      	orrs	r3, r1
 8003652:	6961      	ldr	r1, [r4, #20]
 8003654:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003658:	69a1      	ldr	r1, [r4, #24]
 800365a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800365e:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003662:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8003666:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003668:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800366c:	3901      	subs	r1, #1
 800366e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003672:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003676:	0291      	lsls	r1, r2, #10
 8003678:	d515      	bpl.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800367a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800367c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003680:	d111      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003682:	4982      	ldr	r1, [pc, #520]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003684:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003688:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800368c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003690:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003694:	4303      	orrs	r3, r0
 8003696:	6960      	ldr	r0, [r4, #20]
 8003698:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800369c:	6a20      	ldr	r0, [r4, #32]
 800369e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036a6:	0712      	lsls	r2, r2, #28
 80036a8:	d519      	bpl.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036aa:	4a78      	ldr	r2, [pc, #480]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036ac:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036b0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80036b4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80036b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036bc:	430b      	orrs	r3, r1
 80036be:	6961      	ldr	r1, [r4, #20]
 80036c0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80036c4:	69e1      	ldr	r1, [r4, #28]
 80036c6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80036ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80036ce:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80036d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80036d4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80036d8:	430b      	orrs	r3, r1
 80036da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80036de:	4c6b      	ldr	r4, [pc, #428]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e8:	f7fe fada 	bl	8001ca0 <HAL_GetTick>
 80036ec:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	f140 80c4 	bpl.w	800387e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80036f6:	2000      	movs	r0, #0
 80036f8:	e009      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 80036fa:	2601      	movs	r6, #1
 80036fc:	e67c      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fe:	f7fe facf 	bl	8001ca0 <HAL_GetTick>
 8003702:	eba0 0008 	sub.w	r0, r0, r8
 8003706:	2864      	cmp	r0, #100	; 0x64
 8003708:	f67f ae8e 	bls.w	8003428 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800370c:	2003      	movs	r0, #3
}
 800370e:	b003      	add	sp, #12
 8003710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003714:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003716:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800371a:	4293      	cmp	r3, r2
 800371c:	f43f ae8e 	beq.w	800343c <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003722:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003728:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800372c:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800372e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003730:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003734:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003736:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800373a:	07da      	lsls	r2, r3, #31
 800373c:	f57f ae7e 	bpl.w	800343c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8003740:	f7fe faae 	bl	8001ca0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003744:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003748:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800374c:	079b      	lsls	r3, r3, #30
 800374e:	f53f ae75 	bmi.w	800343c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fe faa5 	bl	8001ca0 <HAL_GetTick>
 8003756:	eba0 0008 	sub.w	r0, r0, r8
 800375a:	4548      	cmp	r0, r9
 800375c:	d9f5      	bls.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 800375e:	e7d5      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003760:	6891      	ldr	r1, [r2, #8]
 8003762:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003766:	e679      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8003768:	4e48      	ldr	r6, [pc, #288]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800376a:	6833      	ldr	r3, [r6, #0]
 800376c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003770:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003772:	f7fe fa95 	bl	8001ca0 <HAL_GetTick>
 8003776:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003778:	6833      	ldr	r3, [r6, #0]
 800377a:	011a      	lsls	r2, r3, #4
 800377c:	d472      	bmi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800377e:	6822      	ldr	r2, [r4, #0]
 8003780:	07d3      	lsls	r3, r2, #31
 8003782:	d512      	bpl.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003784:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003786:	b983      	cbnz	r3, 80037aa <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003788:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800378c:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003790:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003794:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003798:	430b      	orrs	r3, r1
 800379a:	6861      	ldr	r1, [r4, #4]
 800379c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80037a0:	68a1      	ldr	r1, [r4, #8]
 80037a2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80037a6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037aa:	0317      	lsls	r7, r2, #12
 80037ac:	d503      	bpl.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80037ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80037b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b4:	d005      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80037b6:	02d6      	lsls	r6, r2, #11
 80037b8:	d51e      	bpl.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c0:	d11a      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037c2:	4932      	ldr	r1, [pc, #200]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037c4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037c8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80037cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037d0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80037d4:	4303      	orrs	r3, r0
 80037d6:	6860      	ldr	r0, [r4, #4]
 80037d8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80037dc:	68e0      	ldr	r0, [r4, #12]
 80037de:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80037e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037e6:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80037ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037ec:	f020 001f 	bic.w	r0, r0, #31
 80037f0:	3b01      	subs	r3, #1
 80037f2:	4303      	orrs	r3, r0
 80037f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037f8:	01d0      	lsls	r0, r2, #7
 80037fa:	d511      	bpl.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037fc:	4923      	ldr	r1, [pc, #140]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037fe:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003802:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003806:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800380a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800380e:	4303      	orrs	r3, r0
 8003810:	6860      	ldr	r0, [r4, #4]
 8003812:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003816:	6920      	ldr	r0, [r4, #16]
 8003818:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800381c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003820:	0191      	lsls	r1, r2, #6
 8003822:	d50d      	bpl.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003824:	6923      	ldr	r3, [r4, #16]
 8003826:	6862      	ldr	r2, [r4, #4]
 8003828:	041b      	lsls	r3, r3, #16
 800382a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800382e:	68e2      	ldr	r2, [r4, #12]
 8003830:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003834:	68a2      	ldr	r2, [r4, #8]
 8003836:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800383a:	4a14      	ldr	r2, [pc, #80]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800383c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003840:	4e12      	ldr	r6, [pc, #72]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003842:	6833      	ldr	r3, [r6, #0]
 8003844:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003848:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800384a:	f7fe fa29 	bl	8001ca0 <HAL_GetTick>
 800384e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003850:	6833      	ldr	r3, [r6, #0]
 8003852:	011a      	lsls	r2, r3, #4
 8003854:	f53f aed7 	bmi.w	8003606 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003858:	f7fe fa22 	bl	8001ca0 <HAL_GetTick>
 800385c:	1bc0      	subs	r0, r0, r7
 800385e:	2864      	cmp	r0, #100	; 0x64
 8003860:	d9f6      	bls.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003862:	e753      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003864:	f7fe fa1c 	bl	8001ca0 <HAL_GetTick>
 8003868:	1bc0      	subs	r0, r0, r7
 800386a:	2864      	cmp	r0, #100	; 0x64
 800386c:	d984      	bls.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800386e:	e74d      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003870:	f7fe fa16 	bl	8001ca0 <HAL_GetTick>
 8003874:	1bc0      	subs	r0, r0, r7
 8003876:	2864      	cmp	r0, #100	; 0x64
 8003878:	f67f aed0 	bls.w	800361c <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800387c:	e746      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800387e:	f7fe fa0f 	bl	8001ca0 <HAL_GetTick>
 8003882:	1b40      	subs	r0, r0, r5
 8003884:	2864      	cmp	r0, #100	; 0x64
 8003886:	f67f af32 	bls.w	80036ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800388a:	e73f      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800388c:	40023800 	.word	0x40023800

08003890 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8003890:	4770      	bx	lr

08003892 <HAL_SDRAM_Init>:
{   
 8003892:	b538      	push	{r3, r4, r5, lr}
 8003894:	460d      	mov	r5, r1
  if(hsdram == NULL)
 8003896:	4604      	mov	r4, r0
 8003898:	b1c8      	cbz	r0, 80038ce <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800389a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800389e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80038a2:	b91b      	cbnz	r3, 80038ac <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 80038a4:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80038a8:	f7ff fff2 	bl	8003890 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80038ac:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80038ae:	1d21      	adds	r1, r4, #4
 80038b0:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80038b2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80038b6:	f000 f9c1 	bl	8003c3c <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80038ba:	6862      	ldr	r2, [r4, #4]
 80038bc:	4629      	mov	r1, r5
 80038be:	6820      	ldr	r0, [r4, #0]
 80038c0:	f000 f9f2 	bl	8003ca8 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 80038c4:	2301      	movs	r3, #1
  return HAL_OK;
 80038c6:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80038c8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80038cc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80038ce:	2001      	movs	r0, #1
 80038d0:	e7fc      	b.n	80038cc <HAL_SDRAM_Init+0x3a>

080038d2 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80038d2:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80038d4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80038d8:	4604      	mov	r4, r0
 80038da:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80038dc:	2b02      	cmp	r3, #2
 80038de:	b2d8      	uxtb	r0, r3
 80038e0:	d00d      	beq.n	80038fe <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80038e2:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80038e4:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80038e6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80038ea:	f000 fa20 	bl	8003d2e <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80038ee:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 80038f0:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80038f2:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80038f4:	bf0c      	ite	eq
 80038f6:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 80038f8:	2301      	movne	r3, #1
 80038fa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80038fe:	bd38      	pop	{r3, r4, r5, pc}

08003900 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003900:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003902:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8003906:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003908:	2b02      	cmp	r3, #2
 800390a:	b2d8      	uxtb	r0, r3
 800390c:	d009      	beq.n	8003922 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800390e:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003910:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003912:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003916:	f000 fa1c 	bl	8003d52 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800391a:	2301      	movs	r3, #1
  
  return HAL_OK;   
 800391c:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800391e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8003922:	bd10      	pop	{r4, pc}

08003924 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003924:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003928:	2b01      	cmp	r3, #1
 800392a:	d133      	bne.n	8003994 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	2302      	movs	r3, #2
 800392e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003932:	6803      	ldr	r3, [r0, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393c:	4a16      	ldr	r2, [pc, #88]	; (8003998 <HAL_TIM_Base_Start_IT+0x74>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d01a      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x54>
 8003942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003946:	d017      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x54>
 8003948:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800394c:	4293      	cmp	r3, r2
 800394e:	d013      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x54>
 8003950:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003954:	4293      	cmp	r3, r2
 8003956:	d00f      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x54>
 8003958:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800395c:	4293      	cmp	r3, r2
 800395e:	d00b      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x54>
 8003960:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003964:	4293      	cmp	r3, r2
 8003966:	d007      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x54>
 8003968:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800396c:	4293      	cmp	r3, r2
 800396e:	d003      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x54>
 8003970:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003974:	4293      	cmp	r3, r2
 8003976:	d107      	bne.n	8003988 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003978:	6899      	ldr	r1, [r3, #8]
 800397a:	4a08      	ldr	r2, [pc, #32]	; (800399c <HAL_TIM_Base_Start_IT+0x78>)
 800397c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397e:	2a06      	cmp	r2, #6
 8003980:	d006      	beq.n	8003990 <HAL_TIM_Base_Start_IT+0x6c>
 8003982:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003986:	d003      	beq.n	8003990 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003990:	2000      	movs	r0, #0
}
 8003992:	4770      	bx	lr
    return HAL_ERROR;
 8003994:	2001      	movs	r0, #1
 8003996:	4770      	bx	lr
 8003998:	40010000 	.word	0x40010000
 800399c:	00010007 	.word	0x00010007

080039a0 <HAL_TIM_OC_DelayElapsedCallback>:
 80039a0:	4770      	bx	lr

080039a2 <HAL_TIM_IC_CaptureCallback>:
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80039a4:	4770      	bx	lr

080039a6 <HAL_TIM_TriggerCallback>:
 80039a6:	4770      	bx	lr

080039a8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039a8:	6803      	ldr	r3, [r0, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	0791      	lsls	r1, r2, #30
{
 80039ae:	b510      	push	{r4, lr}
 80039b0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039b2:	d50f      	bpl.n	80039d4 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	0792      	lsls	r2, r2, #30
 80039b8:	d50c      	bpl.n	80039d4 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039ba:	f06f 0202 	mvn.w	r2, #2
 80039be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039c0:	2201      	movs	r2, #1
 80039c2:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	0799      	lsls	r1, r3, #30
 80039c8:	f000 8085 	beq.w	8003ad6 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039cc:	f7ff ffe9 	bl	80039a2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d0:	2300      	movs	r3, #0
 80039d2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	0752      	lsls	r2, r2, #29
 80039da:	d510      	bpl.n	80039fe <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	0750      	lsls	r0, r2, #29
 80039e0:	d50d      	bpl.n	80039fe <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039e2:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ea:	2202      	movs	r2, #2
 80039ec:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80039f4:	d075      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80039f6:	f7ff ffd4 	bl	80039a2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fa:	2300      	movs	r3, #0
 80039fc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	0711      	lsls	r1, r2, #28
 8003a04:	d50f      	bpl.n	8003a26 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	0712      	lsls	r2, r2, #28
 8003a0a:	d50c      	bpl.n	8003a26 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a0c:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a10:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a14:	2204      	movs	r2, #4
 8003a16:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	079b      	lsls	r3, r3, #30
 8003a1c:	d067      	beq.n	8003aee <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	f7ff ffc0 	bl	80039a2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a22:	2300      	movs	r3, #0
 8003a24:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	06d0      	lsls	r0, r2, #27
 8003a2c:	d510      	bpl.n	8003a50 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	06d1      	lsls	r1, r2, #27
 8003a32:	d50d      	bpl.n	8003a50 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a34:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a38:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003a46:	d058      	beq.n	8003afa <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8003a48:	f7ff ffab 	bl	80039a2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	07d2      	lsls	r2, r2, #31
 8003a56:	d508      	bpl.n	8003a6a <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	07d0      	lsls	r0, r2, #31
 8003a5c:	d505      	bpl.n	8003a6a <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a5e:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a62:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a64:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a66:	f7fd fb0b 	bl	8001080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	0611      	lsls	r1, r2, #24
 8003a70:	d508      	bpl.n	8003a84 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	0612      	lsls	r2, r2, #24
 8003a76:	d505      	bpl.n	8003a84 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a78:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a7c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a7e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003a80:	f000 f8d9 	bl	8003c36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	05d0      	lsls	r0, r2, #23
 8003a8a:	d508      	bpl.n	8003a9e <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	0611      	lsls	r1, r2, #24
 8003a90:	d505      	bpl.n	8003a9e <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a92:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a96:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a98:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003a9a:	f000 f8cd 	bl	8003c38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	0652      	lsls	r2, r2, #25
 8003aa4:	d508      	bpl.n	8003ab8 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	0650      	lsls	r0, r2, #25
 8003aaa:	d505      	bpl.n	8003ab8 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aac:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ab0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ab2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003ab4:	f7ff ff77 	bl	80039a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	0691      	lsls	r1, r2, #26
 8003abe:	d522      	bpl.n	8003b06 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	0692      	lsls	r2, r2, #26
 8003ac4:	d51f      	bpl.n	8003b06 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ac6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003aca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003acc:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003ad2:	f000 b8af 	b.w	8003c34 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad6:	f7ff ff63 	bl	80039a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ada:	4620      	mov	r0, r4
 8003adc:	f7ff ff62 	bl	80039a4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003ae0:	e776      	b.n	80039d0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae2:	f7ff ff5d 	bl	80039a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	f7ff ff5c 	bl	80039a4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003aec:	e785      	b.n	80039fa <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aee:	f7ff ff57 	bl	80039a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af2:	4620      	mov	r0, r4
 8003af4:	f7ff ff56 	bl	80039a4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003af8:	e793      	b.n	8003a22 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afa:	f7ff ff51 	bl	80039a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afe:	4620      	mov	r0, r4
 8003b00:	f7ff ff50 	bl	80039a4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003b04:	e7a2      	b.n	8003a4c <HAL_TIM_IRQHandler+0xa4>
}
 8003b06:	bd10      	pop	{r4, pc}

08003b08 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b08:	4a30      	ldr	r2, [pc, #192]	; (8003bcc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003b0a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b0c:	4290      	cmp	r0, r2
 8003b0e:	d012      	beq.n	8003b36 <TIM_Base_SetConfig+0x2e>
 8003b10:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003b14:	d00f      	beq.n	8003b36 <TIM_Base_SetConfig+0x2e>
 8003b16:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003b1a:	4290      	cmp	r0, r2
 8003b1c:	d00b      	beq.n	8003b36 <TIM_Base_SetConfig+0x2e>
 8003b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b22:	4290      	cmp	r0, r2
 8003b24:	d007      	beq.n	8003b36 <TIM_Base_SetConfig+0x2e>
 8003b26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b2a:	4290      	cmp	r0, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_Base_SetConfig+0x2e>
 8003b2e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003b32:	4290      	cmp	r0, r2
 8003b34:	d119      	bne.n	8003b6a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003b36:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b3c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b3e:	4a23      	ldr	r2, [pc, #140]	; (8003bcc <TIM_Base_SetConfig+0xc4>)
 8003b40:	4290      	cmp	r0, r2
 8003b42:	d029      	beq.n	8003b98 <TIM_Base_SetConfig+0x90>
 8003b44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003b48:	d026      	beq.n	8003b98 <TIM_Base_SetConfig+0x90>
 8003b4a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003b4e:	4290      	cmp	r0, r2
 8003b50:	d022      	beq.n	8003b98 <TIM_Base_SetConfig+0x90>
 8003b52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b56:	4290      	cmp	r0, r2
 8003b58:	d01e      	beq.n	8003b98 <TIM_Base_SetConfig+0x90>
 8003b5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b5e:	4290      	cmp	r0, r2
 8003b60:	d01a      	beq.n	8003b98 <TIM_Base_SetConfig+0x90>
 8003b62:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003b66:	4290      	cmp	r0, r2
 8003b68:	d016      	beq.n	8003b98 <TIM_Base_SetConfig+0x90>
 8003b6a:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <TIM_Base_SetConfig+0xc8>)
 8003b6c:	4290      	cmp	r0, r2
 8003b6e:	d013      	beq.n	8003b98 <TIM_Base_SetConfig+0x90>
 8003b70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b74:	4290      	cmp	r0, r2
 8003b76:	d00f      	beq.n	8003b98 <TIM_Base_SetConfig+0x90>
 8003b78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b7c:	4290      	cmp	r0, r2
 8003b7e:	d00b      	beq.n	8003b98 <TIM_Base_SetConfig+0x90>
 8003b80:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003b84:	4290      	cmp	r0, r2
 8003b86:	d007      	beq.n	8003b98 <TIM_Base_SetConfig+0x90>
 8003b88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b8c:	4290      	cmp	r0, r2
 8003b8e:	d003      	beq.n	8003b98 <TIM_Base_SetConfig+0x90>
 8003b90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b94:	4290      	cmp	r0, r2
 8003b96:	d103      	bne.n	8003ba0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b9c:	68ca      	ldr	r2, [r1, #12]
 8003b9e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba0:	694a      	ldr	r2, [r1, #20]
 8003ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003ba8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003baa:	688b      	ldr	r3, [r1, #8]
 8003bac:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bae:	680b      	ldr	r3, [r1, #0]
 8003bb0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <TIM_Base_SetConfig+0xc4>)
 8003bb4:	4298      	cmp	r0, r3
 8003bb6:	d003      	beq.n	8003bc0 <TIM_Base_SetConfig+0xb8>
 8003bb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bbc:	4298      	cmp	r0, r3
 8003bbe:	d101      	bne.n	8003bc4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bc0:	690b      	ldr	r3, [r1, #16]
 8003bc2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	6143      	str	r3, [r0, #20]
}
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40010000 	.word	0x40010000
 8003bd0:	40014000 	.word	0x40014000

08003bd4 <HAL_TIM_Base_Init>:
{
 8003bd4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	b350      	cbz	r0, 8003c30 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003bda:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003bde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003be2:	b91b      	cbnz	r3, 8003bec <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003be4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003be8:	f7fd f9f4 	bl	8000fd4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bee:	6820      	ldr	r0, [r4, #0]
 8003bf0:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf6:	f7ff ff87 	bl	8003b08 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfa:	2301      	movs	r3, #1
  return HAL_OK;
 8003bfc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfe:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c02:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003c06:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003c0a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003c0e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003c12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003c1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c22:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003c26:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003c2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003c2e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003c30:	2001      	movs	r0, #1
 8003c32:	e7fc      	b.n	8003c2e <HAL_TIM_Base_Init+0x5a>

08003c34 <HAL_TIMEx_CommutCallback>:
 8003c34:	4770      	bx	lr

08003c36 <HAL_TIMEx_BreakCallback>:
 8003c36:	4770      	bx	lr

08003c38 <HAL_TIMEx_Break2Callback>:
 8003c38:	4770      	bx	lr
	...

08003c3c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c40:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8003c42:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8003c46:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8003c4a:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8003c4e:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003c52:	6809      	ldr	r1, [r1, #0]
 8003c54:	4323      	orrs	r3, r4
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003c56:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003c58:	2901      	cmp	r1, #1
 8003c5a:	4912      	ldr	r1, [pc, #72]	; (8003ca4 <FMC_SDRAM_Init+0x68>)
 8003c5c:	d00f      	beq.n	8003c7e <FMC_SDRAM_Init+0x42>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c5e:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003c60:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c62:	432a      	orrs	r2, r5
 8003c64:	ea42 0308 	orr.w	r3, r2, r8
 8003c68:	ea43 030e 	orr.w	r3, r3, lr
 8003c6c:	ea43 030c 	orr.w	r3, r3, ip
 8003c70:	433b      	orrs	r3, r7
 8003c72:	4333      	orrs	r3, r6
 8003c74:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003c76:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003c78:	2000      	movs	r0, #0
 8003c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003c7e:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8003c80:	6842      	ldr	r2, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003c82:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003c86:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c88:	ea45 0208 	orr.w	r2, r5, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003c8c:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c8e:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003c92:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c94:	ea42 020c 	orr.w	r2, r2, ip
 8003c98:	433a      	orrs	r2, r7
 8003c9a:	4332      	orrs	r2, r6
 8003c9c:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8003c9e:	6042      	str	r2, [r0, #4]
 8003ca0:	e7ea      	b.n	8003c78 <FMC_SDRAM_Init+0x3c>
 8003ca2:	bf00      	nop
 8003ca4:	ffff8000 	.word	0xffff8000

08003ca8 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8003ca8:	68cb      	ldr	r3, [r1, #12]
 8003caa:	2a01      	cmp	r2, #1
{
 8003cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cae:	680c      	ldr	r4, [r1, #0]
 8003cb0:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
 8003cb4:	694b      	ldr	r3, [r1, #20]
 8003cb6:	688e      	ldr	r6, [r1, #8]
 8003cb8:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8003cbc:	690d      	ldr	r5, [r1, #16]
 8003cbe:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003cc2:	684c      	ldr	r4, [r1, #4]
 8003cc4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8003cc8:	6989      	ldr	r1, [r1, #24]
 8003cca:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8003cce:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003cd2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8003cd6:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8003cda:	ea4f 2606 	mov.w	r6, r6, lsl #8
 8003cde:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8003ce2:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8003ce6:	ea4f 6101 	mov.w	r1, r1, lsl #24
 8003cea:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
 8003cee:	d00c      	beq.n	8003d0a <FMC_SDRAM_Timing_Init+0x62>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003cf0:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003cf4:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003cf6:	4323      	orrs	r3, r4
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003cf8:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003cfc:	4333      	orrs	r3, r6
 8003cfe:	432b      	orrs	r3, r5
 8003d00:	430b      	orrs	r3, r1
 8003d02:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003d04:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003d06:	2000      	movs	r0, #0
 8003d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003d0a:	6887      	ldr	r7, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003d0c:	4334      	orrs	r4, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003d0e:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003d12:	ea44 020c 	orr.w	r2, r4, ip
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003d16:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003d1a:	432a      	orrs	r2, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003d1c:	433b      	orrs	r3, r7
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003d1e:	68c7      	ldr	r7, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003d20:	430a      	orrs	r2, r1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003d22:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003d26:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003d28:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003d2a:	60c2      	str	r2, [r0, #12]
 8003d2c:	e7eb      	b.n	8003d06 <FMC_SDRAM_Timing_Init+0x5e>

08003d2e <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8003d2e:	6902      	ldr	r2, [r0, #16]
{ 
 8003d30:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8003d32:	e9d1 3400 	ldrd	r3, r4, [r1]
 8003d36:	0d92      	lsrs	r2, r2, #22
 8003d38:	4323      	orrs	r3, r4
 8003d3a:	68cc      	ldr	r4, [r1, #12]
 8003d3c:	0592      	lsls	r2, r2, #22
 8003d3e:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8003d42:	4313      	orrs	r3, r2
 8003d44:	688a      	ldr	r2, [r1, #8]
 8003d46:	3a01      	subs	r2, #1
 8003d48:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8003d4c:	6103      	str	r3, [r0, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
}
 8003d4e:	2000      	movs	r0, #0
 8003d50:	bd10      	pop	{r4, pc}

08003d52 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8003d52:	6943      	ldr	r3, [r0, #20]
 8003d54:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8003d58:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	4770      	bx	lr

08003d5e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d5e:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d66:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d68:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d6a:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d72:	4770      	bx	lr

08003d74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d74:	2300      	movs	r3, #0
 8003d76:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d78:	4770      	bx	lr

08003d7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d7a:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d7c:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8003d7e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d80:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d86:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8003d88:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8003d8a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	6003      	str	r3, [r0, #0]
}
 8003d90:	4770      	bx	lr

08003d92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d92:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d94:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d96:	1c63      	adds	r3, r4, #1
 8003d98:	d10a      	bne.n	8003db0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d9a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003da0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003da2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003da4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8003da6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8003da8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003daa:	3301      	adds	r3, #1
 8003dac:	6003      	str	r3, [r0, #0]
}
 8003dae:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003db0:	f100 0208 	add.w	r2, r0, #8
 8003db4:	4613      	mov	r3, r2
 8003db6:	6852      	ldr	r2, [r2, #4]
 8003db8:	6815      	ldr	r5, [r2, #0]
 8003dba:	42a5      	cmp	r5, r4
 8003dbc:	d9fa      	bls.n	8003db4 <vListInsert+0x22>
 8003dbe:	e7ed      	b.n	8003d9c <vListInsert+0xa>

08003dc0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003dc0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dc2:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8003dc6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dc8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dce:	bf08      	it	eq
 8003dd0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	3a01      	subs	r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ddc:	6818      	ldr	r0, [r3, #0]
}
 8003dde:	4770      	bx	lr

08003de0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003de0:	b510      	push	{r4, lr}
 8003de2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003de4:	f001 fbc6 	bl	8005574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003de8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003dea:	f001 fbe9 	bl	80055c0 <vPortExitCritical>

	return xReturn;
}
 8003dee:	fab4 f084 	clz	r0, r4
 8003df2:	0940      	lsrs	r0, r0, #5
 8003df4:	bd10      	pop	{r4, pc}

08003df6 <prvCopyDataToQueue>:
{
 8003df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df8:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dfa:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003dfc:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dfe:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e00:	b952      	cbnz	r2, 8003e18 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e02:	6807      	ldr	r7, [r0, #0]
 8003e04:	bb47      	cbnz	r7, 8003e58 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e06:	6880      	ldr	r0, [r0, #8]
 8003e08:	f001 f88c 	bl	8004f24 <xTaskPriorityDisinherit>
 8003e0c:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e0e:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e10:	3601      	adds	r6, #1
}
 8003e12:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e14:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003e18:	b965      	cbnz	r5, 8003e34 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e1a:	6840      	ldr	r0, [r0, #4]
 8003e1c:	f009 fe22 	bl	800da64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e20:	6863      	ldr	r3, [r4, #4]
 8003e22:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e24:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e26:	68a2      	ldr	r2, [r4, #8]
 8003e28:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e2a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e2c:	d3f0      	bcc.n	8003e10 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	6063      	str	r3, [r4, #4]
 8003e32:	e7ed      	b.n	8003e10 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e34:	68c0      	ldr	r0, [r0, #12]
 8003e36:	f009 fe15 	bl	800da64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e3c:	68e3      	ldr	r3, [r4, #12]
 8003e3e:	4251      	negs	r1, r2
 8003e40:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e42:	6822      	ldr	r2, [r4, #0]
 8003e44:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e46:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e48:	bf3e      	ittt	cc
 8003e4a:	68a3      	ldrcc	r3, [r4, #8]
 8003e4c:	185b      	addcc	r3, r3, r1
 8003e4e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003e50:	2d02      	cmp	r5, #2
 8003e52:	d101      	bne.n	8003e58 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e54:	b116      	cbz	r6, 8003e5c <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8003e56:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8003e58:	2500      	movs	r5, #0
 8003e5a:	e7d9      	b.n	8003e10 <prvCopyDataToQueue+0x1a>
 8003e5c:	4635      	mov	r5, r6
 8003e5e:	e7d7      	b.n	8003e10 <prvCopyDataToQueue+0x1a>

08003e60 <prvCopyDataFromQueue>:
{
 8003e60:	4603      	mov	r3, r0
 8003e62:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8003e66:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e68:	b162      	cbz	r2, 8003e84 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e6a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e6c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e6e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e70:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e72:	60dc      	str	r4, [r3, #12]
}
 8003e74:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e78:	bf24      	itt	cs
 8003e7a:	6819      	ldrcs	r1, [r3, #0]
 8003e7c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e7e:	68d9      	ldr	r1, [r3, #12]
 8003e80:	f009 bdf0 	b.w	800da64 <memcpy>
}
 8003e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <prvUnlockQueue>:
{
 8003e8a:	b570      	push	{r4, r5, r6, lr}
 8003e8c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003e8e:	f001 fb71 	bl	8005574 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003e92:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e96:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8003e9a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e9c:	2d00      	cmp	r5, #0
 8003e9e:	dc14      	bgt.n	8003eca <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8003ea0:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ea2:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8003ea6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003eaa:	f001 fb89 	bl	80055c0 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003eae:	f001 fb61 	bl	8005574 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003eb2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003eb6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eb8:	2d00      	cmp	r5, #0
 8003eba:	dc12      	bgt.n	8003ee2 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8003ebc:	23ff      	movs	r3, #255	; 0xff
 8003ebe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8003ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003ec6:	f001 bb7b 	b.w	80055c0 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0e7      	beq.n	8003ea0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f000 ff3d 	bl	8004d50 <xTaskRemoveFromEventList>
 8003ed6:	b108      	cbz	r0, 8003edc <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8003ed8:	f000 ffbe 	bl	8004e58 <vTaskMissedYield>
			--cTxLock;
 8003edc:	3d01      	subs	r5, #1
 8003ede:	b26d      	sxtb	r5, r5
 8003ee0:	e7dc      	b.n	8003e9c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ee2:	6923      	ldr	r3, [r4, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0e9      	beq.n	8003ebc <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ee8:	4630      	mov	r0, r6
 8003eea:	f000 ff31 	bl	8004d50 <xTaskRemoveFromEventList>
 8003eee:	b108      	cbz	r0, 8003ef4 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8003ef0:	f000 ffb2 	bl	8004e58 <vTaskMissedYield>
				--cRxLock;
 8003ef4:	3d01      	subs	r5, #1
 8003ef6:	b26d      	sxtb	r5, r5
 8003ef8:	e7de      	b.n	8003eb8 <prvUnlockQueue+0x2e>
	...

08003efc <xQueueGenericReset>:
{
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003f00:	4604      	mov	r4, r0
 8003f02:	b950      	cbnz	r0, 8003f1a <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	b672      	cpsid	i
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	b662      	cpsie	i
 8003f18:	e7fe      	b.n	8003f18 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8003f1a:	f001 fb2b 	bl	8005574 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f1e:	6822      	ldr	r2, [r4, #0]
 8003f20:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f24:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f26:	434b      	muls	r3, r1
 8003f28:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f2a:	1a5b      	subs	r3, r3, r1
 8003f2c:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f2e:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f30:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f32:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f34:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f36:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8003f38:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003f40:	b995      	cbnz	r5, 8003f68 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f42:	6923      	ldr	r3, [r4, #16]
 8003f44:	b163      	cbz	r3, 8003f60 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f46:	f104 0010 	add.w	r0, r4, #16
 8003f4a:	f000 ff01 	bl	8004d50 <xTaskRemoveFromEventList>
 8003f4e:	b138      	cbz	r0, 8003f60 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8003f50:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <xQueueGenericReset+0x80>)
 8003f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8003f60:	f001 fb2e 	bl	80055c0 <vPortExitCritical>
}
 8003f64:	2001      	movs	r0, #1
 8003f66:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f68:	f104 0010 	add.w	r0, r4, #16
 8003f6c:	f7ff fef7 	bl	8003d5e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f70:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f74:	f7ff fef3 	bl	8003d5e <vListInitialise>
 8003f78:	e7f2      	b.n	8003f60 <xQueueGenericReset+0x64>
 8003f7a:	bf00      	nop
 8003f7c:	e000ed04 	.word	0xe000ed04

08003f80 <xQueueGenericCreate>:
	{
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f82:	460d      	mov	r5, r1
 8003f84:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f86:	4606      	mov	r6, r0
 8003f88:	b950      	cbnz	r0, 8003fa0 <xQueueGenericCreate+0x20>
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	b672      	cpsid	i
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	b662      	cpsie	i
 8003f9e:	e7fe      	b.n	8003f9e <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fa0:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003fa2:	3050      	adds	r0, #80	; 0x50
 8003fa4:	f001 f9c8 	bl	8005338 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003fa8:	4604      	mov	r4, r0
 8003faa:	b158      	cbz	r0, 8003fc4 <xQueueGenericCreate+0x44>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fac:	b165      	cbz	r5, 8003fc8 <xQueueGenericCreate+0x48>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fae:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8003fb8:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fbc:	f7ff ff9e 	bl	8003efc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003fc0:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fc8:	4603      	mov	r3, r0
 8003fca:	e7f2      	b.n	8003fb2 <xQueueGenericCreate+0x32>

08003fcc <xQueueCreateCountingSemaphore>:
	{
 8003fcc:	b510      	push	{r4, lr}
 8003fce:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8003fd0:	b950      	cbnz	r0, 8003fe8 <xQueueCreateCountingSemaphore+0x1c>
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	b672      	cpsid	i
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	b662      	cpsie	i
 8003fe6:	e7fe      	b.n	8003fe6 <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003fe8:	4288      	cmp	r0, r1
 8003fea:	d20a      	bcs.n	8004002 <xQueueCreateCountingSemaphore+0x36>
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	b672      	cpsid	i
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	b662      	cpsie	i
 8004000:	e7fe      	b.n	8004000 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004002:	2202      	movs	r2, #2
 8004004:	2100      	movs	r1, #0
 8004006:	f7ff ffbb 	bl	8003f80 <xQueueGenericCreate>
		if( xHandle != NULL )
 800400a:	b100      	cbz	r0, 800400e <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800400c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800400e:	bd10      	pop	{r4, pc}

08004010 <xQueueGenericSend>:
{
 8004010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004014:	4688      	mov	r8, r1
 8004016:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004018:	4604      	mov	r4, r0
{
 800401a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800401c:	b950      	cbnz	r0, 8004034 <xQueueGenericSend+0x24>
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	b672      	cpsid	i
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	b662      	cpsie	i
 8004032:	e7fe      	b.n	8004032 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004034:	b961      	cbnz	r1, 8004050 <xQueueGenericSend+0x40>
 8004036:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004038:	b153      	cbz	r3, 8004050 <xQueueGenericSend+0x40>
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	b672      	cpsid	i
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	b662      	cpsie	i
 800404e:	e7fe      	b.n	800404e <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004050:	2f02      	cmp	r7, #2
 8004052:	d10d      	bne.n	8004070 <xQueueGenericSend+0x60>
 8004054:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004056:	2b01      	cmp	r3, #1
 8004058:	d00a      	beq.n	8004070 <xQueueGenericSend+0x60>
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	b672      	cpsid	i
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	b662      	cpsie	i
 800406e:	e7fe      	b.n	800406e <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004070:	f000 fefa 	bl	8004e68 <xTaskGetSchedulerState>
 8004074:	4606      	mov	r6, r0
 8004076:	b960      	cbnz	r0, 8004092 <xQueueGenericSend+0x82>
 8004078:	9b01      	ldr	r3, [sp, #4]
 800407a:	b15b      	cbz	r3, 8004094 <xQueueGenericSend+0x84>
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	b672      	cpsid	i
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	b662      	cpsie	i
 8004090:	e7fe      	b.n	8004090 <xQueueGenericSend+0x80>
 8004092:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004094:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8004098:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004180 <xQueueGenericSend+0x170>
 800409c:	e037      	b.n	800410e <xQueueGenericSend+0xfe>
				if( xTicksToWait == ( TickType_t ) 0 )
 800409e:	9d01      	ldr	r5, [sp, #4]
 80040a0:	b91d      	cbnz	r5, 80040aa <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 80040a2:	f001 fa8d 	bl	80055c0 <vPortExitCritical>
			return errQUEUE_FULL;
 80040a6:	2000      	movs	r0, #0
 80040a8:	e050      	b.n	800414c <xQueueGenericSend+0x13c>
				else if( xEntryTimeSet == pdFALSE )
 80040aa:	b916      	cbnz	r6, 80040b2 <xQueueGenericSend+0xa2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040ac:	a802      	add	r0, sp, #8
 80040ae:	f000 fe8d 	bl	8004dcc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80040b2:	f001 fa85 	bl	80055c0 <vPortExitCritical>
		vTaskSuspendAll();
 80040b6:	f000 fcd7 	bl	8004a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040ba:	f001 fa5b 	bl	8005574 <vPortEnterCritical>
 80040be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80040c2:	2bff      	cmp	r3, #255	; 0xff
 80040c4:	d101      	bne.n	80040ca <xQueueGenericSend+0xba>
 80040c6:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80040ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80040ce:	2bff      	cmp	r3, #255	; 0xff
 80040d0:	d101      	bne.n	80040d6 <xQueueGenericSend+0xc6>
 80040d2:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80040d6:	f001 fa73 	bl	80055c0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040da:	a901      	add	r1, sp, #4
 80040dc:	a802      	add	r0, sp, #8
 80040de:	f000 fe7f 	bl	8004de0 <xTaskCheckForTimeOut>
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d146      	bne.n	8004174 <xQueueGenericSend+0x164>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040e6:	f001 fa45 	bl	8005574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80040ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d12f      	bne.n	8004152 <xQueueGenericSend+0x142>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80040f2:	f001 fa65 	bl	80055c0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040f6:	9901      	ldr	r1, [sp, #4]
 80040f8:	f104 0010 	add.w	r0, r4, #16
 80040fc:	f000 fe0e 	bl	8004d1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004100:	4620      	mov	r0, r4
 8004102:	f7ff fec2 	bl	8003e8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004106:	f000 fd3d 	bl	8004b84 <xTaskResumeAll>
 800410a:	b350      	cbz	r0, 8004162 <xQueueGenericSend+0x152>
 800410c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800410e:	f001 fa31 	bl	8005574 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004112:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004114:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004116:	429a      	cmp	r2, r3
 8004118:	d301      	bcc.n	800411e <xQueueGenericSend+0x10e>
 800411a:	2f02      	cmp	r7, #2
 800411c:	d1bf      	bne.n	800409e <xQueueGenericSend+0x8e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800411e:	463a      	mov	r2, r7
 8004120:	4641      	mov	r1, r8
 8004122:	4620      	mov	r0, r4
 8004124:	f7ff fe67 	bl	8003df6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800412a:	b11b      	cbz	r3, 8004134 <xQueueGenericSend+0x124>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800412c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004130:	f000 fe0e 	bl	8004d50 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004134:	b138      	cbz	r0, 8004146 <xQueueGenericSend+0x136>
						queueYIELD_IF_USING_PREEMPTION();
 8004136:	4b12      	ldr	r3, [pc, #72]	; (8004180 <xQueueGenericSend+0x170>)
 8004138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004146:	f001 fa3b 	bl	80055c0 <vPortExitCritical>
				return pdPASS;
 800414a:	2001      	movs	r0, #1
}
 800414c:	b004      	add	sp, #16
 800414e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8004152:	f001 fa35 	bl	80055c0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004156:	4620      	mov	r0, r4
 8004158:	f7ff fe97 	bl	8003e8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800415c:	f000 fd12 	bl	8004b84 <xTaskResumeAll>
 8004160:	e7d4      	b.n	800410c <xQueueGenericSend+0xfc>
					portYIELD_WITHIN_API();
 8004162:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004166:	f8ca 3000 	str.w	r3, [sl]
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	e7cb      	b.n	800410c <xQueueGenericSend+0xfc>
			prvUnlockQueue( pxQueue );
 8004174:	4620      	mov	r0, r4
 8004176:	f7ff fe88 	bl	8003e8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800417a:	f000 fd03 	bl	8004b84 <xTaskResumeAll>
 800417e:	e792      	b.n	80040a6 <xQueueGenericSend+0x96>
 8004180:	e000ed04 	.word	0xe000ed04

08004184 <xQueueCreateMutex>:
	{
 8004184:	b570      	push	{r4, r5, r6, lr}
 8004186:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004188:	2050      	movs	r0, #80	; 0x50
 800418a:	f001 f8d5 	bl	8005338 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800418e:	4604      	mov	r4, r0
 8004190:	b188      	cbz	r0, 80041b6 <xQueueCreateMutex+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
 8004192:	2500      	movs	r5, #0
 8004194:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004196:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8004198:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800419c:	f7ff feae 	bl	8003efc <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80041a0:	462b      	mov	r3, r5
 80041a2:	462a      	mov	r2, r5
 80041a4:	4629      	mov	r1, r5
 80041a6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80041a8:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80041ac:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80041ae:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80041b0:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80041b2:	f7ff ff2d 	bl	8004010 <xQueueGenericSend>
	}
 80041b6:	4620      	mov	r0, r4
 80041b8:	bd70      	pop	{r4, r5, r6, pc}

080041ba <xQueueGenericSendFromISR>:
{
 80041ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041be:	4689      	mov	r9, r1
 80041c0:	4690      	mov	r8, r2
 80041c2:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80041c4:	4604      	mov	r4, r0
 80041c6:	b950      	cbnz	r0, 80041de <xQueueGenericSendFromISR+0x24>
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	b672      	cpsid	i
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	b662      	cpsie	i
 80041dc:	e7fe      	b.n	80041dc <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041de:	b961      	cbnz	r1, 80041fa <xQueueGenericSendFromISR+0x40>
 80041e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80041e2:	b153      	cbz	r3, 80041fa <xQueueGenericSendFromISR+0x40>
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	b672      	cpsid	i
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	b662      	cpsie	i
 80041f8:	e7fe      	b.n	80041f8 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041fa:	2f02      	cmp	r7, #2
 80041fc:	d10d      	bne.n	800421a <xQueueGenericSendFromISR+0x60>
 80041fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004200:	2b01      	cmp	r3, #1
 8004202:	d00a      	beq.n	800421a <xQueueGenericSendFromISR+0x60>
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	b672      	cpsid	i
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	b662      	cpsie	i
 8004218:	e7fe      	b.n	8004218 <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800421a:	f001 faad 	bl	8005778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800421e:	f3ef 8611 	mrs	r6, BASEPRI
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	b672      	cpsid	i
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004236:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004238:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800423a:	429a      	cmp	r2, r3
 800423c:	d301      	bcc.n	8004242 <xQueueGenericSendFromISR+0x88>
 800423e:	2f02      	cmp	r7, #2
 8004240:	d122      	bne.n	8004288 <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004242:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004246:	463a      	mov	r2, r7
 8004248:	4649      	mov	r1, r9
 800424a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800424c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800424e:	f7ff fdd2 	bl	8003df6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004252:	1c6b      	adds	r3, r5, #1
 8004254:	d113      	bne.n	800427e <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004258:	b90b      	cbnz	r3, 800425e <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 800425a:	2001      	movs	r0, #1
 800425c:	e00b      	b.n	8004276 <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800425e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004262:	f000 fd75 	bl	8004d50 <xTaskRemoveFromEventList>
 8004266:	2800      	cmp	r0, #0
 8004268:	d0f7      	beq.n	800425a <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800426a:	f1b8 0f00 	cmp.w	r8, #0
 800426e:	d0f4      	beq.n	800425a <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004270:	2001      	movs	r0, #1
 8004272:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004276:	f386 8811 	msr	BASEPRI, r6
}
 800427a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800427e:	3501      	adds	r5, #1
 8004280:	b26d      	sxtb	r5, r5
 8004282:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004286:	e7e8      	b.n	800425a <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8004288:	2000      	movs	r0, #0
 800428a:	e7f4      	b.n	8004276 <xQueueGenericSendFromISR+0xbc>

0800428c <xQueueGiveFromISR>:
{
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004290:	4604      	mov	r4, r0
 8004292:	b950      	cbnz	r0, 80042aa <xQueueGiveFromISR+0x1e>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	b672      	cpsid	i
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	b662      	cpsie	i
 80042a8:	e7fe      	b.n	80042a8 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 80042aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80042ac:	b153      	cbz	r3, 80042c4 <xQueueGiveFromISR+0x38>
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	b672      	cpsid	i
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	b662      	cpsie	i
 80042c2:	e7fe      	b.n	80042c2 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80042c4:	6803      	ldr	r3, [r0, #0]
 80042c6:	b963      	cbnz	r3, 80042e2 <xQueueGiveFromISR+0x56>
 80042c8:	6883      	ldr	r3, [r0, #8]
 80042ca:	b153      	cbz	r3, 80042e2 <xQueueGiveFromISR+0x56>
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	b672      	cpsid	i
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	b662      	cpsie	i
 80042e0:	e7fe      	b.n	80042e0 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042e2:	f001 fa49 	bl	8005778 <vPortValidateInterruptPriority>
	__asm volatile
 80042e6:	f3ef 8611 	mrs	r6, BASEPRI
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	b672      	cpsid	i
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004300:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004302:	4293      	cmp	r3, r2
 8004304:	d91c      	bls.n	8004340 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004306:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800430a:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800430c:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800430e:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004310:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8004312:	d110      	bne.n	8004336 <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004316:	b90b      	cbnz	r3, 800431c <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8004318:	2001      	movs	r0, #1
 800431a:	e009      	b.n	8004330 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800431c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004320:	f000 fd16 	bl	8004d50 <xTaskRemoveFromEventList>
 8004324:	2800      	cmp	r0, #0
 8004326:	d0f7      	beq.n	8004318 <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8004328:	2d00      	cmp	r5, #0
 800432a:	d0f5      	beq.n	8004318 <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800432c:	2001      	movs	r0, #1
 800432e:	6028      	str	r0, [r5, #0]
	__asm volatile
 8004330:	f386 8811 	msr	BASEPRI, r6
}
 8004334:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004336:	3301      	adds	r3, #1
 8004338:	b25b      	sxtb	r3, r3
 800433a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800433e:	e7eb      	b.n	8004318 <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8004340:	2000      	movs	r0, #0
 8004342:	e7f5      	b.n	8004330 <xQueueGiveFromISR+0xa4>

08004344 <xQueueReceive>:
{
 8004344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004348:	b085      	sub	sp, #20
 800434a:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800434c:	4604      	mov	r4, r0
{
 800434e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004350:	b950      	cbnz	r0, 8004368 <xQueueReceive+0x24>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	b672      	cpsid	i
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	b662      	cpsie	i
 8004366:	e7fe      	b.n	8004366 <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004368:	b961      	cbnz	r1, 8004384 <xQueueReceive+0x40>
 800436a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800436c:	b153      	cbz	r3, 8004384 <xQueueReceive+0x40>
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	b672      	cpsid	i
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	b662      	cpsie	i
 8004382:	e7fe      	b.n	8004382 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004384:	f000 fd70 	bl	8004e68 <xTaskGetSchedulerState>
 8004388:	4606      	mov	r6, r0
 800438a:	b960      	cbnz	r0, 80043a6 <xQueueReceive+0x62>
 800438c:	9b01      	ldr	r3, [sp, #4]
 800438e:	b15b      	cbz	r3, 80043a8 <xQueueReceive+0x64>
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	b672      	cpsid	i
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	b662      	cpsie	i
 80043a4:	e7fe      	b.n	80043a4 <xQueueReceive+0x60>
 80043a6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80043a8:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80043ac:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800448c <xQueueReceive+0x148>
 80043b0:	e03b      	b.n	800442a <xQueueReceive+0xe6>
				if( xTicksToWait == ( TickType_t ) 0 )
 80043b2:	9d01      	ldr	r5, [sp, #4]
 80043b4:	b91d      	cbnz	r5, 80043be <xQueueReceive+0x7a>
					taskEXIT_CRITICAL();
 80043b6:	f001 f903 	bl	80055c0 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80043ba:	2000      	movs	r0, #0
 80043bc:	e052      	b.n	8004464 <xQueueReceive+0x120>
				else if( xEntryTimeSet == pdFALSE )
 80043be:	b916      	cbnz	r6, 80043c6 <xQueueReceive+0x82>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043c0:	a802      	add	r0, sp, #8
 80043c2:	f000 fd03 	bl	8004dcc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80043c6:	f001 f8fb 	bl	80055c0 <vPortExitCritical>
		vTaskSuspendAll();
 80043ca:	f000 fb4d 	bl	8004a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043ce:	f001 f8d1 	bl	8005574 <vPortEnterCritical>
 80043d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80043d6:	2bff      	cmp	r3, #255	; 0xff
 80043d8:	d101      	bne.n	80043de <xQueueReceive+0x9a>
 80043da:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 80043de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80043e2:	2bff      	cmp	r3, #255	; 0xff
 80043e4:	d101      	bne.n	80043ea <xQueueReceive+0xa6>
 80043e6:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80043ea:	f001 f8e9 	bl	80055c0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043ee:	a901      	add	r1, sp, #4
 80043f0:	a802      	add	r0, sp, #8
 80043f2:	f000 fcf5 	bl	8004de0 <xTaskCheckForTimeOut>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	d13d      	bne.n	8004476 <xQueueReceive+0x132>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043fa:	4620      	mov	r0, r4
 80043fc:	f7ff fcf0 	bl	8003de0 <prvIsQueueEmpty>
 8004400:	b398      	cbz	r0, 800446a <xQueueReceive+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004402:	9901      	ldr	r1, [sp, #4]
 8004404:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004408:	f000 fc88 	bl	8004d1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800440c:	4620      	mov	r0, r4
 800440e:	f7ff fd3c 	bl	8003e8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004412:	f000 fbb7 	bl	8004b84 <xTaskResumeAll>
 8004416:	b938      	cbnz	r0, 8004428 <xQueueReceive+0xe4>
					portYIELD_WITHIN_API();
 8004418:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800441c:	f8c9 3000 	str.w	r3, [r9]
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800442a:	f001 f8a3 	bl	8005574 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800442e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004430:	2d00      	cmp	r5, #0
 8004432:	d0be      	beq.n	80043b2 <xQueueReceive+0x6e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004434:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004436:	4639      	mov	r1, r7
 8004438:	4620      	mov	r0, r4
 800443a:	f7ff fd11 	bl	8003e60 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800443e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004440:	6923      	ldr	r3, [r4, #16]
 8004442:	b163      	cbz	r3, 800445e <xQueueReceive+0x11a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004444:	f104 0010 	add.w	r0, r4, #16
 8004448:	f000 fc82 	bl	8004d50 <xTaskRemoveFromEventList>
 800444c:	b138      	cbz	r0, 800445e <xQueueReceive+0x11a>
						queueYIELD_IF_USING_PREEMPTION();
 800444e:	4b0f      	ldr	r3, [pc, #60]	; (800448c <xQueueReceive+0x148>)
 8004450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800445e:	f001 f8af 	bl	80055c0 <vPortExitCritical>
				return pdPASS;
 8004462:	2001      	movs	r0, #1
}
 8004464:	b005      	add	sp, #20
 8004466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 800446a:	4620      	mov	r0, r4
 800446c:	f7ff fd0d 	bl	8003e8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004470:	f000 fb88 	bl	8004b84 <xTaskResumeAll>
 8004474:	e7d8      	b.n	8004428 <xQueueReceive+0xe4>
			prvUnlockQueue( pxQueue );
 8004476:	4620      	mov	r0, r4
 8004478:	f7ff fd07 	bl	8003e8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800447c:	f000 fb82 	bl	8004b84 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004480:	4620      	mov	r0, r4
 8004482:	f7ff fcad 	bl	8003de0 <prvIsQueueEmpty>
 8004486:	2800      	cmp	r0, #0
 8004488:	d0ce      	beq.n	8004428 <xQueueReceive+0xe4>
 800448a:	e796      	b.n	80043ba <xQueueReceive+0x76>
 800448c:	e000ed04 	.word	0xe000ed04

08004490 <xQueueSemaphoreTake>:
{
 8004490:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8004494:	4604      	mov	r4, r0
{
 8004496:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004498:	b950      	cbnz	r0, 80044b0 <xQueueSemaphoreTake+0x20>
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	b672      	cpsid	i
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	b662      	cpsie	i
 80044ae:	e7fe      	b.n	80044ae <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 80044b0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80044b2:	b155      	cbz	r5, 80044ca <xQueueSemaphoreTake+0x3a>
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	b672      	cpsid	i
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	b662      	cpsie	i
 80044c8:	e7fe      	b.n	80044c8 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044ca:	f000 fccd 	bl	8004e68 <xTaskGetSchedulerState>
 80044ce:	4606      	mov	r6, r0
 80044d0:	b960      	cbnz	r0, 80044ec <xQueueSemaphoreTake+0x5c>
 80044d2:	9b01      	ldr	r3, [sp, #4]
 80044d4:	b17b      	cbz	r3, 80044f6 <xQueueSemaphoreTake+0x66>
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	b672      	cpsid	i
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	b662      	cpsie	i
 80044ea:	e7fe      	b.n	80044ea <xQueueSemaphoreTake+0x5a>
 80044ec:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80044ee:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80044f0:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8004624 <xQueueSemaphoreTake+0x194>
 80044f4:	e053      	b.n	800459e <xQueueSemaphoreTake+0x10e>
 80044f6:	4605      	mov	r5, r0
 80044f8:	e7f9      	b.n	80044ee <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 80044fa:	9b01      	ldr	r3, [sp, #4]
 80044fc:	b973      	cbnz	r3, 800451c <xQueueSemaphoreTake+0x8c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80044fe:	b155      	cbz	r5, 8004516 <xQueueSemaphoreTake+0x86>
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	b672      	cpsid	i
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	b662      	cpsie	i
 8004514:	e7fe      	b.n	8004514 <xQueueSemaphoreTake+0x84>
					taskEXIT_CRITICAL();
 8004516:	f001 f853 	bl	80055c0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800451a:	e05e      	b.n	80045da <xQueueSemaphoreTake+0x14a>
				else if( xEntryTimeSet == pdFALSE )
 800451c:	b916      	cbnz	r6, 8004524 <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800451e:	a802      	add	r0, sp, #8
 8004520:	f000 fc54 	bl	8004dcc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004524:	f001 f84c 	bl	80055c0 <vPortExitCritical>
		vTaskSuspendAll();
 8004528:	f000 fa9e 	bl	8004a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800452c:	f001 f822 	bl	8005574 <vPortEnterCritical>
 8004530:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004534:	2bff      	cmp	r3, #255	; 0xff
 8004536:	d101      	bne.n	800453c <xQueueSemaphoreTake+0xac>
 8004538:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800453c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004540:	2bff      	cmp	r3, #255	; 0xff
 8004542:	d101      	bne.n	8004548 <xQueueSemaphoreTake+0xb8>
 8004544:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004548:	f001 f83a 	bl	80055c0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800454c:	a901      	add	r1, sp, #4
 800454e:	a802      	add	r0, sp, #8
 8004550:	f000 fc46 	bl	8004de0 <xTaskCheckForTimeOut>
 8004554:	2800      	cmp	r0, #0
 8004556:	d14a      	bne.n	80045ee <xQueueSemaphoreTake+0x15e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004558:	4620      	mov	r0, r4
 800455a:	f7ff fc41 	bl	8003de0 <prvIsQueueEmpty>
 800455e:	2800      	cmp	r0, #0
 8004560:	d03f      	beq.n	80045e2 <xQueueSemaphoreTake+0x152>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	b93b      	cbnz	r3, 8004576 <xQueueSemaphoreTake+0xe6>
						taskENTER_CRITICAL();
 8004566:	f001 f805 	bl	8005574 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800456a:	68a0      	ldr	r0, [r4, #8]
 800456c:	f000 fc8c 	bl	8004e88 <xTaskPriorityInherit>
 8004570:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8004572:	f001 f825 	bl	80055c0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004576:	9901      	ldr	r1, [sp, #4]
 8004578:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800457c:	f000 fbce 	bl	8004d1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004580:	4620      	mov	r0, r4
 8004582:	f7ff fc82 	bl	8003e8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004586:	f000 fafd 	bl	8004b84 <xTaskResumeAll>
 800458a:	b938      	cbnz	r0, 800459c <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 800458c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004590:	f8c8 3000 	str.w	r3, [r8]
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800459e:	f000 ffe9 	bl	8005574 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80045a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0a8      	beq.n	80044fa <xQueueSemaphoreTake+0x6a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80045a8:	3b01      	subs	r3, #1
 80045aa:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	b913      	cbnz	r3, 80045b6 <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80045b0:	f000 fd68 	bl	8005084 <pvTaskIncrementMutexHeldCount>
 80045b4:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045b6:	6923      	ldr	r3, [r4, #16]
 80045b8:	b163      	cbz	r3, 80045d4 <xQueueSemaphoreTake+0x144>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045ba:	f104 0010 	add.w	r0, r4, #16
 80045be:	f000 fbc7 	bl	8004d50 <xTaskRemoveFromEventList>
 80045c2:	b138      	cbz	r0, 80045d4 <xQueueSemaphoreTake+0x144>
						queueYIELD_IF_USING_PREEMPTION();
 80045c4:	4b17      	ldr	r3, [pc, #92]	; (8004624 <xQueueSemaphoreTake+0x194>)
 80045c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	f3bf 8f6f 	isb	sy
				return pdPASS;
 80045d4:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 80045d6:	f000 fff3 	bl	80055c0 <vPortExitCritical>
}
 80045da:	4628      	mov	r0, r5
 80045dc:	b004      	add	sp, #16
 80045de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 80045e2:	4620      	mov	r0, r4
 80045e4:	f7ff fc51 	bl	8003e8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045e8:	f000 facc 	bl	8004b84 <xTaskResumeAll>
 80045ec:	e7d6      	b.n	800459c <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 80045ee:	4620      	mov	r0, r4
 80045f0:	f7ff fc4b 	bl	8003e8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045f4:	f000 fac6 	bl	8004b84 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045f8:	4620      	mov	r0, r4
 80045fa:	f7ff fbf1 	bl	8003de0 <prvIsQueueEmpty>
 80045fe:	2800      	cmp	r0, #0
 8004600:	d0cc      	beq.n	800459c <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 8004602:	2d00      	cmp	r5, #0
 8004604:	d0e9      	beq.n	80045da <xQueueSemaphoreTake+0x14a>
						taskENTER_CRITICAL();
 8004606:	f000 ffb5 	bl	8005574 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800460a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800460c:	b119      	cbz	r1, 8004616 <xQueueSemaphoreTake+0x186>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800460e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004610:	6819      	ldr	r1, [r3, #0]
 8004612:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004616:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8004618:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800461a:	f000 fcd7 	bl	8004fcc <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800461e:	f000 ffcf 	bl	80055c0 <vPortExitCritical>
 8004622:	e7da      	b.n	80045da <xQueueSemaphoreTake+0x14a>
 8004624:	e000ed04 	.word	0xe000ed04

08004628 <xQueueReceiveFromISR>:
{
 8004628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800462c:	4689      	mov	r9, r1
 800462e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8004630:	4605      	mov	r5, r0
 8004632:	b950      	cbnz	r0, 800464a <xQueueReceiveFromISR+0x22>
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	b672      	cpsid	i
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	b662      	cpsie	i
 8004648:	e7fe      	b.n	8004648 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800464a:	b961      	cbnz	r1, 8004666 <xQueueReceiveFromISR+0x3e>
 800464c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800464e:	b153      	cbz	r3, 8004666 <xQueueReceiveFromISR+0x3e>
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	b672      	cpsid	i
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	b662      	cpsie	i
 8004664:	e7fe      	b.n	8004664 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004666:	f001 f887 	bl	8005778 <vPortValidateInterruptPriority>
	__asm volatile
 800466a:	f3ef 8711 	mrs	r7, BASEPRI
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	b672      	cpsid	i
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004682:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004684:	b31c      	cbz	r4, 80046ce <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004686:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800468a:	4649      	mov	r1, r9
 800468c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800468e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8004690:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004692:	f7ff fbe5 	bl	8003e60 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004696:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8004698:	1c73      	adds	r3, r6, #1
 800469a:	d113      	bne.n	80046c4 <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800469c:	692b      	ldr	r3, [r5, #16]
 800469e:	b90b      	cbnz	r3, 80046a4 <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 80046a0:	2001      	movs	r0, #1
 80046a2:	e00b      	b.n	80046bc <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046a4:	f105 0010 	add.w	r0, r5, #16
 80046a8:	f000 fb52 	bl	8004d50 <xTaskRemoveFromEventList>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	d0f7      	beq.n	80046a0 <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 80046b0:	f1b8 0f00 	cmp.w	r8, #0
 80046b4:	d0f4      	beq.n	80046a0 <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80046b6:	2001      	movs	r0, #1
 80046b8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80046bc:	f387 8811 	msr	BASEPRI, r7
}
 80046c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80046c4:	3601      	adds	r6, #1
 80046c6:	b276      	sxtb	r6, r6
 80046c8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80046cc:	e7e8      	b.n	80046a0 <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 80046ce:	4620      	mov	r0, r4
 80046d0:	e7f4      	b.n	80046bc <xQueueReceiveFromISR+0x94>
	...

080046d4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <prvResetNextTaskUnblockTime+0x1c>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	6812      	ldr	r2, [r2, #0]
 80046da:	b91a      	cbnz	r2, 80046e4 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046e0:	605a      	str	r2, [r3, #4]
	}
}
 80046e2:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046e8:	68d2      	ldr	r2, [r2, #12]
 80046ea:	6852      	ldr	r2, [r2, #4]
 80046ec:	e7f8      	b.n	80046e0 <prvResetNextTaskUnblockTime+0xc>
 80046ee:	bf00      	nop
 80046f0:	200002a4 	.word	0x200002a4

080046f4 <prvAddCurrentTaskToDelayedList.isra.0>:
		return xIdleTaskHandle->ulRunTimeCounter;
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 80046f4:	b570      	push	{r4, r5, r6, lr}
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046f6:	4c12      	ldr	r4, [pc, #72]	; (8004740 <prvAddCurrentTaskToDelayedList.isra.0+0x4c>)
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 80046f8:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
 80046fa:	68a6      	ldr	r6, [r4, #8]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046fc:	68e0      	ldr	r0, [r4, #12]
 80046fe:	3004      	adds	r0, #4
 8004700:	f7ff fb5e 	bl	8003dc0 <uxListRemove>
 8004704:	b938      	cbnz	r0, 8004716 <prvAddCurrentTaskToDelayedList.isra.0+0x22>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004706:	68e2      	ldr	r2, [r4, #12]
 8004708:	6923      	ldr	r3, [r4, #16]
 800470a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800470c:	2201      	movs	r2, #1
 800470e:	408a      	lsls	r2, r1
 8004710:	ea23 0302 	bic.w	r3, r3, r2
 8004714:	6123      	str	r3, [r4, #16]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8004716:	1975      	adds	r5, r6, r5

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004718:	68e3      	ldr	r3, [r4, #12]
 800471a:	605d      	str	r5, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 800471c:	d306      	bcc.n	800472c <prvAddCurrentTaskToDelayedList.isra.0+0x38>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800471e:	6960      	ldr	r0, [r4, #20]
 8004720:	68e1      	ldr	r1, [r4, #12]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004726:	3104      	adds	r1, #4
 8004728:	f7ff bb33 	b.w	8003d92 <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800472c:	6820      	ldr	r0, [r4, #0]
 800472e:	68e1      	ldr	r1, [r4, #12]
 8004730:	3104      	adds	r1, #4
 8004732:	f7ff fb2e 	bl	8003d92 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8004736:	6863      	ldr	r3, [r4, #4]
 8004738:	429d      	cmp	r5, r3
 800473a:	d200      	bcs.n	800473e <prvAddCurrentTaskToDelayedList.isra.0+0x4a>
				xNextTaskUnblockTime = xTimeToWake;
 800473c:	6065      	str	r5, [r4, #4]
}
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	200002a4 	.word	0x200002a4

08004744 <prvIdleTask>:
{
 8004744:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004746:	4c12      	ldr	r4, [pc, #72]	; (8004790 <prvIdleTask+0x4c>)
				taskYIELD();
 8004748:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 800474c:	4e11      	ldr	r6, [pc, #68]	; (8004794 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800474e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004750:	b943      	cbnz	r3, 8004764 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004752:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004754:	2b01      	cmp	r3, #1
 8004756:	d9fa      	bls.n	800474e <prvIdleTask+0xa>
				taskYIELD();
 8004758:	6037      	str	r7, [r6, #0]
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	e7f4      	b.n	800474e <prvIdleTask+0xa>
			taskENTER_CRITICAL();
 8004764:	f000 ff06 	bl	8005574 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800476a:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800476c:	1d28      	adds	r0, r5, #4
 800476e:	f7ff fb27 	bl	8003dc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004772:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004774:	3b01      	subs	r3, #1
 8004776:	62e3      	str	r3, [r4, #44]	; 0x2c
				--uxDeletedTasksWaitingCleanUp;
 8004778:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800477a:	3b01      	subs	r3, #1
 800477c:	6323      	str	r3, [r4, #48]	; 0x30
			taskEXIT_CRITICAL();
 800477e:	f000 ff1f 	bl	80055c0 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8004782:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004784:	f000 fe58 	bl	8005438 <vPortFree>
			vPortFree( pxTCB );
 8004788:	4628      	mov	r0, r5
 800478a:	f000 fe55 	bl	8005438 <vPortFree>
	}
 800478e:	e7de      	b.n	800474e <prvIdleTask+0xa>
 8004790:	200002a4 	.word	0x200002a4
 8004794:	e000ed04 	.word	0xe000ed04

08004798 <xTaskCreate>:
	{
 8004798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800479c:	0096      	lsls	r6, r2, #2
	{
 800479e:	4607      	mov	r7, r0
 80047a0:	460c      	mov	r4, r1
 80047a2:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047a4:	4630      	mov	r0, r6
 80047a6:	f000 fdc7 	bl	8005338 <pvPortMalloc>
			if( pxStack != NULL )
 80047aa:	4681      	mov	r9, r0
 80047ac:	b1a0      	cbz	r0, 80047d8 <xTaskCreate+0x40>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047ae:	205c      	movs	r0, #92	; 0x5c
 80047b0:	f000 fdc2 	bl	8005338 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80047b4:	4605      	mov	r5, r0
 80047b6:	b160      	cbz	r0, 80047d2 <xTaskCreate+0x3a>
					pxNewTCB->pxStack = pxStack;
 80047b8:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80047bc:	4632      	mov	r2, r6
 80047be:	21a5      	movs	r1, #165	; 0xa5
 80047c0:	4648      	mov	r0, r9
 80047c2:	f009 f95d 	bl	800da80 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80047c6:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
	if( pcName != NULL )
 80047ca:	b944      	cbnz	r4, 80047de <xTaskCreate+0x46>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047cc:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 80047d0:	e014      	b.n	80047fc <xTaskCreate+0x64>
					vPortFree( pxStack );
 80047d2:	4648      	mov	r0, r9
 80047d4:	f000 fe30 	bl	8005438 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047d8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80047dc:	e09a      	b.n	8004914 <xTaskCreate+0x17c>
 80047de:	1e63      	subs	r3, r4, #1
 80047e0:	f105 0234 	add.w	r2, r5, #52	; 0x34
 80047e4:	340f      	adds	r4, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047e6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80047ea:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 80047ee:	7819      	ldrb	r1, [r3, #0]
 80047f0:	b109      	cbz	r1, 80047f6 <xTaskCreate+0x5e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047f2:	429c      	cmp	r4, r3
 80047f4:	d1f7      	bne.n	80047e6 <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047f6:	2300      	movs	r3, #0
 80047f8:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
 80047fe:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004802:	f105 0904 	add.w	r9, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004806:	3e04      	subs	r6, #4
 8004808:	2c06      	cmp	r4, #6
		pxNewTCB->uxMutexesHeld = 0;
 800480a:	f8c5 a050 	str.w	sl, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800480e:	4648      	mov	r0, r9
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004810:	445e      	add	r6, fp
 8004812:	bf28      	it	cs
 8004814:	2406      	movcs	r4, #6
	pxNewTCB->uxPriority = uxPriority;
 8004816:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004818:	64ec      	str	r4, [r5, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800481a:	f1c4 0407 	rsb	r4, r4, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800481e:	f7ff faa9 	bl	8003d74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004822:	f105 0018 	add.w	r0, r5, #24
 8004826:	f7ff faa5 	bl	8003d74 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800482a:	f8c5 a054 	str.w	sl, [r5, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800482e:	4642      	mov	r2, r8
 8004830:	4639      	mov	r1, r7
 8004832:	f026 0007 	bic.w	r0, r6, #7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004836:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004838:	61ac      	str	r4, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800483a:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800483c:	f885 a058 	strb.w	sl, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004840:	f000 fe74 	bl	800552c <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8004844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004846:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 8004848:	b103      	cbz	r3, 800484c <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800484a:	601d      	str	r5, [r3, #0]
		uxCurrentNumberOfTasks++;
 800484c:	4c38      	ldr	r4, [pc, #224]	; (8004930 <xTaskCreate+0x198>)
	taskENTER_CRITICAL();
 800484e:	f000 fe91 	bl	8005574 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004852:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004854:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8004858:	3301      	adds	r3, #1
 800485a:	62e3      	str	r3, [r4, #44]	; 0x2c
		if( pxCurrentTCB == NULL )
 800485c:	68e3      	ldr	r3, [r4, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d15b      	bne.n	800491a <xTaskCreate+0x182>
			pxCurrentTCB = pxNewTCB;
 8004862:	60e5      	str	r5, [r4, #12]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004864:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004866:	2b01      	cmp	r3, #1
 8004868:	d12f      	bne.n	80048ca <xTaskCreate+0x132>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800486a:	4638      	mov	r0, r7
	vListInitialise( &xDelayedTaskList1 );
 800486c:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004870:	f7ff fa75 	bl	8003d5e <vListInitialise>
 8004874:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8004878:	f7ff fa71 	bl	8003d5e <vListInitialise>
 800487c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004880:	f7ff fa6d 	bl	8003d5e <vListInitialise>
 8004884:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8004888:	f7ff fa69 	bl	8003d5e <vListInitialise>
 800488c:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8004890:	f7ff fa65 	bl	8003d5e <vListInitialise>
 8004894:	f104 0098 	add.w	r0, r4, #152	; 0x98
	vListInitialise( &xDelayedTaskList2 );
 8004898:	f104 06d4 	add.w	r6, r4, #212	; 0xd4
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800489c:	f7ff fa5f 	bl	8003d5e <vListInitialise>
 80048a0:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80048a4:	f7ff fa5b 	bl	8003d5e <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 80048a8:	4640      	mov	r0, r8
 80048aa:	f7ff fa58 	bl	8003d5e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048ae:	4630      	mov	r0, r6
 80048b0:	f7ff fa55 	bl	8003d5e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048b4:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80048b8:	f7ff fa51 	bl	8003d5e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80048bc:	f104 0018 	add.w	r0, r4, #24
 80048c0:	f7ff fa4d 	bl	8003d5e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80048c4:	f8c4 8000 	str.w	r8, [r4]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048c8:	6166      	str	r6, [r4, #20]
		uxTaskNumber++;
 80048ca:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
		prvAddTaskToReadyList( pxNewTCB );
 80048ce:	2601      	movs	r6, #1
 80048d0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80048d2:	2014      	movs	r0, #20
		uxTaskNumber++;
 80048d4:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 80048d6:	6921      	ldr	r1, [r4, #16]
 80048d8:	fb00 7002 	mla	r0, r0, r2, r7
		uxTaskNumber++;
 80048dc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80048e0:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80048e2:	fa06 f302 	lsl.w	r3, r6, r2
 80048e6:	430b      	orrs	r3, r1
 80048e8:	4649      	mov	r1, r9
 80048ea:	6123      	str	r3, [r4, #16]
 80048ec:	f7ff fa45 	bl	8003d7a <vListInsertEnd>
	taskEXIT_CRITICAL();
 80048f0:	f000 fe66 	bl	80055c0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80048f4:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80048f8:	b163      	cbz	r3, 8004914 <xTaskCreate+0x17c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048fa:	68e3      	ldr	r3, [r4, #12]
 80048fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004900:	429a      	cmp	r2, r3
 8004902:	d207      	bcs.n	8004914 <xTaskCreate+0x17c>
			taskYIELD_IF_USING_PREEMPTION();
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <xTaskCreate+0x19c>)
 8004906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	f3bf 8f6f 	isb	sy
	}
 8004914:	4630      	mov	r0, r6
 8004916:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 800491a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1d3      	bne.n	80048ca <xTaskCreate+0x132>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004922:	68e3      	ldr	r3, [r4, #12]
 8004924:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	429a      	cmp	r2, r3
 800492a:	d3ce      	bcc.n	80048ca <xTaskCreate+0x132>
					pxCurrentTCB = pxNewTCB;
 800492c:	60e5      	str	r5, [r4, #12]
 800492e:	e7cc      	b.n	80048ca <xTaskCreate+0x132>
 8004930:	200002a4 	.word	0x200002a4
 8004934:	e000ed04 	.word	0xe000ed04

08004938 <vTaskDelete>:
	{
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	4605      	mov	r5, r0
 800493c:	4c2a      	ldr	r4, [pc, #168]	; (80049e8 <vTaskDelete+0xb0>)
		taskENTER_CRITICAL();
 800493e:	f000 fe19 	bl	8005574 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004942:	b905      	cbnz	r5, 8004946 <vTaskDelete+0xe>
 8004944:	68e5      	ldr	r5, [r4, #12]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004946:	1d2e      	adds	r6, r5, #4
 8004948:	4630      	mov	r0, r6
 800494a:	f7ff fa39 	bl	8003dc0 <uxListRemove>
 800494e:	b958      	cbnz	r0, 8004968 <vTaskDelete+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004950:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004952:	2014      	movs	r0, #20
 8004954:	fb00 4001 	mla	r0, r0, r1, r4
 8004958:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800495a:	b92b      	cbnz	r3, 8004968 <vTaskDelete+0x30>
 800495c:	2201      	movs	r2, #1
 800495e:	6923      	ldr	r3, [r4, #16]
 8004960:	408a      	lsls	r2, r1
 8004962:	ea23 0302 	bic.w	r3, r3, r2
 8004966:	6123      	str	r3, [r4, #16]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004968:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800496a:	b11b      	cbz	r3, 8004974 <vTaskDelete+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800496c:	f105 0018 	add.w	r0, r5, #24
 8004970:	f7ff fa26 	bl	8003dc0 <uxListRemove>
			uxTaskNumber++;
 8004974:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004978:	3301      	adds	r3, #1
 800497a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			if( pxTCB == pxCurrentTCB )
 800497e:	68e3      	ldr	r3, [r4, #12]
 8004980:	42ab      	cmp	r3, r5
 8004982:	d11c      	bne.n	80049be <vTaskDelete+0x86>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004984:	4631      	mov	r1, r6
 8004986:	4819      	ldr	r0, [pc, #100]	; (80049ec <vTaskDelete+0xb4>)
 8004988:	f7ff f9f7 	bl	8003d7a <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 800498c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800498e:	3301      	adds	r3, #1
 8004990:	6323      	str	r3, [r4, #48]	; 0x30
		taskEXIT_CRITICAL();
 8004992:	f000 fe15 	bl	80055c0 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8004996:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800499a:	b323      	cbz	r3, 80049e6 <vTaskDelete+0xae>
			if( pxTCB == pxCurrentTCB )
 800499c:	68e3      	ldr	r3, [r4, #12]
 800499e:	42ab      	cmp	r3, r5
 80049a0:	d121      	bne.n	80049e6 <vTaskDelete+0xae>
				configASSERT( uxSchedulerSuspended == 0 );
 80049a2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80049a6:	b1b3      	cbz	r3, 80049d6 <vTaskDelete+0x9e>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	b672      	cpsid	i
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	b662      	cpsie	i
 80049bc:	e7fe      	b.n	80049bc <vTaskDelete+0x84>
				--uxCurrentNumberOfTasks;
 80049be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 80049c0:	6b28      	ldr	r0, [r5, #48]	; 0x30
				--uxCurrentNumberOfTasks;
 80049c2:	3b01      	subs	r3, #1
 80049c4:	62e3      	str	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 80049c6:	f000 fd37 	bl	8005438 <vPortFree>
			vPortFree( pxTCB );
 80049ca:	4628      	mov	r0, r5
 80049cc:	f000 fd34 	bl	8005438 <vPortFree>
				prvResetNextTaskUnblockTime();
 80049d0:	f7ff fe80 	bl	80046d4 <prvResetNextTaskUnblockTime>
 80049d4:	e7dd      	b.n	8004992 <vTaskDelete+0x5a>
				portYIELD_WITHIN_API();
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <vTaskDelete+0xb8>)
 80049d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	f3bf 8f6f 	isb	sy
	}
 80049e6:	bd70      	pop	{r4, r5, r6, pc}
 80049e8:	200002a4 	.word	0x200002a4
 80049ec:	200002bc 	.word	0x200002bc
 80049f0:	e000ed04 	.word	0xe000ed04

080049f4 <vTaskStartScheduler>:
{
 80049f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80049f6:	4c19      	ldr	r4, [pc, #100]	; (8004a5c <vTaskStartScheduler+0x68>)
 80049f8:	2500      	movs	r5, #0
 80049fa:	2280      	movs	r2, #128	; 0x80
 80049fc:	4918      	ldr	r1, [pc, #96]	; (8004a60 <vTaskStartScheduler+0x6c>)
 80049fe:	f504 7384 	add.w	r3, r4, #264	; 0x108
 8004a02:	4818      	ldr	r0, [pc, #96]	; (8004a64 <vTaskStartScheduler+0x70>)
 8004a04:	9500      	str	r5, [sp, #0]
 8004a06:	9301      	str	r3, [sp, #4]
 8004a08:	462b      	mov	r3, r5
 8004a0a:	f7ff fec5 	bl	8004798 <xTaskCreate>
	if( xReturn == pdPASS )
 8004a0e:	2801      	cmp	r0, #1
 8004a10:	d114      	bne.n	8004a3c <vTaskStartScheduler+0x48>
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	b672      	cpsid	i
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a2a:	6063      	str	r3, [r4, #4]
		xSchedulerRunning = pdTRUE;
 8004a2c:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a30:	60a5      	str	r5, [r4, #8]
}
 8004a32:	b003      	add	sp, #12
 8004a34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004a38:	f000 be3e 	b.w	80056b8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	d10a      	bne.n	8004a56 <vTaskStartScheduler+0x62>
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	b672      	cpsid	i
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	b662      	cpsie	i
 8004a54:	e7fe      	b.n	8004a54 <vTaskStartScheduler+0x60>
}
 8004a56:	b003      	add	sp, #12
 8004a58:	bd30      	pop	{r4, r5, pc}
 8004a5a:	bf00      	nop
 8004a5c:	200002a4 	.word	0x200002a4
 8004a60:	08012d8e 	.word	0x08012d8e
 8004a64:	08004745 	.word	0x08004745

08004a68 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004a68:	4a03      	ldr	r2, [pc, #12]	; (8004a78 <vTaskSuspendAll+0x10>)
 8004a6a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 8004a6e:	3301      	adds	r3, #1
 8004a70:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
}
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	200002a4 	.word	0x200002a4

08004a7c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004a7c:	4b01      	ldr	r3, [pc, #4]	; (8004a84 <xTaskGetTickCount+0x8>)
 8004a7e:	6898      	ldr	r0, [r3, #8]
}
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	200002a4 	.word	0x200002a4

08004a88 <xTaskGetTickCountFromISR>:
{
 8004a88:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a8a:	f000 fe75 	bl	8005778 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8004a8e:	4b01      	ldr	r3, [pc, #4]	; (8004a94 <xTaskGetTickCountFromISR+0xc>)
 8004a90:	6898      	ldr	r0, [r3, #8]
}
 8004a92:	bd08      	pop	{r3, pc}
 8004a94:	200002a4 	.word	0x200002a4

08004a98 <xTaskIncrementTick>:
{
 8004a98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a9c:	4b37      	ldr	r3, [pc, #220]	; (8004b7c <xTaskIncrementTick+0xe4>)
 8004a9e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004aa2:	461c      	mov	r4, r3
 8004aa4:	2a00      	cmp	r2, #0
 8004aa6:	d161      	bne.n	8004b6c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004aa8:	689f      	ldr	r7, [r3, #8]
 8004aaa:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8004aac:	609f      	str	r7, [r3, #8]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004aae:	b9c7      	cbnz	r7, 8004ae2 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	b153      	cbz	r3, 8004acc <xTaskIncrementTick+0x34>
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	b672      	cpsid	i
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	b662      	cpsie	i
 8004aca:	e7fe      	b.n	8004aca <xTaskIncrementTick+0x32>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	6962      	ldr	r2, [r4, #20]
 8004ad0:	6022      	str	r2, [r4, #0]
 8004ad2:	6163      	str	r3, [r4, #20]
 8004ad4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8004ad8:	3301      	adds	r3, #1
 8004ada:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8004ade:	f7ff fdf9 	bl	80046d4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ae2:	6863      	ldr	r3, [r4, #4]
BaseType_t xSwitchRequired = pdFALSE;
 8004ae4:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ae6:	42bb      	cmp	r3, r7
 8004ae8:	d910      	bls.n	8004b0c <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004aea:	68e3      	ldr	r3, [r4, #12]
 8004aec:	2214      	movs	r2, #20
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	fb02 4303 	mla	r3, r2, r3, r4
 8004af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				xSwitchRequired = pdTRUE;
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	bf28      	it	cs
 8004afa:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
 8004afc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			xSwitchRequired = pdTRUE;
 8004b00:	2b00      	cmp	r3, #0
}
 8004b02:	bf0c      	ite	eq
 8004b04:	4628      	moveq	r0, r5
 8004b06:	2001      	movne	r0, #1
 8004b08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 8004b0c:	f04f 0a01 	mov.w	sl, #1
 8004b10:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8004b80 <xTaskIncrementTick+0xe8>
 8004b14:	f04f 0914 	mov.w	r9, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	b91b      	cbnz	r3, 8004b26 <xTaskIncrementTick+0x8e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
						xNextTaskUnblockTime = xItemValue;
 8004b22:	6063      	str	r3, [r4, #4]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b24:	e7e1      	b.n	8004aea <xTaskIncrementTick+0x52>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b2c:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004b2e:	429f      	cmp	r7, r3
 8004b30:	d3f7      	bcc.n	8004b22 <xTaskIncrementTick+0x8a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b32:	f106 0b04 	add.w	fp, r6, #4
 8004b36:	4658      	mov	r0, fp
 8004b38:	f7ff f942 	bl	8003dc0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b3c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004b3e:	b11b      	cbz	r3, 8004b48 <xTaskIncrementTick+0xb0>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b40:	f106 0018 	add.w	r0, r6, #24
 8004b44:	f7ff f93c 	bl	8003dc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b48:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004b4a:	4659      	mov	r1, fp
 8004b4c:	6922      	ldr	r2, [r4, #16]
 8004b4e:	fa0a f300 	lsl.w	r3, sl, r0
 8004b52:	fb09 8000 	mla	r0, r9, r0, r8
 8004b56:	4313      	orrs	r3, r2
 8004b58:	6123      	str	r3, [r4, #16]
 8004b5a:	f7ff f90e 	bl	8003d7a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b5e:	68e3      	ldr	r3, [r4, #12]
 8004b60:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004b64:	429a      	cmp	r2, r3
 8004b66:	bf28      	it	cs
 8004b68:	2501      	movcs	r5, #1
 8004b6a:	e7d5      	b.n	8004b18 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 8004b6c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
BaseType_t xSwitchRequired = pdFALSE;
 8004b70:	2500      	movs	r5, #0
		++uxPendedTicks;
 8004b72:	3301      	adds	r3, #1
 8004b74:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004b78:	e7c0      	b.n	8004afc <xTaskIncrementTick+0x64>
 8004b7a:	bf00      	nop
 8004b7c:	200002a4 	.word	0x200002a4
 8004b80:	200002d8 	.word	0x200002d8

08004b84 <xTaskResumeAll>:
{
 8004b84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8004b88:	4c34      	ldr	r4, [pc, #208]	; (8004c5c <xTaskResumeAll+0xd8>)
 8004b8a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004b8e:	b953      	cbnz	r3, 8004ba6 <xTaskResumeAll+0x22>
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	b672      	cpsid	i
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	b662      	cpsie	i
 8004ba4:	e7fe      	b.n	8004ba4 <xTaskResumeAll+0x20>
	taskENTER_CRITICAL();
 8004ba6:	f000 fce5 	bl	8005574 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004baa:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bb4:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 8004bb8:	b135      	cbz	r5, 8004bc8 <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
 8004bba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004bbc:	f000 fd00 	bl	80055c0 <vPortExitCritical>
}
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	b002      	add	sp, #8
 8004bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f5      	beq.n	8004bba <xTaskResumeAll+0x36>
					prvAddTaskToReadyList( pxTCB );
 8004bce:	2601      	movs	r6, #1
 8004bd0:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8004bd4:	f04f 0814 	mov.w	r8, #20
 8004bd8:	e01d      	b.n	8004c16 <xTaskResumeAll+0x92>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bda:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8004bde:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004be0:	f105 0018 	add.w	r0, r5, #24
 8004be4:	f7ff f8ec 	bl	8003dc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004be8:	1d29      	adds	r1, r5, #4
 8004bea:	4608      	mov	r0, r1
 8004bec:	9101      	str	r1, [sp, #4]
 8004bee:	f7ff f8e7 	bl	8003dc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bf2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004bf4:	6922      	ldr	r2, [r4, #16]
 8004bf6:	fa06 f300 	lsl.w	r3, r6, r0
 8004bfa:	9901      	ldr	r1, [sp, #4]
 8004bfc:	fb08 7000 	mla	r0, r8, r0, r7
 8004c00:	4313      	orrs	r3, r2
 8004c02:	6123      	str	r3, [r4, #16]
 8004c04:	f7ff f8b9 	bl	8003d7a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c08:	68e3      	ldr	r3, [r4, #12]
 8004c0a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d301      	bcc.n	8004c16 <xTaskResumeAll+0x92>
						xYieldPending = pdTRUE;
 8004c12:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c16:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1dd      	bne.n	8004bda <xTaskResumeAll+0x56>
				if( pxTCB != NULL )
 8004c1e:	b10d      	cbz	r5, 8004c24 <xTaskResumeAll+0xa0>
					prvResetNextTaskUnblockTime();
 8004c20:	f7ff fd58 	bl	80046d4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c24:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c28:	b14d      	cbz	r5, 8004c3e <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 8004c2a:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004c2c:	f7ff ff34 	bl	8004a98 <xTaskIncrementTick>
 8004c30:	b108      	cbz	r0, 8004c36 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8004c32:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c36:	3d01      	subs	r5, #1
 8004c38:	d1f8      	bne.n	8004c2c <xTaskResumeAll+0xa8>
						uxPendedTicks = 0;
 8004c3a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
				if( xYieldPending != pdFALSE )
 8004c3e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0b9      	beq.n	8004bba <xTaskResumeAll+0x36>
					taskYIELD_IF_USING_PREEMPTION();
 8004c46:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <xTaskResumeAll+0xdc>)
 8004c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004c56:	2401      	movs	r4, #1
 8004c58:	e7b0      	b.n	8004bbc <xTaskResumeAll+0x38>
 8004c5a:	bf00      	nop
 8004c5c:	200002a4 	.word	0x200002a4
 8004c60:	e000ed04 	.word	0xe000ed04

08004c64 <vTaskDelay>:
	{
 8004c64:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c66:	b940      	cbnz	r0, 8004c7a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004c68:	4b10      	ldr	r3, [pc, #64]	; (8004cac <vTaskDelay+0x48>)
 8004c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	f3bf 8f6f 	isb	sy
	}
 8004c78:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <vTaskDelay+0x4c>)
 8004c7c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004c80:	b153      	cbz	r3, 8004c98 <vTaskDelay+0x34>
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	b672      	cpsid	i
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	b662      	cpsie	i
 8004c96:	e7fe      	b.n	8004c96 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004c98:	f7ff fee6 	bl	8004a68 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c9c:	f7ff fd2a 	bl	80046f4 <prvAddCurrentTaskToDelayedList.isra.0>
			xAlreadyYielded = xTaskResumeAll();
 8004ca0:	f7ff ff70 	bl	8004b84 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	d0df      	beq.n	8004c68 <vTaskDelay+0x4>
 8004ca8:	e7e6      	b.n	8004c78 <vTaskDelay+0x14>
 8004caa:	bf00      	nop
 8004cac:	e000ed04 	.word	0xe000ed04
 8004cb0:	200002a4 	.word	0x200002a4

08004cb4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cb4:	4b18      	ldr	r3, [pc, #96]	; (8004d18 <vTaskSwitchContext+0x64>)
 8004cb6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004cba:	4618      	mov	r0, r3
{
 8004cbc:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cbe:	b11a      	cbz	r2, 8004cc8 <vTaskSwitchContext+0x14>
		xYieldPending = pdTRUE;
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
 8004cc6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004cc8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ccc:	691a      	ldr	r2, [r3, #16]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004cce:	fab2 f282 	clz	r2, r2
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	2114      	movs	r1, #20
 8004cd6:	f1c2 021f 	rsb	r2, r2, #31
 8004cda:	4351      	muls	r1, r2
 8004cdc:	440b      	add	r3, r1
 8004cde:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8004ce0:	b954      	cbnz	r4, 8004cf8 <vTaskSwitchContext+0x44>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	b672      	cpsid	i
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	b662      	cpsie	i
 8004cf6:	e7fe      	b.n	8004cf6 <vTaskSwitchContext+0x42>
 8004cf8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8004cfa:	4401      	add	r1, r0
 8004cfc:	6864      	ldr	r4, [r4, #4]
 8004cfe:	313c      	adds	r1, #60	; 0x3c
 8004d00:	428c      	cmp	r4, r1
 8004d02:	639c      	str	r4, [r3, #56]	; 0x38
 8004d04:	bf04      	itt	eq
 8004d06:	6861      	ldreq	r1, [r4, #4]
 8004d08:	6399      	streq	r1, [r3, #56]	; 0x38
 8004d0a:	2314      	movs	r3, #20
 8004d0c:	fb03 0202 	mla	r2, r3, r2, r0
 8004d10:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	60c3      	str	r3, [r0, #12]
}
 8004d16:	e7d6      	b.n	8004cc6 <vTaskSwitchContext+0x12>
 8004d18:	200002a4 	.word	0x200002a4

08004d1c <vTaskPlaceOnEventList>:
{
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004d20:	b950      	cbnz	r0, 8004d38 <vTaskPlaceOnEventList+0x1c>
 8004d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d26:	b672      	cpsid	i
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	b662      	cpsie	i
 8004d36:	e7fe      	b.n	8004d36 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d38:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <vTaskPlaceOnEventList+0x30>)
 8004d3a:	68d9      	ldr	r1, [r3, #12]
 8004d3c:	3118      	adds	r1, #24
 8004d3e:	f7ff f828 	bl	8003d92 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d42:	4620      	mov	r0, r4
}
 8004d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d48:	f7ff bcd4 	b.w	80046f4 <prvAddCurrentTaskToDelayedList.isra.0>
 8004d4c:	200002a4 	.word	0x200002a4

08004d50 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d50:	68c3      	ldr	r3, [r0, #12]
{
 8004d52:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d54:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004d56:	b955      	cbnz	r5, 8004d6e <xTaskRemoveFromEventList+0x1e>
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	b672      	cpsid	i
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	b662      	cpsie	i
 8004d6c:	e7fe      	b.n	8004d6c <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d6e:	f105 0118 	add.w	r1, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d72:	4c15      	ldr	r4, [pc, #84]	; (8004dc8 <xTaskRemoveFromEventList+0x78>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d74:	4608      	mov	r0, r1
 8004d76:	9101      	str	r1, [sp, #4]
 8004d78:	f7ff f822 	bl	8003dc0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d7c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004d80:	9901      	ldr	r1, [sp, #4]
 8004d82:	b9e3      	cbnz	r3, 8004dbe <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d84:	1d29      	adds	r1, r5, #4
 8004d86:	4608      	mov	r0, r1
 8004d88:	9101      	str	r1, [sp, #4]
 8004d8a:	f7ff f819 	bl	8003dc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d8e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004d90:	2301      	movs	r3, #1
 8004d92:	6920      	ldr	r0, [r4, #16]
 8004d94:	9901      	ldr	r1, [sp, #4]
 8004d96:	4093      	lsls	r3, r2
 8004d98:	4303      	orrs	r3, r0
 8004d9a:	2014      	movs	r0, #20
 8004d9c:	6123      	str	r3, [r4, #16]
 8004d9e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004da2:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004da6:	f7fe ffe8 	bl	8003d7a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004daa:	68e3      	ldr	r3, [r4, #12]
 8004dac:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d907      	bls.n	8004dc4 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 8004db4:	2001      	movs	r0, #1
 8004db6:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
}
 8004dba:	b003      	add	sp, #12
 8004dbc:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004dbe:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8004dc2:	e7f0      	b.n	8004da6 <xTaskRemoveFromEventList+0x56>
		xReturn = pdFALSE;
 8004dc4:	2000      	movs	r0, #0
	return xReturn;
 8004dc6:	e7f8      	b.n	8004dba <xTaskRemoveFromEventList+0x6a>
 8004dc8:	200002a4 	.word	0x200002a4

08004dcc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004dcc:	4b03      	ldr	r3, [pc, #12]	; (8004ddc <vTaskInternalSetTimeOutState+0x10>)
 8004dce:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004dd2:	689b      	ldr	r3, [r3, #8]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004dd4:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004dd6:	6043      	str	r3, [r0, #4]
}
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	200002a4 	.word	0x200002a4

08004de0 <xTaskCheckForTimeOut>:
{
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8004de4:	4605      	mov	r5, r0
 8004de6:	b950      	cbnz	r0, 8004dfe <xTaskCheckForTimeOut+0x1e>
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	b672      	cpsid	i
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	b662      	cpsie	i
 8004dfc:	e7fe      	b.n	8004dfc <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8004dfe:	b951      	cbnz	r1, 8004e16 <xTaskCheckForTimeOut+0x36>
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	b672      	cpsid	i
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	b662      	cpsie	i
 8004e14:	e7fe      	b.n	8004e14 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8004e16:	f000 fbad 	bl	8005574 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <xTaskCheckForTimeOut+0x74>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e1c:	6828      	ldr	r0, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8004e1e:	6899      	ldr	r1, [r3, #8]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e20:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e24:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e26:	4298      	cmp	r0, r3
 8004e28:	d001      	beq.n	8004e2e <xTaskCheckForTimeOut+0x4e>
 8004e2a:	428a      	cmp	r2, r1
 8004e2c:	d910      	bls.n	8004e50 <xTaskCheckForTimeOut+0x70>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e2e:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e30:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e32:	4283      	cmp	r3, r0
 8004e34:	d90a      	bls.n	8004e4c <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait -= xElapsedTime;
 8004e36:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e38:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8004e3a:	4413      	add	r3, r2
 8004e3c:	6023      	str	r3, [r4, #0]
			xReturn = pdFALSE;
 8004e3e:	2400      	movs	r4, #0
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e40:	f7ff ffc4 	bl	8004dcc <vTaskInternalSetTimeOutState>
	taskEXIT_CRITICAL();
 8004e44:	f000 fbbc 	bl	80055c0 <vPortExitCritical>
}
 8004e48:	4620      	mov	r0, r4
 8004e4a:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004e50:	2401      	movs	r4, #1
 8004e52:	e7f7      	b.n	8004e44 <xTaskCheckForTimeOut+0x64>
 8004e54:	200002a4 	.word	0x200002a4

08004e58 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004e58:	4b02      	ldr	r3, [pc, #8]	; (8004e64 <vTaskMissedYield+0xc>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	200002a4 	.word	0x200002a4

08004e68 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <xTaskGetSchedulerState+0x1c>)
 8004e6a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8004e6e:	b132      	cbz	r2, 8004e7e <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e70:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004e74:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e76:	bf0c      	ite	eq
 8004e78:	2002      	moveq	r0, #2
 8004e7a:	2000      	movne	r0, #0
 8004e7c:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e7e:	2001      	movs	r0, #1
	}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	200002a4 	.word	0x200002a4

08004e88 <xTaskPriorityInherit>:
	{
 8004e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d035      	beq.n	8004efc <xTaskPriorityInherit+0x74>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004e90:	4a22      	ldr	r2, [pc, #136]	; (8004f1c <xTaskPriorityInherit+0x94>)
 8004e92:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004e94:	68d1      	ldr	r1, [r2, #12]
 8004e96:	4615      	mov	r5, r2
 8004e98:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004e9a:	428b      	cmp	r3, r1
 8004e9c:	d236      	bcs.n	8004f0c <xTaskPriorityInherit+0x84>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e9e:	6982      	ldr	r2, [r0, #24]
 8004ea0:	2a00      	cmp	r2, #0
 8004ea2:	db04      	blt.n	8004eae <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ea4:	68ea      	ldr	r2, [r5, #12]
 8004ea6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ea8:	f1c2 0207 	rsb	r2, r2, #7
 8004eac:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004eae:	4e1c      	ldr	r6, [pc, #112]	; (8004f20 <xTaskPriorityInherit+0x98>)
 8004eb0:	2714      	movs	r7, #20
 8004eb2:	6962      	ldr	r2, [r4, #20]
 8004eb4:	fb07 6303 	mla	r3, r7, r3, r6
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d121      	bne.n	8004f00 <xTaskPriorityInherit+0x78>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ebc:	1d21      	adds	r1, r4, #4
 8004ebe:	4608      	mov	r0, r1
 8004ec0:	9101      	str	r1, [sp, #4]
 8004ec2:	f7fe ff7d 	bl	8003dc0 <uxListRemove>
 8004ec6:	9901      	ldr	r1, [sp, #4]
 8004ec8:	b950      	cbnz	r0, 8004ee0 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004eca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004ecc:	fb07 5700 	mla	r7, r7, r0, r5
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed2:	b92b      	cbnz	r3, 8004ee0 <xTaskPriorityInherit+0x58>
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	692b      	ldr	r3, [r5, #16]
 8004ed8:	4082      	lsls	r2, r0
 8004eda:	ea23 0302 	bic.w	r3, r3, r2
 8004ede:	612b      	str	r3, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ee0:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004ee2:	6928      	ldr	r0, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004ee8:	2401      	movs	r4, #1
 8004eea:	fa04 f203 	lsl.w	r2, r4, r3
 8004eee:	4302      	orrs	r2, r0
 8004ef0:	2014      	movs	r0, #20
 8004ef2:	fb00 6003 	mla	r0, r0, r3, r6
 8004ef6:	612a      	str	r2, [r5, #16]
 8004ef8:	f7fe ff3f 	bl	8003d7a <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 8004efc:	4620      	mov	r0, r4
		return xReturn;
 8004efe:	e003      	b.n	8004f08 <xTaskPriorityInherit+0x80>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f00:	68eb      	ldr	r3, [r5, #12]
				xReturn = pdTRUE;
 8004f02:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f06:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8004f08:	b003      	add	sp, #12
 8004f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004f0c:	68d3      	ldr	r3, [r2, #12]
 8004f0e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8004f10:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004f12:	42a0      	cmp	r0, r4
 8004f14:	bf2c      	ite	cs
 8004f16:	2000      	movcs	r0, #0
 8004f18:	2001      	movcc	r0, #1
 8004f1a:	e7f5      	b.n	8004f08 <xTaskPriorityInherit+0x80>
 8004f1c:	200002a4 	.word	0x200002a4
 8004f20:	200002d8 	.word	0x200002d8

08004f24 <xTaskPriorityDisinherit>:
	{
 8004f24:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8004f26:	4604      	mov	r4, r0
 8004f28:	b910      	cbnz	r0, 8004f30 <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 8004f2a:	2000      	movs	r0, #0
	}
 8004f2c:	b002      	add	sp, #8
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8004f30:	4d24      	ldr	r5, [pc, #144]	; (8004fc4 <xTaskPriorityDisinherit+0xa0>)
 8004f32:	68eb      	ldr	r3, [r5, #12]
 8004f34:	4283      	cmp	r3, r0
 8004f36:	d00a      	beq.n	8004f4e <xTaskPriorityDisinherit+0x2a>
 8004f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3c:	b672      	cpsid	i
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	b662      	cpsie	i
 8004f4c:	e7fe      	b.n	8004f4c <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f50:	b953      	cbnz	r3, 8004f68 <xTaskPriorityDisinherit+0x44>
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	b672      	cpsid	i
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	b662      	cpsie	i
 8004f66:	e7fe      	b.n	8004f66 <xTaskPriorityDisinherit+0x42>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f68:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8004f6a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f6c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8004f6e:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f70:	4291      	cmp	r1, r2
 8004f72:	d0da      	beq.n	8004f2a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1d8      	bne.n	8004f2a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f78:	1d01      	adds	r1, r0, #4
 8004f7a:	4608      	mov	r0, r1
 8004f7c:	9101      	str	r1, [sp, #4]
 8004f7e:	f7fe ff1f 	bl	8003dc0 <uxListRemove>
 8004f82:	9901      	ldr	r1, [sp, #4]
 8004f84:	b958      	cbnz	r0, 8004f9e <xTaskPriorityDisinherit+0x7a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f88:	2014      	movs	r0, #20
 8004f8a:	fb00 5006 	mla	r0, r0, r6, r5
 8004f8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f90:	b92b      	cbnz	r3, 8004f9e <xTaskPriorityDisinherit+0x7a>
 8004f92:	2201      	movs	r2, #1
 8004f94:	692b      	ldr	r3, [r5, #16]
 8004f96:	40b2      	lsls	r2, r6
 8004f98:	ea23 0302 	bic.w	r3, r3, r2
 8004f9c:	612b      	str	r3, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8004fa0:	6928      	ldr	r0, [r5, #16]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fa2:	f1c3 0207 	rsb	r2, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fa6:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fa8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004faa:	2401      	movs	r4, #1
 8004fac:	fa04 f203 	lsl.w	r2, r4, r3
 8004fb0:	4302      	orrs	r2, r0
 8004fb2:	2014      	movs	r0, #20
 8004fb4:	612a      	str	r2, [r5, #16]
 8004fb6:	4a04      	ldr	r2, [pc, #16]	; (8004fc8 <xTaskPriorityDisinherit+0xa4>)
 8004fb8:	fb00 2003 	mla	r0, r0, r3, r2
 8004fbc:	f7fe fedd 	bl	8003d7a <vListInsertEnd>
					xReturn = pdTRUE;
 8004fc0:	4620      	mov	r0, r4
		return xReturn;
 8004fc2:	e7b3      	b.n	8004f2c <xTaskPriorityDisinherit+0x8>
 8004fc4:	200002a4 	.word	0x200002a4
 8004fc8:	200002d8 	.word	0x200002d8

08004fcc <vTaskPriorityDisinheritAfterTimeout>:
	{
 8004fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8004fce:	4604      	mov	r4, r0
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d051      	beq.n	8005078 <vTaskPriorityDisinheritAfterTimeout+0xac>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fd4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004fd6:	b952      	cbnz	r2, 8004fee <vTaskPriorityDisinheritAfterTimeout+0x22>
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	b672      	cpsid	i
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	b662      	cpsie	i
 8004fec:	e7fe      	b.n	8004fec <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004fee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004ff0:	4299      	cmp	r1, r3
 8004ff2:	bf38      	it	cc
 8004ff4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004ff6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004ff8:	428b      	cmp	r3, r1
 8004ffa:	d03d      	beq.n	8005078 <vTaskPriorityDisinheritAfterTimeout+0xac>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004ffc:	2a01      	cmp	r2, #1
 8004ffe:	d13b      	bne.n	8005078 <vTaskPriorityDisinheritAfterTimeout+0xac>
					configASSERT( pxTCB != pxCurrentTCB );
 8005000:	4d1e      	ldr	r5, [pc, #120]	; (800507c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8005002:	68ea      	ldr	r2, [r5, #12]
 8005004:	4282      	cmp	r2, r0
 8005006:	d10a      	bne.n	800501e <vTaskPriorityDisinheritAfterTimeout+0x52>
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	b672      	cpsid	i
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	b662      	cpsie	i
 800501c:	e7fe      	b.n	800501c <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800501e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005020:	2714      	movs	r7, #20
 8005022:	4e17      	ldr	r6, [pc, #92]	; (8005080 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005024:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 8005026:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005028:	fb07 6303 	mla	r3, r7, r3, r6
 800502c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800502e:	bfa4      	itt	ge
 8005030:	f1c1 0107 	rsbge	r1, r1, #7
 8005034:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005036:	429a      	cmp	r2, r3
 8005038:	d11e      	bne.n	8005078 <vTaskPriorityDisinheritAfterTimeout+0xac>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800503a:	1d01      	adds	r1, r0, #4
 800503c:	4608      	mov	r0, r1
 800503e:	9101      	str	r1, [sp, #4]
 8005040:	f7fe febe 	bl	8003dc0 <uxListRemove>
 8005044:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005046:	9901      	ldr	r1, [sp, #4]
 8005048:	b948      	cbnz	r0, 800505e <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800504a:	fb07 5702 	mla	r7, r7, r2, r5
 800504e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005050:	b92b      	cbnz	r3, 800505e <vTaskPriorityDisinheritAfterTimeout+0x92>
 8005052:	2001      	movs	r0, #1
 8005054:	692b      	ldr	r3, [r5, #16]
 8005056:	4090      	lsls	r0, r2
 8005058:	ea23 0300 	bic.w	r3, r3, r0
 800505c:	612b      	str	r3, [r5, #16]
						prvAddTaskToReadyList( pxTCB );
 800505e:	2301      	movs	r3, #1
 8005060:	6928      	ldr	r0, [r5, #16]
 8005062:	4093      	lsls	r3, r2
 8005064:	4303      	orrs	r3, r0
 8005066:	2014      	movs	r0, #20
 8005068:	fb00 6002 	mla	r0, r0, r2, r6
 800506c:	612b      	str	r3, [r5, #16]
	}
 800506e:	b003      	add	sp, #12
 8005070:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8005074:	f7fe be81 	b.w	8003d7a <vListInsertEnd>
	}
 8005078:	b003      	add	sp, #12
 800507a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800507c:	200002a4 	.word	0x200002a4
 8005080:	200002d8 	.word	0x200002d8

08005084 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005084:	4b04      	ldr	r3, [pc, #16]	; (8005098 <pvTaskIncrementMutexHeldCount+0x14>)
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	b11a      	cbz	r2, 8005092 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800508a:	68d9      	ldr	r1, [r3, #12]
 800508c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800508e:	3201      	adds	r2, #1
 8005090:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8005092:	68d8      	ldr	r0, [r3, #12]
	}
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	200002a4 	.word	0x200002a4

0800509c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800509c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800509e:	f7ff fca9 	bl	80049f4 <vTaskStartScheduler>
  
  return osOK;
}
 80050a2:	2000      	movs	r0, #0
 80050a4:	bd08      	pop	{r3, pc}

080050a6 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050a6:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80050aa:	b10b      	cbz	r3, 80050b0 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80050ac:	f7ff bcec 	b.w	8004a88 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80050b0:	f7ff bce4 	b.w	8004a7c <xTaskGetTickCount>

080050b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80050b4:	b530      	push	{r4, r5, lr}
 80050b6:	4604      	mov	r4, r0
 80050b8:	b085      	sub	sp, #20
 80050ba:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050bc:	8a22      	ldrh	r2, [r4, #16]
 80050be:	ad03      	add	r5, sp, #12
 80050c0:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 80050c4:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80050c6:	bf14      	ite	ne
 80050c8:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80050ca:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050cc:	e9d0 1000 	ldrd	r1, r0, [r0]
 80050d0:	e9cd 4500 	strd	r4, r5, [sp]
 80050d4:	f7ff fb60 	bl	8004798 <xTaskCreate>
 80050d8:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80050da:	bf0c      	ite	eq
 80050dc:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80050de:	2000      	movne	r0, #0
}
 80050e0:	b005      	add	sp, #20
 80050e2:	bd30      	pop	{r4, r5, pc}

080050e4 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80050e4:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80050e6:	f7ff fc27 	bl	8004938 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 80050ea:	2000      	movs	r0, #0
 80050ec:	bd08      	pop	{r3, pc}

080050ee <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80050ee:	2801      	cmp	r0, #1
{
 80050f0:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80050f2:	bf38      	it	cc
 80050f4:	2001      	movcc	r0, #1
 80050f6:	f7ff fdb5 	bl	8004c64 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80050fa:	2000      	movs	r0, #0
 80050fc:	bd08      	pop	{r3, pc}

080050fe <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80050fe:	2001      	movs	r0, #1
 8005100:	f7ff b840 	b.w	8004184 <xQueueCreateMutex>

08005104 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005104:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005106:	2400      	movs	r4, #0
 8005108:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800510a:	b1e0      	cbz	r0, 8005146 <osMutexWait+0x42>
 800510c:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8005110:	b19b      	cbz	r3, 800513a <osMutexWait+0x36>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005112:	aa01      	add	r2, sp, #4
 8005114:	4621      	mov	r1, r4
 8005116:	f7ff fa87 	bl	8004628 <xQueueReceiveFromISR>
 800511a:	2801      	cmp	r0, #1
 800511c:	d111      	bne.n	8005142 <osMutexWait+0x3e>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800511e:	9b01      	ldr	r3, [sp, #4]
 8005120:	b913      	cbnz	r3, 8005128 <osMutexWait+0x24>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8005122:	2000      	movs	r0, #0
}
 8005124:	b002      	add	sp, #8
 8005126:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8005128:	4b08      	ldr	r3, [pc, #32]	; (800514c <osMutexWait+0x48>)
 800512a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	e7f3      	b.n	8005122 <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800513a:	f7ff f9a9 	bl	8004490 <xQueueSemaphoreTake>
 800513e:	2801      	cmp	r0, #1
 8005140:	d0ef      	beq.n	8005122 <osMutexWait+0x1e>
    return osErrorOS;
 8005142:	20ff      	movs	r0, #255	; 0xff
 8005144:	e7ee      	b.n	8005124 <osMutexWait+0x20>
    return osErrorParameter;
 8005146:	2080      	movs	r0, #128	; 0x80
 8005148:	e7ec      	b.n	8005124 <osMutexWait+0x20>
 800514a:	bf00      	nop
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005150:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8005152:	2400      	movs	r4, #0
 8005154:	9401      	str	r4, [sp, #4]
 8005156:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800515a:	b193      	cbz	r3, 8005182 <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800515c:	a901      	add	r1, sp, #4
 800515e:	f7ff f895 	bl	800428c <xQueueGiveFromISR>
 8005162:	2801      	cmp	r0, #1
 8005164:	d113      	bne.n	800518e <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005166:	9b01      	ldr	r3, [sp, #4]
 8005168:	b913      	cbnz	r3, 8005170 <osMutexRelease+0x20>
  osStatus result = osOK;
 800516a:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800516c:	b002      	add	sp, #8
 800516e:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8005170:	4b08      	ldr	r3, [pc, #32]	; (8005194 <osMutexRelease+0x44>)
 8005172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	e7f3      	b.n	800516a <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005182:	461a      	mov	r2, r3
 8005184:	4619      	mov	r1, r3
 8005186:	f7fe ff43 	bl	8004010 <xQueueGenericSend>
 800518a:	2801      	cmp	r0, #1
 800518c:	d0ed      	beq.n	800516a <osMutexRelease+0x1a>
    result = osErrorOS;
 800518e:	20ff      	movs	r0, #255	; 0xff
 8005190:	e7ec      	b.n	800516c <osMutexRelease+0x1c>
 8005192:	bf00      	nop
 8005194:	e000ed04 	.word	0xe000ed04

08005198 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8005198:	2901      	cmp	r1, #1
{ 
 800519a:	4608      	mov	r0, r1
 800519c:	b510      	push	{r4, lr}
  if (count == 1) {
 800519e:	d10c      	bne.n	80051ba <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 80051a0:	2203      	movs	r2, #3
 80051a2:	2100      	movs	r1, #0
 80051a4:	f7fe feec 	bl	8003f80 <xQueueGenericCreate>
 80051a8:	4604      	mov	r4, r0
 80051aa:	b120      	cbz	r0, 80051b6 <osSemaphoreCreate+0x1e>
 80051ac:	2300      	movs	r3, #0
 80051ae:	461a      	mov	r2, r3
 80051b0:	4619      	mov	r1, r3
 80051b2:	f7fe ff2d 	bl	8004010 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80051b6:	4620      	mov	r0, r4
 80051b8:	bd10      	pop	{r4, pc}
 80051ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 80051be:	f7fe bf05 	b.w	8003fcc <xQueueCreateCountingSemaphore>
	...

080051c4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80051c4:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80051c6:	2400      	movs	r4, #0
 80051c8:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80051ca:	b1e0      	cbz	r0, 8005206 <osSemaphoreWait+0x42>
 80051cc:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80051d0:	b19b      	cbz	r3, 80051fa <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80051d2:	aa01      	add	r2, sp, #4
 80051d4:	4621      	mov	r1, r4
 80051d6:	f7ff fa27 	bl	8004628 <xQueueReceiveFromISR>
 80051da:	2801      	cmp	r0, #1
 80051dc:	d111      	bne.n	8005202 <osSemaphoreWait+0x3e>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 80051de:	9b01      	ldr	r3, [sp, #4]
 80051e0:	b913      	cbnz	r3, 80051e8 <osSemaphoreWait+0x24>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80051e2:	2000      	movs	r0, #0
}
 80051e4:	b002      	add	sp, #8
 80051e6:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80051e8:	4b08      	ldr	r3, [pc, #32]	; (800520c <osSemaphoreWait+0x48>)
 80051ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	e7f3      	b.n	80051e2 <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80051fa:	f7ff f949 	bl	8004490 <xQueueSemaphoreTake>
 80051fe:	2801      	cmp	r0, #1
 8005200:	d0ef      	beq.n	80051e2 <osSemaphoreWait+0x1e>
    return osErrorOS;
 8005202:	20ff      	movs	r0, #255	; 0xff
 8005204:	e7ee      	b.n	80051e4 <osSemaphoreWait+0x20>
    return osErrorParameter;
 8005206:	2080      	movs	r0, #128	; 0x80
 8005208:	e7ec      	b.n	80051e4 <osSemaphoreWait+0x20>
 800520a:	bf00      	nop
 800520c:	e000ed04 	.word	0xe000ed04

08005210 <osSemaphoreRelease>:
 8005210:	f7ff bf9e 	b.w	8005150 <osMutexRelease>

08005214 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005214:	2200      	movs	r2, #0
 8005216:	e9d0 0100 	ldrd	r0, r1, [r0]
 800521a:	f7fe beb1 	b.w	8003f80 <xQueueGenericCreate>
	...

08005220 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8005222:	2400      	movs	r4, #0
{
 8005224:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005226:	9403      	str	r4, [sp, #12]
 8005228:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 800522c:	b1a3      	cbz	r3, 8005258 <osMessagePut+0x38>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800522e:	4623      	mov	r3, r4
 8005230:	aa03      	add	r2, sp, #12
 8005232:	a901      	add	r1, sp, #4
 8005234:	f7fe ffc1 	bl	80041ba <xQueueGenericSendFromISR>
 8005238:	2801      	cmp	r0, #1
 800523a:	d115      	bne.n	8005268 <osMessagePut+0x48>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800523c:	9b03      	ldr	r3, [sp, #12]
 800523e:	b913      	cbnz	r3, 8005246 <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8005240:	2000      	movs	r0, #0
}
 8005242:	b004      	add	sp, #16
 8005244:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8005246:	4b09      	ldr	r3, [pc, #36]	; (800526c <osMessagePut+0x4c>)
 8005248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	e7f3      	b.n	8005240 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005258:	2a01      	cmp	r2, #1
 800525a:	a901      	add	r1, sp, #4
 800525c:	bf38      	it	cc
 800525e:	2201      	movcc	r2, #1
 8005260:	f7fe fed6 	bl	8004010 <xQueueGenericSend>
 8005264:	2801      	cmp	r0, #1
 8005266:	d0eb      	beq.n	8005240 <osMessagePut+0x20>
      return osErrorOS;
 8005268:	20ff      	movs	r0, #255	; 0xff
 800526a:	e7ea      	b.n	8005242 <osMessagePut+0x22>
 800526c:	e000ed04 	.word	0xe000ed04

08005270 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005270:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8005272:	2300      	movs	r3, #0
{
 8005274:	4604      	mov	r4, r0
 8005276:	4616      	mov	r6, r2
 8005278:	4608      	mov	r0, r1
 800527a:	ad01      	add	r5, sp, #4
  event.def.message_id = queue_id;
 800527c:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 800527e:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8005280:	b911      	cbnz	r1, 8005288 <osMessageGet+0x18>
    event.status = osErrorParameter;
 8005282:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8005284:	9301      	str	r3, [sp, #4]
 8005286:	e016      	b.n	80052b6 <osMessageGet+0x46>
  taskWoken = pdFALSE;
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 800528e:	b1cb      	cbz	r3, 80052c4 <osMessageGet+0x54>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005290:	466a      	mov	r2, sp
 8005292:	a902      	add	r1, sp, #8
 8005294:	f7ff f9c8 	bl	8004628 <xQueueReceiveFromISR>
      event.status = osOK;
 8005298:	2801      	cmp	r0, #1
 800529a:	bf0c      	ite	eq
 800529c:	2310      	moveq	r3, #16
 800529e:	2300      	movne	r3, #0
 80052a0:	9301      	str	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80052a2:	9b00      	ldr	r3, [sp, #0]
 80052a4:	b13b      	cbz	r3, 80052b6 <osMessageGet+0x46>
 80052a6:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <osMessageGet+0x6c>)
 80052a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	f3bf 8f6f 	isb	sy
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
 80052b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80052ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80052be:	4620      	mov	r0, r4
 80052c0:	b004      	add	sp, #16
 80052c2:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80052c4:	a902      	add	r1, sp, #8
 80052c6:	f7ff f83d 	bl	8004344 <xQueueReceive>
 80052ca:	2801      	cmp	r0, #1
 80052cc:	d101      	bne.n	80052d2 <osMessageGet+0x62>
      event.status = osEventMessage;
 80052ce:	2310      	movs	r3, #16
 80052d0:	e7d8      	b.n	8005284 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80052d2:	2e00      	cmp	r6, #0
 80052d4:	bf18      	it	ne
 80052d6:	2640      	movne	r6, #64	; 0x40
 80052d8:	9601      	str	r6, [sp, #4]
 80052da:	e7ec      	b.n	80052b6 <osMessageGet+0x46>
 80052dc:	e000ed04 	.word	0xe000ed04

080052e0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80052e0:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80052e2:	f7ff fdc1 	bl	8004e68 <xTaskGetSchedulerState>
 80052e6:	2801      	cmp	r0, #1
 80052e8:	d003      	beq.n	80052f2 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80052ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80052ee:	f000 b9b1 	b.w	8005654 <xPortSysTickHandler>
}
 80052f2:	bd08      	pop	{r3, pc}

080052f4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052f4:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <prvInsertBlockIntoFreeList+0x40>)
{
 80052f6:	b530      	push	{r4, r5, lr}
 80052f8:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052fa:	461a      	mov	r2, r3
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4283      	cmp	r3, r0
 8005300:	d3fb      	bcc.n	80052fa <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005302:	6854      	ldr	r4, [r2, #4]
 8005304:	1911      	adds	r1, r2, r4
 8005306:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005308:	bf01      	itttt	eq
 800530a:	6841      	ldreq	r1, [r0, #4]
 800530c:	4610      	moveq	r0, r2
 800530e:	1909      	addeq	r1, r1, r4
 8005310:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005312:	6844      	ldr	r4, [r0, #4]
 8005314:	1901      	adds	r1, r0, r4
 8005316:	428b      	cmp	r3, r1
 8005318:	d106      	bne.n	8005328 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800531a:	68a9      	ldr	r1, [r5, #8]
 800531c:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800531e:	bf1f      	itttt	ne
 8005320:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005322:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005324:	1909      	addne	r1, r1, r4
 8005326:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005328:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800532a:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800532c:	bf18      	it	ne
 800532e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005330:	bd30      	pop	{r4, r5, pc}
 8005332:	bf00      	nop
 8005334:	200003bc 	.word	0x200003bc

08005338 <pvPortMalloc>:
{
 8005338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 800533c:	4d3b      	ldr	r5, [pc, #236]	; (800542c <pvPortMalloc+0xf4>)
{
 800533e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005340:	f7ff fb92 	bl	8004a68 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005344:	68ab      	ldr	r3, [r5, #8]
 8005346:	b9bb      	cbnz	r3, 8005378 <pvPortMalloc+0x40>
	uxAddress = ( size_t ) ucHeap;
 8005348:	4a39      	ldr	r2, [pc, #228]	; (8005430 <pvPortMalloc+0xf8>)
	xStart.xBlockSize = ( size_t ) 0;
 800534a:	2100      	movs	r1, #0
	uxAddress -= xHeapStructSize;
 800534c:	4b39      	ldr	r3, [pc, #228]	; (8005434 <pvPortMalloc+0xfc>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800534e:	0756      	lsls	r6, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 8005350:	6069      	str	r1, [r5, #4]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005352:	f023 0307 	bic.w	r3, r3, #7
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005356:	bf18      	it	ne
 8005358:	3207      	addne	r2, #7
	pxEnd = ( void * ) uxAddress;
 800535a:	60ab      	str	r3, [r5, #8]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800535c:	bf18      	it	ne
 800535e:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005362:	602a      	str	r2, [r5, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8005364:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005368:	1a99      	subs	r1, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800536a:	e9c2 3100 	strd	r3, r1, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800536e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005372:	e9c5 1103 	strd	r1, r1, [r5, #12]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005376:	616b      	str	r3, [r5, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005378:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800537c:	ea18 0f04 	tst.w	r8, r4
 8005380:	d14f      	bne.n	8005422 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
 8005382:	2c00      	cmp	r4, #0
 8005384:	d03e      	beq.n	8005404 <pvPortMalloc+0xcc>
				xWantedSize += xHeapStructSize;
 8005386:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800538a:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800538c:	bf1c      	itt	ne
 800538e:	f023 0307 	bicne.w	r3, r3, #7
 8005392:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005394:	2b00      	cmp	r3, #0
 8005396:	d044      	beq.n	8005422 <pvPortMalloc+0xea>
 8005398:	692f      	ldr	r7, [r5, #16]
 800539a:	429f      	cmp	r7, r3
 800539c:	d341      	bcc.n	8005422 <pvPortMalloc+0xea>
				pxBlock = xStart.pxNextFreeBlock;
 800539e:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 80053a0:	4822      	ldr	r0, [pc, #136]	; (800542c <pvPortMalloc+0xf4>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053a2:	6872      	ldr	r2, [r6, #4]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d201      	bcs.n	80053ac <pvPortMalloc+0x74>
 80053a8:	6831      	ldr	r1, [r6, #0]
 80053aa:	b9b1      	cbnz	r1, 80053da <pvPortMalloc+0xa2>
				if( pxBlock != pxEnd )
 80053ac:	68a9      	ldr	r1, [r5, #8]
 80053ae:	42b1      	cmp	r1, r6
 80053b0:	d037      	beq.n	8005422 <pvPortMalloc+0xea>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053b2:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053b4:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053b6:	6804      	ldr	r4, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053b8:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053ba:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053bc:	d914      	bls.n	80053e8 <pvPortMalloc+0xb0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053be:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053c0:	0741      	lsls	r1, r0, #29
 80053c2:	d00d      	beq.n	80053e0 <pvPortMalloc+0xa8>
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	b672      	cpsid	i
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	b662      	cpsie	i
 80053d8:	e7fe      	b.n	80053d8 <pvPortMalloc+0xa0>
 80053da:	4630      	mov	r0, r6
 80053dc:	460e      	mov	r6, r1
 80053de:	e7e0      	b.n	80053a2 <pvPortMalloc+0x6a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053e0:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053e2:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053e4:	f7ff ff86 	bl	80052f4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053e8:	6873      	ldr	r3, [r6, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053ea:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053ec:	68e9      	ldr	r1, [r5, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053ee:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053f0:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053f4:	428f      	cmp	r7, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053f6:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053f8:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053fc:	612f      	str	r7, [r5, #16]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053fe:	bf38      	it	cc
 8005400:	60ef      	strcc	r7, [r5, #12]
					pxBlock->pxNextFreeBlock = NULL;
 8005402:	6033      	str	r3, [r6, #0]
	( void ) xTaskResumeAll();
 8005404:	f7ff fbbe 	bl	8004b84 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005408:	0763      	lsls	r3, r4, #29
 800540a:	d00c      	beq.n	8005426 <pvPortMalloc+0xee>
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	b672      	cpsid	i
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	b662      	cpsie	i
 8005420:	e7fe      	b.n	8005420 <pvPortMalloc+0xe8>
void *pvReturn = NULL;
 8005422:	2400      	movs	r4, #0
 8005424:	e7ee      	b.n	8005404 <pvPortMalloc+0xcc>
}
 8005426:	4620      	mov	r0, r4
 8005428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800542c:	200003bc 	.word	0x200003bc
 8005430:	200003d4 	.word	0x200003d4
 8005434:	200067cc 	.word	0x200067cc

08005438 <vPortFree>:
{
 8005438:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 800543a:	4604      	mov	r4, r0
 800543c:	b388      	cbz	r0, 80054a2 <vPortFree+0x6a>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800543e:	4d19      	ldr	r5, [pc, #100]	; (80054a4 <vPortFree+0x6c>)
 8005440:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005444:	696a      	ldr	r2, [r5, #20]
 8005446:	4213      	tst	r3, r2
 8005448:	d10a      	bne.n	8005460 <vPortFree+0x28>
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	b672      	cpsid	i
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	b662      	cpsie	i
 800545e:	e7fe      	b.n	800545e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005460:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005464:	b151      	cbz	r1, 800547c <vPortFree+0x44>
 8005466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546a:	b672      	cpsid	i
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	b662      	cpsie	i
 800547a:	e7fe      	b.n	800547a <vPortFree+0x42>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800547c:	ea23 0302 	bic.w	r3, r3, r2
 8005480:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8005484:	f7ff faf0 	bl	8004a68 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005488:	692a      	ldr	r2, [r5, #16]
 800548a:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800548e:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005492:	4413      	add	r3, r2
 8005494:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005496:	f7ff ff2d 	bl	80052f4 <prvInsertBlockIntoFreeList>
}
 800549a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 800549e:	f7ff bb71 	b.w	8004b84 <xTaskResumeAll>
}
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	200003bc 	.word	0x200003bc

080054a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80054a8:	4808      	ldr	r0, [pc, #32]	; (80054cc <prvPortStartFirstTask+0x24>)
 80054aa:	6800      	ldr	r0, [r0, #0]
 80054ac:	6800      	ldr	r0, [r0, #0]
 80054ae:	f380 8808 	msr	MSP, r0
 80054b2:	f04f 0000 	mov.w	r0, #0
 80054b6:	f380 8814 	msr	CONTROL, r0
 80054ba:	b662      	cpsie	i
 80054bc:	b661      	cpsie	f
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	df00      	svc	0
 80054c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054ca:	0000      	.short	0x0000
 80054cc:	e000ed08 	.word	0xe000ed08

080054d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80054d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80054e0 <vPortEnableVFP+0x10>
 80054d4:	6801      	ldr	r1, [r0, #0]
 80054d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80054da:	6001      	str	r1, [r0, #0]
 80054dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80054de:	0000      	.short	0x0000
 80054e0:	e000ed88 	.word	0xe000ed88

080054e4 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 80054e4:	2300      	movs	r3, #0
{
 80054e6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80054e8:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80054ea:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <prvTaskExitError+0x44>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3301      	adds	r3, #1
 80054f0:	d00a      	beq.n	8005508 <prvTaskExitError+0x24>
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	b672      	cpsid	i
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	b662      	cpsie	i
 8005506:	e7fe      	b.n	8005506 <prvTaskExitError+0x22>
 8005508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550c:	b672      	cpsid	i
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	b662      	cpsie	i
	while( ulDummy == 0 )
 800551c:	9b01      	ldr	r3, [sp, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0fc      	beq.n	800551c <prvTaskExitError+0x38>
}
 8005522:	b002      	add	sp, #8
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	20000038 	.word	0x20000038

0800552c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800552c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005530:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005534:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8005538:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800553a:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800553c:	4b03      	ldr	r3, [pc, #12]	; (800554c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800553e:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005540:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005542:	f06f 0302 	mvn.w	r3, #2
 8005546:	6203      	str	r3, [r0, #32]
}
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	080054e5 	.word	0x080054e5

08005550 <SVC_Handler>:
	__asm volatile (
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <pxCurrentTCBConst2>)
 8005552:	6819      	ldr	r1, [r3, #0]
 8005554:	6808      	ldr	r0, [r1, #0]
 8005556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555a:	f380 8809 	msr	PSP, r0
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f04f 0000 	mov.w	r0, #0
 8005566:	f380 8811 	msr	BASEPRI, r0
 800556a:	4770      	bx	lr
 800556c:	f3af 8000 	nop.w

08005570 <pxCurrentTCBConst2>:
 8005570:	200002b0 	.word	0x200002b0

08005574 <vPortEnterCritical>:
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	b672      	cpsid	i
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	b662      	cpsie	i
	uxCriticalNesting++;
 8005588:	4a0b      	ldr	r2, [pc, #44]	; (80055b8 <vPortEnterCritical+0x44>)
 800558a:	6813      	ldr	r3, [r2, #0]
 800558c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800558e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8005590:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005592:	d10f      	bne.n	80055b4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005594:	4b09      	ldr	r3, [pc, #36]	; (80055bc <vPortEnterCritical+0x48>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f013 0fff 	tst.w	r3, #255	; 0xff
 800559c:	d00a      	beq.n	80055b4 <vPortEnterCritical+0x40>
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	b672      	cpsid	i
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	b662      	cpsie	i
 80055b2:	e7fe      	b.n	80055b2 <vPortEnterCritical+0x3e>
}
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	20000038 	.word	0x20000038
 80055bc:	e000ed04 	.word	0xe000ed04

080055c0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80055c0:	4a09      	ldr	r2, [pc, #36]	; (80055e8 <vPortExitCritical+0x28>)
 80055c2:	6813      	ldr	r3, [r2, #0]
 80055c4:	b953      	cbnz	r3, 80055dc <vPortExitCritical+0x1c>
 80055c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ca:	b672      	cpsid	i
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	b662      	cpsie	i
 80055da:	e7fe      	b.n	80055da <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80055dc:	3b01      	subs	r3, #1
 80055de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055e0:	b90b      	cbnz	r3, 80055e6 <vPortExitCritical+0x26>
	__asm volatile
 80055e2:	f383 8811 	msr	BASEPRI, r3
}
 80055e6:	4770      	bx	lr
 80055e8:	20000038 	.word	0x20000038
 80055ec:	00000000 	.word	0x00000000

080055f0 <PendSV_Handler>:
	__asm volatile
 80055f0:	f3ef 8009 	mrs	r0, PSP
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	4b15      	ldr	r3, [pc, #84]	; (8005650 <pxCurrentTCBConst>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	f01e 0f10 	tst.w	lr, #16
 8005600:	bf08      	it	eq
 8005602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560a:	6010      	str	r0, [r2, #0]
 800560c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005614:	b672      	cpsid	i
 8005616:	f380 8811 	msr	BASEPRI, r0
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	b662      	cpsie	i
 8005624:	f7ff fb46 	bl	8004cb4 <vTaskSwitchContext>
 8005628:	f04f 0000 	mov.w	r0, #0
 800562c:	f380 8811 	msr	BASEPRI, r0
 8005630:	bc09      	pop	{r0, r3}
 8005632:	6819      	ldr	r1, [r3, #0]
 8005634:	6808      	ldr	r0, [r1, #0]
 8005636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563a:	f01e 0f10 	tst.w	lr, #16
 800563e:	bf08      	it	eq
 8005640:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005644:	f380 8809 	msr	PSP, r0
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop

08005650 <pxCurrentTCBConst>:
 8005650:	200002b0 	.word	0x200002b0

08005654 <xPortSysTickHandler>:
{
 8005654:	b508      	push	{r3, lr}
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	b672      	cpsid	i
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800566a:	f7ff fa15 	bl	8004a98 <xTaskIncrementTick>
 800566e:	b118      	cbz	r0, 8005678 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005670:	4b03      	ldr	r3, [pc, #12]	; (8005680 <xPortSysTickHandler+0x2c>)
 8005672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005676:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005678:	2300      	movs	r3, #0
 800567a:	f383 8811 	msr	BASEPRI, r3
}
 800567e:	bd08      	pop	{r3, pc}
 8005680:	e000ed04 	.word	0xe000ed04

08005684 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005684:	2300      	movs	r3, #0
 8005686:	4a08      	ldr	r2, [pc, #32]	; (80056a8 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005688:	4908      	ldr	r1, [pc, #32]	; (80056ac <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800568a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800568c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800568e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005692:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <vPortSetupTimerInterrupt+0x2c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	fbb3 f3f1 	udiv	r3, r3, r1
 800569a:	4906      	ldr	r1, [pc, #24]	; (80056b4 <vPortSetupTimerInterrupt+0x30>)
 800569c:	3b01      	subs	r3, #1
 800569e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056a0:	2307      	movs	r3, #7
 80056a2:	6013      	str	r3, [r2, #0]
}
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	e000e010 	.word	0xe000e010
 80056ac:	e000e018 	.word	0xe000e018
 80056b0:	2000002c 	.word	0x2000002c
 80056b4:	e000e014 	.word	0xe000e014

080056b8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056b8:	4b2a      	ldr	r3, [pc, #168]	; (8005764 <xPortStartScheduler+0xac>)
{
 80056ba:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056bc:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056be:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056c4:	22ff      	movs	r2, #255	; 0xff
 80056c6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056c8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056ca:	4a27      	ldr	r2, [pc, #156]	; (8005768 <xPortStartScheduler+0xb0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80056d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056da:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056dc:	2307      	movs	r3, #7
 80056de:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056e0:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80056e4:	1e5c      	subs	r4, r3, #1
 80056e6:	0600      	lsls	r0, r0, #24
 80056e8:	d40e      	bmi.n	8005708 <xPortStartScheduler+0x50>
 80056ea:	b111      	cbz	r1, 80056f2 <xPortStartScheduler+0x3a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	6053      	str	r3, [r2, #4]
 80056f0:	d013      	beq.n	800571a <xPortStartScheduler+0x62>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f6:	b672      	cpsid	i
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	b662      	cpsie	i
 8005706:	e7fe      	b.n	8005706 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005708:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800570c:	2101      	movs	r1, #1
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	b2db      	uxtb	r3, r3
 8005712:	f88d 3003 	strb.w	r3, [sp, #3]
 8005716:	4623      	mov	r3, r4
 8005718:	e7e2      	b.n	80056e0 <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800571a:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 800571e:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005720:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005722:	9b01      	ldr	r3, [sp, #4]
 8005724:	4a0f      	ldr	r2, [pc, #60]	; (8005764 <xPortStartScheduler+0xac>)
 8005726:	b2db      	uxtb	r3, r3
 8005728:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800572a:	4b10      	ldr	r3, [pc, #64]	; (800576c <xPortStartScheduler+0xb4>)
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005732:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800573a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800573c:	f7ff ffa2 	bl	8005684 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <xPortStartScheduler+0xb8>)
 8005742:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8005744:	f7ff fec4 	bl	80054d0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005748:	4a0a      	ldr	r2, [pc, #40]	; (8005774 <xPortStartScheduler+0xbc>)
 800574a:	6813      	ldr	r3, [r2, #0]
 800574c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005750:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8005752:	f7ff fea9 	bl	80054a8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005756:	f7ff faad 	bl	8004cb4 <vTaskSwitchContext>
	prvTaskExitError();
 800575a:	f7ff fec3 	bl	80054e4 <prvTaskExitError>
}
 800575e:	4620      	mov	r0, r4
 8005760:	b002      	add	sp, #8
 8005762:	bd10      	pop	{r4, pc}
 8005764:	e000e400 	.word	0xe000e400
 8005768:	200067d4 	.word	0x200067d4
 800576c:	e000ed20 	.word	0xe000ed20
 8005770:	20000038 	.word	0x20000038
 8005774:	e000ef34 	.word	0xe000ef34

08005778 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005778:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800577c:	2b0f      	cmp	r3, #15
 800577e:	4a12      	ldr	r2, [pc, #72]	; (80057c8 <vPortValidateInterruptPriority+0x50>)
 8005780:	d90f      	bls.n	80057a2 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005782:	4912      	ldr	r1, [pc, #72]	; (80057cc <vPortValidateInterruptPriority+0x54>)
 8005784:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005786:	7811      	ldrb	r1, [r2, #0]
 8005788:	4299      	cmp	r1, r3
 800578a:	d90a      	bls.n	80057a2 <vPortValidateInterruptPriority+0x2a>
 800578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005790:	b672      	cpsid	i
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	b662      	cpsie	i
 80057a0:	e7fe      	b.n	80057a0 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80057a2:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <vPortValidateInterruptPriority+0x58>)
 80057a4:	6852      	ldr	r2, [r2, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d90a      	bls.n	80057c6 <vPortValidateInterruptPriority+0x4e>
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	b672      	cpsid	i
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	b662      	cpsie	i
 80057c4:	e7fe      	b.n	80057c4 <vPortValidateInterruptPriority+0x4c>
	}
 80057c6:	4770      	bx	lr
 80057c8:	200067d4 	.word	0x200067d4
 80057cc:	e000e3f0 	.word	0xe000e3f0
 80057d0:	e000ed0c 	.word	0xe000ed0c

080057d4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80057d4:	b583      	push	{r0, r1, r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80057d6:	482b      	ldr	r0, [pc, #172]	; (8005884 <tcpip_thread+0xb0>)
 80057d8:	f007 fa3e 	bl	800cc58 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80057dc:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <tcpip_thread+0xb4>)
 80057de:	6813      	ldr	r3, [r2, #0]
 80057e0:	b10b      	cbz	r3, 80057e6 <tcpip_thread+0x12>
    tcpip_init_done(tcpip_init_done_arg);
 80057e2:	6850      	ldr	r0, [r2, #4]
 80057e4:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80057e6:	4d27      	ldr	r5, [pc, #156]	; (8005884 <tcpip_thread+0xb0>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80057e8:	4f28      	ldr	r7, [pc, #160]	; (800588c <tcpip_thread+0xb8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80057ea:	4e29      	ldr	r6, [pc, #164]	; (8005890 <tcpip_thread+0xbc>)
  sleeptime = sys_timeouts_sleeptime();
 80057ec:	f006 fe82 	bl	800c4f4 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80057f0:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 80057f2:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80057f4:	d113      	bne.n	800581e <tcpip_thread+0x4a>
    UNLOCK_TCPIP_CORE();
 80057f6:	4628      	mov	r0, r5
 80057f8:	f007 fa33 	bl	800cc62 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80057fc:	2200      	movs	r2, #0
 80057fe:	a901      	add	r1, sp, #4
 8005800:	4638      	mov	r0, r7
 8005802:	f007 f9e7 	bl	800cbd4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8005806:	4628      	mov	r0, r5
 8005808:	f007 fa26 	bl	800cc58 <sys_mutex_lock>
    if (msg == NULL) {
 800580c:	9c01      	ldr	r4, [sp, #4]
 800580e:	b9cc      	cbnz	r4, 8005844 <tcpip_thread+0x70>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005810:	4633      	mov	r3, r6
 8005812:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005814:	491f      	ldr	r1, [pc, #124]	; (8005894 <tcpip_thread+0xc0>)
 8005816:	4820      	ldr	r0, [pc, #128]	; (8005898 <tcpip_thread+0xc4>)
 8005818:	f008 f93a 	bl	800da90 <iprintf>
      break;
 800581c:	e7e6      	b.n	80057ec <tcpip_thread+0x18>
  } else if (sleeptime == 0) {
 800581e:	b910      	cbnz	r0, 8005826 <tcpip_thread+0x52>
    sys_check_timeouts();
 8005820:	f006 fe4c 	bl	800c4bc <sys_check_timeouts>
    goto again;
 8005824:	e7e2      	b.n	80057ec <tcpip_thread+0x18>
  UNLOCK_TCPIP_CORE();
 8005826:	4628      	mov	r0, r5
 8005828:	f007 fa1b 	bl	800cc62 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800582c:	4622      	mov	r2, r4
 800582e:	a901      	add	r1, sp, #4
 8005830:	4638      	mov	r0, r7
 8005832:	f007 f9cf 	bl	800cbd4 <sys_arch_mbox_fetch>
 8005836:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8005838:	4628      	mov	r0, r5
 800583a:	f007 fa0d 	bl	800cc58 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800583e:	3401      	adds	r4, #1
 8005840:	d0ee      	beq.n	8005820 <tcpip_thread+0x4c>
 8005842:	e7e3      	b.n	800580c <tcpip_thread+0x38>
  switch (msg->type) {
 8005844:	7823      	ldrb	r3, [r4, #0]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d00f      	beq.n	800586a <tcpip_thread+0x96>
 800584a:	2b02      	cmp	r3, #2
 800584c:	d013      	beq.n	8005876 <tcpip_thread+0xa2>
 800584e:	b9b3      	cbnz	r3, 800587e <tcpip_thread+0xaa>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8005850:	6860      	ldr	r0, [r4, #4]
 8005852:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8005856:	4798      	blx	r3
 8005858:	b110      	cbz	r0, 8005860 <tcpip_thread+0x8c>
        pbuf_free(msg->msg.inp.p);
 800585a:	6860      	ldr	r0, [r4, #4]
 800585c:	f003 f90c 	bl	8008a78 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005860:	4621      	mov	r1, r4
 8005862:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005864:	f002 fed2 	bl	800860c <memp_free>
      break;
 8005868:	e7c0      	b.n	80057ec <tcpip_thread+0x18>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800586a:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800586e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005870:	4621      	mov	r1, r4
 8005872:	2008      	movs	r0, #8
 8005874:	e7f6      	b.n	8005864 <tcpip_thread+0x90>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005876:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800587a:	4798      	blx	r3
      break;
 800587c:	e7b6      	b.n	80057ec <tcpip_thread+0x18>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800587e:	4633      	mov	r3, r6
 8005880:	22cf      	movs	r2, #207	; 0xcf
 8005882:	e7c7      	b.n	8005814 <tcpip_thread+0x40>
 8005884:	2000a7b0 	.word	0x2000a7b0
 8005888:	200067dc 	.word	0x200067dc
 800588c:	200067e4 	.word	0x200067e4
 8005890:	08012da2 	.word	0x08012da2
 8005894:	08012e3c 	.word	0x08012e3c
 8005898:	08012bab 	.word	0x08012bab

0800589c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80058a0:	4810      	ldr	r0, [pc, #64]	; (80058e4 <tcpip_inpkt+0x48>)
{
 80058a2:	460e      	mov	r6, r1
 80058a4:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80058a6:	f007 f9b7 	bl	800cc18 <sys_mbox_valid>
 80058aa:	b928      	cbnz	r0, 80058b8 <tcpip_inpkt+0x1c>
 80058ac:	4b0e      	ldr	r3, [pc, #56]	; (80058e8 <tcpip_inpkt+0x4c>)
 80058ae:	22fc      	movs	r2, #252	; 0xfc
 80058b0:	490e      	ldr	r1, [pc, #56]	; (80058ec <tcpip_inpkt+0x50>)
 80058b2:	480f      	ldr	r0, [pc, #60]	; (80058f0 <tcpip_inpkt+0x54>)
 80058b4:	f008 f8ec 	bl	800da90 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80058b8:	2009      	movs	r0, #9
 80058ba:	f002 fe8b 	bl	80085d4 <memp_malloc>
  if (msg == NULL) {
 80058be:	4604      	mov	r4, r0
 80058c0:	b168      	cbz	r0, 80058de <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80058c2:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80058c4:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 80058c6:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 80058c8:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 80058ca:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80058ce:	4805      	ldr	r0, [pc, #20]	; (80058e4 <tcpip_inpkt+0x48>)
 80058d0:	f007 f976 	bl	800cbc0 <sys_mbox_trypost>
 80058d4:	b128      	cbz	r0, 80058e2 <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80058d6:	4621      	mov	r1, r4
 80058d8:	2009      	movs	r0, #9
 80058da:	f002 fe97 	bl	800860c <memp_free>
    return ERR_MEM;
 80058de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80058e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058e4:	200067e4 	.word	0x200067e4
 80058e8:	08012da2 	.word	0x08012da2
 80058ec:	08012e5a 	.word	0x08012e5a
 80058f0:	08012bab 	.word	0x08012bab

080058f4 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80058f4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 80058f8:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 80058fc:	bf14      	ite	ne
 80058fe:	4a02      	ldrne	r2, [pc, #8]	; (8005908 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8005900:	4a02      	ldreq	r2, [pc, #8]	; (800590c <tcpip_input+0x18>)
 8005902:	f7ff bfcb 	b.w	800589c <tcpip_inpkt>
 8005906:	bf00      	nop
 8005908:	0800ca91 	.word	0x0800ca91
 800590c:	08007475 	.word	0x08007475

08005910 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8005910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005912:	4605      	mov	r5, r0
 8005914:	460c      	mov	r4, r1
  lwip_init();
 8005916:	f002 fb91 	bl	800803c <lwip_init>

  tcpip_init_done = initfunc;
 800591a:	4812      	ldr	r0, [pc, #72]	; (8005964 <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800591c:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 800591e:	e9c0 5400 	strd	r5, r4, [r0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8005922:	3008      	adds	r0, #8
 8005924:	f007 f93c 	bl	800cba0 <sys_mbox_new>
 8005928:	b130      	cbz	r0, 8005938 <tcpip_init+0x28>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800592a:	4b0f      	ldr	r3, [pc, #60]	; (8005968 <tcpip_init+0x58>)
 800592c:	f240 2261 	movw	r2, #609	; 0x261
 8005930:	490e      	ldr	r1, [pc, #56]	; (800596c <tcpip_init+0x5c>)
 8005932:	480f      	ldr	r0, [pc, #60]	; (8005970 <tcpip_init+0x60>)
 8005934:	f008 f8ac 	bl	800da90 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8005938:	480e      	ldr	r0, [pc, #56]	; (8005974 <tcpip_init+0x64>)
 800593a:	f007 f97f 	bl	800cc3c <sys_mutex_new>
 800593e:	b130      	cbz	r0, 800594e <tcpip_init+0x3e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8005940:	4b09      	ldr	r3, [pc, #36]	; (8005968 <tcpip_init+0x58>)
 8005942:	f240 2265 	movw	r2, #613	; 0x265
 8005946:	490c      	ldr	r1, [pc, #48]	; (8005978 <tcpip_init+0x68>)
 8005948:	4809      	ldr	r0, [pc, #36]	; (8005970 <tcpip_init+0x60>)
 800594a:	f008 f8a1 	bl	800da90 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800594e:	2302      	movs	r3, #2
 8005950:	2200      	movs	r2, #0
 8005952:	490a      	ldr	r1, [pc, #40]	; (800597c <tcpip_init+0x6c>)
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800595a:	4809      	ldr	r0, [pc, #36]	; (8005980 <tcpip_init+0x70>)
 800595c:	f007 f984 	bl	800cc68 <sys_thread_new>
}
 8005960:	b003      	add	sp, #12
 8005962:	bd30      	pop	{r4, r5, pc}
 8005964:	200067dc 	.word	0x200067dc
 8005968:	08012da2 	.word	0x08012da2
 800596c:	08012e67 	.word	0x08012e67
 8005970:	08012bab 	.word	0x08012bab
 8005974:	2000a7b0 	.word	0x2000a7b0
 8005978:	08012e8a 	.word	0x08012e8a
 800597c:	080057d5 	.word	0x080057d5
 8005980:	08012eab 	.word	0x08012eab

08005984 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8005984:	7943      	ldrb	r3, [r0, #5]
 8005986:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 8005988:	bf1f      	itttt	ne
 800598a:	2300      	movne	r3, #0
    dhcp->state = new_state;
 800598c:	7141      	strbne	r1, [r0, #5]
    dhcp->tries = 0;
 800598e:	7183      	strbne	r3, [r0, #6]
    dhcp->request_timeout = 0;
 8005990:	8103      	strhne	r3, [r0, #8]
  }
}
 8005992:	4770      	bx	lr

08005994 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8005996:	1c87      	adds	r7, r0, #2
{
 8005998:	4604      	mov	r4, r0
 800599a:	460d      	mov	r5, r1
 800599c:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800599e:	2f44      	cmp	r7, #68	; 0x44
 80059a0:	d906      	bls.n	80059b0 <dhcp_option_short+0x1c>
 80059a2:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <dhcp_option_short+0x2c>)
 80059a4:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80059a8:	4906      	ldr	r1, [pc, #24]	; (80059c4 <dhcp_option_short+0x30>)
 80059aa:	4807      	ldr	r0, [pc, #28]	; (80059c8 <dhcp_option_short+0x34>)
 80059ac:	f008 f870 	bl	800da90 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80059b0:	0a33      	lsrs	r3, r6, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 80059b2:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80059b4:	552b      	strb	r3, [r5, r4]
 80059b6:	3401      	adds	r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80059b8:	b2a4      	uxth	r4, r4
 80059ba:	552e      	strb	r6, [r5, r4]
}
 80059bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059be:	bf00      	nop
 80059c0:	08012eb2 	.word	0x08012eb2
 80059c4:	08012f51 	.word	0x08012f51
 80059c8:	08012bab 	.word	0x08012bab

080059cc <dhcp_option>:
{
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ce:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80059d0:	3302      	adds	r3, #2
{
 80059d2:	4604      	mov	r4, r0
 80059d4:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80059d6:	4403      	add	r3, r0
{
 80059d8:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80059da:	2b44      	cmp	r3, #68	; 0x44
 80059dc:	d906      	bls.n	80059ec <dhcp_option+0x20>
 80059de:	4b07      	ldr	r3, [pc, #28]	; (80059fc <dhcp_option+0x30>)
 80059e0:	f240 529a 	movw	r2, #1434	; 0x59a
 80059e4:	4906      	ldr	r1, [pc, #24]	; (8005a00 <dhcp_option+0x34>)
 80059e6:	4807      	ldr	r0, [pc, #28]	; (8005a04 <dhcp_option+0x38>)
 80059e8:	f008 f852 	bl	800da90 <iprintf>
  options[options_out_len++] = option_type;
 80059ec:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 80059ee:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 80059f0:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 80059f2:	b29b      	uxth	r3, r3
}
 80059f4:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 80059f6:	54ee      	strb	r6, [r5, r3]
}
 80059f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059fa:	bf00      	nop
 80059fc:	08012eb2 	.word	0x08012eb2
 8005a00:	08012f8c 	.word	0x08012f8c
 8005a04:	08012bab 	.word	0x08012bab

08005a08 <dhcp_option_byte>:
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8005a08:	2843      	cmp	r0, #67	; 0x43
{
 8005a0a:	b570      	push	{r4, r5, r6, lr}
 8005a0c:	4604      	mov	r4, r0
 8005a0e:	460d      	mov	r5, r1
 8005a10:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8005a12:	d906      	bls.n	8005a22 <dhcp_option_byte+0x1a>
 8005a14:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <dhcp_option_byte+0x24>)
 8005a16:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8005a1a:	4905      	ldr	r1, [pc, #20]	; (8005a30 <dhcp_option_byte+0x28>)
 8005a1c:	4805      	ldr	r0, [pc, #20]	; (8005a34 <dhcp_option_byte+0x2c>)
 8005a1e:	f008 f837 	bl	800da90 <iprintf>
  options[options_out_len++] = value;
 8005a22:	1c60      	adds	r0, r4, #1
 8005a24:	552e      	strb	r6, [r5, r4]
}
 8005a26:	b280      	uxth	r0, r0
 8005a28:	bd70      	pop	{r4, r5, r6, pc}
 8005a2a:	bf00      	nop
 8005a2c:	08012eb2 	.word	0x08012eb2
 8005a30:	08012fce 	.word	0x08012fce
 8005a34:	08012bab 	.word	0x08012bab

08005a38 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8005a3a:	1d07      	adds	r7, r0, #4
{
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	460d      	mov	r5, r1
 8005a40:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8005a42:	2f44      	cmp	r7, #68	; 0x44
 8005a44:	d906      	bls.n	8005a54 <dhcp_option_long+0x1c>
 8005a46:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <dhcp_option_long+0x3c>)
 8005a48:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8005a4c:	490a      	ldr	r1, [pc, #40]	; (8005a78 <dhcp_option_long+0x40>)
 8005a4e:	480b      	ldr	r0, [pc, #44]	; (8005a7c <dhcp_option_long+0x44>)
 8005a50:	f008 f81e 	bl	800da90 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8005a54:	0e33      	lsrs	r3, r6, #24
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8005a56:	0c32      	lsrs	r2, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8005a58:	552b      	strb	r3, [r5, r4]
 8005a5a:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
  return options_out_len;
}
 8005a5c:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	54ea      	strb	r2, [r5, r3]
 8005a62:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8005a64:	3403      	adds	r4, #3
 8005a66:	0a32      	lsrs	r2, r6, #8
 8005a68:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8005a6a:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8005a6c:	54ea      	strb	r2, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8005a6e:	552e      	strb	r6, [r5, r4]
}
 8005a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a72:	bf00      	nop
 8005a74:	08012eb2 	.word	0x08012eb2
 8005a78:	08013003 	.word	0x08013003
 8005a7c:	08012bab 	.word	0x08012bab

08005a80 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8005a80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a84:	460e      	mov	r6, r1
 8005a86:	4690      	mov	r8, r2
 8005a88:	4699      	mov	r9, r3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8005a8a:	4605      	mov	r5, r0
 8005a8c:	b958      	cbnz	r0, 8005aa6 <dhcp_create_msg+0x26>
 8005a8e:	462f      	mov	r7, r5
 8005a90:	4b3f      	ldr	r3, [pc, #252]	; (8005b90 <dhcp_create_msg+0x110>)
 8005a92:	f240 7269 	movw	r2, #1897	; 0x769
 8005a96:	493f      	ldr	r1, [pc, #252]	; (8005b94 <dhcp_create_msg+0x114>)
 8005a98:	483f      	ldr	r0, [pc, #252]	; (8005b98 <dhcp_create_msg+0x118>)
 8005a9a:	f007 fff9 	bl	800da90 <iprintf>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
  }
  return p_out;
}
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	b003      	add	sp, #12
 8005aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8005aa6:	b941      	cbnz	r1, 8005aba <dhcp_create_msg+0x3a>
 8005aa8:	4b39      	ldr	r3, [pc, #228]	; (8005b90 <dhcp_create_msg+0x110>)
 8005aaa:	f240 726a 	movw	r2, #1898	; 0x76a
 8005aae:	493b      	ldr	r1, [pc, #236]	; (8005b9c <dhcp_create_msg+0x11c>)
 8005ab0:	4637      	mov	r7, r6
 8005ab2:	4839      	ldr	r0, [pc, #228]	; (8005b98 <dhcp_create_msg+0x118>)
 8005ab4:	f007 ffec 	bl	800da90 <iprintf>
 8005ab8:	e7f1      	b.n	8005a9e <dhcp_create_msg+0x1e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8005aba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005abe:	f44f 719a 	mov.w	r1, #308	; 0x134
 8005ac2:	2036      	movs	r0, #54	; 0x36
 8005ac4:	f003 f840 	bl	8008b48 <pbuf_alloc>
  if (p_out == NULL) {
 8005ac8:	4607      	mov	r7, r0
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d0e7      	beq.n	8005a9e <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8005ace:	8943      	ldrh	r3, [r0, #10]
 8005ad0:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8005ad4:	d206      	bcs.n	8005ae4 <dhcp_create_msg+0x64>
 8005ad6:	4b2e      	ldr	r3, [pc, #184]	; (8005b90 <dhcp_create_msg+0x110>)
 8005ad8:	f240 7271 	movw	r2, #1905	; 0x771
 8005adc:	4930      	ldr	r1, [pc, #192]	; (8005ba0 <dhcp_create_msg+0x120>)
 8005ade:	482e      	ldr	r0, [pc, #184]	; (8005b98 <dhcp_create_msg+0x118>)
 8005ae0:	f007 ffd6 	bl	800da90 <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8005ae4:	f1b8 0f03 	cmp.w	r8, #3
 8005ae8:	d102      	bne.n	8005af0 <dhcp_create_msg+0x70>
 8005aea:	7973      	ldrb	r3, [r6, #5]
 8005aec:	2b03      	cmp	r3, #3
 8005aee:	d107      	bne.n	8005b00 <dhcp_create_msg+0x80>
    if (dhcp->tries == 0) {
 8005af0:	79b3      	ldrb	r3, [r6, #6]
 8005af2:	4c2c      	ldr	r4, [pc, #176]	; (8005ba4 <dhcp_create_msg+0x124>)
 8005af4:	b913      	cbnz	r3, 8005afc <dhcp_create_msg+0x7c>
      xid = LWIP_RAND();
 8005af6:	f008 f859 	bl	800dbac <rand>
 8005afa:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	6033      	str	r3, [r6, #0]
  msg_out = (struct dhcp_msg *)p_out->payload;
 8005b00:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8005b02:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005b06:	2100      	movs	r1, #0
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f007 ffb9 	bl	800da80 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8005b12:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 8005b14:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8005b18:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8005b1a:	6830      	ldr	r0, [r6, #0]
 8005b1c:	f002 fa3d 	bl	8007f9a <lwip_htonl>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8005b20:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 8005b24:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8005b26:	d00a      	beq.n	8005b3e <dhcp_create_msg+0xbe>
 8005b28:	f1a8 0307 	sub.w	r3, r8, #7
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d906      	bls.n	8005b3e <dhcp_create_msg+0xbe>
 8005b30:	f1b8 0f03 	cmp.w	r8, #3
 8005b34:	d105      	bne.n	8005b42 <dhcp_create_msg+0xc2>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8005b36:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8005b38:	3b04      	subs	r3, #4
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d801      	bhi.n	8005b42 <dhcp_create_msg+0xc2>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8005b3e:	686b      	ldr	r3, [r5, #4]
 8005b40:	60e3      	str	r3, [r4, #12]
 8005b42:	f105 032a 	add.w	r3, r5, #42	; 0x2a
 8005b46:	f104 021c 	add.w	r2, r4, #28
 8005b4a:	3530      	adds	r5, #48	; 0x30
    msg_out->chaddr[i] = netif->hwaddr[i];
 8005b4c:	f813 1b01 	ldrb.w	r1, [r3], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8005b50:	42ab      	cmp	r3, r5
    msg_out->chaddr[i] = netif->hwaddr[i];
 8005b52:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8005b56:	d1f9      	bne.n	8005b4c <dhcp_create_msg+0xcc>
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8005b58:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8005b5c:	2363      	movs	r3, #99	; 0x63
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8005b5e:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 8005b62:	2000      	movs	r0, #0
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8005b64:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 8005b68:	2253      	movs	r2, #83	; 0x53
 8005b6a:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 8005b6e:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8005b72:	2235      	movs	r2, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8005b74:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8005b78:	2301      	movs	r3, #1
 8005b7a:	9101      	str	r1, [sp, #4]
 8005b7c:	f7ff ff26 	bl	80059cc <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8005b80:	4642      	mov	r2, r8
 8005b82:	9901      	ldr	r1, [sp, #4]
 8005b84:	f7ff ff40 	bl	8005a08 <dhcp_option_byte>
    *options_out_len = options_out_len_loc;
 8005b88:	f8a9 0000 	strh.w	r0, [r9]
 8005b8c:	e787      	b.n	8005a9e <dhcp_create_msg+0x1e>
 8005b8e:	bf00      	nop
 8005b90:	08012eb2 	.word	0x08012eb2
 8005b94:	0801303d 	.word	0x0801303d
 8005b98:	08012bab 	.word	0x08012bab
 8005b9c:	0801305c 	.word	0x0801305c
 8005ba0:	0801307a 	.word	0x0801307a
 8005ba4:	200067e8 	.word	0x200067e8

08005ba8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8005ba8:	4603      	mov	r3, r0
 8005baa:	4610      	mov	r0, r2
 8005bac:	b430      	push	{r4, r5}
  options[options_out_len++] = DHCP_OPTION_END;
 8005bae:	1c5c      	adds	r4, r3, #1
 8005bb0:	25ff      	movs	r5, #255	; 0xff
 8005bb2:	b2a2      	uxth	r2, r4
 8005bb4:	54cd      	strb	r5, [r1, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8005bb6:	fa11 f184 	uxtah	r1, r1, r4
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8005bba:	2500      	movs	r5, #0
  options[options_out_len++] = DHCP_OPTION_END;
 8005bbc:	4614      	mov	r4, r2
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8005bbe:	2c43      	cmp	r4, #67	; 0x43
 8005bc0:	d90b      	bls.n	8005bda <dhcp_option_trailer+0x32>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8005bc2:	2a44      	cmp	r2, #68	; 0x44
 8005bc4:	f1c3 0143 	rsb	r1, r3, #67	; 0x43
 8005bc8:	f103 03f1 	add.w	r3, r3, #241	; 0xf1
 8005bcc:	bf88      	it	hi
 8005bce:	2100      	movhi	r1, #0
 8005bd0:	4419      	add	r1, r3
}
 8005bd2:	bc30      	pop	{r4, r5}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8005bd4:	b289      	uxth	r1, r1
 8005bd6:	f003 b833 	b.w	8008c40 <pbuf_realloc>
    options[options_out_len++] = 0;
 8005bda:	3401      	adds	r4, #1
 8005bdc:	f801 5b01 	strb.w	r5, [r1], #1
 8005be0:	b2a4      	uxth	r4, r4
 8005be2:	e7ec      	b.n	8005bbe <dhcp_option_trailer+0x16>

08005be4 <dhcp_reboot>:
{
 8005be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8005be8:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8005bea:	b086      	sub	sp, #24
 8005bec:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8005bee:	2103      	movs	r1, #3
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f7ff fec7 	bl	8005984 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8005bf6:	f10d 0316 	add.w	r3, sp, #22
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	4630      	mov	r0, r6
 8005c00:	f7ff ff3e 	bl	8005a80 <dhcp_create_msg>
  if (p_out != NULL) {
 8005c04:	4605      	mov	r5, r0
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d067      	beq.n	8005cda <dhcp_reboot+0xf6>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005c0a:	6841      	ldr	r1, [r0, #4]
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	2239      	movs	r2, #57	; 0x39
 8005c10:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8005c14:	31f0      	adds	r1, #240	; 0xf0
 8005c16:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005ce8 <dhcp_reboot+0x104>
 8005c1a:	9103      	str	r1, [sp, #12]
 8005c1c:	f7ff fed6 	bl	80059cc <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8005c20:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005c24:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005c26:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8005c2a:	f7ff feb3 	bl	8005994 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8005c2e:	2304      	movs	r3, #4
 8005c30:	2232      	movs	r2, #50	; 0x32
 8005c32:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8005c34:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8005c38:	f7ff fec8 	bl	80059cc <dhcp_option>
 8005c3c:	4607      	mov	r7, r0
 8005c3e:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8005c42:	69e0      	ldr	r0, [r4, #28]
 8005c44:	f002 f9a9 	bl	8007f9a <lwip_htonl>
 8005c48:	9903      	ldr	r1, [sp, #12]
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	4638      	mov	r0, r7
 8005c4e:	f7ff fef3 	bl	8005a38 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005c52:	9903      	ldr	r1, [sp, #12]
 8005c54:	2303      	movs	r3, #3
 8005c56:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8005c58:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005c5c:	2703      	movs	r7, #3
 8005c5e:	f7ff feb5 	bl	80059cc <dhcp_option>
 8005c62:	9903      	ldr	r1, [sp, #12]
 8005c64:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005c68:	3f01      	subs	r7, #1
 8005c6a:	f818 2b01 	ldrb.w	r2, [r8], #1
 8005c6e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8005c72:	9103      	str	r1, [sp, #12]
 8005c74:	f7ff fec8 	bl	8005a08 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005c78:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8005c7c:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005c7e:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005c82:	d1f1      	bne.n	8005c68 <dhcp_reboot+0x84>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8005c84:	462a      	mov	r2, r5
 8005c86:	f7ff ff8f 	bl	8005ba8 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8005c8a:	4815      	ldr	r0, [pc, #84]	; (8005ce0 <dhcp_reboot+0xfc>)
 8005c8c:	9600      	str	r6, [sp, #0]
 8005c8e:	2343      	movs	r3, #67	; 0x43
 8005c90:	4a14      	ldr	r2, [pc, #80]	; (8005ce4 <dhcp_reboot+0x100>)
 8005c92:	4629      	mov	r1, r5
 8005c94:	6840      	ldr	r0, [r0, #4]
 8005c96:	f006 fe23 	bl	800c8e0 <udp_sendto_if>
 8005c9a:	4606      	mov	r6, r0
    pbuf_free(p_out);
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f002 feeb 	bl	8008a78 <pbuf_free>
  if (dhcp->tries < 255) {
 8005ca2:	79a3      	ldrb	r3, [r4, #6]
}
 8005ca4:	4630      	mov	r0, r6
  if (dhcp->tries < 255) {
 8005ca6:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8005ca8:	bf1c      	itt	ne
 8005caa:	3301      	addne	r3, #1
 8005cac:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8005cae:	79a3      	ldrb	r3, [r4, #6]
 8005cb0:	2b09      	cmp	r3, #9
 8005cb2:	bf96      	itet	ls
 8005cb4:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8005cb8:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8005cbc:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005cc0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8005cc4:	bf9c      	itt	ls
 8005cc6:	00db      	lslls	r3, r3, #3
 8005cc8:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005cca:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8005cce:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cd2:	8123      	strh	r3, [r4, #8]
}
 8005cd4:	b006      	add	sp, #24
 8005cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 8005cda:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005cde:	e7e0      	b.n	8005ca2 <dhcp_reboot+0xbe>
 8005ce0:	200067e8 	.word	0x200067e8
 8005ce4:	08012928 	.word	0x08012928
 8005ce8:	08012924 	.word	0x08012924

08005cec <dhcp_select>:
{
 8005cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8005cf0:	4607      	mov	r7, r0
{
 8005cf2:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8005cf4:	b960      	cbnz	r0, 8005d10 <dhcp_select+0x24>
 8005cf6:	f06f 050f 	mvn.w	r5, #15
 8005cfa:	4b52      	ldr	r3, [pc, #328]	; (8005e44 <dhcp_select+0x158>)
 8005cfc:	f240 1277 	movw	r2, #375	; 0x177
 8005d00:	4951      	ldr	r1, [pc, #324]	; (8005e48 <dhcp_select+0x15c>)
 8005d02:	4852      	ldr	r0, [pc, #328]	; (8005e4c <dhcp_select+0x160>)
 8005d04:	f007 fec4 	bl	800da90 <iprintf>
}
 8005d08:	4628      	mov	r0, r5
 8005d0a:	b005      	add	sp, #20
 8005d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  dhcp = netif_dhcp_data(netif);
 8005d10:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8005d12:	b94c      	cbnz	r4, 8005d28 <dhcp_select+0x3c>
 8005d14:	4b4b      	ldr	r3, [pc, #300]	; (8005e44 <dhcp_select+0x158>)
 8005d16:	f240 1279 	movw	r2, #377	; 0x179
 8005d1a:	494d      	ldr	r1, [pc, #308]	; (8005e50 <dhcp_select+0x164>)
 8005d1c:	f06f 0505 	mvn.w	r5, #5
 8005d20:	484a      	ldr	r0, [pc, #296]	; (8005e4c <dhcp_select+0x160>)
 8005d22:	f007 feb5 	bl	800da90 <iprintf>
 8005d26:	e7ef      	b.n	8005d08 <dhcp_select+0x1c>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8005d28:	2101      	movs	r1, #1
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f7ff fe2a 	bl	8005984 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8005d30:	f10d 030e 	add.w	r3, sp, #14
 8005d34:	2203      	movs	r2, #3
 8005d36:	4621      	mov	r1, r4
 8005d38:	4638      	mov	r0, r7
 8005d3a:	f7ff fea1 	bl	8005a80 <dhcp_create_msg>
  if (p_out != NULL) {
 8005d3e:	4606      	mov	r6, r0
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d07b      	beq.n	8005e3c <dhcp_select+0x150>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005d44:	6845      	ldr	r5, [r0, #4]
 8005d46:	2302      	movs	r3, #2
 8005d48:	2239      	movs	r2, #57	; 0x39
 8005d4a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005d4e:	35f0      	adds	r5, #240	; 0xf0
 8005d50:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8005e60 <dhcp_select+0x174>
 8005d54:	4629      	mov	r1, r5
 8005d56:	f7ff fe39 	bl	80059cc <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005d5a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005d5c:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005d5e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005d62:	f7ff fe17 	bl	8005994 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8005d66:	2304      	movs	r3, #4
 8005d68:	2232      	movs	r2, #50	; 0x32
 8005d6a:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005d6c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8005d70:	f7ff fe2c 	bl	80059cc <dhcp_option>
 8005d74:	4680      	mov	r8, r0
 8005d76:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8005d7a:	69e0      	ldr	r0, [r4, #28]
 8005d7c:	f002 f90d 	bl	8007f9a <lwip_htonl>
 8005d80:	4629      	mov	r1, r5
 8005d82:	4602      	mov	r2, r0
 8005d84:	4640      	mov	r0, r8
 8005d86:	f7ff fe57 	bl	8005a38 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8005d8a:	2304      	movs	r3, #4
 8005d8c:	2236      	movs	r2, #54	; 0x36
 8005d8e:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8005d90:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8005d94:	f7ff fe1a 	bl	80059cc <dhcp_option>
 8005d98:	4680      	mov	r8, r0
 8005d9a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8005d9e:	69a0      	ldr	r0, [r4, #24]
 8005da0:	f002 f8fb 	bl	8007f9a <lwip_htonl>
 8005da4:	4629      	mov	r1, r5
 8005da6:	4602      	mov	r2, r0
 8005da8:	4640      	mov	r0, r8
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005daa:	f04f 0803 	mov.w	r8, #3
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8005dae:	f7ff fe43 	bl	8005a38 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005db2:	2303      	movs	r3, #3
 8005db4:	2237      	movs	r2, #55	; 0x37
 8005db6:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8005db8:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005dbc:	f7ff fe06 	bl	80059cc <dhcp_option>
 8005dc0:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005dc4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005dc8:	f819 2b01 	ldrb.w	r2, [r9], #1
 8005dcc:	4629      	mov	r1, r5
 8005dce:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005dd2:	f7ff fe19 	bl	8005a08 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005dd6:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005dda:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005dde:	d1f1      	bne.n	8005dc4 <dhcp_select+0xd8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8005de0:	4629      	mov	r1, r5
 8005de2:	4632      	mov	r2, r6
 8005de4:	f7ff fee0 	bl	8005ba8 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8005de8:	4b1a      	ldr	r3, [pc, #104]	; (8005e54 <dhcp_select+0x168>)
 8005dea:	481b      	ldr	r0, [pc, #108]	; (8005e58 <dhcp_select+0x16c>)
 8005dec:	4631      	mov	r1, r6
 8005dee:	4a1b      	ldr	r2, [pc, #108]	; (8005e5c <dhcp_select+0x170>)
 8005df0:	e9cd 7300 	strd	r7, r3, [sp]
 8005df4:	2343      	movs	r3, #67	; 0x43
 8005df6:	6840      	ldr	r0, [r0, #4]
 8005df8:	f006 fcda 	bl	800c7b0 <udp_sendto_if_src>
 8005dfc:	4605      	mov	r5, r0
    pbuf_free(p_out);
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f002 fe3a 	bl	8008a78 <pbuf_free>
  if (dhcp->tries < 255) {
 8005e04:	79a3      	ldrb	r3, [r4, #6]
 8005e06:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8005e08:	bf1c      	itt	ne
 8005e0a:	3301      	addne	r3, #1
 8005e0c:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8005e0e:	79a2      	ldrb	r2, [r4, #6]
 8005e10:	2a05      	cmp	r2, #5
 8005e12:	bf97      	itett	ls
 8005e14:	2301      	movls	r3, #1
 8005e16:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8005e1a:	4093      	lslls	r3, r2
 8005e1c:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8005e20:	bf98      	it	ls
 8005e22:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005e26:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8005e2a:	bf9c      	itt	ls
 8005e2c:	00db      	lslls	r3, r3, #3
 8005e2e:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005e30:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8005e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e38:	8123      	strh	r3, [r4, #8]
  return result;
 8005e3a:	e765      	b.n	8005d08 <dhcp_select+0x1c>
    result = ERR_MEM;
 8005e3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005e40:	e7e0      	b.n	8005e04 <dhcp_select+0x118>
 8005e42:	bf00      	nop
 8005e44:	08012eb2 	.word	0x08012eb2
 8005e48:	080130ba 	.word	0x080130ba
 8005e4c:	08012bab 	.word	0x08012bab
 8005e50:	080130d5 	.word	0x080130d5
 8005e54:	0801292c 	.word	0x0801292c
 8005e58:	200067e8 	.word	0x200067e8
 8005e5c:	08012928 	.word	0x08012928
 8005e60:	08012924 	.word	0x08012924

08005e64 <dhcp_discover>:
{
 8005e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8005e68:	2300      	movs	r3, #0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8005e6a:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8005e6c:	b086      	sub	sp, #24
 8005e6e:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8005e70:	2106      	movs	r1, #6
 8005e72:	4620      	mov	r0, r4
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8005e74:	61e3      	str	r3, [r4, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8005e76:	f7ff fd85 	bl	8005984 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8005e7a:	f10d 0316 	add.w	r3, sp, #22
 8005e7e:	2201      	movs	r2, #1
 8005e80:	4621      	mov	r1, r4
 8005e82:	4630      	mov	r0, r6
 8005e84:	f7ff fdfc 	bl	8005a80 <dhcp_create_msg>
  if (p_out != NULL) {
 8005e88:	4605      	mov	r5, r0
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d039      	beq.n	8005f02 <dhcp_discover+0x9e>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005e8e:	6841      	ldr	r1, [r0, #4]
 8005e90:	2302      	movs	r3, #2
 8005e92:	2239      	movs	r2, #57	; 0x39
 8005e94:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8005e98:	31f0      	adds	r1, #240	; 0xf0
 8005e9a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8005f4c <dhcp_discover+0xe8>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005e9e:	2703      	movs	r7, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005ea0:	9103      	str	r1, [sp, #12]
 8005ea2:	f7ff fd93 	bl	80059cc <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005ea6:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8005ea8:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005eaa:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005eae:	f7ff fd71 	bl	8005994 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005eb2:	9903      	ldr	r1, [sp, #12]
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005eb8:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005ebc:	f7ff fd86 	bl	80059cc <dhcp_option>
 8005ec0:	9903      	ldr	r1, [sp, #12]
 8005ec2:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005ec6:	3f01      	subs	r7, #1
 8005ec8:	f818 2b01 	ldrb.w	r2, [r8], #1
 8005ecc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8005ed0:	9103      	str	r1, [sp, #12]
 8005ed2:	f7ff fd99 	bl	8005a08 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005ed6:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8005eda:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005edc:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005ee0:	d1f1      	bne.n	8005ec6 <dhcp_discover+0x62>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8005ee2:	462a      	mov	r2, r5
 8005ee4:	f7ff fe60 	bl	8005ba8 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8005ee8:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <dhcp_discover+0xdc>)
 8005eea:	4816      	ldr	r0, [pc, #88]	; (8005f44 <dhcp_discover+0xe0>)
 8005eec:	4629      	mov	r1, r5
 8005eee:	4a16      	ldr	r2, [pc, #88]	; (8005f48 <dhcp_discover+0xe4>)
 8005ef0:	e9cd 6300 	strd	r6, r3, [sp]
 8005ef4:	2343      	movs	r3, #67	; 0x43
 8005ef6:	6840      	ldr	r0, [r0, #4]
 8005ef8:	f006 fc5a 	bl	800c7b0 <udp_sendto_if_src>
    pbuf_free(p_out);
 8005efc:	4628      	mov	r0, r5
 8005efe:	f002 fdbb 	bl	8008a78 <pbuf_free>
  if (dhcp->tries < 255) {
 8005f02:	79a3      	ldrb	r3, [r4, #6]
}
 8005f04:	2000      	movs	r0, #0
  if (dhcp->tries < 255) {
 8005f06:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8005f08:	bf1c      	itt	ne
 8005f0a:	3301      	addne	r3, #1
 8005f0c:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8005f0e:	79a2      	ldrb	r2, [r4, #6]
 8005f10:	2a05      	cmp	r2, #5
 8005f12:	bf97      	itett	ls
 8005f14:	2301      	movls	r3, #1
 8005f16:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8005f1a:	4093      	lslls	r3, r2
 8005f1c:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8005f20:	bf98      	it	ls
 8005f22:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005f26:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8005f2a:	bf9c      	itt	ls
 8005f2c:	00db      	lslls	r3, r3, #3
 8005f2e:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005f30:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8005f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f38:	8123      	strh	r3, [r4, #8]
}
 8005f3a:	b006      	add	sp, #24
 8005f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f40:	0801292c 	.word	0x0801292c
 8005f44:	200067e8 	.word	0x200067e8
 8005f48:	08012928 	.word	0x08012928
 8005f4c:	08012924 	.word	0x08012924

08005f50 <dhcp_check>:
{
 8005f50:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8005f52:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8005f54:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8005f56:	2108      	movs	r1, #8
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f7ff fd13 	bl	8005984 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f104 011c 	add.w	r1, r4, #28
 8005f64:	4628      	mov	r0, r5
 8005f66:	f001 f81f 	bl	8006fa8 <etharp_query>
  if (dhcp->tries < 255) {
 8005f6a:	79a3      	ldrb	r3, [r4, #6]
 8005f6c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8005f6e:	bf1c      	itt	ne
 8005f70:	3301      	addne	r3, #1
 8005f72:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005f74:	2301      	movs	r3, #1
 8005f76:	8123      	strh	r3, [r4, #8]
}
 8005f78:	bd38      	pop	{r3, r4, r5, pc}
	...

08005f7c <dhcp_bind>:
{
 8005f7c:	b523      	push	{r0, r1, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8005f7e:	4605      	mov	r5, r0
 8005f80:	b940      	cbnz	r0, 8005f94 <dhcp_bind+0x18>
 8005f82:	4b3d      	ldr	r3, [pc, #244]	; (8006078 <dhcp_bind+0xfc>)
 8005f84:	f240 4215 	movw	r2, #1045	; 0x415
 8005f88:	493c      	ldr	r1, [pc, #240]	; (800607c <dhcp_bind+0x100>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8005f8a:	483d      	ldr	r0, [pc, #244]	; (8006080 <dhcp_bind+0x104>)
 8005f8c:	f007 fd80 	bl	800da90 <iprintf>
}
 8005f90:	b002      	add	sp, #8
 8005f92:	bd20      	pop	{r5, pc}
  dhcp = netif_dhcp_data(netif);
 8005f94:	6a40      	ldr	r0, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8005f96:	b920      	cbnz	r0, 8005fa2 <dhcp_bind+0x26>
 8005f98:	4b37      	ldr	r3, [pc, #220]	; (8006078 <dhcp_bind+0xfc>)
 8005f9a:	f240 4217 	movw	r2, #1047	; 0x417
 8005f9e:	4939      	ldr	r1, [pc, #228]	; (8006084 <dhcp_bind+0x108>)
 8005fa0:	e7f3      	b.n	8005f8a <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	8243      	strh	r3, [r0, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8005fa6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	d00c      	beq.n	8005fc6 <dhcp_bind+0x4a>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005fac:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8005fae:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005fb2:	bf36      	itet	cc
 8005fb4:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 8005fb6:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005fba:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t0_timeout = (u16_t)timeout;
 8005fbe:	b29a      	uxth	r2, r3
    if (dhcp->t0_timeout == 0) {
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d042      	beq.n	800604a <dhcp_bind+0xce>
    dhcp->t0_timeout = (u16_t)timeout;
 8005fc4:	8282      	strh	r2, [r0, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8005fc6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005fc8:	1c59      	adds	r1, r3, #1
 8005fca:	d00e      	beq.n	8005fea <dhcp_bind+0x6e>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005fcc:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8005fce:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005fd2:	bf36      	itet	cc
 8005fd4:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 8005fd6:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005fda:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t1_timeout = (u16_t)timeout;
 8005fde:	b29a      	uxth	r2, r3
    if (dhcp->t1_timeout == 0) {
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d035      	beq.n	8006050 <dhcp_bind+0xd4>
    dhcp->t1_timeout = (u16_t)timeout;
 8005fe4:	8142      	strh	r2, [r0, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8005fe6:	8943      	ldrh	r3, [r0, #10]
 8005fe8:	81c3      	strh	r3, [r0, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8005fea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	d00d      	beq.n	800600c <dhcp_bind+0x90>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005ff0:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8005ff2:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005ff6:	bf36      	itet	cc
 8005ff8:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 8005ffa:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005ffe:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 8006002:	b29a      	uxth	r2, r3
    if (dhcp->t2_timeout == 0) {
 8006004:	b33b      	cbz	r3, 8006056 <dhcp_bind+0xda>
    dhcp->t2_timeout = (u16_t)timeout;
 8006006:	8182      	strh	r2, [r0, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8006008:	8983      	ldrh	r3, [r0, #12]
 800600a:	8203      	strh	r3, [r0, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800600c:	8983      	ldrh	r3, [r0, #12]
 800600e:	8942      	ldrh	r2, [r0, #10]
 8006010:	429a      	cmp	r2, r3
 8006012:	d302      	bcc.n	800601a <dhcp_bind+0x9e>
 8006014:	b10b      	cbz	r3, 800601a <dhcp_bind+0x9e>
    dhcp->t1_timeout = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	8143      	strh	r3, [r0, #10]
  if (dhcp->subnet_mask_given) {
 800601a:	79c3      	ldrb	r3, [r0, #7]
 800601c:	b1f3      	cbz	r3, 800605c <dhcp_bind+0xe0>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800601e:	6a03      	ldr	r3, [r0, #32]
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8006020:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8006022:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006024:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8006026:	b92b      	cbnz	r3, 8006034 <dhcp_bind+0xb8>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8006028:	69c3      	ldr	r3, [r0, #28]
 800602a:	9a00      	ldr	r2, [sp, #0]
 800602c:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800602e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006032:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8006034:	210a      	movs	r1, #10
 8006036:	f7ff fca5 	bl	8005984 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800603a:	ab01      	add	r3, sp, #4
 800603c:	f100 011c 	add.w	r1, r0, #28
 8006040:	466a      	mov	r2, sp
 8006042:	4628      	mov	r0, r5
 8006044:	f002 fb52 	bl	80086ec <netif_set_addr>
 8006048:	e7a2      	b.n	8005f90 <dhcp_bind+0x14>
      dhcp->t0_timeout = 1;
 800604a:	2301      	movs	r3, #1
 800604c:	8283      	strh	r3, [r0, #20]
 800604e:	e7ba      	b.n	8005fc6 <dhcp_bind+0x4a>
      dhcp->t1_timeout = 1;
 8006050:	2301      	movs	r3, #1
 8006052:	8143      	strh	r3, [r0, #10]
 8006054:	e7c7      	b.n	8005fe6 <dhcp_bind+0x6a>
      dhcp->t2_timeout = 1;
 8006056:	2301      	movs	r3, #1
 8006058:	8183      	strh	r3, [r0, #12]
 800605a:	e7d5      	b.n	8006008 <dhcp_bind+0x8c>
    if (first_octet <= 127) {
 800605c:	f990 201c 	ldrsb.w	r2, [r0, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8006060:	7f03      	ldrb	r3, [r0, #28]
    if (first_octet <= 127) {
 8006062:	2a00      	cmp	r2, #0
 8006064:	db01      	blt.n	800606a <dhcp_bind+0xee>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8006066:	23ff      	movs	r3, #255	; 0xff
 8006068:	e7da      	b.n	8006020 <dhcp_bind+0xa4>
    } else if (first_octet >= 192) {
 800606a:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800606c:	bf8c      	ite	hi
 800606e:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8006072:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8006076:	e7d3      	b.n	8006020 <dhcp_bind+0xa4>
 8006078:	08012eb2 	.word	0x08012eb2
 800607c:	080130ef 	.word	0x080130ef
 8006080:	08012bab 	.word	0x08012bab
 8006084:	08013108 	.word	0x08013108

08006088 <dhcp_inc_pcb_refcount>:
{
 8006088:	b510      	push	{r4, lr}
  if (dhcp_pcb_refcount == 0) {
 800608a:	4c14      	ldr	r4, [pc, #80]	; (80060dc <dhcp_inc_pcb_refcount+0x54>)
 800608c:	7a23      	ldrb	r3, [r4, #8]
 800608e:	b9eb      	cbnz	r3, 80060cc <dhcp_inc_pcb_refcount+0x44>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8006090:	6863      	ldr	r3, [r4, #4]
 8006092:	b12b      	cbz	r3, 80060a0 <dhcp_inc_pcb_refcount+0x18>
 8006094:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <dhcp_inc_pcb_refcount+0x58>)
 8006096:	22e5      	movs	r2, #229	; 0xe5
 8006098:	4912      	ldr	r1, [pc, #72]	; (80060e4 <dhcp_inc_pcb_refcount+0x5c>)
 800609a:	4813      	ldr	r0, [pc, #76]	; (80060e8 <dhcp_inc_pcb_refcount+0x60>)
 800609c:	f007 fcf8 	bl	800da90 <iprintf>
    dhcp_pcb = udp_new();
 80060a0:	f006 fcd2 	bl	800ca48 <udp_new>
 80060a4:	6060      	str	r0, [r4, #4]
    if (dhcp_pcb == NULL) {
 80060a6:	b1b0      	cbz	r0, 80060d6 <dhcp_inc_pcb_refcount+0x4e>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80060a8:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80060aa:	4910      	ldr	r1, [pc, #64]	; (80060ec <dhcp_inc_pcb_refcount+0x64>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80060ac:	f042 0220 	orr.w	r2, r2, #32
 80060b0:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80060b2:	2244      	movs	r2, #68	; 0x44
 80060b4:	f006 fb14 	bl	800c6e0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80060b8:	2243      	movs	r2, #67	; 0x43
 80060ba:	490c      	ldr	r1, [pc, #48]	; (80060ec <dhcp_inc_pcb_refcount+0x64>)
 80060bc:	6860      	ldr	r0, [r4, #4]
 80060be:	f006 fc4f 	bl	800c960 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80060c2:	2200      	movs	r2, #0
 80060c4:	490a      	ldr	r1, [pc, #40]	; (80060f0 <dhcp_inc_pcb_refcount+0x68>)
 80060c6:	6860      	ldr	r0, [r4, #4]
 80060c8:	f006 fc86 	bl	800c9d8 <udp_recv>
  dhcp_pcb_refcount++;
 80060cc:	7a23      	ldrb	r3, [r4, #8]
  return ERR_OK;
 80060ce:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 80060d0:	3301      	adds	r3, #1
 80060d2:	7223      	strb	r3, [r4, #8]
}
 80060d4:	bd10      	pop	{r4, pc}
      return ERR_MEM;
 80060d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060da:	e7fb      	b.n	80060d4 <dhcp_inc_pcb_refcount+0x4c>
 80060dc:	200067e8 	.word	0x200067e8
 80060e0:	08012eb2 	.word	0x08012eb2
 80060e4:	08013120 	.word	0x08013120
 80060e8:	08012bab 	.word	0x08012bab
 80060ec:	0801292c 	.word	0x0801292c
 80060f0:	08006195 	.word	0x08006195

080060f4 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80060f4:	b538      	push	{r3, r4, r5, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80060f6:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80060f8:	4d16      	ldr	r5, [pc, #88]	; (8006154 <dhcp_handle_ack.isra.0+0x60>)
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80060fa:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80060fc:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8006100:	78eb      	ldrb	r3, [r5, #3]
 8006102:	b113      	cbz	r3, 800610a <dhcp_handle_ack.isra.0+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8006104:	4b14      	ldr	r3, [pc, #80]	; (8006158 <dhcp_handle_ack.isra.0+0x64>)
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800610a:	792b      	ldrb	r3, [r5, #4]
 800610c:	b1d3      	cbz	r3, 8006144 <dhcp_handle_ack.isra.0+0x50>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800610e:	4b12      	ldr	r3, [pc, #72]	; (8006158 <dhcp_handle_ack.isra.0+0x64>)
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8006114:	796b      	ldrb	r3, [r5, #5]
 8006116:	b1c3      	cbz	r3, 800614a <dhcp_handle_ack.isra.0+0x56>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8006118:	4b0f      	ldr	r3, [pc, #60]	; (8006158 <dhcp_handle_ack.isra.0+0x64>)
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800611e:	690b      	ldr	r3, [r1, #16]
 8006120:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8006122:	79ab      	ldrb	r3, [r5, #6]
 8006124:	b12b      	cbz	r3, 8006132 <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8006126:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <dhcp_handle_ack.isra.0+0x64>)
 8006128:	6998      	ldr	r0, [r3, #24]
 800612a:	f001 ff36 	bl	8007f9a <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 800612e:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8006130:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 0;
 8006132:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8006134:	79eb      	ldrb	r3, [r5, #7]
 8006136:	b123      	cbz	r3, 8006142 <dhcp_handle_ack.isra.0+0x4e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8006138:	4b07      	ldr	r3, [pc, #28]	; (8006158 <dhcp_handle_ack.isra.0+0x64>)
 800613a:	69d8      	ldr	r0, [r3, #28]
 800613c:	f001 ff2d 	bl	8007f9a <lwip_htonl>
 8006140:	6260      	str	r0, [r4, #36]	; 0x24
}
 8006142:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8006144:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006146:	085b      	lsrs	r3, r3, #1
 8006148:	e7e3      	b.n	8006112 <dhcp_handle_ack.isra.0+0x1e>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800614a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800614c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006150:	08db      	lsrs	r3, r3, #3
 8006152:	e7e3      	b.n	800611c <dhcp_handle_ack.isra.0+0x28>
 8006154:	2000a7b4 	.word	0x2000a7b4
 8006158:	2000a7bc 	.word	0x2000a7bc

0800615c <dhcp_dec_pcb_refcount>:
{
 800615c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800615e:	4c09      	ldr	r4, [pc, #36]	; (8006184 <dhcp_dec_pcb_refcount+0x28>)
 8006160:	7a23      	ldrb	r3, [r4, #8]
 8006162:	b92b      	cbnz	r3, 8006170 <dhcp_dec_pcb_refcount+0x14>
 8006164:	4b08      	ldr	r3, [pc, #32]	; (8006188 <dhcp_dec_pcb_refcount+0x2c>)
 8006166:	22ff      	movs	r2, #255	; 0xff
 8006168:	4908      	ldr	r1, [pc, #32]	; (800618c <dhcp_dec_pcb_refcount+0x30>)
 800616a:	4809      	ldr	r0, [pc, #36]	; (8006190 <dhcp_dec_pcb_refcount+0x34>)
 800616c:	f007 fc90 	bl	800da90 <iprintf>
  dhcp_pcb_refcount--;
 8006170:	7a25      	ldrb	r5, [r4, #8]
 8006172:	3d01      	subs	r5, #1
 8006174:	b2ed      	uxtb	r5, r5
 8006176:	7225      	strb	r5, [r4, #8]
  if (dhcp_pcb_refcount == 0) {
 8006178:	b91d      	cbnz	r5, 8006182 <dhcp_dec_pcb_refcount+0x26>
    udp_remove(dhcp_pcb);
 800617a:	6860      	ldr	r0, [r4, #4]
 800617c:	f006 fc3e 	bl	800c9fc <udp_remove>
    dhcp_pcb = NULL;
 8006180:	6065      	str	r5, [r4, #4]
}
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	200067e8 	.word	0x200067e8
 8006188:	08012eb2 	.word	0x08012eb2
 800618c:	08013145 	.word	0x08013145
 8006190:	08012bab 	.word	0x08012bab

08006194 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8006194:	4bb2      	ldr	r3, [pc, #712]	; (8006460 <dhcp_recv+0x2cc>)
{
 8006196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 800619a:	685d      	ldr	r5, [r3, #4]
{
 800619c:	b089      	sub	sp, #36	; 0x24
 800619e:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80061a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80061a2:	9301      	str	r3, [sp, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d03b      	beq.n	8006220 <dhcp_recv+0x8c>
 80061a8:	791b      	ldrb	r3, [r3, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d038      	beq.n	8006220 <dhcp_recv+0x8c>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 80061ae:	8953      	ldrh	r3, [r2, #10]
 80061b0:	2b2b      	cmp	r3, #43	; 0x2b
 80061b2:	d935      	bls.n	8006220 <dhcp_recv+0x8c>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80061b4:	6852      	ldr	r2, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 80061b6:	7813      	ldrb	r3, [r2, #0]
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d131      	bne.n	8006220 <dhcp_recv+0x8c>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80061bc:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
 80061c0:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 80061c4:	f102 011c 	add.w	r1, r2, #28
 80061c8:	2300      	movs	r3, #0
 80061ca:	b2de      	uxtb	r6, r3
 80061cc:	42b4      	cmp	r4, r6
 80061ce:	d901      	bls.n	80061d4 <dhcp_recv+0x40>
 80061d0:	2b06      	cmp	r3, #6
 80061d2:	d11e      	bne.n	8006212 <dhcp_recv+0x7e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80061d4:	6850      	ldr	r0, [r2, #4]
 80061d6:	f001 fee0 	bl	8007f9a <lwip_htonl>
 80061da:	9b01      	ldr	r3, [sp, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4298      	cmp	r0, r3
 80061e0:	d11e      	bne.n	8006220 <dhcp_recv+0x8c>
  dhcp_clear_all_options(dhcp);
 80061e2:	4ba0      	ldr	r3, [pc, #640]	; (8006464 <dhcp_recv+0x2d0>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 80061e8:	f8bb 100a 	ldrh.w	r1, [fp, #10]
  dhcp_clear_all_options(dhcp);
 80061ec:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 80061ee:	292b      	cmp	r1, #43	; 0x2b
 80061f0:	d916      	bls.n	8006220 <dhcp_recv+0x8c>
  options_idx_max = p->tot_len;
 80061f2:	f8bb a008 	ldrh.w	sl, [fp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 80061f6:	f04f 09f0 	mov.w	r9, #240	; 0xf0
  int parse_sname_as_options = 0;
 80061fa:	9203      	str	r2, [sp, #12]
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80061fc:	9302      	str	r3, [sp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 80061fe:	46d8      	mov	r8, fp
  while ((q != NULL) && (options_idx >= q->len)) {
 8006200:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006204:	454b      	cmp	r3, r9
 8006206:	d911      	bls.n	800622c <dhcp_recv+0x98>
  options = (u8_t *)q->payload;
 8006208:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800620c:	464c      	mov	r4, r9
 800620e:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8006210:	e0a8      	b.n	8006364 <dhcp_recv+0x1d0>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8006212:	f810 7b01 	ldrb.w	r7, [r0], #1
 8006216:	3301      	adds	r3, #1
 8006218:	f811 6b01 	ldrb.w	r6, [r1], #1
 800621c:	42b7      	cmp	r7, r6
 800621e:	d0d4      	beq.n	80061ca <dhcp_recv+0x36>
  pbuf_free(p);
 8006220:	4658      	mov	r0, fp
 8006222:	f002 fc29 	bl	8008a78 <pbuf_free>
}
 8006226:	b009      	add	sp, #36	; 0x24
 8006228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options_idx = (u16_t)(options_idx - q->len);
 800622c:	eba9 0903 	sub.w	r9, r9, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8006230:	ebaa 0a03 	sub.w	sl, sl, r3
    q = q->next;
 8006234:	f8d8 8000 	ldr.w	r8, [r8]
    options_idx = (u16_t)(options_idx - q->len);
 8006238:	fa1f f989 	uxth.w	r9, r9
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800623c:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 8006240:	f1b8 0f00 	cmp.w	r8, #0
 8006244:	d1dc      	bne.n	8006200 <dhcp_recv+0x6c>
 8006246:	e7eb      	b.n	8006220 <dhcp_recv+0x8c>
    u16_t val_offset = (u16_t)(offset + 2);
 8006248:	1ca3      	adds	r3, r4, #2
 800624a:	b29b      	uxth	r3, r3
    if (val_offset < offset) {
 800624c:	42a3      	cmp	r3, r4
    u16_t val_offset = (u16_t)(offset + 2);
 800624e:	9304      	str	r3, [sp, #16]
    if (val_offset < offset) {
 8006250:	d3e6      	bcc.n	8006220 <dhcp_recv+0x8c>
    if ((offset + 1) < q->len) {
 8006252:	1c60      	adds	r0, r4, #1
 8006254:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006258:	4298      	cmp	r0, r3
 800625a:	da16      	bge.n	800628a <dhcp_recv+0xf6>
      len = options[offset + 1];
 800625c:	9b05      	ldr	r3, [sp, #20]
 800625e:	4423      	add	r3, r4
 8006260:	785b      	ldrb	r3, [r3, #1]
    switch (op) {
 8006262:	2a3b      	cmp	r2, #59	; 0x3b
 8006264:	d855      	bhi.n	8006312 <dhcp_recv+0x17e>
 8006266:	2a32      	cmp	r2, #50	; 0x32
 8006268:	f200 8189 	bhi.w	800657e <dhcp_recv+0x3ea>
 800626c:	2a01      	cmp	r2, #1
 800626e:	d014      	beq.n	800629a <dhcp_recv+0x106>
 8006270:	2a03      	cmp	r2, #3
 8006272:	d14e      	bne.n	8006312 <dhcp_recv+0x17e>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8006274:	2b03      	cmp	r3, #3
 8006276:	f200 8170 	bhi.w	800655a <dhcp_recv+0x3c6>
 800627a:	4b7b      	ldr	r3, [pc, #492]	; (8006468 <dhcp_recv+0x2d4>)
 800627c:	f240 6233 	movw	r2, #1587	; 0x633
 8006280:	497a      	ldr	r1, [pc, #488]	; (800646c <dhcp_recv+0x2d8>)
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006282:	487b      	ldr	r0, [pc, #492]	; (8006470 <dhcp_recv+0x2dc>)
 8006284:	f007 fc04 	bl	800da90 <iprintf>
 8006288:	e7ca      	b.n	8006220 <dhcp_recv+0x8c>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800628a:	f8d8 3000 	ldr.w	r3, [r8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 80fe 	beq.w	8006490 <dhcp_recv+0x2fc>
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	e7e3      	b.n	8006262 <dhcp_recv+0xce>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800629a:	2b04      	cmp	r3, #4
 800629c:	f000 815a 	beq.w	8006554 <dhcp_recv+0x3c0>
 80062a0:	4b71      	ldr	r3, [pc, #452]	; (8006468 <dhcp_recv+0x2d4>)
 80062a2:	f240 622e 	movw	r2, #1582	; 0x62e
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80062a6:	4973      	ldr	r1, [pc, #460]	; (8006474 <dhcp_recv+0x2e0>)
 80062a8:	e7eb      	b.n	8006282 <dhcp_recv+0xee>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	f000 8158 	beq.w	8006560 <dhcp_recv+0x3cc>
 80062b0:	4b6d      	ldr	r3, [pc, #436]	; (8006468 <dhcp_recv+0x2d4>)
 80062b2:	f240 6241 	movw	r2, #1601	; 0x641
 80062b6:	e7f6      	b.n	80062a6 <dhcp_recv+0x112>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d004      	beq.n	80062c6 <dhcp_recv+0x132>
 80062bc:	4b6a      	ldr	r3, [pc, #424]	; (8006468 <dhcp_recv+0x2d4>)
 80062be:	f240 624f 	movw	r2, #1615	; 0x64f
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80062c2:	496d      	ldr	r1, [pc, #436]	; (8006478 <dhcp_recv+0x2e4>)
 80062c4:	e7dd      	b.n	8006282 <dhcp_recv+0xee>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80062c6:	f1b9 0ff0 	cmp.w	r9, #240	; 0xf0
 80062ca:	f000 814c 	beq.w	8006566 <dhcp_recv+0x3d2>
 80062ce:	4b66      	ldr	r3, [pc, #408]	; (8006468 <dhcp_recv+0x2d4>)
 80062d0:	f240 6251 	movw	r2, #1617	; 0x651
 80062d4:	4969      	ldr	r1, [pc, #420]	; (800647c <dhcp_recv+0x2e8>)
 80062d6:	e7d4      	b.n	8006282 <dhcp_recv+0xee>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80062d8:	2b01      	cmp	r3, #1
 80062da:	f000 814a 	beq.w	8006572 <dhcp_recv+0x3de>
 80062de:	4b62      	ldr	r3, [pc, #392]	; (8006468 <dhcp_recv+0x2d4>)
 80062e0:	f240 6255 	movw	r2, #1621	; 0x655
 80062e4:	e7ed      	b.n	80062c2 <dhcp_recv+0x12e>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	f000 8140 	beq.w	800656c <dhcp_recv+0x3d8>
 80062ec:	4b5e      	ldr	r3, [pc, #376]	; (8006468 <dhcp_recv+0x2d4>)
 80062ee:	f240 6259 	movw	r2, #1625	; 0x659
 80062f2:	e7d8      	b.n	80062a6 <dhcp_recv+0x112>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	f000 813c 	beq.w	8006572 <dhcp_recv+0x3de>
 80062fa:	4b5b      	ldr	r3, [pc, #364]	; (8006468 <dhcp_recv+0x2d4>)
 80062fc:	f240 625d 	movw	r2, #1629	; 0x65d
 8006300:	e7d1      	b.n	80062a6 <dhcp_recv+0x112>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006302:	2b04      	cmp	r3, #4
 8006304:	f000 8138 	beq.w	8006578 <dhcp_recv+0x3e4>
 8006308:	4b57      	ldr	r3, [pc, #348]	; (8006468 <dhcp_recv+0x2d4>)
 800630a:	f240 6261 	movw	r2, #1633	; 0x661
 800630e:	e7ca      	b.n	80062a6 <dhcp_recv+0x112>
    switch (op) {
 8006310:	2300      	movs	r3, #0
    if (op == DHCP_OPTION_PAD) {
 8006312:	2a00      	cmp	r2, #0
 8006314:	f040 80cb 	bne.w	80064ae <dhcp_recv+0x31a>
      offset++;
 8006318:	b284      	uxth	r4, r0
    if (offset >= q->len) {
 800631a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800631e:	42a3      	cmp	r3, r4
 8006320:	d820      	bhi.n	8006364 <dhcp_recv+0x1d0>
      offset = (u16_t)(offset - q->len);
 8006322:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 8006324:	ebaa 0a03 	sub.w	sl, sl, r3
      offset = (u16_t)(offset - q->len);
 8006328:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 800632a:	fa1f fa8a 	uxth.w	sl, sl
      if (offset < offset_max) {
 800632e:	4554      	cmp	r4, sl
 8006330:	f4bf af76 	bcs.w	8006220 <dhcp_recv+0x8c>
        q = q->next;
 8006334:	f8d8 8000 	ldr.w	r8, [r8]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8006338:	f1b8 0f00 	cmp.w	r8, #0
 800633c:	d10f      	bne.n	800635e <dhcp_recv+0x1ca>
 800633e:	4b4a      	ldr	r3, [pc, #296]	; (8006468 <dhcp_recv+0x2d4>)
 8006340:	f240 629d 	movw	r2, #1693	; 0x69d
 8006344:	494e      	ldr	r1, [pc, #312]	; (8006480 <dhcp_recv+0x2ec>)
 8006346:	e79c      	b.n	8006282 <dhcp_recv+0xee>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8006348:	2e01      	cmp	r6, #1
 800634a:	d004      	beq.n	8006356 <dhcp_recv+0x1c2>
 800634c:	4b46      	ldr	r3, [pc, #280]	; (8006468 <dhcp_recv+0x2d4>)
 800634e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8006352:	494c      	ldr	r1, [pc, #304]	; (8006484 <dhcp_recv+0x2f0>)
 8006354:	e795      	b.n	8006282 <dhcp_recv+0xee>
            value = ((u8_t *)&value)[0];
 8006356:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800635a:	9307      	str	r3, [sp, #28]
 800635c:	e0d8      	b.n	8006510 <dhcp_recv+0x37c>
        options = (u8_t *)q->payload;
 800635e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006362:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8006364:	4554      	cmp	r4, sl
 8006366:	d204      	bcs.n	8006372 <dhcp_recv+0x1de>
 8006368:	9b05      	ldr	r3, [sp, #20]
 800636a:	5d1a      	ldrb	r2, [r3, r4]
 800636c:	2aff      	cmp	r2, #255	; 0xff
 800636e:	f47f af6b 	bne.w	8006248 <dhcp_recv+0xb4>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8006372:	9b02      	ldr	r3, [sp, #8]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	b9db      	cbnz	r3, 80063b0 <dhcp_recv+0x21c>
  } else if (parse_sname_as_options) {
 8006378:	9b03      	ldr	r3, [sp, #12]
 800637a:	bb13      	cbnz	r3, 80063c2 <dhcp_recv+0x22e>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800637c:	9b02      	ldr	r3, [sp, #8]
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	2b00      	cmp	r3, #0
 8006382:	f43f af4d 	beq.w	8006220 <dhcp_recv+0x8c>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8006386:	4a40      	ldr	r2, [pc, #256]	; (8006488 <dhcp_recv+0x2f4>)
  msg_in = (struct dhcp_msg *)p->payload;
 8006388:	f8db 1004 	ldr.w	r1, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800638c:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 800638e:	2b05      	cmp	r3, #5
 8006390:	d132      	bne.n	80063f8 <dhcp_recv+0x264>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8006392:	9b01      	ldr	r3, [sp, #4]
 8006394:	795b      	ldrb	r3, [r3, #5]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d123      	bne.n	80063e2 <dhcp_recv+0x24e>
      dhcp_handle_ack(netif, msg_in);
 800639a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800639c:	f7ff feaa 	bl	80060f4 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80063a0:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
        dhcp_check(netif);
 80063a4:	4628      	mov	r0, r5
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80063a6:	071b      	lsls	r3, r3, #28
 80063a8:	d523      	bpl.n	80063f2 <dhcp_recv+0x25e>
        dhcp_check(netif);
 80063aa:	f7ff fdd1 	bl	8005f50 <dhcp_check>
 80063ae:	e737      	b.n	8006220 <dhcp_recv+0x8c>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80063b0:	4b35      	ldr	r3, [pc, #212]	; (8006488 <dhcp_recv+0x2f4>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80063b2:	2200      	movs	r2, #0
 80063b4:	9902      	ldr	r1, [sp, #8]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80063b6:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80063b8:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d00c      	beq.n	80063d8 <dhcp_recv+0x244>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d106      	bne.n	80063d0 <dhcp_recv+0x23c>
    parse_sname_as_options = 0;
 80063c2:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80063c4:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 80063c8:	f04f 092c 	mov.w	r9, #44	; 0x2c
    parse_sname_as_options = 0;
 80063cc:	9303      	str	r3, [sp, #12]
 80063ce:	e716      	b.n	80061fe <dhcp_recv+0x6a>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d1d1      	bne.n	8006378 <dhcp_recv+0x1e4>
      parse_sname_as_options = 1;
 80063d4:	2301      	movs	r3, #1
 80063d6:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80063d8:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 80063dc:	f04f 096c 	mov.w	r9, #108	; 0x6c
 80063e0:	e70d      	b.n	80061fe <dhcp_recv+0x6a>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80063e2:	3b03      	subs	r3, #3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	f63f af1b 	bhi.w	8006220 <dhcp_recv+0x8c>
      dhcp_handle_ack(netif, msg_in);
 80063ea:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80063ec:	f7ff fe82 	bl	80060f4 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 80063f0:	4628      	mov	r0, r5
 80063f2:	f7ff fdc3 	bl	8005f7c <dhcp_bind>
 80063f6:	e713      	b.n	8006220 <dhcp_recv+0x8c>
  else if ((msg_type == DHCP_NAK) &&
 80063f8:	2b06      	cmp	r3, #6
 80063fa:	d115      	bne.n	8006428 <dhcp_recv+0x294>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80063fc:	9b01      	ldr	r3, [sp, #4]
 80063fe:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8006400:	1eda      	subs	r2, r3, #3
 8006402:	2a02      	cmp	r2, #2
 8006404:	d902      	bls.n	800640c <dhcp_recv+0x278>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8006406:	2b01      	cmp	r3, #1
 8006408:	f47f af0a 	bne.w	8006220 <dhcp_recv+0x8c>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800640c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800640e:	210c      	movs	r1, #12
 8006410:	f7ff fab8 	bl	8005984 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8006414:	4b1d      	ldr	r3, [pc, #116]	; (800648c <dhcp_recv+0x2f8>)
 8006416:	4628      	mov	r0, r5
 8006418:	461a      	mov	r2, r3
 800641a:	4619      	mov	r1, r3
 800641c:	f002 f966 	bl	80086ec <netif_set_addr>
  dhcp_discover(netif);
 8006420:	4628      	mov	r0, r5
 8006422:	f7ff fd1f 	bl	8005e64 <dhcp_discover>
}
 8006426:	e6fb      	b.n	8006220 <dhcp_recv+0x8c>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8006428:	2b02      	cmp	r3, #2
 800642a:	f47f aef9 	bne.w	8006220 <dhcp_recv+0x8c>
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	795b      	ldrb	r3, [r3, #5]
 8006432:	2b06      	cmp	r3, #6
 8006434:	f47f aef4 	bne.w	8006220 <dhcp_recv+0x8c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8006438:	9b02      	ldr	r3, [sp, #8]
 800643a:	789b      	ldrb	r3, [r3, #2]
 800643c:	2b00      	cmp	r3, #0
 800643e:	f43f aeef 	beq.w	8006220 <dhcp_recv+0x8c>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006442:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    dhcp->request_timeout = 0; /* stop timer */
 8006444:	9b03      	ldr	r3, [sp, #12]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8006446:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 8006448:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800644a:	9101      	str	r1, [sp, #4]
 800644c:	f001 fda5 	bl	8007f9a <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8006450:	9901      	ldr	r1, [sp, #4]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8006452:	61a0      	str	r0, [r4, #24]
    dhcp_select(netif);
 8006454:	4628      	mov	r0, r5
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8006456:	690b      	ldr	r3, [r1, #16]
 8006458:	61e3      	str	r3, [r4, #28]
    dhcp_select(netif);
 800645a:	f7ff fc47 	bl	8005cec <dhcp_select>
 800645e:	e6df      	b.n	8006220 <dhcp_recv+0x8c>
 8006460:	2000a7dc 	.word	0x2000a7dc
 8006464:	2000a7b4 	.word	0x2000a7b4
 8006468:	08012eb2 	.word	0x08012eb2
 800646c:	08013172 	.word	0x08013172
 8006470:	08012bab 	.word	0x08012bab
 8006474:	08013169 	.word	0x08013169
 8006478:	08013184 	.word	0x08013184
 800647c:	0801318d 	.word	0x0801318d
 8006480:	080131c8 	.word	0x080131c8
 8006484:	080131b5 	.word	0x080131b5
 8006488:	2000a7bc 	.word	0x2000a7bc
 800648c:	0801292c 	.word	0x0801292c
    switch (op) {
 8006490:	2a3b      	cmp	r2, #59	; 0x3b
 8006492:	f63f af3e 	bhi.w	8006312 <dhcp_recv+0x17e>
 8006496:	2a32      	cmp	r2, #50	; 0x32
 8006498:	d842      	bhi.n	8006520 <dhcp_recv+0x38c>
 800649a:	2a01      	cmp	r2, #1
 800649c:	f43f af00 	beq.w	80062a0 <dhcp_recv+0x10c>
 80064a0:	2a03      	cmp	r2, #3
 80064a2:	f43f aeea 	beq.w	800627a <dhcp_recv+0xe6>
 80064a6:	2a00      	cmp	r2, #0
 80064a8:	f43f af36 	beq.w	8006318 <dhcp_recv+0x184>
 80064ac:	2300      	movs	r3, #0
 80064ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80064b2:	2600      	movs	r6, #0
      if (offset + len + 2 > 0xFFFF) {
 80064b4:	441c      	add	r4, r3
 80064b6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80064ba:	4294      	cmp	r4, r2
 80064bc:	f73f aeb0 	bgt.w	8006220 <dhcp_recv+0x8c>
      offset = (u16_t)(offset + len + 2);
 80064c0:	9a04      	ldr	r2, [sp, #16]
 80064c2:	18d4      	adds	r4, r2, r3
 80064c4:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80064c6:	2e00      	cmp	r6, #0
 80064c8:	f43f af27 	beq.w	800631a <dhcp_recv+0x186>
        u32_t value = 0;
 80064cc:	2300      	movs	r3, #0
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80064ce:	2f07      	cmp	r7, #7
        u32_t value = 0;
 80064d0:	9307      	str	r3, [sp, #28]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80064d2:	d906      	bls.n	80064e2 <dhcp_recv+0x34e>
 80064d4:	4b37      	ldr	r3, [pc, #220]	; (80065b4 <dhcp_recv+0x420>)
 80064d6:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80064da:	4937      	ldr	r1, [pc, #220]	; (80065b8 <dhcp_recv+0x424>)
 80064dc:	4837      	ldr	r0, [pc, #220]	; (80065bc <dhcp_recv+0x428>)
 80064de:	f007 fad7 	bl	800da90 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80064e2:	9b02      	ldr	r3, [sp, #8]
 80064e4:	5ddb      	ldrb	r3, [r3, r7]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f47f af17 	bne.w	800631a <dhcp_recv+0x186>
          copy_len = LWIP_MIN(decode_len, 4);
 80064ec:	b2b2      	uxth	r2, r6
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80064ee:	9b04      	ldr	r3, [sp, #16]
 80064f0:	a907      	add	r1, sp, #28
 80064f2:	4640      	mov	r0, r8
 80064f4:	9204      	str	r2, [sp, #16]
 80064f6:	f002 fce5 	bl	8008ec4 <pbuf_copy_partial>
 80064fa:	9a04      	ldr	r2, [sp, #16]
 80064fc:	4282      	cmp	r2, r0
 80064fe:	f47f ae8f 	bne.w	8006220 <dhcp_recv+0x8c>
          } else if (decode_len == 4) {
 8006502:	2e04      	cmp	r6, #4
 8006504:	f47f af20 	bne.w	8006348 <dhcp_recv+0x1b4>
            value = lwip_ntohl(value);
 8006508:	9807      	ldr	r0, [sp, #28]
 800650a:	f001 fd46 	bl	8007f9a <lwip_htonl>
 800650e:	9007      	str	r0, [sp, #28]
          dhcp_got_option(dhcp, decode_idx);
 8006510:	2301      	movs	r3, #1
 8006512:	9a02      	ldr	r2, [sp, #8]
 8006514:	55d3      	strb	r3, [r2, r7]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8006516:	9b07      	ldr	r3, [sp, #28]
 8006518:	4a29      	ldr	r2, [pc, #164]	; (80065c0 <dhcp_recv+0x42c>)
 800651a:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800651e:	e6fc      	b.n	800631a <dhcp_recv+0x186>
 8006520:	f1a2 0333 	sub.w	r3, r2, #51	; 0x33
 8006524:	2b08      	cmp	r3, #8
 8006526:	f63f aef3 	bhi.w	8006310 <dhcp_recv+0x17c>
 800652a:	a101      	add	r1, pc, #4	; (adr r1, 8006530 <dhcp_recv+0x39c>)
 800652c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006530:	080062b1 	.word	0x080062b1
 8006534:	080062bd 	.word	0x080062bd
 8006538:	080062df 	.word	0x080062df
 800653c:	080062ed 	.word	0x080062ed
 8006540:	08006311 	.word	0x08006311
 8006544:	08006311 	.word	0x08006311
 8006548:	08006311 	.word	0x08006311
 800654c:	080062fb 	.word	0x080062fb
 8006550:	08006309 	.word	0x08006309
 8006554:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8006556:	2706      	movs	r7, #6
 8006558:	e7ac      	b.n	80064b4 <dhcp_recv+0x320>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800655a:	2707      	movs	r7, #7
        decode_len = 4; /* only copy the first given router */
 800655c:	2604      	movs	r6, #4
 800655e:	e7a9      	b.n	80064b4 <dhcp_recv+0x320>
 8006560:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8006562:	2703      	movs	r7, #3
 8006564:	e7a6      	b.n	80064b4 <dhcp_recv+0x320>
    decode_len = len;
 8006566:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8006568:	2700      	movs	r7, #0
 800656a:	e7a3      	b.n	80064b4 <dhcp_recv+0x320>
 800656c:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800656e:	2702      	movs	r7, #2
 8006570:	e7a0      	b.n	80064b4 <dhcp_recv+0x320>
 8006572:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8006574:	461f      	mov	r7, r3
 8006576:	e79d      	b.n	80064b4 <dhcp_recv+0x320>
 8006578:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 800657a:	2705      	movs	r7, #5
    if (op == DHCP_OPTION_PAD) {
 800657c:	e79a      	b.n	80064b4 <dhcp_recv+0x320>
 800657e:	f1a2 0133 	sub.w	r1, r2, #51	; 0x33
 8006582:	2908      	cmp	r1, #8
 8006584:	f63f aec5 	bhi.w	8006312 <dhcp_recv+0x17e>
 8006588:	a601      	add	r6, pc, #4	; (adr r6, 8006590 <dhcp_recv+0x3fc>)
 800658a:	f856 f021 	ldr.w	pc, [r6, r1, lsl #2]
 800658e:	bf00      	nop
 8006590:	080062ab 	.word	0x080062ab
 8006594:	080062b9 	.word	0x080062b9
 8006598:	080062d9 	.word	0x080062d9
 800659c:	080062e7 	.word	0x080062e7
 80065a0:	08006313 	.word	0x08006313
 80065a4:	08006313 	.word	0x08006313
 80065a8:	08006313 	.word	0x08006313
 80065ac:	080062f5 	.word	0x080062f5
 80065b0:	08006303 	.word	0x08006303
 80065b4:	08012eb2 	.word	0x08012eb2
 80065b8:	080131a4 	.word	0x080131a4
 80065bc:	08012bab 	.word	0x08012bab
 80065c0:	2000a7bc 	.word	0x2000a7bc

080065c4 <dhcp_arp_reply>:
{
 80065c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80065c6:	4606      	mov	r6, r0
{
 80065c8:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80065ca:	b940      	cbnz	r0, 80065de <dhcp_arp_reply+0x1a>
 80065cc:	4b27      	ldr	r3, [pc, #156]	; (800666c <dhcp_arp_reply+0xa8>)
 80065ce:	f240 328b 	movw	r2, #907	; 0x38b
 80065d2:	4927      	ldr	r1, [pc, #156]	; (8006670 <dhcp_arp_reply+0xac>)
 80065d4:	4827      	ldr	r0, [pc, #156]	; (8006674 <dhcp_arp_reply+0xb0>)
 80065d6:	f007 fa5b 	bl	800da90 <iprintf>
}
 80065da:	b007      	add	sp, #28
 80065dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dhcp = netif_dhcp_data(netif);
 80065de:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80065e0:	2c00      	cmp	r4, #0
 80065e2:	d0fa      	beq.n	80065da <dhcp_arp_reply+0x16>
 80065e4:	7963      	ldrb	r3, [r4, #5]
 80065e6:	2b08      	cmp	r3, #8
 80065e8:	d1f7      	bne.n	80065da <dhcp_arp_reply+0x16>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80065ea:	680a      	ldr	r2, [r1, #0]
 80065ec:	69e3      	ldr	r3, [r4, #28]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d1f3      	bne.n	80065da <dhcp_arp_reply+0x16>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80065f2:	210c      	movs	r1, #12
 80065f4:	4620      	mov	r0, r4
 80065f6:	f7ff f9c5 	bl	8005984 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80065fa:	f10d 0316 	add.w	r3, sp, #22
 80065fe:	2204      	movs	r2, #4
 8006600:	4621      	mov	r1, r4
 8006602:	4630      	mov	r0, r6
 8006604:	f7ff fa3c 	bl	8005a80 <dhcp_create_msg>
  if (p_out != NULL) {
 8006608:	4605      	mov	r5, r0
 800660a:	b330      	cbz	r0, 800665a <dhcp_arp_reply+0x96>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800660c:	6841      	ldr	r1, [r0, #4]
 800660e:	2304      	movs	r3, #4
 8006610:	2232      	movs	r2, #50	; 0x32
 8006612:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8006616:	31f0      	adds	r1, #240	; 0xf0
 8006618:	9103      	str	r1, [sp, #12]
 800661a:	f7ff f9d7 	bl	80059cc <dhcp_option>
 800661e:	4607      	mov	r7, r0
 8006620:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8006624:	69e0      	ldr	r0, [r4, #28]
 8006626:	f001 fcb8 	bl	8007f9a <lwip_htonl>
 800662a:	9903      	ldr	r1, [sp, #12]
 800662c:	4602      	mov	r2, r0
 800662e:	4638      	mov	r0, r7
 8006630:	f7ff fa02 	bl	8005a38 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006634:	462a      	mov	r2, r5
 8006636:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8006638:	f8ad 0016 	strh.w	r0, [sp, #22]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800663c:	f7ff fab4 	bl	8005ba8 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8006640:	4b0d      	ldr	r3, [pc, #52]	; (8006678 <dhcp_arp_reply+0xb4>)
 8006642:	4629      	mov	r1, r5
 8006644:	480d      	ldr	r0, [pc, #52]	; (800667c <dhcp_arp_reply+0xb8>)
 8006646:	4a0e      	ldr	r2, [pc, #56]	; (8006680 <dhcp_arp_reply+0xbc>)
 8006648:	e9cd 6300 	strd	r6, r3, [sp]
 800664c:	2343      	movs	r3, #67	; 0x43
 800664e:	6840      	ldr	r0, [r0, #4]
 8006650:	f006 f8ae 	bl	800c7b0 <udp_sendto_if_src>
    pbuf_free(p_out);
 8006654:	4628      	mov	r0, r5
 8006656:	f002 fa0f 	bl	8008a78 <pbuf_free>
  if (dhcp->tries < 255) {
 800665a:	79a3      	ldrb	r3, [r4, #6]
 800665c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800665e:	bf1c      	itt	ne
 8006660:	3301      	addne	r3, #1
 8006662:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006664:	2314      	movs	r3, #20
 8006666:	8123      	strh	r3, [r4, #8]
  return result;
 8006668:	e7b7      	b.n	80065da <dhcp_arp_reply+0x16>
 800666a:	bf00      	nop
 800666c:	08012eb2 	.word	0x08012eb2
 8006670:	080130fa 	.word	0x080130fa
 8006674:	08012bab 	.word	0x08012bab
 8006678:	0801292c 	.word	0x0801292c
 800667c:	200067e8 	.word	0x200067e8
 8006680:	08012928 	.word	0x08012928

08006684 <dhcp_renew>:
{
 8006684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006688:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 800668a:	b086      	sub	sp, #24
 800668c:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800668e:	2105      	movs	r1, #5
 8006690:	4620      	mov	r0, r4
 8006692:	f7ff f977 	bl	8005984 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8006696:	f10d 0316 	add.w	r3, sp, #22
 800669a:	2203      	movs	r2, #3
 800669c:	4621      	mov	r1, r4
 800669e:	4630      	mov	r0, r6
 80066a0:	f7ff f9ee 	bl	8005a80 <dhcp_create_msg>
  if (p_out != NULL) {
 80066a4:	4605      	mov	r5, r0
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d055      	beq.n	8006756 <dhcp_renew+0xd2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80066aa:	6841      	ldr	r1, [r0, #4]
 80066ac:	2302      	movs	r3, #2
 80066ae:	2239      	movs	r2, #57	; 0x39
 80066b0:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80066b4:	31f0      	adds	r1, #240	; 0xf0
 80066b6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8006760 <dhcp_renew+0xdc>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80066ba:	2703      	movs	r7, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80066bc:	9103      	str	r1, [sp, #12]
 80066be:	f7ff f985 	bl	80059cc <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80066c2:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 80066c4:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80066c6:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80066ca:	f7ff f963 	bl	8005994 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80066ce:	9903      	ldr	r1, [sp, #12]
 80066d0:	2303      	movs	r3, #3
 80066d2:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80066d4:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80066d8:	f7ff f978 	bl	80059cc <dhcp_option>
 80066dc:	9903      	ldr	r1, [sp, #12]
 80066de:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80066e2:	3f01      	subs	r7, #1
 80066e4:	f818 2b01 	ldrb.w	r2, [r8], #1
 80066e8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80066ec:	9103      	str	r1, [sp, #12]
 80066ee:	f7ff f98b 	bl	8005a08 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80066f2:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80066f6:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80066f8:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80066fc:	d1f1      	bne.n	80066e2 <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80066fe:	462a      	mov	r2, r5
 8006700:	f7ff fa52 	bl	8005ba8 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8006704:	4815      	ldr	r0, [pc, #84]	; (800675c <dhcp_renew+0xd8>)
 8006706:	9600      	str	r6, [sp, #0]
 8006708:	2343      	movs	r3, #67	; 0x43
 800670a:	f104 0218 	add.w	r2, r4, #24
 800670e:	4629      	mov	r1, r5
 8006710:	6840      	ldr	r0, [r0, #4]
 8006712:	f006 f8e5 	bl	800c8e0 <udp_sendto_if>
 8006716:	4606      	mov	r6, r0
    pbuf_free(p_out);
 8006718:	4628      	mov	r0, r5
 800671a:	f002 f9ad 	bl	8008a78 <pbuf_free>
  if (dhcp->tries < 255) {
 800671e:	79a3      	ldrb	r3, [r4, #6]
}
 8006720:	4630      	mov	r0, r6
  if (dhcp->tries < 255) {
 8006722:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006724:	bf1c      	itt	ne
 8006726:	3301      	addne	r3, #1
 8006728:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800672a:	79a3      	ldrb	r3, [r4, #6]
 800672c:	2b09      	cmp	r3, #9
 800672e:	bf96      	itet	ls
 8006730:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8006734:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 8006738:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800673c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8006740:	bf9c      	itt	ls
 8006742:	011b      	lslls	r3, r3, #4
 8006744:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006746:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800674a:	fbb3 f3f2 	udiv	r3, r3, r2
 800674e:	8123      	strh	r3, [r4, #8]
}
 8006750:	b006      	add	sp, #24
 8006752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 8006756:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800675a:	e7e0      	b.n	800671e <dhcp_renew+0x9a>
 800675c:	200067e8 	.word	0x200067e8
 8006760:	08012924 	.word	0x08012924

08006764 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8006764:	b150      	cbz	r0, 800677c <dhcp_supplied_address+0x18>
 8006766:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006768:	b140      	cbz	r0, 800677c <dhcp_supplied_address+0x18>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800676a:	7940      	ldrb	r0, [r0, #5]
 800676c:	280a      	cmp	r0, #10
 800676e:	d006      	beq.n	800677e <dhcp_supplied_address+0x1a>
 8006770:	3804      	subs	r0, #4
 8006772:	2801      	cmp	r0, #1
 8006774:	bf8c      	ite	hi
 8006776:	2000      	movhi	r0, #0
 8006778:	2001      	movls	r0, #1
 800677a:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 800677c:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800677e:	2001      	movs	r0, #1
 8006780:	e7fb      	b.n	800677a <dhcp_supplied_address+0x16>
	...

08006784 <dhcp_release_and_stop>:
{
 8006784:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006786:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8006788:	b087      	sub	sp, #28
 800678a:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 800678c:	2c00      	cmp	r4, #0
 800678e:	d050      	beq.n	8006832 <dhcp_release_and_stop+0xae>
  if (dhcp->state == DHCP_STATE_OFF) {
 8006790:	7963      	ldrb	r3, [r4, #5]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d04d      	beq.n	8006832 <dhcp_release_and_stop+0xae>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8006796:	69a3      	ldr	r3, [r4, #24]
 8006798:	9305      	str	r3, [sp, #20]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800679a:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800679c:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80067a0:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80067a4:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80067a8:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80067aa:	81e3      	strh	r3, [r4, #14]
 80067ac:	6123      	str	r3, [r4, #16]
 80067ae:	82a3      	strh	r3, [r4, #20]
  if (dhcp_supplied_address(netif)) {
 80067b0:	f7ff ffd8 	bl	8006764 <dhcp_supplied_address>
 80067b4:	b368      	cbz	r0, 8006812 <dhcp_release_and_stop+0x8e>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80067b6:	f10d 0312 	add.w	r3, sp, #18
 80067ba:	2207      	movs	r2, #7
 80067bc:	4621      	mov	r1, r4
 80067be:	4630      	mov	r0, r6
 80067c0:	f7ff f95e 	bl	8005a80 <dhcp_create_msg>
    if (p_out != NULL) {
 80067c4:	4605      	mov	r5, r0
 80067c6:	b320      	cbz	r0, 8006812 <dhcp_release_and_stop+0x8e>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80067c8:	6841      	ldr	r1, [r0, #4]
 80067ca:	2304      	movs	r3, #4
 80067cc:	2236      	movs	r2, #54	; 0x36
 80067ce:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 80067d2:	31f0      	adds	r1, #240	; 0xf0
 80067d4:	9103      	str	r1, [sp, #12]
 80067d6:	f7ff f8f9 	bl	80059cc <dhcp_option>
 80067da:	4607      	mov	r7, r0
 80067dc:	f8ad 0012 	strh.w	r0, [sp, #18]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80067e0:	9805      	ldr	r0, [sp, #20]
 80067e2:	f001 fbda 	bl	8007f9a <lwip_htonl>
 80067e6:	9903      	ldr	r1, [sp, #12]
 80067e8:	4602      	mov	r2, r0
 80067ea:	4638      	mov	r0, r7
 80067ec:	f7ff f924 	bl	8005a38 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80067f0:	462a      	mov	r2, r5
 80067f2:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80067f4:	f8ad 0012 	strh.w	r0, [sp, #18]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80067f8:	f7ff f9d6 	bl	8005ba8 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80067fc:	480e      	ldr	r0, [pc, #56]	; (8006838 <dhcp_release_and_stop+0xb4>)
 80067fe:	2343      	movs	r3, #67	; 0x43
 8006800:	9600      	str	r6, [sp, #0]
 8006802:	aa05      	add	r2, sp, #20
 8006804:	4629      	mov	r1, r5
 8006806:	6840      	ldr	r0, [r0, #4]
 8006808:	f006 f86a 	bl	800c8e0 <udp_sendto_if>
      pbuf_free(p_out);
 800680c:	4628      	mov	r0, r5
 800680e:	f002 f933 	bl	8008a78 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8006812:	4b0a      	ldr	r3, [pc, #40]	; (800683c <dhcp_release_and_stop+0xb8>)
 8006814:	4630      	mov	r0, r6
 8006816:	4619      	mov	r1, r3
 8006818:	461a      	mov	r2, r3
 800681a:	f001 ff67 	bl	80086ec <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800681e:	2100      	movs	r1, #0
 8006820:	4620      	mov	r0, r4
 8006822:	f7ff f8af 	bl	8005984 <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 8006826:	7923      	ldrb	r3, [r4, #4]
 8006828:	b11b      	cbz	r3, 8006832 <dhcp_release_and_stop+0xae>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800682a:	f7ff fc97 	bl	800615c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800682e:	2300      	movs	r3, #0
 8006830:	7123      	strb	r3, [r4, #4]
}
 8006832:	b007      	add	sp, #28
 8006834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006836:	bf00      	nop
 8006838:	200067e8 	.word	0x200067e8
 800683c:	0801292c 	.word	0x0801292c

08006840 <dhcp_start>:
{
 8006840:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8006842:	4604      	mov	r4, r0
 8006844:	b950      	cbnz	r0, 800685c <dhcp_start+0x1c>
 8006846:	4b24      	ldr	r3, [pc, #144]	; (80068d8 <dhcp_start+0x98>)
 8006848:	f240 22e7 	movw	r2, #743	; 0x2e7
 800684c:	4923      	ldr	r1, [pc, #140]	; (80068dc <dhcp_start+0x9c>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800684e:	4824      	ldr	r0, [pc, #144]	; (80068e0 <dhcp_start+0xa0>)
 8006850:	f007 f91e 	bl	800da90 <iprintf>
 8006854:	f06f 020f 	mvn.w	r2, #15
}
 8006858:	4610      	mov	r0, r2
 800685a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800685c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8006860:	07da      	lsls	r2, r3, #31
 8006862:	d404      	bmi.n	800686e <dhcp_start+0x2e>
 8006864:	4b1c      	ldr	r3, [pc, #112]	; (80068d8 <dhcp_start+0x98>)
 8006866:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800686a:	491e      	ldr	r1, [pc, #120]	; (80068e4 <dhcp_start+0xa4>)
 800686c:	e7ef      	b.n	800684e <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800686e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  dhcp = netif_dhcp_data(netif);
 8006870:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8006872:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8006876:	d202      	bcs.n	800687e <dhcp_start+0x3e>
    return ERR_MEM;
 8006878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800687c:	e7ec      	b.n	8006858 <dhcp_start+0x18>
  if (dhcp == NULL) {
 800687e:	b9dd      	cbnz	r5, 80068b8 <dhcp_start+0x78>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8006880:	2034      	movs	r0, #52	; 0x34
 8006882:	f001 fda1 	bl	80083c8 <mem_malloc>
    if (dhcp == NULL) {
 8006886:	4605      	mov	r5, r0
 8006888:	2800      	cmp	r0, #0
 800688a:	d0f5      	beq.n	8006878 <dhcp_start+0x38>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800688c:	6260      	str	r0, [r4, #36]	; 0x24
  memset(dhcp, 0, sizeof(struct dhcp));
 800688e:	2234      	movs	r2, #52	; 0x34
 8006890:	2100      	movs	r1, #0
 8006892:	4628      	mov	r0, r5
 8006894:	f007 f8f4 	bl	800da80 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8006898:	f7ff fbf6 	bl	8006088 <dhcp_inc_pcb_refcount>
 800689c:	4602      	mov	r2, r0
 800689e:	2800      	cmp	r0, #0
 80068a0:	d1ea      	bne.n	8006878 <dhcp_start+0x38>
  dhcp->pcb_allocated = 1;
 80068a2:	2301      	movs	r3, #1
 80068a4:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 80068a6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80068aa:	075b      	lsls	r3, r3, #29
 80068ac:	d40a      	bmi.n	80068c4 <dhcp_start+0x84>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80068ae:	2102      	movs	r1, #2
 80068b0:	4628      	mov	r0, r5
 80068b2:	f7ff f867 	bl	8005984 <dhcp_set_state>
    return ERR_OK;
 80068b6:	e7cf      	b.n	8006858 <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
 80068b8:	792b      	ldrb	r3, [r5, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0e7      	beq.n	800688e <dhcp_start+0x4e>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80068be:	f7ff fc4d 	bl	800615c <dhcp_dec_pcb_refcount>
 80068c2:	e7e4      	b.n	800688e <dhcp_start+0x4e>
  result = dhcp_discover(netif);
 80068c4:	4620      	mov	r0, r4
 80068c6:	f7ff facd 	bl	8005e64 <dhcp_discover>
  if (result != ERR_OK) {
 80068ca:	4602      	mov	r2, r0
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d0c3      	beq.n	8006858 <dhcp_start+0x18>
    dhcp_release_and_stop(netif);
 80068d0:	4620      	mov	r0, r4
 80068d2:	f7ff ff57 	bl	8006784 <dhcp_release_and_stop>
 80068d6:	e7cf      	b.n	8006878 <dhcp_start+0x38>
 80068d8:	08012eb2 	.word	0x08012eb2
 80068dc:	080130fa 	.word	0x080130fa
 80068e0:	08012bab 	.word	0x08012bab
 80068e4:	08013213 	.word	0x08013213

080068e8 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 80068e8:	4b58      	ldr	r3, [pc, #352]	; (8006a4c <dhcp_coarse_tmr+0x164>)
{
 80068ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 80068ee:	681d      	ldr	r5, [r3, #0]
{
 80068f0:	b087      	sub	sp, #28
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80068f2:	f240 2619 	movw	r6, #537	; 0x219
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80068f6:	4f56      	ldr	r7, [pc, #344]	; (8006a50 <dhcp_coarse_tmr+0x168>)
 80068f8:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8006a54 <dhcp_coarse_tmr+0x16c>
  NETIF_FOREACH(netif) {
 80068fc:	b915      	cbnz	r5, 8006904 <dhcp_coarse_tmr+0x1c>
}
 80068fe:	b007      	add	sp, #28
 8006900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8006904:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8006906:	b17c      	cbz	r4, 8006928 <dhcp_coarse_tmr+0x40>
 8006908:	7963      	ldrb	r3, [r4, #5]
 800690a:	b16b      	cbz	r3, 8006928 <dhcp_coarse_tmr+0x40>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800690c:	8aa1      	ldrh	r1, [r4, #20]
 800690e:	b169      	cbz	r1, 800692c <dhcp_coarse_tmr+0x44>
 8006910:	8a62      	ldrh	r2, [r4, #18]
 8006912:	3201      	adds	r2, #1
 8006914:	b292      	uxth	r2, r2
 8006916:	4291      	cmp	r1, r2
 8006918:	8262      	strh	r2, [r4, #18]
 800691a:	d107      	bne.n	800692c <dhcp_coarse_tmr+0x44>
        dhcp_release_and_stop(netif);
 800691c:	4628      	mov	r0, r5
 800691e:	f7ff ff31 	bl	8006784 <dhcp_release_and_stop>
        dhcp_start(netif);
 8006922:	4628      	mov	r0, r5
 8006924:	f7ff ff8c 	bl	8006840 <dhcp_start>
  NETIF_FOREACH(netif) {
 8006928:	682d      	ldr	r5, [r5, #0]
 800692a:	e7e7      	b.n	80068fc <dhcp_coarse_tmr+0x14>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800692c:	8a22      	ldrh	r2, [r4, #16]
 800692e:	2a00      	cmp	r2, #0
 8006930:	d072      	beq.n	8006a18 <dhcp_coarse_tmr+0x130>
 8006932:	1e51      	subs	r1, r2, #1
 8006934:	2a01      	cmp	r2, #1
 8006936:	8221      	strh	r1, [r4, #16]
 8006938:	d16e      	bne.n	8006a18 <dhcp_coarse_tmr+0x130>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800693a:	3b01      	subs	r3, #1
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b09      	cmp	r3, #9
 8006940:	d8f2      	bhi.n	8006928 <dhcp_coarse_tmr+0x40>
 8006942:	fa26 f303 	lsr.w	r3, r6, r3
 8006946:	07db      	lsls	r3, r3, #31
 8006948:	d5ee      	bpl.n	8006928 <dhcp_coarse_tmr+0x40>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800694a:	2104      	movs	r1, #4
 800694c:	4620      	mov	r0, r4
 800694e:	f7ff f819 	bl	8005984 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8006952:	f10d 0316 	add.w	r3, sp, #22
 8006956:	2203      	movs	r2, #3
 8006958:	4621      	mov	r1, r4
 800695a:	4628      	mov	r0, r5
 800695c:	f7ff f890 	bl	8005a80 <dhcp_create_msg>
  if (p_out != NULL) {
 8006960:	4681      	mov	r9, r0
 8006962:	2800      	cmp	r0, #0
 8006964:	d038      	beq.n	80069d8 <dhcp_coarse_tmr+0xf0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006966:	6841      	ldr	r1, [r0, #4]
 8006968:	2302      	movs	r3, #2
 800696a:	2239      	movs	r2, #57	; 0x39
 800696c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8006970:	31f0      	adds	r1, #240	; 0xf0
 8006972:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8006a58 <dhcp_coarse_tmr+0x170>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006976:	f04f 0a03 	mov.w	sl, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800697a:	9103      	str	r1, [sp, #12]
 800697c:	f7ff f826 	bl	80059cc <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006980:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8006982:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006984:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006988:	f7ff f804 	bl	8005994 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800698c:	9903      	ldr	r1, [sp, #12]
 800698e:	2303      	movs	r3, #3
 8006990:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006992:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006996:	f7ff f819 	bl	80059cc <dhcp_option>
 800699a:	9903      	ldr	r1, [sp, #12]
 800699c:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80069a0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80069a4:	f81b 2b01 	ldrb.w	r2, [fp], #1
 80069a8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80069ac:	9103      	str	r1, [sp, #12]
 80069ae:	f7ff f82b 	bl	8005a08 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80069b2:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 80069b6:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80069b8:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80069bc:	d1f0      	bne.n	80069a0 <dhcp_coarse_tmr+0xb8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80069be:	464a      	mov	r2, r9
 80069c0:	f7ff f8f2 	bl	8005ba8 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80069c4:	2343      	movs	r3, #67	; 0x43
 80069c6:	4642      	mov	r2, r8
 80069c8:	4649      	mov	r1, r9
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	9500      	str	r5, [sp, #0]
 80069ce:	f005 ff87 	bl	800c8e0 <udp_sendto_if>
    pbuf_free(p_out);
 80069d2:	4648      	mov	r0, r9
 80069d4:	f002 f850 	bl	8008a78 <pbuf_free>
  if (dhcp->tries < 255) {
 80069d8:	79a3      	ldrb	r3, [r4, #6]
 80069da:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80069dc:	bf1c      	itt	ne
 80069de:	3301      	addne	r3, #1
 80069e0:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80069e2:	79a3      	ldrb	r3, [r4, #6]
 80069e4:	2b09      	cmp	r3, #9
 80069e6:	bf96      	itet	ls
 80069e8:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80069ec:	f242 7310 	movwhi	r3, #10000	; 0x2710
 80069f0:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80069f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80069f8:	bf9c      	itt	ls
 80069fa:	00db      	lslls	r3, r3, #3
 80069fc:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80069fe:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8006a02:	fbb3 f3f2 	udiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8006a06:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006a08:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8006a0a:	8aa3      	ldrh	r3, [r4, #20]
 8006a0c:	1a9b      	subs	r3, r3, r2
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	dd8a      	ble.n	8006928 <dhcp_coarse_tmr+0x40>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8006a12:	105b      	asrs	r3, r3, #1
 8006a14:	8223      	strh	r3, [r4, #16]
 8006a16:	e787      	b.n	8006928 <dhcp_coarse_tmr+0x40>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8006a18:	89e2      	ldrh	r2, [r4, #14]
 8006a1a:	2a00      	cmp	r2, #0
 8006a1c:	d084      	beq.n	8006928 <dhcp_coarse_tmr+0x40>
 8006a1e:	1e51      	subs	r1, r2, #1
 8006a20:	2a01      	cmp	r2, #1
 8006a22:	81e1      	strh	r1, [r4, #14]
 8006a24:	d180      	bne.n	8006928 <dhcp_coarse_tmr+0x40>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8006a26:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8006a2a:	2a01      	cmp	r2, #1
 8006a2c:	d002      	beq.n	8006a34 <dhcp_coarse_tmr+0x14c>
 8006a2e:	2b0a      	cmp	r3, #10
 8006a30:	f47f af7a 	bne.w	8006928 <dhcp_coarse_tmr+0x40>
    dhcp_renew(netif);
 8006a34:	4628      	mov	r0, r5
 8006a36:	f7ff fe25 	bl	8006684 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8006a3a:	89a3      	ldrh	r3, [r4, #12]
 8006a3c:	8a62      	ldrh	r2, [r4, #18]
 8006a3e:	1a9b      	subs	r3, r3, r2
 8006a40:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8006a42:	bfc4      	itt	gt
 8006a44:	105b      	asrgt	r3, r3, #1
 8006a46:	81e3      	strhgt	r3, [r4, #14]
 8006a48:	e76e      	b.n	8006928 <dhcp_coarse_tmr+0x40>
 8006a4a:	bf00      	nop
 8006a4c:	20010d04 	.word	0x20010d04
 8006a50:	200067e8 	.word	0x200067e8
 8006a54:	08012928 	.word	0x08012928
 8006a58:	08012924 	.word	0x08012924

08006a5c <dhcp_fine_tmr>:
{
 8006a5c:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8006a5e:	4b1e      	ldr	r3, [pc, #120]	; (8006ad8 <dhcp_fine_tmr+0x7c>)
        dhcp->request_timeout--;
 8006a60:	2500      	movs	r5, #0
  NETIF_FOREACH(netif) {
 8006a62:	681c      	ldr	r4, [r3, #0]
 8006a64:	b904      	cbnz	r4, 8006a68 <dhcp_fine_tmr+0xc>
}
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8006a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 8006a6a:	b123      	cbz	r3, 8006a76 <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 8006a6c:	891a      	ldrh	r2, [r3, #8]
 8006a6e:	2a01      	cmp	r2, #1
 8006a70:	d903      	bls.n	8006a7a <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 8006a72:	3a01      	subs	r2, #1
 8006a74:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8006a76:	6824      	ldr	r4, [r4, #0]
 8006a78:	e7f4      	b.n	8006a64 <dhcp_fine_tmr+0x8>
      } else if (dhcp->request_timeout == 1) {
 8006a7a:	d1fc      	bne.n	8006a76 <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8006a7c:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8006a7e:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8006a80:	2a0c      	cmp	r2, #12
 8006a82:	d001      	beq.n	8006a88 <dhcp_fine_tmr+0x2c>
 8006a84:	2a06      	cmp	r2, #6
 8006a86:	d103      	bne.n	8006a90 <dhcp_fine_tmr+0x34>
    dhcp_discover(netif);
 8006a88:	4620      	mov	r0, r4
      dhcp_discover(netif);
 8006a8a:	f7ff f9eb 	bl	8005e64 <dhcp_discover>
 8006a8e:	e7f2      	b.n	8006a76 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8006a90:	2a01      	cmp	r2, #1
 8006a92:	d10c      	bne.n	8006aae <dhcp_fine_tmr+0x52>
    if (dhcp->tries <= 5) {
 8006a94:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 8006a96:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8006a98:	2b05      	cmp	r3, #5
 8006a9a:	d802      	bhi.n	8006aa2 <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8006a9c:	f7ff f926 	bl	8005cec <dhcp_select>
 8006aa0:	e7e9      	b.n	8006a76 <dhcp_fine_tmr+0x1a>
      dhcp_release_and_stop(netif);
 8006aa2:	f7ff fe6f 	bl	8006784 <dhcp_release_and_stop>
      dhcp_start(netif);
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f7ff feca 	bl	8006840 <dhcp_start>
 8006aac:	e7e3      	b.n	8006a76 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8006aae:	2a08      	cmp	r2, #8
 8006ab0:	d109      	bne.n	8006ac6 <dhcp_fine_tmr+0x6a>
    if (dhcp->tries <= 1) {
 8006ab2:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 8006ab4:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d802      	bhi.n	8006ac0 <dhcp_fine_tmr+0x64>
      dhcp_check(netif);
 8006aba:	f7ff fa49 	bl	8005f50 <dhcp_check>
 8006abe:	e7da      	b.n	8006a76 <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 8006ac0:	f7ff fa5c 	bl	8005f7c <dhcp_bind>
 8006ac4:	e7d7      	b.n	8006a76 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8006ac6:	2a03      	cmp	r2, #3
 8006ac8:	d1d5      	bne.n	8006a76 <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 8006aca:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 8006acc:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d8db      	bhi.n	8006a8a <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 8006ad2:	f7ff f887 	bl	8005be4 <dhcp_reboot>
 8006ad6:	e7ce      	b.n	8006a76 <dhcp_fine_tmr+0x1a>
 8006ad8:	20010d04 	.word	0x20010d04

08006adc <dhcp_stop>:
  dhcp_release_and_stop(netif);
 8006adc:	f7ff be52 	b.w	8006784 <dhcp_release_and_stop>

08006ae0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8006ae0:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8006ae2:	2618      	movs	r6, #24
 8006ae4:	4d07      	ldr	r5, [pc, #28]	; (8006b04 <etharp_free_entry+0x24>)
{
 8006ae6:	4604      	mov	r4, r0
  if (arp_table[i].q != NULL) {
 8006ae8:	4346      	muls	r6, r0
 8006aea:	59a8      	ldr	r0, [r5, r6]
 8006aec:	b118      	cbz	r0, 8006af6 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8006aee:	f001 ffc3 	bl	8008a78 <pbuf_free>
    arp_table[i].q = NULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	51ab      	str	r3, [r5, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8006af6:	2018      	movs	r0, #24
 8006af8:	2300      	movs	r3, #0
 8006afa:	fb00 5404 	mla	r4, r0, r4, r5
 8006afe:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8006b00:	bd70      	pop	{r4, r5, r6, pc}
 8006b02:	bf00      	nop
 8006b04:	200067f4 	.word	0x200067f4

08006b08 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8006b08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8006b0e:	f04f 0e0a 	mov.w	lr, #10
{
 8006b12:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8006b14:	4699      	mov	r9, r3
 8006b16:	469b      	mov	fp, r3
 8006b18:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 8006b1a:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8006b1c:	4675      	mov	r5, lr
 8006b1e:	46f0      	mov	r8, lr
{
 8006b20:	e9cd 2100 	strd	r2, r1, [sp]
 8006b24:	4a3a      	ldr	r2, [pc, #232]	; (8006c10 <etharp_find_entry+0x108>)
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006b26:	2c0a      	cmp	r4, #10
 8006b28:	b218      	sxth	r0, r3
    u8_t state = arp_table[i].state;
 8006b2a:	f892 a014 	ldrb.w	sl, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006b2e:	d11a      	bne.n	8006b66 <etharp_find_entry+0x5e>
 8006b30:	f1ba 0f00 	cmp.w	sl, #0
 8006b34:	d05d      	beq.n	8006bf2 <etharp_find_entry+0xea>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8006b36:	b156      	cbz	r6, 8006b4e <etharp_find_entry+0x46>
 8006b38:	6837      	ldr	r7, [r6, #0]
 8006b3a:	6851      	ldr	r1, [r2, #4]
 8006b3c:	428f      	cmp	r7, r1
 8006b3e:	d106      	bne.n	8006b4e <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8006b40:	9900      	ldr	r1, [sp, #0]
 8006b42:	2900      	cmp	r1, #0
 8006b44:	d048      	beq.n	8006bd8 <etharp_find_entry+0xd0>
 8006b46:	6891      	ldr	r1, [r2, #8]
 8006b48:	9f00      	ldr	r7, [sp, #0]
 8006b4a:	42b9      	cmp	r1, r7
 8006b4c:	d044      	beq.n	8006bd8 <etharp_find_entry+0xd0>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8006b4e:	f1ba 0f01 	cmp.w	sl, #1
 8006b52:	8a51      	ldrh	r1, [r2, #18]
 8006b54:	d148      	bne.n	8006be8 <etharp_find_entry+0xe0>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8006b56:	6817      	ldr	r7, [r2, #0]
 8006b58:	2f00      	cmp	r7, #0
 8006b5a:	d040      	beq.n	8006bde <etharp_find_entry+0xd6>
          if (arp_table[i].ctime >= age_queue) {
 8006b5c:	458c      	cmp	ip, r1
 8006b5e:	d805      	bhi.n	8006b6c <etharp_find_entry+0x64>
 8006b60:	468c      	mov	ip, r1
 8006b62:	4686      	mov	lr, r0
 8006b64:	e002      	b.n	8006b6c <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 8006b66:	f1ba 0f00 	cmp.w	sl, #0
 8006b6a:	d1e4      	bne.n	8006b36 <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	3218      	adds	r2, #24
 8006b70:	2b0a      	cmp	r3, #10
 8006b72:	d1d8      	bne.n	8006b26 <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8006b74:	9b01      	ldr	r3, [sp, #4]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d143      	bne.n	8006c02 <etharp_find_entry+0xfa>
 8006b7a:	2c0a      	cmp	r4, #10
 8006b7c:	d111      	bne.n	8006ba2 <etharp_find_entry+0x9a>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8006b7e:	2d0a      	cmp	r5, #10
 8006b80:	d039      	beq.n	8006bf6 <etharp_find_entry+0xee>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8006b82:	2318      	movs	r3, #24
 8006b84:	4a22      	ldr	r2, [pc, #136]	; (8006c10 <etharp_find_entry+0x108>)
 8006b86:	436b      	muls	r3, r5
 8006b88:	58d3      	ldr	r3, [r2, r3]
 8006b8a:	b133      	cbz	r3, 8006b9a <etharp_find_entry+0x92>
 8006b8c:	4b21      	ldr	r3, [pc, #132]	; (8006c14 <etharp_find_entry+0x10c>)
 8006b8e:	f240 126d 	movw	r2, #365	; 0x16d
 8006b92:	4921      	ldr	r1, [pc, #132]	; (8006c18 <etharp_find_entry+0x110>)
 8006b94:	4821      	ldr	r0, [pc, #132]	; (8006c1c <etharp_find_entry+0x114>)
 8006b96:	f006 ff7b 	bl	800da90 <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8006b9a:	462c      	mov	r4, r5
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	f7ff ff9f 	bl	8006ae0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8006ba2:	4d1b      	ldr	r5, [pc, #108]	; (8006c10 <etharp_find_entry+0x108>)
 8006ba4:	2318      	movs	r3, #24
 8006ba6:	fb03 5304 	mla	r3, r3, r4, r5
 8006baa:	7d1b      	ldrb	r3, [r3, #20]
 8006bac:	b133      	cbz	r3, 8006bbc <etharp_find_entry+0xb4>
 8006bae:	4b19      	ldr	r3, [pc, #100]	; (8006c14 <etharp_find_entry+0x10c>)
 8006bb0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8006bb4:	491a      	ldr	r1, [pc, #104]	; (8006c20 <etharp_find_entry+0x118>)
 8006bb6:	4819      	ldr	r0, [pc, #100]	; (8006c1c <etharp_find_entry+0x114>)
 8006bb8:	f006 ff6a 	bl	800da90 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8006bbc:	b126      	cbz	r6, 8006bc8 <etharp_find_entry+0xc0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8006bbe:	2318      	movs	r3, #24
 8006bc0:	6832      	ldr	r2, [r6, #0]
 8006bc2:	fb03 5304 	mla	r3, r3, r4, r5
 8006bc6:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8006bc8:	2318      	movs	r3, #24
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8006bca:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 8006bcc:	fb03 5504 	mla	r5, r3, r4, r5
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	826b      	strh	r3, [r5, #18]
  arp_table[i].netif = netif;
 8006bd4:	9b00      	ldr	r3, [sp, #0]
 8006bd6:	60ab      	str	r3, [r5, #8]
}
 8006bd8:	b003      	add	sp, #12
 8006bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8006bde:	458b      	cmp	fp, r1
 8006be0:	d8c4      	bhi.n	8006b6c <etharp_find_entry+0x64>
 8006be2:	468b      	mov	fp, r1
 8006be4:	4680      	mov	r8, r0
 8006be6:	e7c1      	b.n	8006b6c <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 8006be8:	4589      	cmp	r9, r1
 8006bea:	d8bf      	bhi.n	8006b6c <etharp_find_entry+0x64>
 8006bec:	4689      	mov	r9, r1
 8006bee:	4605      	mov	r5, r0
 8006bf0:	e7bc      	b.n	8006b6c <etharp_find_entry+0x64>
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	e7ba      	b.n	8006b6c <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8006bf6:	f1b8 0f0a 	cmp.w	r8, #10
 8006bfa:	d105      	bne.n	8006c08 <etharp_find_entry+0x100>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8006bfc:	f1be 0f0a 	cmp.w	lr, #10
 8006c00:	d104      	bne.n	8006c0c <etharp_find_entry+0x104>
    return (s16_t)ERR_MEM;
 8006c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c06:	e7e7      	b.n	8006bd8 <etharp_find_entry+0xd0>
 8006c08:	4645      	mov	r5, r8
 8006c0a:	e7c6      	b.n	8006b9a <etharp_find_entry+0x92>
 8006c0c:	4675      	mov	r5, lr
 8006c0e:	e7c4      	b.n	8006b9a <etharp_find_entry+0x92>
 8006c10:	200067f4 	.word	0x200067f4
 8006c14:	08013234 	.word	0x08013234
 8006c18:	080132d5 	.word	0x080132d5
 8006c1c:	08012bab 	.word	0x08012bab
 8006c20:	080132ec 	.word	0x080132ec

08006c24 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8006c24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c28:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8006c2c:	4688      	mov	r8, r1
 8006c2e:	4691      	mov	r9, r2
 8006c30:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006c32:	4607      	mov	r7, r0
 8006c34:	b930      	cbnz	r0, 8006c44 <etharp_raw+0x20>
 8006c36:	4b2d      	ldr	r3, [pc, #180]	; (8006cec <etharp_raw+0xc8>)
 8006c38:	f240 4257 	movw	r2, #1111	; 0x457
 8006c3c:	492c      	ldr	r1, [pc, #176]	; (8006cf0 <etharp_raw+0xcc>)
 8006c3e:	482d      	ldr	r0, [pc, #180]	; (8006cf4 <etharp_raw+0xd0>)
 8006c40:	f006 ff26 	bl	800da90 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8006c44:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006c48:	211c      	movs	r1, #28
 8006c4a:	200e      	movs	r0, #14
 8006c4c:	f001 ff7c 	bl	8008b48 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8006c50:	4605      	mov	r5, r0
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d047      	beq.n	8006ce6 <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8006c56:	8943      	ldrh	r3, [r0, #10]
 8006c58:	2b1b      	cmp	r3, #27
 8006c5a:	d806      	bhi.n	8006c6a <etharp_raw+0x46>
 8006c5c:	4b23      	ldr	r3, [pc, #140]	; (8006cec <etharp_raw+0xc8>)
 8006c5e:	f240 4262 	movw	r2, #1122	; 0x462
 8006c62:	4925      	ldr	r1, [pc, #148]	; (8006cf8 <etharp_raw+0xd4>)
 8006c64:	4823      	ldr	r0, [pc, #140]	; (8006cf4 <etharp_raw+0xd0>)
 8006c66:	f006 ff13 	bl	800da90 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8006c6a:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8006c6c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8006c70:	f001 f990 	bl	8007f94 <lwip_htons>
 8006c74:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8006c76:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006c7a:	2b06      	cmp	r3, #6
 8006c7c:	d006      	beq.n	8006c8c <etharp_raw+0x68>
 8006c7e:	4b1b      	ldr	r3, [pc, #108]	; (8006cec <etharp_raw+0xc8>)
 8006c80:	f240 4269 	movw	r2, #1129	; 0x469
 8006c84:	491d      	ldr	r1, [pc, #116]	; (8006cfc <etharp_raw+0xd8>)
 8006c86:	481b      	ldr	r0, [pc, #108]	; (8006cf4 <etharp_raw+0xd0>)
 8006c88:	f006 ff02 	bl	800da90 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8006c8c:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006c8e:	4642      	mov	r2, r8
 8006c90:	4629      	mov	r1, r5
 8006c92:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8006c94:	60a3      	str	r3, [r4, #8]
 8006c96:	88b3      	ldrh	r3, [r6, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006c98:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8006c9a:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8006c9c:	f8da 3000 	ldr.w	r3, [sl]
 8006ca0:	f8c4 3012 	str.w	r3, [r4, #18]
 8006ca4:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8006ca8:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8006caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8006cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cb4:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006cb6:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8006cb8:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006cba:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8006cbc:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006cbe:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8006cc4:	2306      	movs	r3, #6
 8006cc6:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8006cc8:	2304      	movs	r3, #4
 8006cca:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006ccc:	f640 0306 	movw	r3, #2054	; 0x806
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	f005 ff2c 	bl	800cb30 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f001 fecd 	bl	8008a78 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8006cde:	4630      	mov	r0, r6
}
 8006ce0:	b002      	add	sp, #8
 8006ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8006ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cea:	e7f9      	b.n	8006ce0 <etharp_raw+0xbc>
 8006cec:	08013234 	.word	0x08013234
 8006cf0:	080130fa 	.word	0x080130fa
 8006cf4:	08012bab 	.word	0x08012bab
 8006cf8:	08013315 	.word	0x08013315
 8006cfc:	08013346 	.word	0x08013346

08006d00 <etharp_cleanup_netif>:
{
 8006d00:	b570      	push	{r4, r5, r6, lr}
 8006d02:	4606      	mov	r6, r0
 8006d04:	4d07      	ldr	r5, [pc, #28]	; (8006d24 <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006d06:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8006d08:	7d2b      	ldrb	r3, [r5, #20]
 8006d0a:	b12b      	cbz	r3, 8006d18 <etharp_cleanup_netif+0x18>
 8006d0c:	68ab      	ldr	r3, [r5, #8]
 8006d0e:	42b3      	cmp	r3, r6
 8006d10:	d102      	bne.n	8006d18 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8006d12:	4620      	mov	r0, r4
 8006d14:	f7ff fee4 	bl	8006ae0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006d18:	3401      	adds	r4, #1
 8006d1a:	3518      	adds	r5, #24
 8006d1c:	2c0a      	cmp	r4, #10
 8006d1e:	d1f3      	bne.n	8006d08 <etharp_cleanup_netif+0x8>
}
 8006d20:	bd70      	pop	{r4, r5, r6, pc}
 8006d22:	bf00      	nop
 8006d24:	200067f4 	.word	0x200067f4

08006d28 <etharp_input>:
{
 8006d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d2c:	4607      	mov	r7, r0
 8006d2e:	b088      	sub	sp, #32
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006d30:	460c      	mov	r4, r1
 8006d32:	b949      	cbnz	r1, 8006d48 <etharp_input+0x20>
 8006d34:	4b4c      	ldr	r3, [pc, #304]	; (8006e68 <etharp_input+0x140>)
 8006d36:	f240 228a 	movw	r2, #650	; 0x28a
 8006d3a:	494c      	ldr	r1, [pc, #304]	; (8006e6c <etharp_input+0x144>)
 8006d3c:	484c      	ldr	r0, [pc, #304]	; (8006e70 <etharp_input+0x148>)
 8006d3e:	f006 fea7 	bl	800da90 <iprintf>
}
 8006d42:	b008      	add	sp, #32
 8006d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8006d48:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8006d4a:	882b      	ldrh	r3, [r5, #0]
 8006d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d50:	d108      	bne.n	8006d64 <etharp_input+0x3c>
 8006d52:	792b      	ldrb	r3, [r5, #4]
 8006d54:	2b06      	cmp	r3, #6
 8006d56:	d105      	bne.n	8006d64 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8006d58:	796b      	ldrb	r3, [r5, #5]
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d102      	bne.n	8006d64 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8006d5e:	886b      	ldrh	r3, [r5, #2]
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d003      	beq.n	8006d6c <etharp_input+0x44>
  pbuf_free(p);
 8006d64:	4638      	mov	r0, r7
 8006d66:	f001 fe87 	bl	8008a78 <pbuf_free>
 8006d6a:	e7ea      	b.n	8006d42 <etharp_input+0x1a>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8006d6c:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8006d70:	f105 0808 	add.w	r8, r5, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006d74:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8006d76:	9307      	str	r3, [sp, #28]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8006d78:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006d7a:	2e00      	cmp	r6, #0
 8006d7c:	d05f      	beq.n	8006e3e <etharp_input+0x116>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8006d7e:	1af3      	subs	r3, r6, r3
 8006d80:	425e      	negs	r6, r3
 8006d82:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006d84:	f1c6 0a02 	rsb	sl, r6, #2
 8006d88:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8006d8c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006d90:	2b06      	cmp	r3, #6
 8006d92:	d006      	beq.n	8006da2 <etharp_input+0x7a>
 8006d94:	4b34      	ldr	r3, [pc, #208]	; (8006e68 <etharp_input+0x140>)
 8006d96:	f240 12a9 	movw	r2, #425	; 0x1a9
 8006d9a:	4936      	ldr	r1, [pc, #216]	; (8006e74 <etharp_input+0x14c>)
 8006d9c:	4834      	ldr	r0, [pc, #208]	; (8006e70 <etharp_input+0x148>)
 8006d9e:	f006 fe77 	bl	800da90 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8006da2:	9807      	ldr	r0, [sp, #28]
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d03e      	beq.n	8006e26 <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8006da8:	4621      	mov	r1, r4
 8006daa:	f000 fcb2 	bl	8007712 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8006dae:	4681      	mov	r9, r0
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d138      	bne.n	8006e26 <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 8006db4:	9b07      	ldr	r3, [sp, #28]
 8006db6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8006dba:	2be0      	cmp	r3, #224	; 0xe0
 8006dbc:	d033      	beq.n	8006e26 <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 8006dbe:	4622      	mov	r2, r4
 8006dc0:	4651      	mov	r1, sl
 8006dc2:	a807      	add	r0, sp, #28
 8006dc4:	f7ff fea0 	bl	8006b08 <etharp_find_entry>
  if (i < 0) {
 8006dc8:	1e03      	subs	r3, r0, #0
 8006dca:	db2c      	blt.n	8006e26 <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8006dcc:	2018      	movs	r0, #24
 8006dce:	4a2a      	ldr	r2, [pc, #168]	; (8006e78 <etharp_input+0x150>)
 8006dd0:	f04f 0e02 	mov.w	lr, #2
 8006dd4:	fb00 fc03 	mul.w	ip, r0, r3
 8006dd8:	eb02 010c 	add.w	r1, r2, ip
 8006ddc:	f881 e014 	strb.w	lr, [r1, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8006de0:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 8006de4:	608c      	str	r4, [r1, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8006de6:	fb13 e300 	smlabb	r3, r3, r0, lr
 8006dea:	f8d8 0000 	ldr.w	r0, [r8]
 8006dee:	eb02 0e03 	add.w	lr, r2, r3
 8006df2:	50d0      	str	r0, [r2, r3]
 8006df4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006df8:	f8ae 3004 	strh.w	r3, [lr, #4]
  arp_table[i].ctime = 0;
 8006dfc:	f8a1 9012 	strh.w	r9, [r1, #18]
  if (arp_table[i].q != NULL) {
 8006e00:	f852 100c 	ldr.w	r1, [r2, ip]
 8006e04:	b179      	cbz	r1, 8006e26 <etharp_input+0xfe>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8006e06:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 8006e0a:	f842 900c 	str.w	r9, [r2, ip]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	4643      	mov	r3, r8
 8006e18:	9105      	str	r1, [sp, #20]
 8006e1a:	f005 fe89 	bl	800cb30 <ethernet_output>
    pbuf_free(p);
 8006e1e:	9905      	ldr	r1, [sp, #20]
 8006e20:	4608      	mov	r0, r1
 8006e22:	f001 fe29 	bl	8008a78 <pbuf_free>
  switch (hdr->opcode) {
 8006e26:	88eb      	ldrh	r3, [r5, #6]
 8006e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e2c:	d00a      	beq.n	8006e44 <etharp_input+0x11c>
 8006e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e32:	d197      	bne.n	8006d64 <etharp_input+0x3c>
      dhcp_arp_reply(netif, &sipaddr);
 8006e34:	a907      	add	r1, sp, #28
 8006e36:	4620      	mov	r0, r4
 8006e38:	f7ff fbc4 	bl	80065c4 <dhcp_arp_reply>
      break;
 8006e3c:	e792      	b.n	8006d64 <etharp_input+0x3c>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006e3e:	f04f 0a02 	mov.w	sl, #2
 8006e42:	e7a3      	b.n	8006d8c <etharp_input+0x64>
      if (for_us) {
 8006e44:	2e00      	cmp	r6, #0
 8006e46:	d08d      	beq.n	8006d64 <etharp_input+0x3c>
        etharp_raw(netif,
 8006e48:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8006e4a:	f104 032a 	add.w	r3, r4, #42	; 0x2a
        etharp_raw(netif,
 8006e4e:	4620      	mov	r0, r4
 8006e50:	9203      	str	r2, [sp, #12]
 8006e52:	aa07      	add	r2, sp, #28
 8006e54:	4619      	mov	r1, r3
 8006e56:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8006e5a:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 8006e5c:	9200      	str	r2, [sp, #0]
 8006e5e:	4642      	mov	r2, r8
 8006e60:	f7ff fee0 	bl	8006c24 <etharp_raw>
 8006e64:	e77e      	b.n	8006d64 <etharp_input+0x3c>
 8006e66:	bf00      	nop
 8006e68:	08013234 	.word	0x08013234
 8006e6c:	080130fa 	.word	0x080130fa
 8006e70:	08012bab 	.word	0x08012bab
 8006e74:	080133c8 	.word	0x080133c8
 8006e78:	200067f4 	.word	0x200067f4

08006e7c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8006e7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e7e:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006e80:	2401      	movs	r4, #1
 8006e82:	f100 032a 	add.w	r3, r0, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8006e86:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006e88:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8006e8c:	4904      	ldr	r1, [pc, #16]	; (8006ea0 <etharp_request+0x24>)
 8006e8e:	9200      	str	r2, [sp, #0]
 8006e90:	9101      	str	r1, [sp, #4]
 8006e92:	4619      	mov	r1, r3
 8006e94:	4a03      	ldr	r2, [pc, #12]	; (8006ea4 <etharp_request+0x28>)
 8006e96:	f7ff fec5 	bl	8006c24 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8006e9a:	b004      	add	sp, #16
 8006e9c:	bd10      	pop	{r4, pc}
 8006e9e:	bf00      	nop
 8006ea0:	08012a82 	.word	0x08012a82
 8006ea4:	08012a7c 	.word	0x08012a7c

08006ea8 <etharp_tmr>:
{
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	4c13      	ldr	r4, [pc, #76]	; (8006ef8 <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006eac:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8006eae:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8006eb0:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8006eb2:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 8006eb4:	b16a      	cbz	r2, 8006ed2 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8006eb6:	8a63      	ldrh	r3, [r4, #18]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8006ebc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8006ec0:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8006ec2:	d203      	bcs.n	8006ecc <etharp_tmr+0x24>
 8006ec4:	2a01      	cmp	r2, #1
 8006ec6:	d109      	bne.n	8006edc <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d90f      	bls.n	8006eec <etharp_tmr+0x44>
        etharp_free_entry(i);
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f7ff fe07 	bl	8006ae0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006ed2:	3501      	adds	r5, #1
 8006ed4:	3418      	adds	r4, #24
 8006ed6:	2d0a      	cmp	r5, #10
 8006ed8:	d1eb      	bne.n	8006eb2 <etharp_tmr+0xa>
}
 8006eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8006edc:	2a03      	cmp	r2, #3
 8006ede:	d101      	bne.n	8006ee4 <etharp_tmr+0x3c>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8006ee0:	7527      	strb	r7, [r4, #20]
 8006ee2:	e7f6      	b.n	8006ed2 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8006ee4:	2a04      	cmp	r2, #4
 8006ee6:	d1f4      	bne.n	8006ed2 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8006ee8:	7526      	strb	r6, [r4, #20]
 8006eea:	e7f2      	b.n	8006ed2 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8006eec:	1d21      	adds	r1, r4, #4
 8006eee:	68a0      	ldr	r0, [r4, #8]
 8006ef0:	f7ff ffc4 	bl	8006e7c <etharp_request>
 8006ef4:	e7ed      	b.n	8006ed2 <etharp_tmr+0x2a>
 8006ef6:	bf00      	nop
 8006ef8:	200067f4 	.word	0x200067f4

08006efc <etharp_output_to_arp_index>:
{
 8006efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8006f00:	4d24      	ldr	r5, [pc, #144]	; (8006f94 <etharp_output_to_arp_index+0x98>)
 8006f02:	2318      	movs	r3, #24
{
 8006f04:	4607      	mov	r7, r0
 8006f06:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8006f08:	fb03 5302 	mla	r3, r3, r2, r5
{
 8006f0c:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8006f0e:	7d1b      	ldrb	r3, [r3, #20]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d806      	bhi.n	8006f22 <etharp_output_to_arp_index+0x26>
 8006f14:	4b20      	ldr	r3, [pc, #128]	; (8006f98 <etharp_output_to_arp_index+0x9c>)
 8006f16:	f240 22ee 	movw	r2, #750	; 0x2ee
 8006f1a:	4920      	ldr	r1, [pc, #128]	; (8006f9c <etharp_output_to_arp_index+0xa0>)
 8006f1c:	4820      	ldr	r0, [pc, #128]	; (8006fa0 <etharp_output_to_arp_index+0xa4>)
 8006f1e:	f006 fdb7 	bl	800da90 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8006f22:	2218      	movs	r2, #24
 8006f24:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8006f28:	f107 092a 	add.w	r9, r7, #42	; 0x2a
 8006f2c:	fb02 5404 	mla	r4, r2, r4, r5
 8006f30:	00f6      	lsls	r6, r6, #3
 8006f32:	7d23      	ldrb	r3, [r4, #20]
 8006f34:	f106 0a0c 	add.w	sl, r6, #12
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	44aa      	add	sl, r5
 8006f3c:	d10b      	bne.n	8006f56 <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8006f3e:	8a63      	ldrh	r3, [r4, #18]
 8006f40:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006f44:	d913      	bls.n	8006f6e <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8006f46:	3604      	adds	r6, #4
 8006f48:	4638      	mov	r0, r7
 8006f4a:	19a9      	adds	r1, r5, r6
 8006f4c:	f7ff ff96 	bl	8006e7c <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8006f50:	b908      	cbnz	r0, 8006f56 <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8006f52:	2303      	movs	r3, #3
 8006f54:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8006f56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f5a:	464a      	mov	r2, r9
 8006f5c:	4641      	mov	r1, r8
 8006f5e:	4638      	mov	r0, r7
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	4653      	mov	r3, sl
 8006f64:	f005 fde4 	bl	800cb30 <ethernet_output>
}
 8006f68:	b004      	add	sp, #16
 8006f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8006f6e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006f72:	d3f0      	bcc.n	8006f56 <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006f74:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8006f76:	3604      	adds	r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006f78:	4652      	mov	r2, sl
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8006f7e:	442e      	add	r6, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006f80:	4b08      	ldr	r3, [pc, #32]	; (8006fa4 <etharp_output_to_arp_index+0xa8>)
 8006f82:	4638      	mov	r0, r7
 8006f84:	9602      	str	r6, [sp, #8]
 8006f86:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8006f88:	1d3b      	adds	r3, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	464b      	mov	r3, r9
 8006f8e:	f7ff fe49 	bl	8006c24 <etharp_raw>
 8006f92:	e7dd      	b.n	8006f50 <etharp_output_to_arp_index+0x54>
 8006f94:	200067f4 	.word	0x200067f4
 8006f98:	08013234 	.word	0x08013234
 8006f9c:	080133ec 	.word	0x080133ec
 8006fa0:	08012bab 	.word	0x08012bab
 8006fa4:	08012a82 	.word	0x08012a82

08006fa8 <etharp_query>:
{
 8006fa8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fac:	4688      	mov	r8, r1
 8006fae:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006fb0:	4601      	mov	r1, r0
{
 8006fb2:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006fb4:	f8d8 0000 	ldr.w	r0, [r8]
 8006fb8:	f000 fbab 	bl	8007712 <ip4_addr_isbroadcast_u32>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	d16b      	bne.n	8007098 <etharp_query+0xf0>
      ip4_addr_ismulticast(ipaddr) ||
 8006fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8006fc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006fc8:	2ae0      	cmp	r2, #224	; 0xe0
 8006fca:	d065      	beq.n	8007098 <etharp_query+0xf0>
      ip4_addr_isany(ipaddr)) {
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d063      	beq.n	8007098 <etharp_query+0xf0>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8006fd0:	4632      	mov	r2, r6
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	f7ff fd97 	bl	8006b08 <etharp_find_entry>
  if (i_err < 0) {
 8006fda:	1e04      	subs	r4, r0, #0
 8006fdc:	da03      	bge.n	8006fe6 <etharp_query+0x3e>
    return (err_t)i_err;
 8006fde:	b260      	sxtb	r0, r4
}
 8006fe0:	b002      	add	sp, #8
 8006fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8006fe6:	2c7e      	cmp	r4, #126	; 0x7e
 8006fe8:	dd06      	ble.n	8006ff8 <etharp_query+0x50>
 8006fea:	4b35      	ldr	r3, [pc, #212]	; (80070c0 <etharp_query+0x118>)
 8006fec:	f240 32c1 	movw	r2, #961	; 0x3c1
 8006ff0:	4934      	ldr	r1, [pc, #208]	; (80070c4 <etharp_query+0x11c>)
 8006ff2:	4835      	ldr	r0, [pc, #212]	; (80070c8 <etharp_query+0x120>)
 8006ff4:	f006 fd4c 	bl	800da90 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8006ff8:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8006ffa:	4f34      	ldr	r7, [pc, #208]	; (80070cc <etharp_query+0x124>)
 8006ffc:	2218      	movs	r2, #24
 8006ffe:	fb02 7204 	mla	r2, r2, r4, r7
 8007002:	7d13      	ldrb	r3, [r2, #20]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d156      	bne.n	80070b6 <etharp_query+0x10e>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8007008:	2301      	movs	r3, #1
    arp_table[i].netif = netif;
 800700a:	6096      	str	r6, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800700c:	7513      	strb	r3, [r2, #20]
    result = etharp_request(netif, ipaddr);
 800700e:	4641      	mov	r1, r8
 8007010:	4630      	mov	r0, r6
 8007012:	f7ff ff33 	bl	8006e7c <etharp_request>
    if (q == NULL) {
 8007016:	2d00      	cmp	r5, #0
 8007018:	d0e2      	beq.n	8006fe0 <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800701a:	2318      	movs	r3, #24
 800701c:	fb03 7204 	mla	r2, r3, r4, r7
 8007020:	7d12      	ldrb	r2, [r2, #20]
 8007022:	2a01      	cmp	r2, #1
 8007024:	d90e      	bls.n	8007044 <etharp_query+0x9c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8007026:	fb03 7304 	mla	r3, r3, r4, r7
 800702a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800702e:	4629      	mov	r1, r5
 8007030:	4630      	mov	r0, r6
 8007032:	9200      	str	r2, [sp, #0]
 8007034:	330c      	adds	r3, #12
 8007036:	f106 022a 	add.w	r2, r6, #42	; 0x2a
    ETHARP_SET_ADDRHINT(netif, i);
 800703a:	f887 40f0 	strb.w	r4, [r7, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800703e:	f005 fd77 	bl	800cb30 <ethernet_output>
 8007042:	e7cd      	b.n	8006fe0 <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8007044:	d1cc      	bne.n	8006fe0 <etharp_query+0x38>
 8007046:	462e      	mov	r6, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8007048:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80070c0 <etharp_query+0x118>
 800704c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80070d0 <etharp_query+0x128>
 8007050:	f8df a074 	ldr.w	sl, [pc, #116]	; 80070c8 <etharp_query+0x120>
 8007054:	8972      	ldrh	r2, [r6, #10]
 8007056:	8933      	ldrh	r3, [r6, #8]
 8007058:	429a      	cmp	r2, r3
 800705a:	d108      	bne.n	800706e <etharp_query+0xc6>
 800705c:	6833      	ldr	r3, [r6, #0]
 800705e:	b133      	cbz	r3, 800706e <etharp_query+0xc6>
 8007060:	4643      	mov	r3, r8
 8007062:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8007066:	4649      	mov	r1, r9
 8007068:	4650      	mov	r0, sl
 800706a:	f006 fd11 	bl	800da90 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800706e:	7b33      	ldrb	r3, [r6, #12]
 8007070:	065b      	lsls	r3, r3, #25
 8007072:	d414      	bmi.n	800709e <etharp_query+0xf6>
      p = p->next;
 8007074:	6836      	ldr	r6, [r6, #0]
    while (p) {
 8007076:	2e00      	cmp	r6, #0
 8007078:	d1ec      	bne.n	8007054 <etharp_query+0xac>
      pbuf_ref(p);
 800707a:	4628      	mov	r0, r5
 800707c:	f001 fe40 	bl	8008d00 <pbuf_ref>
      if (arp_table[i].q != NULL) {
 8007080:	2318      	movs	r3, #24
 8007082:	fb03 f204 	mul.w	r2, r3, r4
 8007086:	461e      	mov	r6, r3
 8007088:	58b8      	ldr	r0, [r7, r2]
 800708a:	b108      	cbz	r0, 8007090 <etharp_query+0xe8>
        pbuf_free(arp_table[i].q);
 800708c:	f001 fcf4 	bl	8008a78 <pbuf_free>
      arp_table[i].q = p;
 8007090:	4374      	muls	r4, r6
      result = ERR_OK;
 8007092:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8007094:	513d      	str	r5, [r7, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8007096:	e7a3      	b.n	8006fe0 <etharp_query+0x38>
    return ERR_ARG;
 8007098:	f06f 000f 	mvn.w	r0, #15
 800709c:	e7a0      	b.n	8006fe0 <etharp_query+0x38>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800709e:	462a      	mov	r2, r5
 80070a0:	f44f 7120 	mov.w	r1, #640	; 0x280
 80070a4:	200e      	movs	r0, #14
 80070a6:	f001 ff53 	bl	8008f50 <pbuf_clone>
    if (p != NULL) {
 80070aa:	4605      	mov	r5, r0
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d1e7      	bne.n	8007080 <etharp_query+0xd8>
      result = ERR_MEM;
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070b4:	e794      	b.n	8006fe0 <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 80070b6:	2d00      	cmp	r5, #0
 80070b8:	d0a9      	beq.n	800700e <etharp_query+0x66>
  err_t result = ERR_MEM;
 80070ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070be:	e7ac      	b.n	800701a <etharp_query+0x72>
 80070c0:	08013234 	.word	0x08013234
 80070c4:	0801341c 	.word	0x0801341c
 80070c8:	08012bab 	.word	0x08012bab
 80070cc:	200067f4 	.word	0x200067f4
 80070d0:	0801342a 	.word	0x0801342a

080070d4 <etharp_output>:
{
 80070d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070d6:	460e      	mov	r6, r1
 80070d8:	b085      	sub	sp, #20
 80070da:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80070dc:	4604      	mov	r4, r0
 80070de:	b930      	cbnz	r0, 80070ee <etharp_output+0x1a>
 80070e0:	4b41      	ldr	r3, [pc, #260]	; (80071e8 <etharp_output+0x114>)
 80070e2:	f240 321e 	movw	r2, #798	; 0x31e
 80070e6:	4941      	ldr	r1, [pc, #260]	; (80071ec <etharp_output+0x118>)
 80070e8:	4841      	ldr	r0, [pc, #260]	; (80071f0 <etharp_output+0x11c>)
 80070ea:	f006 fcd1 	bl	800da90 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80070ee:	b936      	cbnz	r6, 80070fe <etharp_output+0x2a>
 80070f0:	4b3d      	ldr	r3, [pc, #244]	; (80071e8 <etharp_output+0x114>)
 80070f2:	f240 321f 	movw	r2, #799	; 0x31f
 80070f6:	493f      	ldr	r1, [pc, #252]	; (80071f4 <etharp_output+0x120>)
 80070f8:	483d      	ldr	r0, [pc, #244]	; (80071f0 <etharp_output+0x11c>)
 80070fa:	f006 fcc9 	bl	800da90 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80070fe:	b935      	cbnz	r5, 800710e <etharp_output+0x3a>
 8007100:	4b39      	ldr	r3, [pc, #228]	; (80071e8 <etharp_output+0x114>)
 8007102:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007106:	493c      	ldr	r1, [pc, #240]	; (80071f8 <etharp_output+0x124>)
 8007108:	4839      	ldr	r0, [pc, #228]	; (80071f0 <etharp_output+0x11c>)
 800710a:	f006 fcc1 	bl	800da90 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800710e:	4621      	mov	r1, r4
 8007110:	6828      	ldr	r0, [r5, #0]
 8007112:	f000 fafe 	bl	8007712 <ip4_addr_isbroadcast_u32>
 8007116:	2800      	cmp	r0, #0
 8007118:	d160      	bne.n	80071dc <etharp_output+0x108>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800711a:	682b      	ldr	r3, [r5, #0]
 800711c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007120:	2ae0      	cmp	r2, #224	; 0xe0
 8007122:	d11b      	bne.n	800715c <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8007124:	2301      	movs	r3, #1
 8007126:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800712a:	235e      	movs	r3, #94	; 0x5e
 800712c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8007130:	786b      	ldrb	r3, [r5, #1]
 8007132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007136:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800713a:	78ab      	ldrb	r3, [r5, #2]
 800713c:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8007140:	78eb      	ldrb	r3, [r5, #3]
 8007142:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8007146:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8007148:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800714c:	4631      	mov	r1, r6
 800714e:	4620      	mov	r0, r4
 8007150:	9200      	str	r2, [sp, #0]
 8007152:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8007156:	f005 fceb 	bl	800cb30 <ethernet_output>
 800715a:	e023      	b.n	80071a4 <etharp_output+0xd0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800715c:	6862      	ldr	r2, [r4, #4]
 800715e:	68a1      	ldr	r1, [r4, #8]
 8007160:	405a      	eors	r2, r3
 8007162:	420a      	tst	r2, r1
 8007164:	d009      	beq.n	800717a <etharp_output+0xa6>
        !ip4_addr_islinklocal(ipaddr)) {
 8007166:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8007168:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800716c:	4293      	cmp	r3, r2
 800716e:	d004      	beq.n	800717a <etharp_output+0xa6>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8007170:	68e3      	ldr	r3, [r4, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d034      	beq.n	80071e0 <etharp_output+0x10c>
            dst_addr = netif_ip4_gw(netif);
 8007176:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800717a:	4920      	ldr	r1, [pc, #128]	; (80071fc <etharp_output+0x128>)
 800717c:	2318      	movs	r3, #24
 800717e:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
 8007182:	468c      	mov	ip, r1
 8007184:	fb03 1302 	mla	r3, r3, r2, r1
 8007188:	7d18      	ldrb	r0, [r3, #20]
 800718a:	2801      	cmp	r0, #1
 800718c:	d90c      	bls.n	80071a8 <etharp_output+0xd4>
 800718e:	6899      	ldr	r1, [r3, #8]
 8007190:	42a1      	cmp	r1, r4
 8007192:	d109      	bne.n	80071a8 <etharp_output+0xd4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8007194:	6829      	ldr	r1, [r5, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	4299      	cmp	r1, r3
 800719a:	d105      	bne.n	80071a8 <etharp_output+0xd4>
        return etharp_output_to_arp_index(netif, q, i);
 800719c:	4631      	mov	r1, r6
 800719e:	4620      	mov	r0, r4
 80071a0:	f7ff feac 	bl	8006efc <etharp_output_to_arp_index>
}
 80071a4:	b005      	add	sp, #20
 80071a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071a8:	4b14      	ldr	r3, [pc, #80]	; (80071fc <etharp_output+0x128>)
{
 80071aa:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80071ac:	7d1f      	ldrb	r7, [r3, #20]
 80071ae:	b2ca      	uxtb	r2, r1
 80071b0:	2f01      	cmp	r7, #1
 80071b2:	d909      	bls.n	80071c8 <etharp_output+0xf4>
 80071b4:	689f      	ldr	r7, [r3, #8]
 80071b6:	42a7      	cmp	r7, r4
 80071b8:	d106      	bne.n	80071c8 <etharp_output+0xf4>
          (arp_table[i].netif == netif) &&
 80071ba:	685f      	ldr	r7, [r3, #4]
 80071bc:	6828      	ldr	r0, [r5, #0]
 80071be:	42b8      	cmp	r0, r7
 80071c0:	d102      	bne.n	80071c8 <etharp_output+0xf4>
        ETHARP_SET_ADDRHINT(netif, i);
 80071c2:	f88c 20f0 	strb.w	r2, [ip, #240]	; 0xf0
 80071c6:	e7e9      	b.n	800719c <etharp_output+0xc8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80071c8:	3101      	adds	r1, #1
 80071ca:	3318      	adds	r3, #24
 80071cc:	290a      	cmp	r1, #10
 80071ce:	d1ed      	bne.n	80071ac <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 80071d0:	4632      	mov	r2, r6
 80071d2:	4629      	mov	r1, r5
 80071d4:	4620      	mov	r0, r4
 80071d6:	f7ff fee7 	bl	8006fa8 <etharp_query>
 80071da:	e7e3      	b.n	80071a4 <etharp_output+0xd0>
    dest = (const struct eth_addr *)&ethbroadcast;
 80071dc:	4b08      	ldr	r3, [pc, #32]	; (8007200 <etharp_output+0x12c>)
 80071de:	e7b3      	b.n	8007148 <etharp_output+0x74>
            return ERR_RTE;
 80071e0:	f06f 0003 	mvn.w	r0, #3
 80071e4:	e7de      	b.n	80071a4 <etharp_output+0xd0>
 80071e6:	bf00      	nop
 80071e8:	08013234 	.word	0x08013234
 80071ec:	080130fa 	.word	0x080130fa
 80071f0:	08012bab 	.word	0x08012bab
 80071f4:	08013ff0 	.word	0x08013ff0
 80071f8:	080133a9 	.word	0x080133a9
 80071fc:	200067f4 	.word	0x200067f4
 8007200:	08012a7c 	.word	0x08012a7c

08007204 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8007204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007206:	4604      	mov	r4, r0
 8007208:	b087      	sub	sp, #28
 800720a:	460f      	mov	r7, r1
 800720c:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800720e:	2124      	movs	r1, #36	; 0x24
 8007210:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007214:	2022      	movs	r0, #34	; 0x22
 8007216:	f001 fc97 	bl	8008b48 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800721a:	4605      	mov	r5, r0
 800721c:	b390      	cbz	r0, 8007284 <icmp_send_response.isra.0+0x80>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800721e:	8943      	ldrh	r3, [r0, #10]
 8007220:	2b23      	cmp	r3, #35	; 0x23
 8007222:	d806      	bhi.n	8007232 <icmp_send_response.isra.0+0x2e>
 8007224:	4b18      	ldr	r3, [pc, #96]	; (8007288 <icmp_send_response.isra.0+0x84>)
 8007226:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800722a:	4918      	ldr	r1, [pc, #96]	; (800728c <icmp_send_response.isra.0+0x88>)
 800722c:	4818      	ldr	r0, [pc, #96]	; (8007290 <icmp_send_response.isra.0+0x8c>)
 800722e:	f006 fc2f 	bl	800da90 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8007232:	6820      	ldr	r0, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8007234:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8007236:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007238:	f100 011c 	add.w	r1, r0, #28
  icmphdr->id = 0;
 800723c:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800723e:	f104 0208 	add.w	r2, r4, #8
  icmphdr->id = 0;
 8007242:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8007244:	71a3      	strb	r3, [r4, #6]
 8007246:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007248:	4603      	mov	r3, r0
  icmphdr->type = type;
 800724a:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 800724c:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800724e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007252:	428b      	cmp	r3, r1
 8007254:	f842 6b04 	str.w	r6, [r2], #4
 8007258:	d1f9      	bne.n	800724e <icmp_send_response.isra.0+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800725a:	68c3      	ldr	r3, [r0, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800725c:	a805      	add	r0, sp, #20
  ip4_addr_copy(iphdr_src, iphdr->src);
 800725e:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8007260:	f000 f8da 	bl	8007418 <ip4_route>
#endif
  if (netif != NULL) {
 8007264:	b158      	cbz	r0, 800727e <icmp_send_response.isra.0+0x7a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8007266:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8007268:	2301      	movs	r3, #1
 800726a:	aa05      	add	r2, sp, #20
    icmphdr->chksum = 0;
 800726c:	70a1      	strb	r1, [r4, #2]
 800726e:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8007270:	9002      	str	r0, [sp, #8]
 8007272:	4628      	mov	r0, r5
 8007274:	e9cd 1300 	strd	r1, r3, [sp]
 8007278:	23ff      	movs	r3, #255	; 0xff
 800727a:	f000 fa39 	bl	80076f0 <ip4_output_if>
  }
  pbuf_free(q);
 800727e:	4628      	mov	r0, r5
 8007280:	f001 fbfa 	bl	8008a78 <pbuf_free>
}
 8007284:	b007      	add	sp, #28
 8007286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007288:	08013444 	.word	0x08013444
 800728c:	080134e3 	.word	0x080134e3
 8007290:	08012bab 	.word	0x08012bab

08007294 <icmp_input>:
  iphdr_in = ip4_current_header();
 8007294:	4b48      	ldr	r3, [pc, #288]	; (80073b8 <icmp_input+0x124>)
{
 8007296:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800729a:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 800729e:	b087      	sub	sp, #28
 80072a0:	4604      	mov	r4, r0
 80072a2:	460f      	mov	r7, r1
  hlen = IPH_HL_BYTES(iphdr_in);
 80072a4:	f899 5000 	ldrb.w	r5, [r9]
 80072a8:	4698      	mov	r8, r3
 80072aa:	f005 050f 	and.w	r5, r5, #15
 80072ae:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 80072b0:	2d13      	cmp	r5, #19
 80072b2:	d916      	bls.n	80072e2 <icmp_input+0x4e>
  if (p->len < sizeof(u16_t) * 2) {
 80072b4:	8942      	ldrh	r2, [r0, #10]
 80072b6:	2a03      	cmp	r2, #3
 80072b8:	d913      	bls.n	80072e2 <icmp_input+0x4e>
  type = *((u8_t *)p->payload);
 80072ba:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 80072bc:	7812      	ldrb	r2, [r2, #0]
 80072be:	2a08      	cmp	r2, #8
 80072c0:	d10f      	bne.n	80072e2 <icmp_input+0x4e>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80072c2:	6958      	ldr	r0, [r3, #20]
 80072c4:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80072c8:	2ae0      	cmp	r2, #224	; 0xe0
 80072ca:	d00a      	beq.n	80072e2 <icmp_input+0x4e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80072cc:	6819      	ldr	r1, [r3, #0]
 80072ce:	f000 fa20 	bl	8007712 <ip4_addr_isbroadcast_u32>
 80072d2:	b930      	cbnz	r0, 80072e2 <icmp_input+0x4e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80072d4:	8923      	ldrh	r3, [r4, #8]
 80072d6:	2b07      	cmp	r3, #7
 80072d8:	d903      	bls.n	80072e2 <icmp_input+0x4e>
        if (inet_chksum_pbuf(p) != 0) {
 80072da:	4620      	mov	r0, r4
 80072dc:	f000 fe8c 	bl	8007ff8 <inet_chksum_pbuf>
 80072e0:	b128      	cbz	r0, 80072ee <icmp_input+0x5a>
  pbuf_free(p);
 80072e2:	4620      	mov	r0, r4
}
 80072e4:	b007      	add	sp, #28
 80072e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 80072ea:	f001 bbc5 	b.w	8008a78 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80072ee:	f105 010e 	add.w	r1, r5, #14
 80072f2:	4620      	mov	r0, r4
 80072f4:	9105      	str	r1, [sp, #20]
 80072f6:	f001 fb87 	bl	8008a08 <pbuf_add_header>
 80072fa:	9905      	ldr	r1, [sp, #20]
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d04f      	beq.n	80073a0 <icmp_input+0x10c>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8007300:	8923      	ldrh	r3, [r4, #8]
 8007302:	1959      	adds	r1, r3, r5
 8007304:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8007306:	428b      	cmp	r3, r1
 8007308:	d8eb      	bhi.n	80072e2 <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800730a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800730e:	200e      	movs	r0, #14
 8007310:	f001 fc1a 	bl	8008b48 <pbuf_alloc>
        if (r == NULL) {
 8007314:	4606      	mov	r6, r0
 8007316:	2800      	cmp	r0, #0
 8007318:	d0e3      	beq.n	80072e2 <icmp_input+0x4e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800731a:	8942      	ldrh	r2, [r0, #10]
 800731c:	f105 0308 	add.w	r3, r5, #8
 8007320:	429a      	cmp	r2, r3
 8007322:	d203      	bcs.n	800732c <icmp_input+0x98>
          pbuf_free(r);
 8007324:	4630      	mov	r0, r6
 8007326:	f001 fba7 	bl	8008a78 <pbuf_free>
          goto icmperr;
 800732a:	e7da      	b.n	80072e2 <icmp_input+0x4e>
        MEMCPY(r->payload, iphdr_in, hlen);
 800732c:	4649      	mov	r1, r9
 800732e:	462a      	mov	r2, r5
 8007330:	6840      	ldr	r0, [r0, #4]
 8007332:	f006 fb97 	bl	800da64 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8007336:	4629      	mov	r1, r5
 8007338:	4630      	mov	r0, r6
 800733a:	f001 fb69 	bl	8008a10 <pbuf_remove_header>
 800733e:	b130      	cbz	r0, 800734e <icmp_input+0xba>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8007340:	4b1e      	ldr	r3, [pc, #120]	; (80073bc <icmp_input+0x128>)
 8007342:	22b6      	movs	r2, #182	; 0xb6
 8007344:	491e      	ldr	r1, [pc, #120]	; (80073c0 <icmp_input+0x12c>)
 8007346:	481f      	ldr	r0, [pc, #124]	; (80073c4 <icmp_input+0x130>)
 8007348:	f006 fba2 	bl	800da90 <iprintf>
          pbuf_free(r);
 800734c:	e7ea      	b.n	8007324 <icmp_input+0x90>
        if (pbuf_copy(r, p) != ERR_OK) {
 800734e:	4621      	mov	r1, r4
 8007350:	4630      	mov	r0, r6
 8007352:	f001 fd35 	bl	8008dc0 <pbuf_copy>
 8007356:	2800      	cmp	r0, #0
 8007358:	d1e4      	bne.n	8007324 <icmp_input+0x90>
        pbuf_free(p);
 800735a:	4620      	mov	r0, r4
 800735c:	4634      	mov	r4, r6
 800735e:	f001 fb8b 	bl	8008a78 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8007362:	4629      	mov	r1, r5
 8007364:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 8007366:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 8007368:	f001 fb4e 	bl	8008a08 <pbuf_add_header>
 800736c:	2800      	cmp	r0, #0
 800736e:	d1b8      	bne.n	80072e2 <icmp_input+0x4e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8007370:	6862      	ldr	r2, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 8007372:	f8d8 3014 	ldr.w	r3, [r8, #20]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8007376:	4914      	ldr	r1, [pc, #80]	; (80073c8 <icmp_input+0x134>)
        ip4_addr_copy(iphdr->src, *src);
 8007378:	60d3      	str	r3, [r2, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800737a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800737e:	6113      	str	r3, [r2, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8007380:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8007382:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 8007384:	70b0      	strb	r0, [r6, #2]
 8007386:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8007388:	7213      	strb	r3, [r2, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800738a:	7290      	strb	r0, [r2, #10]
 800738c:	72d0      	strb	r0, [r2, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800738e:	2201      	movs	r2, #1
 8007390:	9702      	str	r7, [sp, #8]
 8007392:	e9cd 0200 	strd	r0, r2, [sp]
 8007396:	4602      	mov	r2, r0
 8007398:	4620      	mov	r0, r4
 800739a:	f000 f9a9 	bl	80076f0 <ip4_output_if>
  pbuf_free(p);
 800739e:	e7a0      	b.n	80072e2 <icmp_input+0x4e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80073a0:	4620      	mov	r0, r4
 80073a2:	f001 fb35 	bl	8008a10 <pbuf_remove_header>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d0db      	beq.n	8007362 <icmp_input+0xce>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80073aa:	4b04      	ldr	r3, [pc, #16]	; (80073bc <icmp_input+0x128>)
 80073ac:	22c7      	movs	r2, #199	; 0xc7
 80073ae:	4907      	ldr	r1, [pc, #28]	; (80073cc <icmp_input+0x138>)
 80073b0:	4804      	ldr	r0, [pc, #16]	; (80073c4 <icmp_input+0x130>)
 80073b2:	f006 fb6d 	bl	800da90 <iprintf>
          goto icmperr;
 80073b6:	e794      	b.n	80072e2 <icmp_input+0x4e>
 80073b8:	2000a7dc 	.word	0x2000a7dc
 80073bc:	08013444 	.word	0x08013444
 80073c0:	0801350f 	.word	0x0801350f
 80073c4:	08012bab 	.word	0x08012bab
 80073c8:	2000a7f0 	.word	0x2000a7f0
 80073cc:	08013544 	.word	0x08013544

080073d0 <icmp_dest_unreach>:
{
 80073d0:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 80073d2:	3004      	adds	r0, #4
 80073d4:	2103      	movs	r1, #3
 80073d6:	f7ff bf15 	b.w	8007204 <icmp_send_response.isra.0>

080073da <icmp_time_exceeded>:
{
 80073da:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 80073dc:	3004      	adds	r0, #4
 80073de:	210b      	movs	r1, #11
 80073e0:	f7ff bf10 	b.w	8007204 <icmp_send_response.isra.0>

080073e4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80073e4:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80073e6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
 80073ea:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80073ec:	f013 0301 	ands.w	r3, r3, #1
 80073f0:	d00b      	beq.n	800740a <ip4_input_accept+0x26>
 80073f2:	6843      	ldr	r3, [r0, #4]
 80073f4:	b14b      	cbz	r3, 800740a <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80073f6:	4a07      	ldr	r2, [pc, #28]	; (8007414 <ip4_input_accept+0x30>)
 80073f8:	6950      	ldr	r0, [r2, #20]
 80073fa:	4283      	cmp	r3, r0
 80073fc:	d007      	beq.n	800740e <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80073fe:	f000 f988 	bl	8007712 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8007402:	3800      	subs	r0, #0
 8007404:	bf18      	it	ne
 8007406:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 8007408:	bd08      	pop	{r3, pc}
  return 0;
 800740a:	4618      	mov	r0, r3
 800740c:	e7fc      	b.n	8007408 <ip4_input_accept+0x24>
      return 1;
 800740e:	2001      	movs	r0, #1
 8007410:	e7fa      	b.n	8007408 <ip4_input_accept+0x24>
 8007412:	bf00      	nop
 8007414:	2000a7dc 	.word	0x2000a7dc

08007418 <ip4_route>:
  NETIF_FOREACH(netif) {
 8007418:	4b14      	ldr	r3, [pc, #80]	; (800746c <ip4_route+0x54>)
{
 800741a:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 800741c:	6818      	ldr	r0, [r3, #0]
{
 800741e:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 8007420:	b978      	cbnz	r0, 8007442 <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8007422:	4b13      	ldr	r3, [pc, #76]	; (8007470 <ip4_route+0x58>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	b15b      	cbz	r3, 8007440 <ip4_route+0x28>
 8007428:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 800742c:	f001 0105 	and.w	r1, r1, #5
 8007430:	2905      	cmp	r1, #5
 8007432:	d105      	bne.n	8007440 <ip4_route+0x28>
 8007434:	6859      	ldr	r1, [r3, #4]
 8007436:	b119      	cbz	r1, 8007440 <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8007438:	7812      	ldrb	r2, [r2, #0]
 800743a:	2a7f      	cmp	r2, #127	; 0x7f
 800743c:	bf18      	it	ne
 800743e:	4618      	movne	r0, r3
}
 8007440:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007442:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 8007446:	07cd      	lsls	r5, r1, #31
 8007448:	d50d      	bpl.n	8007466 <ip4_route+0x4e>
 800744a:	074c      	lsls	r4, r1, #29
 800744c:	d50b      	bpl.n	8007466 <ip4_route+0x4e>
 800744e:	6843      	ldr	r3, [r0, #4]
 8007450:	b14b      	cbz	r3, 8007466 <ip4_route+0x4e>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8007452:	6814      	ldr	r4, [r2, #0]
 8007454:	6885      	ldr	r5, [r0, #8]
 8007456:	4063      	eors	r3, r4
 8007458:	422b      	tst	r3, r5
 800745a:	d0f1      	beq.n	8007440 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800745c:	078b      	lsls	r3, r1, #30
 800745e:	d402      	bmi.n	8007466 <ip4_route+0x4e>
 8007460:	68c3      	ldr	r3, [r0, #12]
 8007462:	429c      	cmp	r4, r3
 8007464:	d0ec      	beq.n	8007440 <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 8007466:	6800      	ldr	r0, [r0, #0]
 8007468:	e7da      	b.n	8007420 <ip4_route+0x8>
 800746a:	bf00      	nop
 800746c:	20010d04 	.word	0x20010d04
 8007470:	20010d08 	.word	0x20010d08

08007474 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8007474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8007478:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 800747c:	4604      	mov	r4, r0
 800747e:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 8007480:	f898 5000 	ldrb.w	r5, [r8]
 8007484:	092b      	lsrs	r3, r5, #4
 8007486:	2b04      	cmp	r3, #4
 8007488:	d005      	beq.n	8007496 <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800748a:	4620      	mov	r0, r4
 800748c:	f001 faf4 	bl	8008a78 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8007490:	2000      	movs	r0, #0
 8007492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8007496:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800749a:	f005 050f 	and.w	r5, r5, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800749e:	f000 fd79 	bl	8007f94 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 80074a2:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80074a4:	ea4f 0985 	mov.w	r9, r5, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80074a8:	4607      	mov	r7, r0
  if (iphdr_len < p->tot_len) {
 80074aa:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80074ac:	464d      	mov	r5, r9
  if (iphdr_len < p->tot_len) {
 80074ae:	d903      	bls.n	80074b8 <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 80074b0:	4601      	mov	r1, r0
 80074b2:	4620      	mov	r0, r4
 80074b4:	f001 fbc4 	bl	8008c40 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80074b8:	8963      	ldrh	r3, [r4, #10]
 80074ba:	42ab      	cmp	r3, r5
 80074bc:	d3e5      	bcc.n	800748a <ip4_input+0x16>
 80074be:	8923      	ldrh	r3, [r4, #8]
 80074c0:	42bb      	cmp	r3, r7
 80074c2:	d3e2      	bcc.n	800748a <ip4_input+0x16>
 80074c4:	2d13      	cmp	r5, #19
 80074c6:	d9e0      	bls.n	800748a <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80074c8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80074cc:	4d49      	ldr	r5, [pc, #292]	; (80075f4 <ip4_input+0x180>)
 80074ce:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80074d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80074d4:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80074d8:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80074da:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80074dc:	d143      	bne.n	8007566 <ip4_input+0xf2>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80074de:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 80074e2:	07db      	lsls	r3, r3, #31
 80074e4:	d405      	bmi.n	80074f2 <ip4_input+0x7e>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80074e6:	f898 3009 	ldrb.w	r3, [r8, #9]
 80074ea:	2b11      	cmp	r3, #17
 80074ec:	d053      	beq.n	8007596 <ip4_input+0x122>
 80074ee:	2700      	movs	r7, #0
 80074f0:	e003      	b.n	80074fa <ip4_input+0x86>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80074f2:	6873      	ldr	r3, [r6, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0f6      	beq.n	80074e6 <ip4_input+0x72>
 80074f8:	4637      	mov	r7, r6
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80074fa:	6928      	ldr	r0, [r5, #16]
 80074fc:	b148      	cbz	r0, 8007512 <ip4_input+0x9e>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80074fe:	4631      	mov	r1, r6
 8007500:	f000 f907 	bl	8007712 <ip4_addr_isbroadcast_u32>
 8007504:	2800      	cmp	r0, #0
 8007506:	d1c0      	bne.n	800748a <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8007508:	692b      	ldr	r3, [r5, #16]
 800750a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800750e:	2be0      	cmp	r3, #224	; 0xe0
 8007510:	d0bb      	beq.n	800748a <ip4_input+0x16>
  if (netif == NULL) {
 8007512:	2f00      	cmp	r7, #0
 8007514:	d0b9      	beq.n	800748a <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8007516:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800751a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800751e:	b13b      	cbz	r3, 8007530 <ip4_input+0xbc>
    p = ip4_reass(p);
 8007520:	4620      	mov	r0, r4
 8007522:	f000 fa79 	bl	8007a18 <ip4_reass>
    if (p == NULL) {
 8007526:	4604      	mov	r4, r0
 8007528:	2800      	cmp	r0, #0
 800752a:	d0b1      	beq.n	8007490 <ip4_input+0x1c>
    iphdr = (const struct ip_hdr *)p->payload;
 800752c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8007530:	f8c5 8008 	str.w	r8, [r5, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8007534:	4649      	mov	r1, r9
 8007536:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8007538:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800753c:	f898 3000 	ldrb.w	r3, [r8]
 8007540:	f003 030f 	and.w	r3, r3, #15
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8007548:	f001 fa62 	bl	8008a10 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800754c:	f898 3009 	ldrb.w	r3, [r8, #9]
 8007550:	2b06      	cmp	r3, #6
 8007552:	d034      	beq.n	80075be <ip4_input+0x14a>
 8007554:	2b11      	cmp	r3, #17
 8007556:	d026      	beq.n	80075a6 <ip4_input+0x132>
 8007558:	2b01      	cmp	r3, #1
 800755a:	d135      	bne.n	80075c8 <ip4_input+0x154>
        icmp_input(p, inp);
 800755c:	4631      	mov	r1, r6
 800755e:	4620      	mov	r0, r4
 8007560:	f7ff fe98 	bl	8007294 <icmp_input>
        break;
 8007564:	e023      	b.n	80075ae <ip4_input+0x13a>
    if (ip4_input_accept(inp)) {
 8007566:	4630      	mov	r0, r6
 8007568:	f7ff ff3c 	bl	80073e4 <ip4_input_accept>
 800756c:	b980      	cbnz	r0, 8007590 <ip4_input+0x11c>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800756e:	7d2b      	ldrb	r3, [r5, #20]
 8007570:	2b7f      	cmp	r3, #127	; 0x7f
 8007572:	d0b8      	beq.n	80074e6 <ip4_input+0x72>
        NETIF_FOREACH(netif) {
 8007574:	4b20      	ldr	r3, [pc, #128]	; (80075f8 <ip4_input+0x184>)
 8007576:	681f      	ldr	r7, [r3, #0]
 8007578:	2f00      	cmp	r7, #0
 800757a:	d0b4      	beq.n	80074e6 <ip4_input+0x72>
          if (netif == inp) {
 800757c:	42b7      	cmp	r7, r6
 800757e:	d101      	bne.n	8007584 <ip4_input+0x110>
        NETIF_FOREACH(netif) {
 8007580:	683f      	ldr	r7, [r7, #0]
 8007582:	e7f9      	b.n	8007578 <ip4_input+0x104>
          if (ip4_input_accept(netif)) {
 8007584:	4638      	mov	r0, r7
 8007586:	f7ff ff2d 	bl	80073e4 <ip4_input_accept>
 800758a:	2800      	cmp	r0, #0
 800758c:	d0f8      	beq.n	8007580 <ip4_input+0x10c>
 800758e:	e7b4      	b.n	80074fa <ip4_input+0x86>
  if (netif == NULL) {
 8007590:	2e00      	cmp	r6, #0
 8007592:	d1b1      	bne.n	80074f8 <ip4_input+0x84>
 8007594:	e7a7      	b.n	80074e6 <ip4_input+0x72>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8007596:	eb08 0309 	add.w	r3, r8, r9
 800759a:	885b      	ldrh	r3, [r3, #2]
 800759c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80075a0:	d1a5      	bne.n	80074ee <ip4_input+0x7a>
 80075a2:	4637      	mov	r7, r6
 80075a4:	e7b5      	b.n	8007512 <ip4_input+0x9e>
        udp_input(p, inp);
 80075a6:	4631      	mov	r1, r6
 80075a8:	4620      	mov	r0, r4
 80075aa:	f004 ffc1 	bl	800c530 <udp_input>
  ip_data.current_netif = NULL;
 80075ae:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 80075b0:	e9c5 3300 	strd	r3, r3, [r5]
  ip_data.current_ip4_header = NULL;
 80075b4:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 80075b6:	81ab      	strh	r3, [r5, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 80075b8:	e9c5 3304 	strd	r3, r3, [r5, #16]
  return ERR_OK;
 80075bc:	e768      	b.n	8007490 <ip4_input+0x1c>
        tcp_input(p, inp);
 80075be:	4631      	mov	r1, r6
 80075c0:	4620      	mov	r0, r4
 80075c2:	f003 f851 	bl	800a668 <tcp_input>
        break;
 80075c6:	e7f2      	b.n	80075ae <ip4_input+0x13a>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80075c8:	4639      	mov	r1, r7
 80075ca:	6968      	ldr	r0, [r5, #20]
 80075cc:	f000 f8a1 	bl	8007712 <ip4_addr_isbroadcast_u32>
 80075d0:	b960      	cbnz	r0, 80075ec <ip4_input+0x178>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80075d2:	696b      	ldr	r3, [r5, #20]
 80075d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80075d8:	2be0      	cmp	r3, #224	; 0xe0
 80075da:	d007      	beq.n	80075ec <ip4_input+0x178>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80075dc:	4649      	mov	r1, r9
 80075de:	4620      	mov	r0, r4
 80075e0:	f001 fa42 	bl	8008a68 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80075e4:	2102      	movs	r1, #2
 80075e6:	4620      	mov	r0, r4
 80075e8:	f7ff fef2 	bl	80073d0 <icmp_dest_unreach>
        pbuf_free(p);
 80075ec:	4620      	mov	r0, r4
 80075ee:	f001 fa43 	bl	8008a78 <pbuf_free>
        break;
 80075f2:	e7dc      	b.n	80075ae <ip4_input+0x13a>
 80075f4:	2000a7dc 	.word	0x2000a7dc
 80075f8:	20010d04 	.word	0x20010d04

080075fc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80075fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007600:	461f      	mov	r7, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007602:	7b83      	ldrb	r3, [r0, #14]
{
 8007604:	4604      	mov	r4, r0
 8007606:	4689      	mov	r9, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007608:	2b01      	cmp	r3, #1
{
 800760a:	4616      	mov	r6, r2
 800760c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007610:	d006      	beq.n	8007620 <ip4_output_if_src+0x24>
 8007612:	4b31      	ldr	r3, [pc, #196]	; (80076d8 <ip4_output_if_src+0xdc>)
 8007614:	f44f 7255 	mov.w	r2, #852	; 0x354
 8007618:	4930      	ldr	r1, [pc, #192]	; (80076dc <ip4_output_if_src+0xe0>)
 800761a:	4831      	ldr	r0, [pc, #196]	; (80076e0 <ip4_output_if_src+0xe4>)
 800761c:	f006 fa38 	bl	800da90 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8007620:	2e00      	cmp	r6, #0
 8007622:	d049      	beq.n	80076b8 <ip4_output_if_src+0xbc>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8007624:	2114      	movs	r1, #20
 8007626:	4620      	mov	r0, r4
 8007628:	f001 f9ee 	bl	8008a08 <pbuf_add_header>
 800762c:	b120      	cbz	r0, 8007638 <ip4_output_if_src+0x3c>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800762e:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8007632:	b002      	add	sp, #8
 8007634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8007638:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800763a:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800763c:	2b13      	cmp	r3, #19
 800763e:	d806      	bhi.n	800764e <ip4_output_if_src+0x52>
 8007640:	4b25      	ldr	r3, [pc, #148]	; (80076d8 <ip4_output_if_src+0xdc>)
 8007642:	f44f 7262 	mov.w	r2, #904	; 0x388
 8007646:	4927      	ldr	r1, [pc, #156]	; (80076e4 <ip4_output_if_src+0xe8>)
 8007648:	4825      	ldr	r0, [pc, #148]	; (80076e0 <ip4_output_if_src+0xe4>)
 800764a:	f006 fa21 	bl	800da90 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 800764e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8007652:	722f      	strb	r7, [r5, #8]
    IPH_OFFSET_SET(iphdr, 0);
 8007654:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 8007656:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8007658:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800765a:	f8df a090 	ldr.w	sl, [pc, #144]	; 80076ec <ip4_output_if_src+0xf0>
    ip4_addr_copy(iphdr->dest, *dest);
 800765e:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8007660:	2345      	movs	r3, #69	; 0x45
 8007662:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 8007664:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8007668:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800766a:	8920      	ldrh	r0, [r4, #8]
 800766c:	f000 fc92 	bl	8007f94 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8007670:	71af      	strb	r7, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8007672:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8007674:	71ef      	strb	r7, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8007676:	f8ba 0000 	ldrh.w	r0, [sl]
 800767a:	f000 fc8b 	bl	8007f94 <lwip_htons>
    ++ip_id;
 800767e:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8007682:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 8007684:	3301      	adds	r3, #1
 8007686:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 800768a:	f1b9 0f00 	cmp.w	r9, #0
 800768e:	d110      	bne.n	80076b2 <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8007690:	4b15      	ldr	r3, [pc, #84]	; (80076e8 <ip4_output_if_src+0xec>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8007696:	72af      	strb	r7, [r5, #10]
 8007698:	72ef      	strb	r7, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800769a:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 800769e:	b19b      	cbz	r3, 80076c8 <ip4_output_if_src+0xcc>
 80076a0:	8922      	ldrh	r2, [r4, #8]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d910      	bls.n	80076c8 <ip4_output_if_src+0xcc>
    return ip4_frag(p, netif, dest);
 80076a6:	4632      	mov	r2, r6
 80076a8:	4641      	mov	r1, r8
 80076aa:	4620      	mov	r0, r4
 80076ac:	f000 fb86 	bl	8007dbc <ip4_frag>
 80076b0:	e7bf      	b.n	8007632 <ip4_output_if_src+0x36>
      ip4_addr_copy(iphdr->src, *src);
 80076b2:	f8d9 3000 	ldr.w	r3, [r9]
 80076b6:	e7ed      	b.n	8007694 <ip4_output_if_src+0x98>
    if (p->len < IP_HLEN) {
 80076b8:	8963      	ldrh	r3, [r4, #10]
 80076ba:	2b13      	cmp	r3, #19
 80076bc:	d9b7      	bls.n	800762e <ip4_output_if_src+0x32>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80076be:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 80076c0:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 80076c6:	e7e8      	b.n	800769a <ip4_output_if_src+0x9e>
  return netif->output(netif, p, dest);
 80076c8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80076cc:	4632      	mov	r2, r6
 80076ce:	4621      	mov	r1, r4
 80076d0:	4640      	mov	r0, r8
 80076d2:	4798      	blx	r3
 80076d4:	e7ad      	b.n	8007632 <ip4_output_if_src+0x36>
 80076d6:	bf00      	nop
 80076d8:	08013576 	.word	0x08013576
 80076dc:	08013614 	.word	0x08013614
 80076e0:	08012bab 	.word	0x08012bab
 80076e4:	08013620 	.word	0x08013620
 80076e8:	0801292c 	.word	0x0801292c
 80076ec:	200068e6 	.word	0x200068e6

080076f0 <ip4_output_if>:
{
 80076f0:	b4f0      	push	{r4, r5, r6, r7}
 80076f2:	9c06      	ldr	r4, [sp, #24]
 80076f4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80076f8:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80076fc:	b11a      	cbz	r2, 8007706 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80076fe:	b109      	cbz	r1, 8007704 <ip4_output_if+0x14>
 8007700:	680f      	ldr	r7, [r1, #0]
 8007702:	b907      	cbnz	r7, 8007706 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8007704:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8007706:	9504      	str	r5, [sp, #16]
 8007708:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 800770c:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800770e:	f7ff bf75 	b.w	80075fc <ip4_output_if_src>

08007712 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8007712:	1e43      	subs	r3, r0, #1
{
 8007714:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 8007716:	3303      	adds	r3, #3
 8007718:	d812      	bhi.n	8007740 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800771a:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 800771e:	f013 0002 	ands.w	r0, r3, #2
 8007722:	d010      	beq.n	8007746 <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8007724:	684b      	ldr	r3, [r1, #4]
 8007726:	4293      	cmp	r3, r2
 8007728:	d00c      	beq.n	8007744 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800772a:	6888      	ldr	r0, [r1, #8]
 800772c:	4053      	eors	r3, r2
 800772e:	4203      	tst	r3, r0
 8007730:	d108      	bne.n	8007744 <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8007732:	43c3      	mvns	r3, r0
 8007734:	ea22 0000 	bic.w	r0, r2, r0
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8007738:	1ac3      	subs	r3, r0, r3
 800773a:	4258      	negs	r0, r3
 800773c:	4158      	adcs	r0, r3
 800773e:	4770      	bx	lr
    return 1;
 8007740:	2001      	movs	r0, #1
 8007742:	4770      	bx	lr
    return 0;
 8007744:	2000      	movs	r0, #0
  }
}
 8007746:	4770      	bx	lr

08007748 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8007748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 800774c:	6803      	ldr	r3, [r0, #0]
 800774e:	f10d 0c04 	add.w	ip, sp, #4

  rp = buf;
 8007752:	460d      	mov	r5, r1
  s_addr = ip4_addr_get_u32(addr);
 8007754:	2004      	movs	r0, #4
  int len = 0;
 8007756:	2600      	movs	r6, #0
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 8007758:	f04f 0e0a 	mov.w	lr, #10
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
 800775c:	f04f 082e 	mov.w	r8, #46	; 0x2e
  s_addr = ip4_addr_get_u32(addr);
 8007760:	9301      	str	r3, [sp, #4]
  for (n = 0; n < 4; n++) {
 8007762:	f81c 4b01 	ldrb.w	r4, [ip], #1
    i = 0;
 8007766:	2700      	movs	r7, #0
      rem = *ap % (u8_t)10;
 8007768:	46a2      	mov	sl, r4
      inv[i++] = (char)('0' + rem);
 800776a:	f10d 0b08 	add.w	fp, sp, #8
      rem = *ap % (u8_t)10;
 800776e:	fbb4 f3fe 	udiv	r3, r4, lr
 8007772:	fb0e 4913 	mls	r9, lr, r3, r4
      *ap /= (u8_t)10;
 8007776:	b2dc      	uxtb	r4, r3
      inv[i++] = (char)('0' + rem);
 8007778:	463b      	mov	r3, r7
    } while (*ap);
 800777a:	f1ba 0f09 	cmp.w	sl, #9
      inv[i++] = (char)('0' + rem);
 800777e:	f107 0701 	add.w	r7, r7, #1
 8007782:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8007786:	449b      	add	fp, r3
 8007788:	b2ff      	uxtb	r7, r7
 800778a:	f80b 9c08 	strb.w	r9, [fp, #-8]
    } while (*ap);
 800778e:	d8eb      	bhi.n	8007768 <ip4addr_ntoa_r+0x20>
 8007790:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007794:	4637      	mov	r7, r6
 8007796:	462c      	mov	r4, r5
    while (i--) {
 8007798:	2bff      	cmp	r3, #255	; 0xff
 800779a:	f106 0601 	add.w	r6, r6, #1
 800779e:	d10d      	bne.n	80077bc <ip4addr_ntoa_r+0x74>
    if (len++ >= buflen) {
 80077a0:	4297      	cmp	r7, r2
 80077a2:	da18      	bge.n	80077d6 <ip4addr_ntoa_r+0x8e>
    *rp++ = '.';
 80077a4:	3801      	subs	r0, #1
 80077a6:	4625      	mov	r5, r4
  for (n = 0; n < 4; n++) {
 80077a8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    *rp++ = '.';
 80077ac:	f805 8b01 	strb.w	r8, [r5], #1
  for (n = 0; n < 4; n++) {
 80077b0:	d1d7      	bne.n	8007762 <ip4addr_ntoa_r+0x1a>
    ap++;
  }
  *--rp = 0;
 80077b2:	7020      	strb	r0, [r4, #0]
  return buf;
 80077b4:	4608      	mov	r0, r1
}
 80077b6:	b003      	add	sp, #12
 80077b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (len++ >= buflen) {
 80077bc:	1e5d      	subs	r5, r3, #1
 80077be:	4297      	cmp	r7, r2
 80077c0:	b2ed      	uxtb	r5, r5
 80077c2:	da08      	bge.n	80077d6 <ip4addr_ntoa_r+0x8e>
      *rp++ = inv[i];
 80077c4:	af02      	add	r7, sp, #8
 80077c6:	443b      	add	r3, r7
 80077c8:	4637      	mov	r7, r6
 80077ca:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80077ce:	f804 3b01 	strb.w	r3, [r4], #1
 80077d2:	462b      	mov	r3, r5
 80077d4:	e7e0      	b.n	8007798 <ip4addr_ntoa_r+0x50>
        return NULL;
 80077d6:	2000      	movs	r0, #0
 80077d8:	e7ed      	b.n	80077b6 <ip4addr_ntoa_r+0x6e>
	...

080077dc <ip4addr_ntoa>:
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80077dc:	2210      	movs	r2, #16
 80077de:	4901      	ldr	r1, [pc, #4]	; (80077e4 <ip4addr_ntoa+0x8>)
 80077e0:	f7ff bfb2 	b.w	8007748 <ip4addr_ntoa_r>
 80077e4:	200068e8 	.word	0x200068e8

080077e8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80077e8:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80077ea:	4b0c      	ldr	r3, [pc, #48]	; (800781c <ip_reass_dequeue_datagram+0x34>)
{
 80077ec:	4604      	mov	r4, r0
 80077ee:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	4282      	cmp	r2, r0
 80077f4:	d107      	bne.n	8007806 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80077f6:	6802      	ldr	r2, [r0, #0]
 80077f8:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80077fa:	4621      	mov	r1, r4
 80077fc:	2004      	movs	r0, #4
}
 80077fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8007802:	f000 bf03 	b.w	800860c <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8007806:	b931      	cbnz	r1, 8007816 <ip_reass_dequeue_datagram+0x2e>
 8007808:	4b05      	ldr	r3, [pc, #20]	; (8007820 <ip_reass_dequeue_datagram+0x38>)
 800780a:	f240 1245 	movw	r2, #325	; 0x145
 800780e:	4905      	ldr	r1, [pc, #20]	; (8007824 <ip_reass_dequeue_datagram+0x3c>)
 8007810:	4805      	ldr	r0, [pc, #20]	; (8007828 <ip_reass_dequeue_datagram+0x40>)
 8007812:	f006 f93d 	bl	800da90 <iprintf>
    prev->next = ipr->next;
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	602b      	str	r3, [r5, #0]
 800781a:	e7ee      	b.n	80077fa <ip_reass_dequeue_datagram+0x12>
 800781c:	200068f8 	.word	0x200068f8
 8007820:	0801364d 	.word	0x0801364d
 8007824:	080136f0 	.word	0x080136f0
 8007828:	08012bab 	.word	0x08012bab

0800782c <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800782c:	4281      	cmp	r1, r0
{
 800782e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007832:	4604      	mov	r4, r0
 8007834:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8007836:	d105      	bne.n	8007844 <ip_reass_free_complete_datagram+0x18>
 8007838:	4b2f      	ldr	r3, [pc, #188]	; (80078f8 <ip_reass_free_complete_datagram+0xcc>)
 800783a:	22ab      	movs	r2, #171	; 0xab
 800783c:	492f      	ldr	r1, [pc, #188]	; (80078fc <ip_reass_free_complete_datagram+0xd0>)
 800783e:	4830      	ldr	r0, [pc, #192]	; (8007900 <ip_reass_free_complete_datagram+0xd4>)
 8007840:	f006 f926 	bl	800da90 <iprintf>
  if (prev != NULL) {
 8007844:	b146      	cbz	r6, 8007858 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8007846:	6833      	ldr	r3, [r6, #0]
 8007848:	42a3      	cmp	r3, r4
 800784a:	d005      	beq.n	8007858 <ip_reass_free_complete_datagram+0x2c>
 800784c:	4b2a      	ldr	r3, [pc, #168]	; (80078f8 <ip_reass_free_complete_datagram+0xcc>)
 800784e:	22ad      	movs	r2, #173	; 0xad
 8007850:	492c      	ldr	r1, [pc, #176]	; (8007904 <ip_reass_free_complete_datagram+0xd8>)
 8007852:	482b      	ldr	r0, [pc, #172]	; (8007900 <ip_reass_free_complete_datagram+0xd4>)
 8007854:	f006 f91c 	bl	800da90 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8007858:	6867      	ldr	r7, [r4, #4]
 800785a:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 800785c:	889a      	ldrh	r2, [r3, #4]
 800785e:	bb92      	cbnz	r2, 80078c6 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8007860:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8007862:	f104 011c 	add.w	r1, r4, #28
    ipr->p = iprh->next_pbuf;
 8007866:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8007868:	f104 0208 	add.w	r2, r4, #8
 800786c:	f852 0b04 	ldr.w	r0, [r2], #4
 8007870:	428a      	cmp	r2, r1
 8007872:	f843 0b04 	str.w	r0, [r3], #4
 8007876:	d1f9      	bne.n	800786c <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8007878:	2101      	movs	r1, #1
 800787a:	4638      	mov	r0, r7
 800787c:	f7ff fdad 	bl	80073da <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8007880:	4638      	mov	r0, r7
 8007882:	f001 fa35 	bl	8008cf0 <pbuf_clen>
 8007886:	4605      	mov	r5, r0
    pbuf_free(p);
 8007888:	4638      	mov	r0, r7
 800788a:	f001 f8f5 	bl	8008a78 <pbuf_free>
  p = ipr->p;
 800788e:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8007890:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80078f8 <ip_reass_free_complete_datagram+0xcc>
 8007894:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8007910 <ip_reass_free_complete_datagram+0xe4>
 8007898:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007900 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 800789c:	b9af      	cbnz	r7, 80078ca <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 800789e:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80078a0:	4c19      	ldr	r4, [pc, #100]	; (8007908 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 80078a2:	4631      	mov	r1, r6
 80078a4:	f7ff ffa0 	bl	80077e8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80078a8:	88a3      	ldrh	r3, [r4, #4]
 80078aa:	42ab      	cmp	r3, r5
 80078ac:	d205      	bcs.n	80078ba <ip_reass_free_complete_datagram+0x8e>
 80078ae:	4b12      	ldr	r3, [pc, #72]	; (80078f8 <ip_reass_free_complete_datagram+0xcc>)
 80078b0:	22d2      	movs	r2, #210	; 0xd2
 80078b2:	4916      	ldr	r1, [pc, #88]	; (800790c <ip_reass_free_complete_datagram+0xe0>)
 80078b4:	4812      	ldr	r0, [pc, #72]	; (8007900 <ip_reass_free_complete_datagram+0xd4>)
 80078b6:	f006 f8eb 	bl	800da90 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80078ba:	88a3      	ldrh	r3, [r4, #4]
}
 80078bc:	4628      	mov	r0, r5
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80078be:	1b5b      	subs	r3, r3, r5
 80078c0:	80a3      	strh	r3, [r4, #4]
}
 80078c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 80078c6:	2500      	movs	r5, #0
 80078c8:	e7e1      	b.n	800788e <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 80078ca:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 80078cc:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 80078ce:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 80078d2:	f001 fa0d 	bl	8008cf0 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80078d6:	4405      	add	r5, r0
 80078d8:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80078dc:	db05      	blt.n	80078ea <ip_reass_free_complete_datagram+0xbe>
 80078de:	4643      	mov	r3, r8
 80078e0:	22cc      	movs	r2, #204	; 0xcc
 80078e2:	4649      	mov	r1, r9
 80078e4:	4650      	mov	r0, sl
 80078e6:	f006 f8d3 	bl	800da90 <iprintf>
    pbuf_free(pcur);
 80078ea:	4638      	mov	r0, r7
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80078ec:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 80078ee:	465f      	mov	r7, fp
    pbuf_free(pcur);
 80078f0:	f001 f8c2 	bl	8008a78 <pbuf_free>
 80078f4:	e7d2      	b.n	800789c <ip_reass_free_complete_datagram+0x70>
 80078f6:	bf00      	nop
 80078f8:	0801364d 	.word	0x0801364d
 80078fc:	08013709 	.word	0x08013709
 8007900:	08012bab 	.word	0x08012bab
 8007904:	08013715 	.word	0x08013715
 8007908:	200068f8 	.word	0x200068f8
 800790c:	08013744 	.word	0x08013744
 8007910:	08013727 	.word	0x08013727

08007914 <ip_reass_remove_oldest_datagram>:
{
 8007914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007918:	4605      	mov	r5, r0
 800791a:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800791c:	2600      	movs	r6, #0
    r = reassdatagrams;
 800791e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8007988 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 8007922:	2400      	movs	r4, #0
    r = reassdatagrams;
 8007924:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8007928:	4621      	mov	r1, r4
    prev = NULL;
 800792a:	46a4      	mov	ip, r4
    oldest = NULL;
 800792c:	4620      	mov	r0, r4
    while (r != NULL) {
 800792e:	b953      	cbnz	r3, 8007946 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8007930:	b110      	cbz	r0, 8007938 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8007932:	f7ff ff7b 	bl	800782c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8007936:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8007938:	42be      	cmp	r6, r7
 800793a:	da01      	bge.n	8007940 <ip_reass_remove_oldest_datagram+0x2c>
 800793c:	2c01      	cmp	r4, #1
 800793e:	dcf0      	bgt.n	8007922 <ip_reass_remove_oldest_datagram+0xe>
}
 8007940:	4630      	mov	r0, r6
 8007942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8007946:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800794a:	695a      	ldr	r2, [r3, #20]
 800794c:	4572      	cmp	r2, lr
 800794e:	d109      	bne.n	8007964 <ip_reass_remove_oldest_datagram+0x50>
 8007950:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8007954:	699a      	ldr	r2, [r3, #24]
 8007956:	4572      	cmp	r2, lr
 8007958:	d104      	bne.n	8007964 <ip_reass_remove_oldest_datagram+0x50>
 800795a:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 800795e:	88aa      	ldrh	r2, [r5, #4]
 8007960:	4596      	cmp	lr, r2
 8007962:	d008      	beq.n	8007976 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8007964:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8007966:	b160      	cbz	r0, 8007982 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8007968:	7fc2      	ldrb	r2, [r0, #31]
 800796a:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 800796e:	4596      	cmp	lr, r2
 8007970:	bf9c      	itt	ls
 8007972:	4661      	movls	r1, ip
 8007974:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	2a00      	cmp	r2, #0
 800797a:	bf18      	it	ne
 800797c:	469c      	movne	ip, r3
 800797e:	4613      	mov	r3, r2
 8007980:	e7d5      	b.n	800792e <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8007982:	4661      	mov	r1, ip
 8007984:	4618      	mov	r0, r3
 8007986:	e7f6      	b.n	8007976 <ip_reass_remove_oldest_datagram+0x62>
 8007988:	200068f8 	.word	0x200068f8

0800798c <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800798c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800798e:	4604      	mov	r4, r0
 8007990:	b930      	cbnz	r0, 80079a0 <ip_frag_free_pbuf_custom_ref+0x14>
 8007992:	4b06      	ldr	r3, [pc, #24]	; (80079ac <ip_frag_free_pbuf_custom_ref+0x20>)
 8007994:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8007998:	4905      	ldr	r1, [pc, #20]	; (80079b0 <ip_frag_free_pbuf_custom_ref+0x24>)
 800799a:	4806      	ldr	r0, [pc, #24]	; (80079b4 <ip_frag_free_pbuf_custom_ref+0x28>)
 800799c:	f006 f878 	bl	800da90 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80079a0:	4621      	mov	r1, r4
 80079a2:	2005      	movs	r0, #5
}
 80079a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80079a8:	f000 be30 	b.w	800860c <memp_free>
 80079ac:	0801364d 	.word	0x0801364d
 80079b0:	08013fd8 	.word	0x08013fd8
 80079b4:	08012bab 	.word	0x08012bab

080079b8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80079b8:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80079ba:	4604      	mov	r4, r0
 80079bc:	b930      	cbnz	r0, 80079cc <ipfrag_free_pbuf_custom+0x14>
 80079be:	4b08      	ldr	r3, [pc, #32]	; (80079e0 <ipfrag_free_pbuf_custom+0x28>)
 80079c0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80079c4:	4907      	ldr	r1, [pc, #28]	; (80079e4 <ipfrag_free_pbuf_custom+0x2c>)
 80079c6:	4808      	ldr	r0, [pc, #32]	; (80079e8 <ipfrag_free_pbuf_custom+0x30>)
 80079c8:	f006 f862 	bl	800da90 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 80079cc:	6960      	ldr	r0, [r4, #20]
 80079ce:	b108      	cbz	r0, 80079d4 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 80079d0:	f001 f852 	bl	8008a78 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80079d4:	4620      	mov	r0, r4
}
 80079d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 80079da:	f7ff bfd7 	b.w	800798c <ip_frag_free_pbuf_custom_ref>
 80079de:	bf00      	nop
 80079e0:	0801364d 	.word	0x0801364d
 80079e4:	08013766 	.word	0x08013766
 80079e8:	08012bab 	.word	0x08012bab

080079ec <ip_reass_tmr>:
{
 80079ec:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80079ee:	4b09      	ldr	r3, [pc, #36]	; (8007a14 <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
 80079f0:	2400      	movs	r4, #0
  r = reassdatagrams;
 80079f2:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80079f4:	b900      	cbnz	r0, 80079f8 <ip_reass_tmr+0xc>
}
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 80079f8:	7fc3      	ldrb	r3, [r0, #31]
 80079fa:	6805      	ldr	r5, [r0, #0]
 80079fc:	b123      	cbz	r3, 8007a08 <ip_reass_tmr+0x1c>
      r->timer--;
 80079fe:	3b01      	subs	r3, #1
 8007a00:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 8007a02:	4604      	mov	r4, r0
 8007a04:	4628      	mov	r0, r5
 8007a06:	e7f5      	b.n	80079f4 <ip_reass_tmr+0x8>
 8007a08:	4621      	mov	r1, r4
 8007a0a:	f7ff ff0f 	bl	800782c <ip_reass_free_complete_datagram>
 8007a0e:	4620      	mov	r0, r4
 8007a10:	e7f7      	b.n	8007a02 <ip_reass_tmr+0x16>
 8007a12:	bf00      	nop
 8007a14:	200068f8 	.word	0x200068f8

08007a18 <ip4_reass>:
{
 8007a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8007a1c:	6845      	ldr	r5, [r0, #4]
{
 8007a1e:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8007a20:	782b      	ldrb	r3, [r5, #0]
 8007a22:	f003 030f 	and.w	r3, r3, #15
 8007a26:	2b05      	cmp	r3, #5
 8007a28:	f040 80a0 	bne.w	8007b6c <ip4_reass+0x154>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007a2c:	88e8      	ldrh	r0, [r5, #6]
 8007a2e:	f000 fab1 	bl	8007f94 <lwip_htons>
 8007a32:	4682      	mov	sl, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8007a34:	8868      	ldrh	r0, [r5, #2]
 8007a36:	f000 faad 	bl	8007f94 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8007a3a:	782b      	ldrb	r3, [r5, #0]
 8007a3c:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8007a40:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8007a44:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8007a48:	f0c0 8090 	bcc.w	8007b6c <ip4_reass+0x154>
  len = (u16_t)(len - hlen);
 8007a4c:	1bc0      	subs	r0, r0, r7
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007a4e:	4ec0      	ldr	r6, [pc, #768]	; (8007d50 <ip4_reass+0x338>)
  len = (u16_t)(len - hlen);
 8007a50:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 8007a52:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 8007a54:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8007a56:	f001 f94b 	bl	8008cf0 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007a5a:	88b3      	ldrh	r3, [r6, #4]
  clen = pbuf_clen(p);
 8007a5c:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007a5e:	4403      	add	r3, r0
 8007a60:	2b0a      	cmp	r3, #10
 8007a62:	dc79      	bgt.n	8007b58 <ip4_reass+0x140>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8007a64:	6834      	ldr	r4, [r6, #0]
 8007a66:	2c00      	cmp	r4, #0
 8007a68:	f040 8085 	bne.w	8007b76 <ip4_reass+0x15e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8007a6c:	2004      	movs	r0, #4
 8007a6e:	f000 fdb1 	bl	80085d4 <memp_malloc>
  if (ipr == NULL) {
 8007a72:	4604      	mov	r4, r0
 8007a74:	b958      	cbnz	r0, 8007a8e <ip4_reass+0x76>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8007a76:	4649      	mov	r1, r9
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f7ff ff4b 	bl	8007914 <ip_reass_remove_oldest_datagram>
 8007a7e:	4581      	cmp	r9, r0
 8007a80:	dc74      	bgt.n	8007b6c <ip4_reass+0x154>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8007a82:	2004      	movs	r0, #4
 8007a84:	f000 fda6 	bl	80085d4 <memp_malloc>
    if (ipr == NULL)
 8007a88:	4604      	mov	r4, r0
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d06e      	beq.n	8007b6c <ip4_reass+0x154>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8007a8e:	221c      	movs	r2, #28
 8007a90:	2100      	movs	r1, #0
 8007a92:	1d20      	adds	r0, r4, #4
 8007a94:	f005 fff4 	bl	800da80 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8007a98:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8007a9a:	f104 0208 	add.w	r2, r4, #8
 8007a9e:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 8007aa2:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8007aa4:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 8007aa6:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 8007aa8:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8007aaa:	462b      	mov	r3, r5
 8007aac:	f853 0b04 	ldr.w	r0, [r3], #4
 8007ab0:	428b      	cmp	r3, r1
 8007ab2:	f842 0b04 	str.w	r0, [r2], #4
 8007ab6:	d1f9      	bne.n	8007aac <ip4_reass+0x94>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8007ab8:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007abc:	f3ca 070c 	ubfx	r7, sl, #0, #13
  if (is_last) {
 8007ac0:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007ac4:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 8007ac8:	d10a      	bne.n	8007ae0 <ip4_reass+0xc8>
    u16_t datagram_len = (u16_t)(offset + len);
 8007aca:	9b01      	ldr	r3, [sp, #4]
 8007acc:	18fb      	adds	r3, r7, r3
 8007ace:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8007ad0:	429f      	cmp	r7, r3
 8007ad2:	f200 8129 	bhi.w	8007d28 <ip4_reass+0x310>
 8007ad6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8007ada:	4293      	cmp	r3, r2
 8007adc:	f200 8124 	bhi.w	8007d28 <ip4_reass+0x310>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8007ae0:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8007ae4:	8868      	ldrh	r0, [r5, #2]
 8007ae6:	f000 fa55 	bl	8007f94 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8007aea:	782b      	ldrb	r3, [r5, #0]
 8007aec:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8007af0:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8007af4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8007af8:	f0c0 8116 	bcc.w	8007d28 <ip4_reass+0x310>
  len = (u16_t)(len - hlen);
 8007afc:	1a80      	subs	r0, r0, r2
 8007afe:	fa1f fa80 	uxth.w	sl, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007b02:	88e8      	ldrh	r0, [r5, #6]
 8007b04:	f000 fa46 	bl	8007f94 <lwip_htons>
 8007b08:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8007b0c:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->next_pbuf = NULL;
 8007b10:	2500      	movs	r5, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007b12:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 8007b14:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 8007b16:	eb0a 0300 	add.w	r3, sl, r0
  iprh->next_pbuf = NULL;
 8007b1a:	7075      	strb	r5, [r6, #1]
 8007b1c:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 8007b1e:	fa1f fc83 	uxth.w	ip, r3
  iprh->next_pbuf = NULL;
 8007b22:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8007b24:	80b0      	strh	r0, [r6, #4]
  if (iprh->end < offset) {
 8007b26:	4560      	cmp	r0, ip
  iprh->end = (u16_t)(offset + len);
 8007b28:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 8007b2a:	f200 80fd 	bhi.w	8007d28 <ip4_reass+0x310>
  for (q = ipr->p; q != NULL;) {
 8007b2e:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 8007b32:	f04f 0a01 	mov.w	sl, #1
  for (q = ipr->p; q != NULL;) {
 8007b36:	4671      	mov	r1, lr
 8007b38:	bb61      	cbnz	r1, 8007b94 <ip4_reass+0x17c>
    if (iprh_prev != NULL) {
 8007b3a:	2d00      	cmp	r5, #0
 8007b3c:	f040 80ae 	bne.w	8007c9c <ip4_reass+0x284>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8007b40:	f1be 0f00 	cmp.w	lr, #0
 8007b44:	f000 809a 	beq.w	8007c7c <ip4_reass+0x264>
 8007b48:	4b82      	ldr	r3, [pc, #520]	; (8007d54 <ip4_reass+0x33c>)
 8007b4a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8007b4e:	4982      	ldr	r1, [pc, #520]	; (8007d58 <ip4_reass+0x340>)
 8007b50:	4882      	ldr	r0, [pc, #520]	; (8007d5c <ip4_reass+0x344>)
 8007b52:	f005 ff9d 	bl	800da90 <iprintf>
 8007b56:	e091      	b.n	8007c7c <ip4_reass+0x264>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8007b58:	4601      	mov	r1, r0
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f7ff feda 	bl	8007914 <ip_reass_remove_oldest_datagram>
 8007b60:	b120      	cbz	r0, 8007b6c <ip4_reass+0x154>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8007b62:	88b3      	ldrh	r3, [r6, #4]
 8007b64:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8007b66:	2b0a      	cmp	r3, #10
 8007b68:	f77f af7c 	ble.w	8007a64 <ip4_reass+0x4c>
  pbuf_free(p);
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	f000 ff83 	bl	8008a78 <pbuf_free>
  return NULL;
 8007b72:	2600      	movs	r6, #0
 8007b74:	e07c      	b.n	8007c70 <ip4_reass+0x258>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8007b76:	68eb      	ldr	r3, [r5, #12]
 8007b78:	6962      	ldr	r2, [r4, #20]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d108      	bne.n	8007b90 <ip4_reass+0x178>
 8007b7e:	692b      	ldr	r3, [r5, #16]
 8007b80:	69a2      	ldr	r2, [r4, #24]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d104      	bne.n	8007b90 <ip4_reass+0x178>
 8007b86:	89a2      	ldrh	r2, [r4, #12]
 8007b88:	88ab      	ldrh	r3, [r5, #4]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	f000 80f2 	beq.w	8007d74 <ip4_reass+0x35c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8007b90:	6824      	ldr	r4, [r4, #0]
 8007b92:	e768      	b.n	8007a66 <ip4_reass+0x4e>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8007b94:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8007b96:	889a      	ldrh	r2, [r3, #4]
 8007b98:	4290      	cmp	r0, r2
 8007b9a:	d272      	bcs.n	8007c82 <ip4_reass+0x26a>
      iprh->next_pbuf = q;
 8007b9c:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 8007b9e:	2d00      	cmp	r5, #0
 8007ba0:	d06a      	beq.n	8007c78 <ip4_reass+0x260>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8007ba2:	88eb      	ldrh	r3, [r5, #6]
 8007ba4:	4298      	cmp	r0, r3
 8007ba6:	f0c0 80bf 	bcc.w	8007d28 <ip4_reass+0x310>
 8007baa:	4594      	cmp	ip, r2
 8007bac:	f200 80bc 	bhi.w	8007d28 <ip4_reass+0x310>
        if (iprh_prev->end != iprh->start) {
 8007bb0:	4298      	cmp	r0, r3
        iprh_prev->next_pbuf = new_p;
 8007bb2:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 8007bb6:	f040 80f9 	bne.w	8007dac <ip4_reass+0x394>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8007bba:	f1bb 0f00 	cmp.w	fp, #0
 8007bbe:	d004      	beq.n	8007bca <ip4_reass+0x1b2>
 8007bc0:	7fa3      	ldrb	r3, [r4, #30]
 8007bc2:	f013 0301 	ands.w	r3, r3, #1
 8007bc6:	f000 80a0 	beq.w	8007d0a <ip4_reass+0x2f2>
    if (valid) {
 8007bca:	f1ba 0f00 	cmp.w	sl, #0
 8007bce:	d175      	bne.n	8007cbc <ip4_reass+0x2a4>
          q = iprh->next_pbuf;
 8007bd0:	f04f 0a00 	mov.w	sl, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8007bd4:	4b5e      	ldr	r3, [pc, #376]	; (8007d50 <ip4_reass+0x338>)
 8007bd6:	8898      	ldrh	r0, [r3, #4]
 8007bd8:	4698      	mov	r8, r3
 8007bda:	4481      	add	r9, r0
 8007bdc:	f8a3 9004 	strh.w	r9, [r3, #4]
  if (is_last) {
 8007be0:	f1bb 0f00 	cmp.w	fp, #0
 8007be4:	d106      	bne.n	8007bf4 <ip4_reass+0x1dc>
    u16_t datagram_len = (u16_t)(offset + len);
 8007be6:	9b01      	ldr	r3, [sp, #4]
 8007be8:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8007bea:	7fa3      	ldrb	r3, [r4, #30]
 8007bec:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8007bf0:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8007bf2:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8007bf4:	f1ba 0f01 	cmp.w	sl, #1
 8007bf8:	d1bb      	bne.n	8007b72 <ip4_reass+0x15a>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8007bfa:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8007bfc:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8007c00:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8007c02:	685e      	ldr	r6, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8007c04:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8007c08:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8007c0a:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8007c0c:	4632      	mov	r2, r6
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8007c0e:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8007c10:	f853 7b04 	ldr.w	r7, [r3], #4
 8007c14:	428b      	cmp	r3, r1
 8007c16:	f842 7b04 	str.w	r7, [r2], #4
 8007c1a:	d1f9      	bne.n	8007c10 <ip4_reass+0x1f8>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8007c1c:	f000 f9ba 	bl	8007f94 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8007c20:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8007c22:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8007c24:	71b3      	strb	r3, [r6, #6]
 8007c26:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8007c28:	72b3      	strb	r3, [r6, #10]
 8007c2a:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8007c2c:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8007c2e:	2d00      	cmp	r5, #0
 8007c30:	d16d      	bne.n	8007d0e <ip4_reass+0x2f6>
    if (ipr == reassdatagrams) {
 8007c32:	f8d8 3000 	ldr.w	r3, [r8]
        if (ipr_prev->next == ipr) {
 8007c36:	42a3      	cmp	r3, r4
 8007c38:	d002      	beq.n	8007c40 <ip4_reass+0x228>
 8007c3a:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d171      	bne.n	8007d24 <ip4_reass+0x30c>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8007c40:	4620      	mov	r0, r4
 8007c42:	4629      	mov	r1, r5
 8007c44:	f7ff fdd0 	bl	80077e8 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 8007c48:	4630      	mov	r0, r6
 8007c4a:	f001 f851 	bl	8008cf0 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8007c4e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    clen = pbuf_clen(p);
 8007c52:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8007c54:	4283      	cmp	r3, r0
 8007c56:	d206      	bcs.n	8007c66 <ip4_reass+0x24e>
 8007c58:	4b3e      	ldr	r3, [pc, #248]	; (8007d54 <ip4_reass+0x33c>)
 8007c5a:	f240 229b 	movw	r2, #667	; 0x29b
 8007c5e:	4940      	ldr	r1, [pc, #256]	; (8007d60 <ip4_reass+0x348>)
 8007c60:	483e      	ldr	r0, [pc, #248]	; (8007d5c <ip4_reass+0x344>)
 8007c62:	f005 ff15 	bl	800da90 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8007c66:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8007c6a:	1b04      	subs	r4, r0, r4
 8007c6c:	f8a8 4004 	strh.w	r4, [r8, #4]
}
 8007c70:	4630      	mov	r0, r6
 8007c72:	b003      	add	sp, #12
 8007c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 8007c78:	4594      	cmp	ip, r2
 8007c7a:	d855      	bhi.n	8007d28 <ip4_reass+0x310>
      ipr->p = new_p;
 8007c7c:	f8c4 8004 	str.w	r8, [r4, #4]
 8007c80:	e79b      	b.n	8007bba <ip4_reass+0x1a2>
    } else if (iprh->start == iprh_tmp->start) {
 8007c82:	d051      	beq.n	8007d28 <ip4_reass+0x310>
    } else if (iprh->start < iprh_tmp->end) {
 8007c84:	88d9      	ldrh	r1, [r3, #6]
 8007c86:	4281      	cmp	r1, r0
 8007c88:	d84e      	bhi.n	8007d28 <ip4_reass+0x310>
      if (iprh_prev != NULL) {
 8007c8a:	b125      	cbz	r5, 8007c96 <ip4_reass+0x27e>
        if (iprh_prev->end != iprh_tmp->start) {
 8007c8c:	88e9      	ldrh	r1, [r5, #6]
          valid = 0;
 8007c8e:	4291      	cmp	r1, r2
 8007c90:	bf18      	it	ne
 8007c92:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 8007c96:	6819      	ldr	r1, [r3, #0]
 8007c98:	461d      	mov	r5, r3
 8007c9a:	e74d      	b.n	8007b38 <ip4_reass+0x120>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8007c9c:	88eb      	ldrh	r3, [r5, #6]
 8007c9e:	4283      	cmp	r3, r0
 8007ca0:	d906      	bls.n	8007cb0 <ip4_reass+0x298>
 8007ca2:	4b2c      	ldr	r3, [pc, #176]	; (8007d54 <ip4_reass+0x33c>)
 8007ca4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8007ca8:	492e      	ldr	r1, [pc, #184]	; (8007d64 <ip4_reass+0x34c>)
 8007caa:	482c      	ldr	r0, [pc, #176]	; (8007d5c <ip4_reass+0x344>)
 8007cac:	f005 fef0 	bl	800da90 <iprintf>
      if (iprh_prev->end != iprh->start) {
 8007cb0:	88ea      	ldrh	r2, [r5, #6]
      iprh_prev->next_pbuf = new_p;
 8007cb2:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 8007cb6:	88b3      	ldrh	r3, [r6, #4]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	e77c      	b.n	8007bb6 <ip4_reass+0x19e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8007cbc:	6863      	ldr	r3, [r4, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d086      	beq.n	8007bd0 <ip4_reass+0x1b8>
 8007cc2:	6859      	ldr	r1, [r3, #4]
 8007cc4:	888b      	ldrh	r3, [r1, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d182      	bne.n	8007bd0 <ip4_reass+0x1b8>
        q = iprh->next_pbuf;
 8007cca:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8007ccc:	b9a3      	cbnz	r3, 8007cf8 <ip4_reass+0x2e0>
          LWIP_ASSERT("sanity check",
 8007cce:	42b1      	cmp	r1, r6
 8007cd0:	d106      	bne.n	8007ce0 <ip4_reass+0x2c8>
 8007cd2:	4b20      	ldr	r3, [pc, #128]	; (8007d54 <ip4_reass+0x33c>)
 8007cd4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007cd8:	4923      	ldr	r1, [pc, #140]	; (8007d68 <ip4_reass+0x350>)
 8007cda:	4820      	ldr	r0, [pc, #128]	; (8007d5c <ip4_reass+0x344>)
 8007cdc:	f005 fed8 	bl	800da90 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8007ce0:	6833      	ldr	r3, [r6, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f43f af76 	beq.w	8007bd4 <ip4_reass+0x1bc>
 8007ce8:	4b1a      	ldr	r3, [pc, #104]	; (8007d54 <ip4_reass+0x33c>)
 8007cea:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8007cee:	491f      	ldr	r1, [pc, #124]	; (8007d6c <ip4_reass+0x354>)
 8007cf0:	481a      	ldr	r0, [pc, #104]	; (8007d5c <ip4_reass+0x344>)
 8007cf2:	f005 fecd 	bl	800da90 <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8007cf6:	e76d      	b.n	8007bd4 <ip4_reass+0x1bc>
          iprh = (struct ip_reass_helper *)q->payload;
 8007cf8:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8007cfa:	88f0      	ldrh	r0, [r6, #6]
 8007cfc:	8893      	ldrh	r3, [r2, #4]
 8007cfe:	4298      	cmp	r0, r3
 8007d00:	f47f af66 	bne.w	8007bd0 <ip4_reass+0x1b8>
          q = iprh->next_pbuf;
 8007d04:	6813      	ldr	r3, [r2, #0]
 8007d06:	4616      	mov	r6, r2
 8007d08:	e7e0      	b.n	8007ccc <ip4_reass+0x2b4>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8007d0a:	469a      	mov	sl, r3
 8007d0c:	e762      	b.n	8007bd4 <ip4_reass+0x1bc>
      iprh = (struct ip_reass_helper *)r->payload;
 8007d0e:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8007d10:	2114      	movs	r1, #20
 8007d12:	4628      	mov	r0, r5
 8007d14:	f000 fe7c 	bl	8008a10 <pbuf_remove_header>
      pbuf_cat(p, r);
 8007d18:	4629      	mov	r1, r5
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f001 f80c 	bl	8008d38 <pbuf_cat>
      r = iprh->next_pbuf;
 8007d20:	683d      	ldr	r5, [r7, #0]
 8007d22:	e784      	b.n	8007c2e <ip4_reass+0x216>
        if (ipr_prev->next == ipr) {
 8007d24:	682b      	ldr	r3, [r5, #0]
 8007d26:	e786      	b.n	8007c36 <ip4_reass+0x21e>
  if (ipr->p == NULL) {
 8007d28:	6863      	ldr	r3, [r4, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f47f af1e 	bne.w	8007b6c <ip4_reass+0x154>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8007d30:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <ip4_reass+0x338>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	d006      	beq.n	8007d46 <ip4_reass+0x32e>
 8007d38:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <ip4_reass+0x33c>)
 8007d3a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007d3e:	490c      	ldr	r1, [pc, #48]	; (8007d70 <ip4_reass+0x358>)
 8007d40:	4806      	ldr	r0, [pc, #24]	; (8007d5c <ip4_reass+0x344>)
 8007d42:	f005 fea5 	bl	800da90 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8007d46:	2100      	movs	r1, #0
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f7ff fd4d 	bl	80077e8 <ip_reass_dequeue_datagram>
 8007d4e:	e70d      	b.n	8007b6c <ip4_reass+0x154>
 8007d50:	200068f8 	.word	0x200068f8
 8007d54:	0801364d 	.word	0x0801364d
 8007d58:	08013790 	.word	0x08013790
 8007d5c:	08012bab 	.word	0x08012bab
 8007d60:	080137f6 	.word	0x080137f6
 8007d64:	08013772 	.word	0x08013772
 8007d68:	080137c7 	.word	0x080137c7
 8007d6c:	080137d4 	.word	0x080137d4
 8007d70:	08013811 	.word	0x08013811
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8007d74:	88e8      	ldrh	r0, [r5, #6]
 8007d76:	f000 f90d 	bl	8007f94 <lwip_htons>
 8007d7a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	f47f ae9a 	bne.w	8007ab8 <ip4_reass+0xa0>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8007d84:	89e0      	ldrh	r0, [r4, #14]
 8007d86:	f000 f905 	bl	8007f94 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8007d8a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f43f ae92 	beq.w	8007ab8 <ip4_reass+0xa0>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8007d94:	462b      	mov	r3, r5
 8007d96:	f104 0208 	add.w	r2, r4, #8
 8007d9a:	f105 0114 	add.w	r1, r5, #20
 8007d9e:	f853 0b04 	ldr.w	r0, [r3], #4
 8007da2:	428b      	cmp	r3, r1
 8007da4:	f842 0b04 	str.w	r0, [r2], #4
 8007da8:	d1f9      	bne.n	8007d9e <ip4_reass+0x386>
 8007daa:	e685      	b.n	8007ab8 <ip4_reass+0xa0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8007dac:	f1bb 0f00 	cmp.w	fp, #0
 8007db0:	f43f af0e 	beq.w	8007bd0 <ip4_reass+0x1b8>
 8007db4:	f04f 0a00 	mov.w	sl, #0
 8007db8:	e702      	b.n	8007bc0 <ip4_reass+0x1a8>
 8007dba:	bf00      	nop

08007dbc <ip4_frag>:
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8007dbc:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
{
 8007dbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc2:	ed2d 8b02 	vpush	{d8}
 8007dc6:	ee08 2a10 	vmov	s16, r2
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8007dca:	f1b3 0214 	subs.w	r2, r3, #20
{
 8007dce:	b08b      	sub	sp, #44	; 0x2c
 8007dd0:	4605      	mov	r5, r0
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8007dd2:	bf48      	it	mi
 8007dd4:	f1a3 020d 	submi.w	r2, r3, #13
{
 8007dd8:	468a      	mov	sl, r1
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8007dda:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 8007dde:	9305      	str	r3, [sp, #20]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8007de0:	6843      	ldr	r3, [r0, #4]
 8007de2:	9302      	str	r3, [sp, #8]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	2b05      	cmp	r3, #5
 8007dec:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8007df0:	d109      	bne.n	8007e06 <ip4_frag+0x4a>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8007df2:	8943      	ldrh	r3, [r0, #10]
 8007df4:	2b13      	cmp	r3, #19
 8007df6:	d809      	bhi.n	8007e0c <ip4_frag+0x50>
 8007df8:	4b60      	ldr	r3, [pc, #384]	; (8007f7c <ip4_frag+0x1c0>)
 8007dfa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8007dfe:	4960      	ldr	r1, [pc, #384]	; (8007f80 <ip4_frag+0x1c4>)
 8007e00:	4860      	ldr	r0, [pc, #384]	; (8007f84 <ip4_frag+0x1c8>)
 8007e02:	f005 fe45 	bl	800da90 <iprintf>
    return ERR_VAL;
 8007e06:	f06f 0005 	mvn.w	r0, #5
 8007e0a:	e013      	b.n	8007e34 <ip4_frag+0x78>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8007e0c:	9b02      	ldr	r3, [sp, #8]
  u16_t newpbuflen = 0;
 8007e0e:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8007e10:	88d8      	ldrh	r0, [r3, #6]
 8007e12:	f000 f8bf 	bl	8007f94 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8007e16:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8007e1a:	892c      	ldrh	r4, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 8007e1c:	9303      	str	r3, [sp, #12]
  mf_set = tmp & IP_MF;
 8007e1e:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8007e22:	3c14      	subs	r4, #20
 8007e24:	9307      	str	r3, [sp, #28]

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8007e26:	9b05      	ldr	r3, [sp, #20]
  left = (u16_t)(p->tot_len - IP_HLEN);
 8007e28:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8007e2a:	00db      	lsls	r3, r3, #3
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	9306      	str	r3, [sp, #24]
  while (left) {
 8007e30:	b92c      	cbnz	r4, 8007e3e <ip4_frag+0x82>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8007e32:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8007e34:	b00b      	add	sp, #44	; 0x2c
 8007e36:	ecbd 8b02 	vpop	{d8}
 8007e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8007e3e:	9b06      	ldr	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8007e40:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007e44:	2114      	movs	r1, #20
 8007e46:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	bf28      	it	cs
 8007e4c:	4623      	movcs	r3, r4
 8007e4e:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8007e50:	f000 fe7a 	bl	8008b48 <pbuf_alloc>
    if (rambuf == NULL) {
 8007e54:	4680      	mov	r8, r0
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d036      	beq.n	8007ec8 <ip4_frag+0x10c>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8007e5a:	8943      	ldrh	r3, [r0, #10]
 8007e5c:	2b13      	cmp	r3, #19
 8007e5e:	d806      	bhi.n	8007e6e <ip4_frag+0xb2>
 8007e60:	4b46      	ldr	r3, [pc, #280]	; (8007f7c <ip4_frag+0x1c0>)
 8007e62:	f44f 7249 	mov.w	r2, #804	; 0x324
 8007e66:	4948      	ldr	r1, [pc, #288]	; (8007f88 <ip4_frag+0x1cc>)
 8007e68:	4846      	ldr	r0, [pc, #280]	; (8007f84 <ip4_frag+0x1c8>)
 8007e6a:	f005 fe11 	bl	800da90 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8007e6e:	9b02      	ldr	r3, [sp, #8]
 8007e70:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007e74:	4619      	mov	r1, r3
 8007e76:	3114      	adds	r1, #20
 8007e78:	f853 0b04 	ldr.w	r0, [r3], #4
 8007e7c:	428b      	cmp	r3, r1
 8007e7e:	f842 0b04 	str.w	r0, [r2], #4
 8007e82:	d1f9      	bne.n	8007e78 <ip4_frag+0xbc>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8007e84:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 8007e88:	f8dd 9010 	ldr.w	r9, [sp, #16]
    while (left_to_copy) {
 8007e8c:	f1b9 0f00 	cmp.w	r9, #0
 8007e90:	d041      	beq.n	8007f16 <ip4_frag+0x15a>
      u16_t plen = (u16_t)(p->len - poff);
 8007e92:	896b      	ldrh	r3, [r5, #10]
 8007e94:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8007e96:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 8007e98:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8007e9a:	d206      	bcs.n	8007eaa <ip4_frag+0xee>
 8007e9c:	4b37      	ldr	r3, [pc, #220]	; (8007f7c <ip4_frag+0x1c0>)
 8007e9e:	f240 322d 	movw	r2, #813	; 0x32d
 8007ea2:	493a      	ldr	r1, [pc, #232]	; (8007f8c <ip4_frag+0x1d0>)
 8007ea4:	4837      	ldr	r0, [pc, #220]	; (8007f84 <ip4_frag+0x1c8>)
 8007ea6:	f005 fdf3 	bl	800da90 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8007eaa:	454e      	cmp	r6, r9
 8007eac:	bf28      	it	cs
 8007eae:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 8007eb0:	b916      	cbnz	r6, 8007eb8 <ip4_frag+0xfc>
        p = p->next;
 8007eb2:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8007eb4:	2700      	movs	r7, #0
 8007eb6:	e7e9      	b.n	8007e8c <ip4_frag+0xd0>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8007eb8:	2005      	movs	r0, #5
 8007eba:	f000 fb8b 	bl	80085d4 <memp_malloc>
      if (pcr == NULL) {
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	b928      	cbnz	r0, 8007ece <ip4_frag+0x112>
        pbuf_free(rambuf);
 8007ec2:	4640      	mov	r0, r8
 8007ec4:	f000 fdd8 	bl	8008a78 <pbuf_free>
  return ERR_MEM;
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ecc:	e7b2      	b.n	8007e34 <ip4_frag+0x78>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8007ece:	9601      	str	r6, [sp, #4]
 8007ed0:	4631      	mov	r1, r6
 8007ed2:	686a      	ldr	r2, [r5, #4]
 8007ed4:	9008      	str	r0, [sp, #32]
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	443a      	add	r2, r7
 8007eda:	9200      	str	r2, [sp, #0]
 8007edc:	2241      	movs	r2, #65	; 0x41
 8007ede:	f000 fd79 	bl	80089d4 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8007ee2:	9b08      	ldr	r3, [sp, #32]
 8007ee4:	b918      	cbnz	r0, 8007eee <ip4_frag+0x132>
        ip_frag_free_pbuf_custom_ref(pcr);
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7ff fd50 	bl	800798c <ip_frag_free_pbuf_custom_ref>
 8007eec:	e7e9      	b.n	8007ec2 <ip4_frag+0x106>
 8007eee:	e9cd 0308 	strd	r0, r3, [sp, #32]
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8007ef2:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f000 ff02 	bl	8008d00 <pbuf_ref>
      pcr->original = p;
 8007efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8007efe:	4a24      	ldr	r2, [pc, #144]	; (8007f90 <ip4_frag+0x1d4>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8007f00:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8007f04:	9908      	ldr	r1, [sp, #32]
 8007f06:	4640      	mov	r0, r8
      pcr->original = p;
 8007f08:	615d      	str	r5, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8007f0a:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 8007f0c:	f000 ff14 	bl	8008d38 <pbuf_cat>
      if (left_to_copy) {
 8007f10:	f1b9 0f00 	cmp.w	r9, #0
 8007f14:	d1cd      	bne.n	8007eb2 <ip4_frag+0xf6>
    tmp = (IP_OFFMASK & (ofo));
 8007f16:	9b03      	ldr	r3, [sp, #12]
    poff = (u16_t)(poff + newpbuflen);
 8007f18:	4437      	add	r7, r6
    tmp = (IP_OFFMASK & (ofo));
 8007f1a:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8007f1e:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
    poff = (u16_t)(poff + newpbuflen);
 8007f22:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 8007f24:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8007f26:	42a3      	cmp	r3, r4
 8007f28:	dd01      	ble.n	8007f2e <ip4_frag+0x172>
 8007f2a:	9b07      	ldr	r3, [sp, #28]
 8007f2c:	b10b      	cbz	r3, 8007f32 <ip4_frag+0x176>
      tmp = tmp | IP_MF;
 8007f2e:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8007f32:	f000 f82f 	bl	8007f94 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8007f36:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8007f38:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8007f3c:	f103 0014 	add.w	r0, r3, #20
 8007f40:	b280      	uxth	r0, r0
 8007f42:	f000 f827 	bl	8007f94 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8007f46:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8007f48:	ee18 2a10 	vmov	r2, s16
 8007f4c:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8007f4e:	f8ab 0002 	strh.w	r0, [fp, #2]
    netif->output(netif, rambuf, dest);
 8007f52:	4650      	mov	r0, sl
    IPH_CHKSUM_SET(iphdr, 0);
 8007f54:	f88b 300a 	strb.w	r3, [fp, #10]
 8007f58:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 8007f5c:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007f60:	4798      	blx	r3
    pbuf_free(rambuf);
 8007f62:	4640      	mov	r0, r8
 8007f64:	f000 fd88 	bl	8008a78 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8007f68:	9b04      	ldr	r3, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 8007f6a:	9a05      	ldr	r2, [sp, #20]
    left = (u16_t)(left - fragsize);
 8007f6c:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 8007f6e:	9b03      	ldr	r3, [sp, #12]
 8007f70:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 8007f72:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	9303      	str	r3, [sp, #12]
 8007f78:	e75a      	b.n	8007e30 <ip4_frag+0x74>
 8007f7a:	bf00      	nop
 8007f7c:	0801364d 	.word	0x0801364d
 8007f80:	08013831 	.word	0x08013831
 8007f84:	08012bab 	.word	0x08012bab
 8007f88:	0801384c 	.word	0x0801384c
 8007f8c:	0801386c 	.word	0x0801386c
 8007f90:	080079b9 	.word	0x080079b9

08007f94 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8007f94:	ba40      	rev16	r0, r0
}
 8007f96:	b280      	uxth	r0, r0
 8007f98:	4770      	bx	lr

08007f9a <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8007f9a:	ba00      	rev	r0, r0
 8007f9c:	4770      	bx	lr

08007f9e <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8007f9e:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8007fa0:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8007fa2:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 8007fa6:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8007faa:	d007      	beq.n	8007fbc <lwip_standard_chksum+0x1e>
 8007fac:	4299      	cmp	r1, r3
    ((u8_t *)&t)[1] = *pb++;
 8007fae:	bfc2      	ittt	gt
 8007fb0:	f810 3b01 	ldrbgt.w	r3, [r0], #1
    len--;
 8007fb4:	f101 31ff 	addgt.w	r1, r1, #4294967295	; 0xffffffff
    ((u8_t *)&t)[1] = *pb++;
 8007fb8:	f88d 3007 	strbgt.w	r3, [sp, #7]
  u32_t sum = 0;
 8007fbc:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8007fbe:	2901      	cmp	r1, #1
 8007fc0:	dc15      	bgt.n	8007fee <lwip_standard_chksum+0x50>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8007fc2:	bf04      	itt	eq
 8007fc4:	7803      	ldrbeq	r3, [r0, #0]
 8007fc6:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8007fca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007fce:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8007fd0:	b298      	uxth	r0, r3
 8007fd2:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8007fd6:	b298      	uxth	r0, r3
 8007fd8:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8007fdc:	b124      	cbz	r4, 8007fe8 <lwip_standard_chksum+0x4a>
    sum = SWAP_BYTES_IN_WORD(sum);
 8007fde:	0203      	lsls	r3, r0, #8
 8007fe0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8007fe8:	b280      	uxth	r0, r0
 8007fea:	b002      	add	sp, #8
 8007fec:	bd10      	pop	{r4, pc}
    sum += *ps++;
 8007fee:	f830 3b02 	ldrh.w	r3, [r0], #2
    len -= 2;
 8007ff2:	3902      	subs	r1, #2
    sum += *ps++;
 8007ff4:	441a      	add	r2, r3
    len -= 2;
 8007ff6:	e7e2      	b.n	8007fbe <lwip_standard_chksum+0x20>

08007ff8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8007ff8:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8007ffa:	2600      	movs	r6, #0
{
 8007ffc:	4605      	mov	r5, r0

  acc = 0;
 8007ffe:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 8008000:	b945      	cbnz	r5, 8008014 <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 8008002:	b126      	cbz	r6, 800800e <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 8008004:	0223      	lsls	r3, r4, #8
 8008006:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800800a:	b29b      	uxth	r3, r3
 800800c:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 800800e:	43e0      	mvns	r0, r4
}
 8008010:	b280      	uxth	r0, r0
 8008012:	bd70      	pop	{r4, r5, r6, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 8008014:	8969      	ldrh	r1, [r5, #10]
 8008016:	6868      	ldr	r0, [r5, #4]
 8008018:	f7ff ffc1 	bl	8007f9e <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 800801c:	896b      	ldrh	r3, [r5, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 800801e:	4404      	add	r4, r0
    if (q->len % 2 != 0) {
 8008020:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 8008022:	b2a0      	uxth	r0, r4
 8008024:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 8008028:	d506      	bpl.n	8008038 <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 800802a:	0223      	lsls	r3, r4, #8
 800802c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8008030:	f086 0601 	eor.w	r6, r6, #1
 8008034:	b29b      	uxth	r3, r3
 8008036:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 8008038:	682d      	ldr	r5, [r5, #0]
 800803a:	e7e1      	b.n	8008000 <inet_chksum_pbuf+0x8>

0800803c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800803c:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800803e:	f004 fdf1 	bl	800cc24 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008042:	f000 f80d 	bl	8008060 <mem_init>
  memp_init();
 8008046:	f000 fab7 	bl	80085b8 <memp_init>
  pbuf_init();
  netif_init();
 800804a:	f000 fb4d 	bl	80086e8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800804e:	f004 fa63 	bl	800c518 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008052:	f001 f80d 	bl	8009070 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8008056:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800805a:	f004 b9ed 	b.w	800c438 <sys_timeouts_init>
	...

08008060 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008060:	4b12      	ldr	r3, [pc, #72]	; (80080ac <mem_init+0x4c>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8008062:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8008066:	f04f 2128 	mov.w	r1, #671098880	; 0x28002800
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800806a:	4811      	ldr	r0, [pc, #68]	; (80080b0 <mem_init+0x50>)
 800806c:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008070:	300c      	adds	r0, #12
{
 8008072:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 8008074:	601a      	str	r2, [r3, #0]
  mem->used = 0;
 8008076:	2200      	movs	r2, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008078:	f840 3c0c 	str.w	r3, [r0, #-12]
  mem->used = 0;
 800807c:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 800807e:	f503 5220 	add.w	r2, r3, #10240	; 0x2800
  lfree = (struct mem *)(void *)ram;
 8008082:	f840 3c04 	str.w	r3, [r0, #-4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008086:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 8008088:	2101      	movs	r1, #1
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800808a:	f840 2c08 	str.w	r2, [r0, #-8]
  ram_end->used = 1;
 800808e:	7111      	strb	r1, [r2, #4]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008090:	f004 fdd4 	bl	800cc3c <sys_mutex_new>
 8008094:	b140      	cbz	r0, 80080a8 <mem_init+0x48>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8008096:	4b07      	ldr	r3, [pc, #28]	; (80080b4 <mem_init+0x54>)
 8008098:	f240 221f 	movw	r2, #543	; 0x21f
 800809c:	4906      	ldr	r1, [pc, #24]	; (80080b8 <mem_init+0x58>)
 800809e:	4807      	ldr	r0, [pc, #28]	; (80080bc <mem_init+0x5c>)
  }
}
 80080a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80080a4:	f005 bcf4 	b.w	800da90 <iprintf>
}
 80080a8:	bd10      	pop	{r4, pc}
 80080aa:	bf00      	nop
 80080ac:	2000a7f7 	.word	0x2000a7f7
 80080b0:	20006900 	.word	0x20006900
 80080b4:	0801387b 	.word	0x0801387b
 80080b8:	08013914 	.word	0x08013914
 80080bc:	08012bab 	.word	0x08012bab

080080c0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80080c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80080c2:	4604      	mov	r4, r0
 80080c4:	2800      	cmp	r0, #0
 80080c6:	f000 80b8 	beq.w	800823a <mem_free+0x17a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80080ca:	0783      	lsls	r3, r0, #30
 80080cc:	d00c      	beq.n	80080e8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80080ce:	4b5b      	ldr	r3, [pc, #364]	; (800823c <mem_free+0x17c>)
 80080d0:	f240 2273 	movw	r2, #627	; 0x273
 80080d4:	495a      	ldr	r1, [pc, #360]	; (8008240 <mem_free+0x180>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80080d6:	485b      	ldr	r0, [pc, #364]	; (8008244 <mem_free+0x184>)
 80080d8:	f005 fcda 	bl	800da90 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80080dc:	f004 fdd4 	bl	800cc88 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80080e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MEM_STATS_INC_LOCKED(illegal);
 80080e4:	f004 bddc 	b.w	800cca0 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80080e8:	4f57      	ldr	r7, [pc, #348]	; (8008248 <mem_free+0x188>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80080ea:	f1a0 0608 	sub.w	r6, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	463d      	mov	r5, r7
 80080f2:	42b3      	cmp	r3, r6
 80080f4:	d804      	bhi.n	8008100 <mem_free+0x40>
 80080f6:	f100 030c 	add.w	r3, r0, #12
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d204      	bcs.n	800810a <mem_free+0x4a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008100:	4b4e      	ldr	r3, [pc, #312]	; (800823c <mem_free+0x17c>)
 8008102:	f240 227f 	movw	r2, #639	; 0x27f
 8008106:	4951      	ldr	r1, [pc, #324]	; (800824c <mem_free+0x18c>)
 8008108:	e7e5      	b.n	80080d6 <mem_free+0x16>
  LWIP_MEM_FREE_PROTECT();
 800810a:	f107 000c 	add.w	r0, r7, #12
 800810e:	f004 fda3 	bl	800cc58 <sys_mutex_lock>
  if (!mem->used) {
 8008112:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8008116:	b95b      	cbnz	r3, 8008130 <mem_free+0x70>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008118:	4b48      	ldr	r3, [pc, #288]	; (800823c <mem_free+0x17c>)
 800811a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800811e:	494c      	ldr	r1, [pc, #304]	; (8008250 <mem_free+0x190>)
 8008120:	4848      	ldr	r0, [pc, #288]	; (8008244 <mem_free+0x184>)
 8008122:	f005 fcb5 	bl	800da90 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008126:	f107 000c 	add.w	r0, r7, #12
    LWIP_MEM_FREE_UNPROTECT();
 800812a:	f004 fd9a 	bl	800cc62 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800812e:	e7d5      	b.n	80080dc <mem_free+0x1c>
  nmem = ptr_to_mem(mem->next);
 8008130:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008134:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8008138:	d813      	bhi.n	8008162 <mem_free+0xa2>
  pmem = ptr_to_mem(mem->prev);
 800813a:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800813e:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 8008142:	d80e      	bhi.n	8008162 <mem_free+0xa2>
  return (mem_size_t)((u8_t *)mem - ram);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	1a73      	subs	r3, r6, r1
 8008148:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800814a:	4283      	cmp	r3, r0
 800814c:	d002      	beq.n	8008154 <mem_free+0x94>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800814e:	5a08      	ldrh	r0, [r1, r0]
 8008150:	4298      	cmp	r0, r3
 8008152:	d106      	bne.n	8008162 <mem_free+0xa2>
  return (struct mem *)(void *)&ram[ptr];
 8008154:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008156:	6868      	ldr	r0, [r5, #4]
 8008158:	4282      	cmp	r2, r0
 800815a:	d00b      	beq.n	8008174 <mem_free+0xb4>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800815c:	8852      	ldrh	r2, [r2, #2]
 800815e:	429a      	cmp	r2, r3
 8008160:	d008      	beq.n	8008174 <mem_free+0xb4>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008162:	4b36      	ldr	r3, [pc, #216]	; (800823c <mem_free+0x17c>)
 8008164:	f240 2295 	movw	r2, #661	; 0x295
 8008168:	493a      	ldr	r1, [pc, #232]	; (8008254 <mem_free+0x194>)
 800816a:	4836      	ldr	r0, [pc, #216]	; (8008244 <mem_free+0x184>)
 800816c:	f005 fc90 	bl	800da90 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008170:	4839      	ldr	r0, [pc, #228]	; (8008258 <mem_free+0x198>)
 8008172:	e7da      	b.n	800812a <mem_free+0x6a>
  mem->used = 0;
 8008174:	2300      	movs	r3, #0
 8008176:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800817a:	68ab      	ldr	r3, [r5, #8]
 800817c:	42b3      	cmp	r3, r6
    lfree = mem;
 800817e:	bf88      	it	hi
 8008180:	60ae      	strhi	r6, [r5, #8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008182:	428e      	cmp	r6, r1
 8008184:	d206      	bcs.n	8008194 <mem_free+0xd4>
 8008186:	4b2d      	ldr	r3, [pc, #180]	; (800823c <mem_free+0x17c>)
 8008188:	f240 12df 	movw	r2, #479	; 0x1df
 800818c:	4933      	ldr	r1, [pc, #204]	; (800825c <mem_free+0x19c>)
 800818e:	482d      	ldr	r0, [pc, #180]	; (8008244 <mem_free+0x184>)
 8008190:	f005 fc7e 	bl	800da90 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008194:	686b      	ldr	r3, [r5, #4]
 8008196:	429e      	cmp	r6, r3
 8008198:	d306      	bcc.n	80081a8 <mem_free+0xe8>
 800819a:	4b28      	ldr	r3, [pc, #160]	; (800823c <mem_free+0x17c>)
 800819c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80081a0:	492f      	ldr	r1, [pc, #188]	; (8008260 <mem_free+0x1a0>)
 80081a2:	4828      	ldr	r0, [pc, #160]	; (8008244 <mem_free+0x184>)
 80081a4:	f005 fc74 	bl	800da90 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80081a8:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80081ac:	b133      	cbz	r3, 80081bc <mem_free+0xfc>
 80081ae:	4b23      	ldr	r3, [pc, #140]	; (800823c <mem_free+0x17c>)
 80081b0:	f240 12e1 	movw	r2, #481	; 0x1e1
 80081b4:	492b      	ldr	r1, [pc, #172]	; (8008264 <mem_free+0x1a4>)
 80081b6:	4823      	ldr	r0, [pc, #140]	; (8008244 <mem_free+0x184>)
 80081b8:	f005 fc6a 	bl	800da90 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80081bc:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 80081c0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80081c4:	d906      	bls.n	80081d4 <mem_free+0x114>
 80081c6:	4b1d      	ldr	r3, [pc, #116]	; (800823c <mem_free+0x17c>)
 80081c8:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80081cc:	4926      	ldr	r1, [pc, #152]	; (8008268 <mem_free+0x1a8>)
 80081ce:	481d      	ldr	r0, [pc, #116]	; (8008244 <mem_free+0x184>)
 80081d0:	f005 fc5e 	bl	800da90 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80081da:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80081dc:	4296      	cmp	r6, r2
 80081de:	d012      	beq.n	8008206 <mem_free+0x146>
 80081e0:	7910      	ldrb	r0, [r2, #4]
 80081e2:	b980      	cbnz	r0, 8008206 <mem_free+0x146>
 80081e4:	6868      	ldr	r0, [r5, #4]
 80081e6:	4282      	cmp	r2, r0
 80081e8:	d00d      	beq.n	8008206 <mem_free+0x146>
    if (lfree == nmem) {
 80081ea:	68a8      	ldr	r0, [r5, #8]
 80081ec:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 80081ee:	5a5a      	ldrh	r2, [r3, r1]
 80081f0:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80081f4:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 80081f6:	bf08      	it	eq
 80081f8:	60ae      	streq	r6, [r5, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80081fa:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80081fe:	bf1e      	ittt	ne
 8008200:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8008202:	1af1      	subne	r1, r6, r3
 8008204:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8008206:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 800820a:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 800820c:	428e      	cmp	r6, r1
 800820e:	d00f      	beq.n	8008230 <mem_free+0x170>
 8008210:	7908      	ldrb	r0, [r1, #4]
 8008212:	b968      	cbnz	r0, 8008230 <mem_free+0x170>
    if (lfree == mem) {
 8008214:	68a8      	ldr	r0, [r5, #8]
 8008216:	4286      	cmp	r6, r0
      lfree = pmem;
 8008218:	bf08      	it	eq
 800821a:	60a9      	streq	r1, [r5, #8]
    pmem->next = mem->next;
 800821c:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8008220:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008222:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8008226:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800822a:	bf1c      	itt	ne
 800822c:	185b      	addne	r3, r3, r1
 800822e:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8008230:	4809      	ldr	r0, [pc, #36]	; (8008258 <mem_free+0x198>)
}
 8008232:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8008236:	f004 bd14 	b.w	800cc62 <sys_mutex_unlock>
}
 800823a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800823c:	0801387b 	.word	0x0801387b
 8008240:	0801392f 	.word	0x0801392f
 8008244:	08012bab 	.word	0x08012bab
 8008248:	20006900 	.word	0x20006900
 800824c:	08013950 	.word	0x08013950
 8008250:	08013969 	.word	0x08013969
 8008254:	0801398f 	.word	0x0801398f
 8008258:	2000690c 	.word	0x2000690c
 800825c:	080139c1 	.word	0x080139c1
 8008260:	080139d8 	.word	0x080139d8
 8008264:	080139f2 	.word	0x080139f2
 8008268:	08013a0d 	.word	0x08013a0d

0800826c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800826c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008270:	1ccc      	adds	r4, r1, #3
{
 8008272:	4605      	mov	r5, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008274:	f024 0403 	bic.w	r4, r4, #3
 8008278:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 800827a:	2c0b      	cmp	r4, #11
 800827c:	d904      	bls.n	8008288 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800827e:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 8008282:	d902      	bls.n	800828a <mem_trim+0x1e>
    return NULL;
 8008284:	2500      	movs	r5, #0
 8008286:	e01a      	b.n	80082be <mem_trim+0x52>
    newsize = MIN_SIZE_ALIGNED;
 8008288:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800828a:	42a1      	cmp	r1, r4
 800828c:	d8fa      	bhi.n	8008284 <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800828e:	4e47      	ldr	r6, [pc, #284]	; (80083ac <mem_trim+0x140>)
 8008290:	6833      	ldr	r3, [r6, #0]
 8008292:	42ab      	cmp	r3, r5
 8008294:	d802      	bhi.n	800829c <mem_trim+0x30>
 8008296:	6873      	ldr	r3, [r6, #4]
 8008298:	42ab      	cmp	r3, r5
 800829a:	d806      	bhi.n	80082aa <mem_trim+0x3e>
 800829c:	4b44      	ldr	r3, [pc, #272]	; (80083b0 <mem_trim+0x144>)
 800829e:	f240 22d1 	movw	r2, #721	; 0x2d1
 80082a2:	4944      	ldr	r1, [pc, #272]	; (80083b4 <mem_trim+0x148>)
 80082a4:	4844      	ldr	r0, [pc, #272]	; (80083b8 <mem_trim+0x14c>)
 80082a6:	f005 fbf3 	bl	800da90 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80082aa:	6833      	ldr	r3, [r6, #0]
 80082ac:	42ab      	cmp	r3, r5
 80082ae:	d802      	bhi.n	80082b6 <mem_trim+0x4a>
 80082b0:	6872      	ldr	r2, [r6, #4]
 80082b2:	42aa      	cmp	r2, r5
 80082b4:	d806      	bhi.n	80082c4 <mem_trim+0x58>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80082b6:	f004 fce7 	bl	800cc88 <sys_arch_protect>
 80082ba:	f004 fcf1 	bl	800cca0 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 80082be:	4628      	mov	r0, r5
 80082c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80082c4:	f1a5 0708 	sub.w	r7, r5, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80082c8:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 80082cc:	1aff      	subs	r7, r7, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80082ce:	f1a8 0808 	sub.w	r8, r8, #8
  return (mem_size_t)((u8_t *)mem - ram);
 80082d2:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80082d4:	eba8 0807 	sub.w	r8, r8, r7
 80082d8:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80082dc:	45a0      	cmp	r8, r4
 80082de:	d207      	bcs.n	80082f0 <mem_trim+0x84>
 80082e0:	4b33      	ldr	r3, [pc, #204]	; (80083b0 <mem_trim+0x144>)
 80082e2:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80082e6:	4935      	ldr	r1, [pc, #212]	; (80083bc <mem_trim+0x150>)
 80082e8:	4833      	ldr	r0, [pc, #204]	; (80083b8 <mem_trim+0x14c>)
 80082ea:	f005 fbd1 	bl	800da90 <iprintf>
  if (newsize > size) {
 80082ee:	e7c9      	b.n	8008284 <mem_trim+0x18>
  if (newsize == size) {
 80082f0:	d0e5      	beq.n	80082be <mem_trim+0x52>
  LWIP_MEM_FREE_PROTECT();
 80082f2:	4833      	ldr	r0, [pc, #204]	; (80083c0 <mem_trim+0x154>)
 80082f4:	f004 fcb0 	bl	800cc58 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 80082f8:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 80082fc:	f8d6 b000 	ldr.w	fp, [r6]
 8008300:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 8008304:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8008308:	bb3b      	cbnz	r3, 800835a <mem_trim+0xee>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800830a:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
 800830e:	d106      	bne.n	800831e <mem_trim+0xb2>
 8008310:	4b27      	ldr	r3, [pc, #156]	; (80083b0 <mem_trim+0x144>)
 8008312:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008316:	492b      	ldr	r1, [pc, #172]	; (80083c4 <mem_trim+0x158>)
 8008318:	4827      	ldr	r0, [pc, #156]	; (80083b8 <mem_trim+0x14c>)
 800831a:	f005 fbb9 	bl	800da90 <iprintf>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800831e:	f107 0308 	add.w	r3, r7, #8
    if (lfree == mem2) {
 8008322:	68b1      	ldr	r1, [r6, #8]
    next = mem2->next;
 8008324:	f83b 0009 	ldrh.w	r0, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008328:	441c      	add	r4, r3
 800832a:	6833      	ldr	r3, [r6, #0]
    if (lfree == mem2) {
 800832c:	4551      	cmp	r1, sl
    mem2->used = 0;
 800832e:	f04f 0100 	mov.w	r1, #0
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008332:	b2a2      	uxth	r2, r4
  return (struct mem *)(void *)&ram[ptr];
 8008334:	fa13 f484 	uxtah	r4, r3, r4
    mem2->used = 0;
 8008338:	7121      	strb	r1, [r4, #4]
    mem2->next = next;
 800833a:	5298      	strh	r0, [r3, r2]
    mem2->prev = ptr;
 800833c:	8067      	strh	r7, [r4, #2]
    mem->next = ptr2;
 800833e:	f825 2c08 	strh.w	r2, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008342:	5a99      	ldrh	r1, [r3, r2]
      lfree = ptr_to_mem(ptr2);
 8008344:	bf08      	it	eq
 8008346:	60b4      	streq	r4, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008348:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
 800834c:	d001      	beq.n	8008352 <mem_trim+0xe6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800834e:	440b      	add	r3, r1
 8008350:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8008352:	481b      	ldr	r0, [pc, #108]	; (80083c0 <mem_trim+0x154>)
 8008354:	f004 fc85 	bl	800cc62 <sys_mutex_unlock>
  return rmem;
 8008358:	e7b1      	b.n	80082be <mem_trim+0x52>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800835a:	f104 0314 	add.w	r3, r4, #20
 800835e:	4543      	cmp	r3, r8
 8008360:	d8f7      	bhi.n	8008352 <mem_trim+0xe6>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008362:	f107 0308 	add.w	r3, r7, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008366:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800836a:	441c      	add	r4, r3
 800836c:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800836e:	d106      	bne.n	800837e <mem_trim+0x112>
 8008370:	4b0f      	ldr	r3, [pc, #60]	; (80083b0 <mem_trim+0x144>)
 8008372:	f240 3216 	movw	r2, #790	; 0x316
 8008376:	4913      	ldr	r1, [pc, #76]	; (80083c4 <mem_trim+0x158>)
 8008378:	480f      	ldr	r0, [pc, #60]	; (80083b8 <mem_trim+0x14c>)
 800837a:	f005 fb89 	bl	800da90 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800837e:	6833      	ldr	r3, [r6, #0]
    if (mem2 < lfree) {
 8008380:	68b1      	ldr	r1, [r6, #8]
  return (struct mem *)(void *)&ram[ptr];
 8008382:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 8008384:	4291      	cmp	r1, r2
    mem2->used = 0;
 8008386:	f04f 0100 	mov.w	r1, #0
 800838a:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 800838c:	f835 1c08 	ldrh.w	r1, [r5, #-8]
      lfree = mem2;
 8008390:	bf88      	it	hi
 8008392:	60b2      	strhi	r2, [r6, #8]
    mem2->next = mem->next;
 8008394:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8008396:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8008398:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800839c:	5b1a      	ldrh	r2, [r3, r4]
 800839e:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem2->next)->prev = ptr2;
 80083a2:	bf1c      	itt	ne
 80083a4:	189b      	addne	r3, r3, r2
 80083a6:	805c      	strhne	r4, [r3, #2]
 80083a8:	e7d3      	b.n	8008352 <mem_trim+0xe6>
 80083aa:	bf00      	nop
 80083ac:	20006900 	.word	0x20006900
 80083b0:	0801387b 	.word	0x0801387b
 80083b4:	08013a37 	.word	0x08013a37
 80083b8:	08012bab 	.word	0x08012bab
 80083bc:	08013a4e 	.word	0x08013a4e
 80083c0:	2000690c 	.word	0x2000690c
 80083c4:	08013a6e 	.word	0x08013a6e

080083c8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80083c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80083cc:	2800      	cmp	r0, #0
 80083ce:	f000 8088 	beq.w	80084e2 <mem_malloc+0x11a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80083d2:	1cc5      	adds	r5, r0, #3
 80083d4:	f025 0503 	bic.w	r5, r5, #3
 80083d8:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 80083da:	2d0b      	cmp	r5, #11
 80083dc:	d904      	bls.n	80083e8 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80083de:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 80083e2:	d902      	bls.n	80083ea <mem_malloc+0x22>
    return NULL;
 80083e4:	2000      	movs	r0, #0
 80083e6:	e07c      	b.n	80084e2 <mem_malloc+0x11a>
    size = MIN_SIZE_ALIGNED;
 80083e8:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80083ea:	42a8      	cmp	r0, r5
 80083ec:	d8fa      	bhi.n	80083e4 <mem_malloc+0x1c>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80083ee:	4f42      	ldr	r7, [pc, #264]	; (80084f8 <mem_malloc+0x130>)
 80083f0:	f107 000c 	add.w	r0, r7, #12
 80083f4:	f004 fc30 	bl	800cc58 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	68be      	ldr	r6, [r7, #8]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80083fc:	f5c5 5020 	rsb	r0, r5, #10240	; 0x2800
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008400:	f06f 0c07 	mvn.w	ip, #7
  return (mem_size_t)((u8_t *)mem - ram);
 8008404:	1ab6      	subs	r6, r6, r2
 8008406:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008408:	4286      	cmp	r6, r0
 800840a:	d303      	bcc.n	8008414 <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800840c:	483b      	ldr	r0, [pc, #236]	; (80084fc <mem_malloc+0x134>)
 800840e:	f004 fc28 	bl	800cc62 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008412:	e7e7      	b.n	80083e4 <mem_malloc+0x1c>
  return (struct mem *)(void *)&ram[ptr];
 8008414:	1994      	adds	r4, r2, r6
      if ((!mem->used) &&
 8008416:	5b91      	ldrh	r1, [r2, r6]
 8008418:	7923      	ldrb	r3, [r4, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d169      	bne.n	80084f2 <mem_malloc+0x12a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800841e:	ebac 0306 	sub.w	r3, ip, r6
 8008422:	440b      	add	r3, r1
      if ((!mem->used) &&
 8008424:	42ab      	cmp	r3, r5
 8008426:	d364      	bcc.n	80084f2 <mem_malloc+0x12a>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008428:	f105 0214 	add.w	r2, r5, #20
 800842c:	4293      	cmp	r3, r2
 800842e:	d35a      	bcc.n	80084e6 <mem_malloc+0x11e>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008430:	f105 0808 	add.w	r8, r5, #8
 8008434:	44b0      	add	r8, r6
 8008436:	fa1f f888 	uxth.w	r8, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800843a:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 800843e:	d106      	bne.n	800844e <mem_malloc+0x86>
 8008440:	4b2f      	ldr	r3, [pc, #188]	; (8008500 <mem_malloc+0x138>)
 8008442:	f240 3287 	movw	r2, #903	; 0x387
 8008446:	492f      	ldr	r1, [pc, #188]	; (8008504 <mem_malloc+0x13c>)
 8008448:	482f      	ldr	r0, [pc, #188]	; (8008508 <mem_malloc+0x140>)
 800844a:	f005 fb21 	bl	800da90 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800844e:	683b      	ldr	r3, [r7, #0]
          mem2->used = 0;
 8008450:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 8008452:	eb03 0208 	add.w	r2, r3, r8
          mem2->used = 0;
 8008456:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8008458:	8821      	ldrh	r1, [r4, #0]
 800845a:	f823 1008 	strh.w	r1, [r3, r8]
          mem2->prev = ptr;
 800845e:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 8008460:	2201      	movs	r2, #1
          mem->next = ptr2;
 8008462:	f8a4 8000 	strh.w	r8, [r4]
          mem->used = 1;
 8008466:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008468:	f833 2008 	ldrh.w	r2, [r3, r8]
 800846c:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8008470:	d002      	beq.n	8008478 <mem_malloc+0xb0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008472:	4413      	add	r3, r2
 8008474:	f8a3 8002 	strh.w	r8, [r3, #2]
        if (mem == lfree) {
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	42a3      	cmp	r3, r4
 800847c:	d110      	bne.n	80084a0 <mem_malloc+0xd8>
  return (struct mem *)(void *)&ram[ptr];
 800847e:	e9d7 0100 	ldrd	r0, r1, [r7]
          while (cur->used && cur != ram_end) {
 8008482:	791a      	ldrb	r2, [r3, #4]
 8008484:	b10a      	cbz	r2, 800848a <mem_malloc+0xc2>
 8008486:	4299      	cmp	r1, r3
 8008488:	d130      	bne.n	80084ec <mem_malloc+0x124>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800848a:	4299      	cmp	r1, r3
          lfree = cur;
 800848c:	60bb      	str	r3, [r7, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800848e:	d007      	beq.n	80084a0 <mem_malloc+0xd8>
 8008490:	b132      	cbz	r2, 80084a0 <mem_malloc+0xd8>
 8008492:	4b1b      	ldr	r3, [pc, #108]	; (8008500 <mem_malloc+0x138>)
 8008494:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008498:	491c      	ldr	r1, [pc, #112]	; (800850c <mem_malloc+0x144>)
 800849a:	481b      	ldr	r0, [pc, #108]	; (8008508 <mem_malloc+0x140>)
 800849c:	f005 faf8 	bl	800da90 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80084a0:	3508      	adds	r5, #8
        sys_mutex_unlock(&mem_mutex);
 80084a2:	4816      	ldr	r0, [pc, #88]	; (80084fc <mem_malloc+0x134>)
 80084a4:	f004 fbdd 	bl	800cc62 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4425      	add	r5, r4
 80084ac:	42ab      	cmp	r3, r5
 80084ae:	d206      	bcs.n	80084be <mem_malloc+0xf6>
 80084b0:	4b13      	ldr	r3, [pc, #76]	; (8008500 <mem_malloc+0x138>)
 80084b2:	f240 32b9 	movw	r2, #953	; 0x3b9
 80084b6:	4916      	ldr	r1, [pc, #88]	; (8008510 <mem_malloc+0x148>)
 80084b8:	4813      	ldr	r0, [pc, #76]	; (8008508 <mem_malloc+0x140>)
 80084ba:	f005 fae9 	bl	800da90 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80084be:	07a3      	lsls	r3, r4, #30
 80084c0:	d00d      	beq.n	80084de <mem_malloc+0x116>
 80084c2:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <mem_malloc+0x138>)
 80084c4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80084c8:	4912      	ldr	r1, [pc, #72]	; (8008514 <mem_malloc+0x14c>)
 80084ca:	480f      	ldr	r0, [pc, #60]	; (8008508 <mem_malloc+0x140>)
 80084cc:	f005 fae0 	bl	800da90 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80084d0:	4b0b      	ldr	r3, [pc, #44]	; (8008500 <mem_malloc+0x138>)
 80084d2:	f240 32bd 	movw	r2, #957	; 0x3bd
 80084d6:	4910      	ldr	r1, [pc, #64]	; (8008518 <mem_malloc+0x150>)
 80084d8:	480b      	ldr	r0, [pc, #44]	; (8008508 <mem_malloc+0x140>)
 80084da:	f005 fad9 	bl	800da90 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80084de:	f104 0008 	add.w	r0, r4, #8
}
 80084e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 80084e6:	2301      	movs	r3, #1
 80084e8:	7123      	strb	r3, [r4, #4]
 80084ea:	e7c5      	b.n	8008478 <mem_malloc+0xb0>
  return (struct mem *)(void *)&ram[ptr];
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	4403      	add	r3, r0
 80084f0:	e7c7      	b.n	8008482 <mem_malloc+0xba>
    size = MIN_SIZE_ALIGNED;
 80084f2:	460e      	mov	r6, r1
 80084f4:	e788      	b.n	8008408 <mem_malloc+0x40>
 80084f6:	bf00      	nop
 80084f8:	20006900 	.word	0x20006900
 80084fc:	2000690c 	.word	0x2000690c
 8008500:	0801387b 	.word	0x0801387b
 8008504:	08013a6e 	.word	0x08013a6e
 8008508:	08012bab 	.word	0x08012bab
 800850c:	08013a7f 	.word	0x08013a7f
 8008510:	08013a98 	.word	0x08013a98
 8008514:	08013ac8 	.word	0x08013ac8
 8008518:	08013af7 	.word	0x08013af7

0800851c <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 800851c:	b538      	push	{r3, r4, r5, lr}
 800851e:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008520:	f004 fbb2 	bl	800cc88 <sys_arch_protect>
 8008524:	4605      	mov	r5, r0

  memp = *desc->tab;
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800852a:	b15c      	cbz	r4, 8008544 <do_memp_malloc_pool.isra.0+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800852c:	6822      	ldr	r2, [r4, #0]
 800852e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008530:	07a3      	lsls	r3, r4, #30
 8008532:	d006      	beq.n	8008542 <do_memp_malloc_pool.isra.0+0x26>
 8008534:	4b05      	ldr	r3, [pc, #20]	; (800854c <do_memp_malloc_pool.isra.0+0x30>)
 8008536:	f44f 728c 	mov.w	r2, #280	; 0x118
 800853a:	4905      	ldr	r1, [pc, #20]	; (8008550 <do_memp_malloc_pool.isra.0+0x34>)
 800853c:	4805      	ldr	r0, [pc, #20]	; (8008554 <do_memp_malloc_pool.isra.0+0x38>)
 800853e:	f005 faa7 	bl	800da90 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008542:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008544:	f004 fbac 	bl	800cca0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8008548:	4620      	mov	r0, r4
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	08013b1a 	.word	0x08013b1a
 8008550:	08013bb4 	.word	0x08013bb4
 8008554:	08012bab 	.word	0x08012bab

08008558 <do_memp_free_pool.isra.0>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8008558:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800855a:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 800855c:	4605      	mov	r5, r0
 800855e:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8008560:	d006      	beq.n	8008570 <do_memp_free_pool.isra.0+0x18>
 8008562:	4b08      	ldr	r3, [pc, #32]	; (8008584 <do_memp_free_pool.isra.0+0x2c>)
 8008564:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008568:	4907      	ldr	r1, [pc, #28]	; (8008588 <do_memp_free_pool.isra.0+0x30>)
 800856a:	4808      	ldr	r0, [pc, #32]	; (800858c <do_memp_free_pool.isra.0+0x34>)
 800856c:	f005 fa90 	bl	800da90 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8008570:	f004 fb8a 	bl	800cc88 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008574:	682b      	ldr	r3, [r5, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800857a:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800857c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8008580:	f004 bb8e 	b.w	800cca0 <sys_arch_unprotect>
 8008584:	08013b1a 	.word	0x08013b1a
 8008588:	08013bd7 	.word	0x08013bd7
 800858c:	08012bab 	.word	0x08012bab

08008590 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008590:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8008592:	2200      	movs	r2, #0
 8008594:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008596:	3303      	adds	r3, #3
{
 8008598:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800859a:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800859e:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 80085a0:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 80085a2:	4294      	cmp	r4, r2
 80085a4:	dc00      	bgt.n	80085a8 <memp_init_pool+0x18>
}
 80085a6:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 80085a8:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 80085aa:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 80085ac:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80085ae:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 80085b0:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80085b2:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 80085b4:	e7f5      	b.n	80085a2 <memp_init_pool+0x12>
	...

080085b8 <memp_init>:
{
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	4d05      	ldr	r5, [pc, #20]	; (80085d0 <memp_init+0x18>)
 80085bc:	240d      	movs	r4, #13
    memp_init_pool(memp_pools[i]);
 80085be:	3c01      	subs	r4, #1
 80085c0:	f855 0b04 	ldr.w	r0, [r5], #4
 80085c4:	f7ff ffe4 	bl	8008590 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80085c8:	b2a4      	uxth	r4, r4
 80085ca:	2c00      	cmp	r4, #0
 80085cc:	d1f7      	bne.n	80085be <memp_init+0x6>
}
 80085ce:	bd38      	pop	{r3, r4, r5, pc}
 80085d0:	08012930 	.word	0x08012930

080085d4 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80085d4:	280c      	cmp	r0, #12
{
 80085d6:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80085d8:	d807      	bhi.n	80085ea <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 80085da:	4b08      	ldr	r3, [pc, #32]	; (80085fc <memp_malloc+0x28>)
 80085dc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 80085e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80085e4:	3008      	adds	r0, #8
 80085e6:	f7ff bf99 	b.w	800851c <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80085ea:	4b05      	ldr	r3, [pc, #20]	; (8008600 <memp_malloc+0x2c>)
 80085ec:	f240 1257 	movw	r2, #343	; 0x157
 80085f0:	4904      	ldr	r1, [pc, #16]	; (8008604 <memp_malloc+0x30>)
 80085f2:	4805      	ldr	r0, [pc, #20]	; (8008608 <memp_malloc+0x34>)
 80085f4:	f005 fa4c 	bl	800da90 <iprintf>
}
 80085f8:	2000      	movs	r0, #0
 80085fa:	bd08      	pop	{r3, pc}
 80085fc:	08012930 	.word	0x08012930
 8008600:	08013b1a 	.word	0x08013b1a
 8008604:	08013c09 	.word	0x08013c09
 8008608:	08012bab 	.word	0x08012bab

0800860c <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800860c:	280c      	cmp	r0, #12
 800860e:	d906      	bls.n	800861e <memp_free+0x12>
 8008610:	4b07      	ldr	r3, [pc, #28]	; (8008630 <memp_free+0x24>)
 8008612:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008616:	4907      	ldr	r1, [pc, #28]	; (8008634 <memp_free+0x28>)
 8008618:	4807      	ldr	r0, [pc, #28]	; (8008638 <memp_free+0x2c>)
 800861a:	f005 ba39 	b.w	800da90 <iprintf>

  if (mem == NULL) {
 800861e:	b129      	cbz	r1, 800862c <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008620:	4b06      	ldr	r3, [pc, #24]	; (800863c <memp_free+0x30>)
 8008622:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008626:	3008      	adds	r0, #8
 8008628:	f7ff bf96 	b.w	8008558 <do_memp_free_pool.isra.0>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	08013b1a 	.word	0x08013b1a
 8008634:	08013c26 	.word	0x08013c26
 8008638:	08012bab 	.word	0x08012bab
 800863c:	08012930 	.word	0x08012930

08008640 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8008640:	f06f 000b 	mvn.w	r0, #11
 8008644:	4770      	bx	lr
	...

08008648 <netif_issue_reports>:
{
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800864c:	4604      	mov	r4, r0
 800864e:	b930      	cbnz	r0, 800865e <netif_issue_reports+0x16>
 8008650:	4b0c      	ldr	r3, [pc, #48]	; (8008684 <netif_issue_reports+0x3c>)
 8008652:	f240 326d 	movw	r2, #877	; 0x36d
 8008656:	490c      	ldr	r1, [pc, #48]	; (8008688 <netif_issue_reports+0x40>)
 8008658:	480c      	ldr	r0, [pc, #48]	; (800868c <netif_issue_reports+0x44>)
 800865a:	f005 fa19 	bl	800da90 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800865e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8008662:	f003 0205 	and.w	r2, r3, #5
 8008666:	2a05      	cmp	r2, #5
 8008668:	d10b      	bne.n	8008682 <netif_issue_reports+0x3a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800866a:	07ea      	lsls	r2, r5, #31
 800866c:	d509      	bpl.n	8008682 <netif_issue_reports+0x3a>
 800866e:	6862      	ldr	r2, [r4, #4]
 8008670:	b13a      	cbz	r2, 8008682 <netif_issue_reports+0x3a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008672:	071b      	lsls	r3, r3, #28
 8008674:	d505      	bpl.n	8008682 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8008676:	1d21      	adds	r1, r4, #4
 8008678:	4620      	mov	r0, r4
}
 800867a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 800867e:	f7fe bbfd 	b.w	8006e7c <etharp_request>
}
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	08013c41 	.word	0x08013c41
 8008688:	08013cdc 	.word	0x08013cdc
 800868c:	08012bab 	.word	0x08012bab

08008690 <netif_do_set_ipaddr>:
{
 8008690:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008692:	4605      	mov	r5, r0
 8008694:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008696:	460c      	mov	r4, r1
 8008698:	b931      	cbnz	r1, 80086a8 <netif_do_set_ipaddr+0x18>
 800869a:	4b10      	ldr	r3, [pc, #64]	; (80086dc <netif_do_set_ipaddr+0x4c>)
 800869c:	f240 12cb 	movw	r2, #459	; 0x1cb
 80086a0:	490f      	ldr	r1, [pc, #60]	; (80086e0 <netif_do_set_ipaddr+0x50>)
 80086a2:	4810      	ldr	r0, [pc, #64]	; (80086e4 <netif_do_set_ipaddr+0x54>)
 80086a4:	f005 f9f4 	bl	800da90 <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80086a8:	686b      	ldr	r3, [r5, #4]
 80086aa:	6822      	ldr	r2, [r4, #0]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d101      	bne.n	80086b4 <netif_do_set_ipaddr+0x24>
  return 0; /* address unchanged */
 80086b0:	2000      	movs	r0, #0
 80086b2:	e010      	b.n	80086d6 <netif_do_set_ipaddr+0x46>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80086b4:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80086b6:	a901      	add	r1, sp, #4
 80086b8:	4630      	mov	r0, r6
    *ip_2_ip4(&new_addr) = *ipaddr;
 80086ba:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80086bc:	f001 fc96 	bl	8009fec <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80086c0:	a901      	add	r1, sp, #4
 80086c2:	4630      	mov	r0, r6
 80086c4:	f004 f9ce 	bl	800ca64 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80086c8:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80086ca:	4628      	mov	r0, r5
 80086cc:	2101      	movs	r1, #1
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80086ce:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80086d0:	f7ff ffba 	bl	8008648 <netif_issue_reports>
    return 1; /* address changed */
 80086d4:	2001      	movs	r0, #1
}
 80086d6:	b002      	add	sp, #8
 80086d8:	bd70      	pop	{r4, r5, r6, pc}
 80086da:	bf00      	nop
 80086dc:	08013c41 	.word	0x08013c41
 80086e0:	08013cff 	.word	0x08013cff
 80086e4:	08012bab 	.word	0x08012bab

080086e8 <netif_init>:
}
 80086e8:	4770      	bx	lr
	...

080086ec <netif_set_addr>:
{
 80086ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 80086ee:	4f14      	ldr	r7, [pc, #80]	; (8008740 <netif_set_addr+0x54>)
{
 80086f0:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 80086f2:	2900      	cmp	r1, #0
 80086f4:	bf14      	ite	ne
 80086f6:	460d      	movne	r5, r1
 80086f8:	463d      	moveq	r5, r7
    netmask = IP4_ADDR_ANY4;
 80086fa:	2a00      	cmp	r2, #0
 80086fc:	bf14      	ite	ne
 80086fe:	4616      	movne	r6, r2
 8008700:	463e      	moveq	r6, r7
    gw = IP4_ADDR_ANY4;
 8008702:	2b00      	cmp	r3, #0
 8008704:	bf18      	it	ne
 8008706:	461f      	movne	r7, r3
  remove = ip4_addr_isany(ipaddr);
 8008708:	682b      	ldr	r3, [r5, #0]
 800870a:	b9b3      	cbnz	r3, 800873a <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800870c:	aa01      	add	r2, sp, #4
 800870e:	4629      	mov	r1, r5
 8008710:	f7ff ffbe 	bl	8008690 <netif_do_set_ipaddr>
 8008714:	2301      	movs	r3, #1
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008716:	6832      	ldr	r2, [r6, #0]
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008718:	68a1      	ldr	r1, [r4, #8]
 800871a:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800871c:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800871e:	bf18      	it	ne
 8008720:	60a2      	strne	r2, [r4, #8]
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008722:	683a      	ldr	r2, [r7, #0]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008724:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008726:	bf18      	it	ne
 8008728:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 800872a:	b923      	cbnz	r3, 8008736 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800872c:	aa01      	add	r2, sp, #4
 800872e:	4629      	mov	r1, r5
 8008730:	4620      	mov	r0, r4
 8008732:	f7ff ffad 	bl	8008690 <netif_do_set_ipaddr>
}
 8008736:	b003      	add	sp, #12
 8008738:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 800873a:	2300      	movs	r3, #0
 800873c:	e7eb      	b.n	8008716 <netif_set_addr+0x2a>
 800873e:	bf00      	nop
 8008740:	0801292c 	.word	0x0801292c

08008744 <netif_add>:
{
 8008744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008748:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800874a:	4698      	mov	r8, r3
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800874c:	4604      	mov	r4, r0
 800874e:	b948      	cbnz	r0, 8008764 <netif_add+0x20>
 8008750:	4b3e      	ldr	r3, [pc, #248]	; (800884c <netif_add+0x108>)
 8008752:	f240 1227 	movw	r2, #295	; 0x127
 8008756:	493e      	ldr	r1, [pc, #248]	; (8008850 <netif_add+0x10c>)
 8008758:	483e      	ldr	r0, [pc, #248]	; (8008854 <netif_add+0x110>)
 800875a:	f005 f999 	bl	800da90 <iprintf>
}
 800875e:	4620      	mov	r0, r4
 8008760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008764:	b947      	cbnz	r7, 8008778 <netif_add+0x34>
 8008766:	4b39      	ldr	r3, [pc, #228]	; (800884c <netif_add+0x108>)
 8008768:	f44f 7294 	mov.w	r2, #296	; 0x128
 800876c:	493a      	ldr	r1, [pc, #232]	; (8008858 <netif_add+0x114>)
 800876e:	463c      	mov	r4, r7
 8008770:	4838      	ldr	r0, [pc, #224]	; (8008854 <netif_add+0x110>)
 8008772:	f005 f98d 	bl	800da90 <iprintf>
 8008776:	e7f2      	b.n	800875e <netif_add+0x1a>
  netif->output = netif_null_output_ip4;
 8008778:	4e38      	ldr	r6, [pc, #224]	; (800885c <netif_add+0x118>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800877a:	2500      	movs	r5, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800877c:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8008868 <netif_add+0x124>
  netif->output = netif_null_output_ip4;
 8008780:	6146      	str	r6, [r0, #20]
  netif->state = state;
 8008782:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008784:	42aa      	cmp	r2, r5
 8008786:	bf08      	it	eq
 8008788:	4662      	moveq	r2, ip
  netif->input = input;
 800878a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 800878c:	42a9      	cmp	r1, r5
 800878e:	bf08      	it	eq
 8008790:	4661      	moveq	r1, ip
  netif->state = state;
 8008792:	6206      	str	r6, [r0, #32]
  netif->num = netif_num;
 8008794:	4e32      	ldr	r6, [pc, #200]	; (8008860 <netif_add+0x11c>)
  netif->input = input;
 8008796:	6103      	str	r3, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008798:	45a8      	cmp	r8, r5
 800879a:	bf14      	ite	ne
 800879c:	4643      	movne	r3, r8
 800879e:	4663      	moveq	r3, ip
  netif->num = netif_num;
 80087a0:	f896 e000 	ldrb.w	lr, [r6]
  ip_addr_set_zero_ip4(&netif->gw);
 80087a4:	60c5      	str	r5, [r0, #12]
  netif->mtu = 0;
 80087a6:	8505      	strh	r5, [r0, #40]	; 0x28
  netif->flags = 0;
 80087a8:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80087ac:	6245      	str	r5, [r0, #36]	; 0x24
  netif->link_callback = NULL;
 80087ae:	61c5      	str	r5, [r0, #28]
  netif->num = netif_num;
 80087b0:	f880 e034 	strb.w	lr, [r0, #52]	; 0x34
  ip_addr_set_zero_ip4(&netif->netmask);
 80087b4:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80087b8:	f7ff ff98 	bl	80086ec <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80087bc:	4620      	mov	r0, r4
 80087be:	47b8      	blx	r7
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d140      	bne.n	8008846 <netif_add+0x102>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80087c4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800886c <netif_add+0x128>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80087c8:	4b20      	ldr	r3, [pc, #128]	; (800884c <netif_add+0x108>)
 80087ca:	46c8      	mov	r8, r9
      if (netif->num == 255) {
 80087cc:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
      num_netifs = 0;
 80087d0:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80087d2:	f8d9 5000 	ldr.w	r5, [r9]
      if (netif->num == 255) {
 80087d6:	2aff      	cmp	r2, #255	; 0xff
        LWIP_ASSERT("netif already added", netif2 != netif);
 80087d8:	f8df b094 	ldr.w	fp, [pc, #148]	; 8008870 <netif_add+0x12c>
 80087dc:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008854 <netif_add+0x110>
        netif->num = 0;
 80087e0:	bf04      	itt	eq
 80087e2:	2200      	moveq	r2, #0
 80087e4:	f884 2034 	strbeq.w	r2, [r4, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80087e8:	b92d      	cbnz	r5, 80087f6 <netif_add+0xb2>
  if (netif->num == 254) {
 80087ea:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80087ee:	2bfe      	cmp	r3, #254	; 0xfe
 80087f0:	d120      	bne.n	8008834 <netif_add+0xf0>
    netif_num = 0;
 80087f2:	462b      	mov	r3, r5
 80087f4:	e020      	b.n	8008838 <netif_add+0xf4>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80087f6:	42a5      	cmp	r5, r4
 80087f8:	d106      	bne.n	8008808 <netif_add+0xc4>
 80087fa:	f240 128b 	movw	r2, #395	; 0x18b
 80087fe:	4659      	mov	r1, fp
 8008800:	4650      	mov	r0, sl
 8008802:	f005 f945 	bl	800da90 <iprintf>
 8008806:	4b11      	ldr	r3, [pc, #68]	; (800884c <netif_add+0x108>)
        num_netifs++;
 8008808:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800880a:	2fff      	cmp	r7, #255	; 0xff
 800880c:	dd06      	ble.n	800881c <netif_add+0xd8>
 800880e:	f240 128d 	movw	r2, #397	; 0x18d
 8008812:	4914      	ldr	r1, [pc, #80]	; (8008864 <netif_add+0x120>)
 8008814:	4650      	mov	r0, sl
 8008816:	f005 f93b 	bl	800da90 <iprintf>
 800881a:	4b0c      	ldr	r3, [pc, #48]	; (800884c <netif_add+0x108>)
        if (netif2->num == netif->num) {
 800881c:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8008820:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 8008824:	428a      	cmp	r2, r1
 8008826:	d103      	bne.n	8008830 <netif_add+0xec>
          netif->num++;
 8008828:	3201      	adds	r2, #1
 800882a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    } while (netif2 != NULL);
 800882e:	e7cd      	b.n	80087cc <netif_add+0x88>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008830:	682d      	ldr	r5, [r5, #0]
 8008832:	e7d9      	b.n	80087e8 <netif_add+0xa4>
    netif_num = (u8_t)(netif->num + 1);
 8008834:	3301      	adds	r3, #1
 8008836:	b2db      	uxtb	r3, r3
 8008838:	7033      	strb	r3, [r6, #0]
  netif->next = netif_list;
 800883a:	f8d8 3000 	ldr.w	r3, [r8]
 800883e:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 8008840:	f8c8 4000 	str.w	r4, [r8]
  return netif;
 8008844:	e78b      	b.n	800875e <netif_add+0x1a>
    return NULL;
 8008846:	462c      	mov	r4, r5
 8008848:	e789      	b.n	800875e <netif_add+0x1a>
 800884a:	bf00      	nop
 800884c:	08013c41 	.word	0x08013c41
 8008850:	08013da1 	.word	0x08013da1
 8008854:	08012bab 	.word	0x08012bab
 8008858:	08013dba 	.word	0x08013dba
 800885c:	08008641 	.word	0x08008641
 8008860:	20006944 	.word	0x20006944
 8008864:	08013df0 	.word	0x08013df0
 8008868:	0801292c 	.word	0x0801292c
 800886c:	20010d04 	.word	0x20010d04
 8008870:	08013ddc 	.word	0x08013ddc

08008874 <netif_set_default>:
  netif_default = netif;
 8008874:	4b01      	ldr	r3, [pc, #4]	; (800887c <netif_set_default+0x8>)
 8008876:	6018      	str	r0, [r3, #0]
}
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	20010d08 	.word	0x20010d08

08008880 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008880:	b930      	cbnz	r0, 8008890 <netif_set_up+0x10>
 8008882:	4b09      	ldr	r3, [pc, #36]	; (80088a8 <netif_set_up+0x28>)
 8008884:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008888:	4908      	ldr	r1, [pc, #32]	; (80088ac <netif_set_up+0x2c>)
 800888a:	4809      	ldr	r0, [pc, #36]	; (80088b0 <netif_set_up+0x30>)
 800888c:	f005 b900 	b.w	800da90 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008890:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 8008894:	07d1      	lsls	r1, r2, #31
 8008896:	d406      	bmi.n	80088a6 <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008898:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800889c:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800889e:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80088a2:	f7ff bed1 	b.w	8008648 <netif_issue_reports>
}
 80088a6:	4770      	bx	lr
 80088a8:	08013c41 	.word	0x08013c41
 80088ac:	08013e1e 	.word	0x08013e1e
 80088b0:	08012bab 	.word	0x08012bab

080088b4 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80088b4:	b930      	cbnz	r0, 80088c4 <netif_set_down+0x10>
 80088b6:	4b0a      	ldr	r3, [pc, #40]	; (80088e0 <netif_set_down+0x2c>)
 80088b8:	f240 329b 	movw	r2, #923	; 0x39b
 80088bc:	4909      	ldr	r1, [pc, #36]	; (80088e4 <netif_set_down+0x30>)
 80088be:	480a      	ldr	r0, [pc, #40]	; (80088e8 <netif_set_down+0x34>)
 80088c0:	f005 b8e6 	b.w	800da90 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 80088c4:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 80088c8:	07d1      	lsls	r1, r2, #31
 80088ca:	d507      	bpl.n	80088dc <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80088cc:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80088d0:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80088d2:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80088d6:	d501      	bpl.n	80088dc <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 80088d8:	f7fe ba12 	b.w	8006d00 <etharp_cleanup_netif>
}
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	08013c41 	.word	0x08013c41
 80088e4:	08013e3a 	.word	0x08013e3a
 80088e8:	08012bab 	.word	0x08012bab

080088ec <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80088ec:	4603      	mov	r3, r0
 80088ee:	b158      	cbz	r0, 8008908 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 80088f0:	4a06      	ldr	r2, [pc, #24]	; (800890c <netif_get_by_index+0x20>)
 80088f2:	6810      	ldr	r0, [r2, #0]
 80088f4:	b900      	cbnz	r0, 80088f8 <netif_get_by_index+0xc>
 80088f6:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 80088f8:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 80088fc:	3201      	adds	r2, #1
 80088fe:	b2d2      	uxtb	r2, r2
 8008900:	429a      	cmp	r2, r3
 8008902:	d001      	beq.n	8008908 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8008904:	6800      	ldr	r0, [r0, #0]
 8008906:	e7f5      	b.n	80088f4 <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	20010d04 	.word	0x20010d04

08008910 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf *q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8008910:	b110      	cbz	r0, 8008918 <pbuf_skip_const+0x8>
 8008912:	8943      	ldrh	r3, [r0, #10]
 8008914:	428b      	cmp	r3, r1
 8008916:	d902      	bls.n	800891e <pbuf_skip_const+0xe>
    offset_left = (u16_t)(offset_left - q->len);
    q = q->next;
  }
  if (out_offset != NULL) {
 8008918:	b102      	cbz	r2, 800891c <pbuf_skip_const+0xc>
    *out_offset = offset_left;
 800891a:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 800891c:	4770      	bx	lr
    offset_left = (u16_t)(offset_left - q->len);
 800891e:	1ac9      	subs	r1, r1, r3
    q = q->next;
 8008920:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8008922:	b289      	uxth	r1, r1
    q = q->next;
 8008924:	e7f4      	b.n	8008910 <pbuf_skip_const>
	...

08008928 <pbuf_add_header_impl>:
{
 8008928:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800892a:	b968      	cbnz	r0, 8008948 <pbuf_add_header_impl+0x20>
 800892c:	4b14      	ldr	r3, [pc, #80]	; (8008980 <pbuf_add_header_impl+0x58>)
 800892e:	f240 12df 	movw	r2, #479	; 0x1df
 8008932:	4914      	ldr	r1, [pc, #80]	; (8008984 <pbuf_add_header_impl+0x5c>)
 8008934:	4814      	ldr	r0, [pc, #80]	; (8008988 <pbuf_add_header_impl+0x60>)
 8008936:	f005 f8ab 	bl	800da90 <iprintf>
    return 1;
 800893a:	2001      	movs	r0, #1
 800893c:	e01f      	b.n	800897e <pbuf_add_header_impl+0x56>
    if (force) {
 800893e:	2a00      	cmp	r2, #0
 8008940:	d0fb      	beq.n	800893a <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 8008942:	6842      	ldr	r2, [r0, #4]
 8008944:	1a51      	subs	r1, r2, r1
 8008946:	e014      	b.n	8008972 <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008948:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800894c:	d2f5      	bcs.n	800893a <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 800894e:	b1a9      	cbz	r1, 800897c <pbuf_add_header_impl+0x54>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008950:	8903      	ldrh	r3, [r0, #8]
  increment_magnitude = (u16_t)header_size_increment;
 8008952:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008954:	fa13 f381 	uxtah	r3, r3, r1
 8008958:	b29b      	uxth	r3, r3
 800895a:	429c      	cmp	r4, r3
 800895c:	d8ed      	bhi.n	800893a <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800895e:	f990 500c 	ldrsb.w	r5, [r0, #12]
 8008962:	2d00      	cmp	r5, #0
 8008964:	daeb      	bge.n	800893e <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 8008966:	6842      	ldr	r2, [r0, #4]
 8008968:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800896a:	f100 0210 	add.w	r2, r0, #16
 800896e:	4291      	cmp	r1, r2
 8008970:	d3e3      	bcc.n	800893a <pbuf_add_header_impl+0x12>
  p->len = (u16_t)(p->len + increment_magnitude);
 8008972:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 8008974:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008976:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008978:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800897a:	8144      	strh	r4, [r0, #10]
  return 0;
 800897c:	2000      	movs	r0, #0
}
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	08013e9c 	.word	0x08013e9c
 8008984:	08013fd8 	.word	0x08013fd8
 8008988:	08012bab 	.word	0x08012bab

0800898c <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800898c:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8008990:	2b01      	cmp	r3, #1
{
 8008992:	b570      	push	{r4, r5, r6, lr}
 8008994:	4606      	mov	r6, r0
 8008996:	460d      	mov	r5, r1
 8008998:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800899a:	d006      	beq.n	80089aa <pbuf_alloc_reference+0x1e>
 800899c:	4b0a      	ldr	r3, [pc, #40]	; (80089c8 <pbuf_alloc_reference+0x3c>)
 800899e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80089a2:	490a      	ldr	r1, [pc, #40]	; (80089cc <pbuf_alloc_reference+0x40>)
 80089a4:	480a      	ldr	r0, [pc, #40]	; (80089d0 <pbuf_alloc_reference+0x44>)
 80089a6:	f005 f873 	bl	800da90 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80089aa:	200b      	movs	r0, #11
 80089ac:	f7ff fe12 	bl	80085d4 <memp_malloc>
  if (p == NULL) {
 80089b0:	b140      	cbz	r0, 80089c4 <pbuf_alloc_reference+0x38>
  p->next = NULL;
 80089b2:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 80089b4:	8105      	strh	r5, [r0, #8]
  p->len = len;
 80089b6:	8145      	strh	r5, [r0, #10]
  p->flags = flags;
 80089b8:	7343      	strb	r3, [r0, #13]
  p->type_internal = (u8_t)type;
 80089ba:	7304      	strb	r4, [r0, #12]
  p->payload = payload;
 80089bc:	e9c0 3600 	strd	r3, r6, [r0]
  p->ref = 1;
 80089c0:	2301      	movs	r3, #1
 80089c2:	81c3      	strh	r3, [r0, #14]
}
 80089c4:	bd70      	pop	{r4, r5, r6, pc}
 80089c6:	bf00      	nop
 80089c8:	08013e9c 	.word	0x08013e9c
 80089cc:	08013f36 	.word	0x08013f36
 80089d0:	08012bab 	.word	0x08012bab

080089d4 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80089d4:	3003      	adds	r0, #3
 80089d6:	f020 0003 	bic.w	r0, r0, #3
{
 80089da:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80089dc:	180e      	adds	r6, r1, r0
 80089de:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 80089e2:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80089e4:	42ae      	cmp	r6, r5
 80089e6:	d80d      	bhi.n	8008a04 <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 80089e8:	b104      	cbz	r4, 80089ec <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80089ea:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80089ec:	4618      	mov	r0, r3
  p->next = NULL;
 80089ee:	2300      	movs	r3, #0
  p->payload = payload;
 80089f0:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
 80089f4:	2302      	movs	r3, #2
  p->tot_len = tot_len;
 80089f6:	8101      	strh	r1, [r0, #8]
  p->len = len;
 80089f8:	8141      	strh	r1, [r0, #10]
  p->flags = flags;
 80089fa:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 80089fc:	2301      	movs	r3, #1
  p->type_internal = (u8_t)type;
 80089fe:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 8008a00:	81c3      	strh	r3, [r0, #14]
}
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 8008a04:	2000      	movs	r0, #0
 8008a06:	e7fc      	b.n	8008a02 <pbuf_alloced_custom+0x2e>

08008a08 <pbuf_add_header>:
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f7ff bf8d 	b.w	8008928 <pbuf_add_header_impl>
	...

08008a10 <pbuf_remove_header>:
{
 8008a10:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8008a12:	b990      	cbnz	r0, 8008a3a <pbuf_remove_header+0x2a>
 8008a14:	4b10      	ldr	r3, [pc, #64]	; (8008a58 <pbuf_remove_header+0x48>)
 8008a16:	f240 224b 	movw	r2, #587	; 0x24b
 8008a1a:	4910      	ldr	r1, [pc, #64]	; (8008a5c <pbuf_remove_header+0x4c>)
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008a1c:	4810      	ldr	r0, [pc, #64]	; (8008a60 <pbuf_remove_header+0x50>)
 8008a1e:	f005 f837 	bl	800da90 <iprintf>
    return 1;
 8008a22:	2001      	movs	r0, #1
 8008a24:	e008      	b.n	8008a38 <pbuf_remove_header+0x28>
  p->len = (u16_t)(p->len - increment_magnitude);
 8008a26:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008a28:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8008a2a:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008a2c:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008a2e:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008a30:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008a32:	1a9b      	subs	r3, r3, r2
 8008a34:	8103      	strh	r3, [r0, #8]
  return 0;
 8008a36:	2000      	movs	r0, #0
}
 8008a38:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008a3a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8008a3e:	d2f0      	bcs.n	8008a22 <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 8008a40:	2900      	cmp	r1, #0
 8008a42:	d0f8      	beq.n	8008a36 <pbuf_remove_header+0x26>
  increment_magnitude = (u16_t)header_size_decrement;
 8008a44:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008a46:	8943      	ldrh	r3, [r0, #10]
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d2ec      	bcs.n	8008a26 <pbuf_remove_header+0x16>
 8008a4c:	4b02      	ldr	r3, [pc, #8]	; (8008a58 <pbuf_remove_header+0x48>)
 8008a4e:	f240 2255 	movw	r2, #597	; 0x255
 8008a52:	4904      	ldr	r1, [pc, #16]	; (8008a64 <pbuf_remove_header+0x54>)
 8008a54:	e7e2      	b.n	8008a1c <pbuf_remove_header+0xc>
 8008a56:	bf00      	nop
 8008a58:	08013e9c 	.word	0x08013e9c
 8008a5c:	08013fd8 	.word	0x08013fd8
 8008a60:	08012bab 	.word	0x08012bab
 8008a64:	08013f48 	.word	0x08013f48

08008a68 <pbuf_header_force>:
  if (header_size_increment < 0) {
 8008a68:	1e0b      	subs	r3, r1, #0
 8008a6a:	da02      	bge.n	8008a72 <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008a6c:	4259      	negs	r1, r3
 8008a6e:	f7ff bfcf 	b.w	8008a10 <pbuf_remove_header>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008a72:	2201      	movs	r2, #1
 8008a74:	f7ff bf58 	b.w	8008928 <pbuf_add_header_impl>

08008a78 <pbuf_free>:
{
 8008a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (p == NULL) {
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	b950      	cbnz	r0, 8008a96 <pbuf_free+0x1e>
    return 0;
 8008a80:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 8008a82:	4b2b      	ldr	r3, [pc, #172]	; (8008b30 <pbuf_free+0xb8>)
 8008a84:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008a88:	492a      	ldr	r1, [pc, #168]	; (8008b34 <pbuf_free+0xbc>)
 8008a8a:	482b      	ldr	r0, [pc, #172]	; (8008b38 <pbuf_free+0xc0>)
 8008a8c:	f005 f800 	bl	800da90 <iprintf>
}
 8008a90:	4628      	mov	r0, r5
 8008a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  count = 0;
 8008a96:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008a98:	4f25      	ldr	r7, [pc, #148]	; (8008b30 <pbuf_free+0xb8>)
 8008a9a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8008b44 <pbuf_free+0xcc>
 8008a9e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008b38 <pbuf_free+0xc0>
    SYS_ARCH_PROTECT(old_level);
 8008aa2:	f004 f8f1 	bl	800cc88 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008aa6:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 8008aa8:	4681      	mov	r9, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008aaa:	b933      	cbnz	r3, 8008aba <pbuf_free+0x42>
 8008aac:	463b      	mov	r3, r7
 8008aae:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008ab2:	4651      	mov	r1, sl
 8008ab4:	4640      	mov	r0, r8
 8008ab6:	f004 ffeb 	bl	800da90 <iprintf>
    ref = --(p->ref);
 8008aba:	7ba6      	ldrb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8008abc:	4648      	mov	r0, r9
    ref = --(p->ref);
 8008abe:	3e01      	subs	r6, #1
 8008ac0:	b2f6      	uxtb	r6, r6
 8008ac2:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8008ac4:	f004 f8ec 	bl	800cca0 <sys_arch_unprotect>
    if (ref == 0) {
 8008ac8:	2e00      	cmp	r6, #0
 8008aca:	d1e1      	bne.n	8008a90 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008acc:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8008ace:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008ad0:	079b      	lsls	r3, r3, #30
 8008ad2:	d511      	bpl.n	8008af8 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008ad4:	6923      	ldr	r3, [r4, #16]
 8008ad6:	b933      	cbnz	r3, 8008ae6 <pbuf_free+0x6e>
 8008ad8:	463b      	mov	r3, r7
 8008ada:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008ade:	4917      	ldr	r1, [pc, #92]	; (8008b3c <pbuf_free+0xc4>)
 8008ae0:	4640      	mov	r0, r8
 8008ae2:	f004 ffd5 	bl	800da90 <iprintf>
        pc->custom_free_function(p);
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	4620      	mov	r0, r4
 8008aea:	4798      	blx	r3
      count++;
 8008aec:	3501      	adds	r5, #1
 8008aee:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8008af0:	2e00      	cmp	r6, #0
 8008af2:	d0cd      	beq.n	8008a90 <pbuf_free+0x18>
 8008af4:	4634      	mov	r4, r6
 8008af6:	e7d4      	b.n	8008aa2 <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
 8008af8:	7b23      	ldrb	r3, [r4, #12]
 8008afa:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d104      	bne.n	8008b0c <pbuf_free+0x94>
          memp_free(MEMP_PBUF_POOL, p);
 8008b02:	4621      	mov	r1, r4
 8008b04:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 8008b06:	f7ff fd81 	bl	800860c <memp_free>
 8008b0a:	e7ef      	b.n	8008aec <pbuf_free+0x74>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d102      	bne.n	8008b16 <pbuf_free+0x9e>
          memp_free(MEMP_PBUF, p);
 8008b10:	4621      	mov	r1, r4
 8008b12:	200b      	movs	r0, #11
 8008b14:	e7f7      	b.n	8008b06 <pbuf_free+0x8e>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008b16:	b91b      	cbnz	r3, 8008b20 <pbuf_free+0xa8>
          mem_free(p);
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f7ff fad1 	bl	80080c0 <mem_free>
 8008b1e:	e7e5      	b.n	8008aec <pbuf_free+0x74>
          LWIP_ASSERT("invalid pbuf type", 0);
 8008b20:	463b      	mov	r3, r7
 8008b22:	f240 320f 	movw	r2, #783	; 0x30f
 8008b26:	4906      	ldr	r1, [pc, #24]	; (8008b40 <pbuf_free+0xc8>)
 8008b28:	4640      	mov	r0, r8
 8008b2a:	f004 ffb1 	bl	800da90 <iprintf>
 8008b2e:	e7dd      	b.n	8008aec <pbuf_free+0x74>
 8008b30:	08013e9c 	.word	0x08013e9c
 8008b34:	08013fd8 	.word	0x08013fd8
 8008b38:	08012bab 	.word	0x08012bab
 8008b3c:	08013f7c 	.word	0x08013f7c
 8008b40:	08013f9d 	.word	0x08013f9d
 8008b44:	08013f66 	.word	0x08013f66

08008b48 <pbuf_alloc>:
  switch (type) {
 8008b48:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 8008b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b50:	4606      	mov	r6, r0
 8008b52:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
 8008b54:	b284      	uxth	r4, r0
  switch (type) {
 8008b56:	d014      	beq.n	8008b82 <pbuf_alloc+0x3a>
 8008b58:	d808      	bhi.n	8008b6c <pbuf_alloc+0x24>
 8008b5a:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d107      	bne.n	8008b72 <pbuf_alloc+0x2a>
      p = pbuf_alloc_reference(NULL, length, type);
 8008b62:	2000      	movs	r0, #0
}
 8008b64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8008b68:	f7ff bf10 	b.w	800898c <pbuf_alloc_reference>
  switch (type) {
 8008b6c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8008b70:	d03b      	beq.n	8008bea <pbuf_alloc+0xa2>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008b72:	4b2e      	ldr	r3, [pc, #184]	; (8008c2c <pbuf_alloc+0xe4>)
 8008b74:	f240 1227 	movw	r2, #295	; 0x127
 8008b78:	492d      	ldr	r1, [pc, #180]	; (8008c30 <pbuf_alloc+0xe8>)
 8008b7a:	482e      	ldr	r0, [pc, #184]	; (8008c34 <pbuf_alloc+0xec>)
 8008b7c:	f004 ff88 	bl	800da90 <iprintf>
 8008b80:	e00c      	b.n	8008b9c <pbuf_alloc+0x54>
  switch (type) {
 8008b82:	2600      	movs	r6, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008b84:	f240 58f4 	movw	r8, #1524	; 0x5f4
  p->type_internal = (u8_t)type;
 8008b88:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8008c3c <pbuf_alloc+0xf4>
  switch (type) {
 8008b8c:	4635      	mov	r5, r6
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008b8e:	200c      	movs	r0, #12
 8008b90:	46b2      	mov	sl, r6
 8008b92:	f7ff fd1f 	bl	80085d4 <memp_malloc>
        if (q == NULL) {
 8008b96:	4606      	mov	r6, r0
 8008b98:	b930      	cbnz	r0, 8008ba8 <pbuf_alloc+0x60>
          if (p) {
 8008b9a:	b90d      	cbnz	r5, 8008ba0 <pbuf_alloc+0x58>
      return NULL;
 8008b9c:	2500      	movs	r5, #0
 8008b9e:	e01f      	b.n	8008be0 <pbuf_alloc+0x98>
            pbuf_free(p);
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	f7ff ff69 	bl	8008a78 <pbuf_free>
 8008ba6:	e7f9      	b.n	8008b9c <pbuf_alloc+0x54>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008ba8:	1ce3      	adds	r3, r4, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008baa:	4404      	add	r4, r0
  p->next = NULL;
 8008bac:	2200      	movs	r2, #0
  p->tot_len = tot_len;
 8008bae:	8107      	strh	r7, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008bb0:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008bb4:	3413      	adds	r4, #19
  p->next = NULL;
 8008bb6:	6002      	str	r2, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008bb8:	eba8 0303 	sub.w	r3, r8, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008bbc:	f024 0403 	bic.w	r4, r4, #3
  p->type_internal = (u8_t)type;
 8008bc0:	f8c0 900c 	str.w	r9, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008bc4:	b29b      	uxth	r3, r3
  p->payload = payload;
 8008bc6:	6044      	str	r4, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008bc8:	42bb      	cmp	r3, r7
 8008bca:	bf28      	it	cs
 8008bcc:	463b      	movcs	r3, r7
  p->len = len;
 8008bce:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 8008bd0:	b14d      	cbz	r5, 8008be6 <pbuf_alloc+0x9e>
          last->next = q;
 8008bd2:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 8008bd6:	1afb      	subs	r3, r7, r3
        offset = 0;
 8008bd8:	2400      	movs	r4, #0
        rem_len = (u16_t)(rem_len - qlen);
 8008bda:	b29f      	uxth	r7, r3
      } while (rem_len > 0);
 8008bdc:	2f00      	cmp	r7, #0
 8008bde:	d1d6      	bne.n	8008b8e <pbuf_alloc+0x46>
}
 8008be0:	4628      	mov	r0, r5
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	4605      	mov	r5, r0
 8008be8:	e7f5      	b.n	8008bd6 <pbuf_alloc+0x8e>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008bea:	3403      	adds	r4, #3
 8008bec:	1ccb      	adds	r3, r1, #3
 8008bee:	f024 0403 	bic.w	r4, r4, #3
 8008bf2:	f023 0303 	bic.w	r3, r3, #3
 8008bf6:	441c      	add	r4, r3
 8008bf8:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008bfa:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008bfe:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008c00:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008c02:	d3cb      	bcc.n	8008b9c <pbuf_alloc+0x54>
 8008c04:	4283      	cmp	r3, r0
 8008c06:	d8c9      	bhi.n	8008b9c <pbuf_alloc+0x54>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008c08:	f7ff fbde 	bl	80083c8 <mem_malloc>
      if (p == NULL) {
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d0e6      	beq.n	8008be0 <pbuf_alloc+0x98>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008c12:	4406      	add	r6, r0
  p->next = NULL;
 8008c14:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 8008c16:	8107      	strh	r7, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008c18:	3613      	adds	r6, #19
  p->next = NULL;
 8008c1a:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 8008c1c:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <pbuf_alloc+0xf0>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008c1e:	f026 0603 	bic.w	r6, r6, #3
  p->len = len;
 8008c22:	8147      	strh	r7, [r0, #10]
  p->type_internal = (u8_t)type;
 8008c24:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 8008c26:	6046      	str	r6, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008c28:	e7da      	b.n	8008be0 <pbuf_alloc+0x98>
 8008c2a:	bf00      	nop
 8008c2c:	08013e9c 	.word	0x08013e9c
 8008c30:	08013faf 	.word	0x08013faf
 8008c34:	08012bab 	.word	0x08012bab
 8008c38:	00010080 	.word	0x00010080
 8008c3c:	00010082 	.word	0x00010082

08008c40 <pbuf_realloc>:
{
 8008c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c44:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008c46:	4604      	mov	r4, r0
 8008c48:	b930      	cbnz	r0, 8008c58 <pbuf_realloc+0x18>
 8008c4a:	4b24      	ldr	r3, [pc, #144]	; (8008cdc <pbuf_realloc+0x9c>)
 8008c4c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008c50:	4923      	ldr	r1, [pc, #140]	; (8008ce0 <pbuf_realloc+0xa0>)
 8008c52:	4824      	ldr	r0, [pc, #144]	; (8008ce4 <pbuf_realloc+0xa4>)
 8008c54:	f004 ff1c 	bl	800da90 <iprintf>
  if (new_len >= p->tot_len) {
 8008c58:	8927      	ldrh	r7, [r4, #8]
 8008c5a:	42b7      	cmp	r7, r6
 8008c5c:	d93c      	bls.n	8008cd8 <pbuf_realloc+0x98>
 8008c5e:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008c60:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8008cdc <pbuf_realloc+0x9c>
 8008c64:	f8df a084 	ldr.w	sl, [pc, #132]	; 8008cec <pbuf_realloc+0xac>
 8008c68:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8008ce4 <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 8008c6c:	8962      	ldrh	r2, [r4, #10]
 8008c6e:	42aa      	cmp	r2, r5
 8008c70:	d319      	bcc.n	8008ca6 <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008c72:	7b23      	ldrb	r3, [r4, #12]
 8008c74:	0719      	lsls	r1, r3, #28
 8008c76:	d127      	bne.n	8008cc8 <pbuf_realloc+0x88>
 8008c78:	42aa      	cmp	r2, r5
 8008c7a:	d025      	beq.n	8008cc8 <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008c7c:	7b63      	ldrb	r3, [r4, #13]
 8008c7e:	079b      	lsls	r3, r3, #30
 8008c80:	d422      	bmi.n	8008cc8 <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008c82:	6861      	ldr	r1, [r4, #4]
 8008c84:	4620      	mov	r0, r4
 8008c86:	1b09      	subs	r1, r1, r4
 8008c88:	4429      	add	r1, r5
 8008c8a:	b289      	uxth	r1, r1
 8008c8c:	f7ff faee 	bl	800826c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008c90:	4604      	mov	r4, r0
 8008c92:	b9c8      	cbnz	r0, 8008cc8 <pbuf_realloc+0x88>
 8008c94:	4b11      	ldr	r3, [pc, #68]	; (8008cdc <pbuf_realloc+0x9c>)
 8008c96:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008c9a:	4913      	ldr	r1, [pc, #76]	; (8008ce8 <pbuf_realloc+0xa8>)
 8008c9c:	4811      	ldr	r0, [pc, #68]	; (8008ce4 <pbuf_realloc+0xa4>)
 8008c9e:	f004 fef7 	bl	800da90 <iprintf>
  q->len = rem_len;
 8008ca2:	8164      	strh	r4, [r4, #10]
 8008ca4:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 8008ca6:	1aad      	subs	r5, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008ca8:	1bf3      	subs	r3, r6, r7
 8008caa:	8922      	ldrh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 8008cac:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008cae:	4413      	add	r3, r2
 8008cb0:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8008cb2:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008cb4:	2c00      	cmp	r4, #0
 8008cb6:	d1d9      	bne.n	8008c6c <pbuf_realloc+0x2c>
 8008cb8:	4643      	mov	r3, r8
 8008cba:	f240 12af 	movw	r2, #431	; 0x1af
 8008cbe:	4651      	mov	r1, sl
 8008cc0:	4648      	mov	r0, r9
 8008cc2:	f004 fee5 	bl	800da90 <iprintf>
 8008cc6:	e7d1      	b.n	8008c6c <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 8008cc8:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8008cca:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8008ccc:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8008cce:	b108      	cbz	r0, 8008cd4 <pbuf_realloc+0x94>
    pbuf_free(q->next);
 8008cd0:	f7ff fed2 	bl	8008a78 <pbuf_free>
  q->next = NULL;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	6023      	str	r3, [r4, #0]
}
 8008cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cdc:	08013e9c 	.word	0x08013e9c
 8008ce0:	08013fca 	.word	0x08013fca
 8008ce4:	08012bab 	.word	0x08012bab
 8008ce8:	08013ffa 	.word	0x08013ffa
 8008cec:	08013fe2 	.word	0x08013fe2

08008cf0 <pbuf_clen>:
{
 8008cf0:	4603      	mov	r3, r0
  while (p != NULL) {
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	b290      	uxth	r0, r2
 8008cf6:	3201      	adds	r2, #1
 8008cf8:	b903      	cbnz	r3, 8008cfc <pbuf_clen+0xc>
}
 8008cfa:	4770      	bx	lr
    p = p->next;
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	e7f9      	b.n	8008cf4 <pbuf_clen+0x4>

08008d00 <pbuf_ref>:
{
 8008d00:	b510      	push	{r4, lr}
  if (p != NULL) {
 8008d02:	4604      	mov	r4, r0
 8008d04:	b188      	cbz	r0, 8008d2a <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008d06:	f003 ffbf 	bl	800cc88 <sys_arch_protect>
 8008d0a:	7ba3      	ldrb	r3, [r4, #14]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	73a3      	strb	r3, [r4, #14]
 8008d10:	f003 ffc6 	bl	800cca0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008d14:	7ba3      	ldrb	r3, [r4, #14]
 8008d16:	b943      	cbnz	r3, 8008d2a <pbuf_ref+0x2a>
 8008d18:	4b04      	ldr	r3, [pc, #16]	; (8008d2c <pbuf_ref+0x2c>)
 8008d1a:	f240 3242 	movw	r2, #834	; 0x342
 8008d1e:	4904      	ldr	r1, [pc, #16]	; (8008d30 <pbuf_ref+0x30>)
 8008d20:	4804      	ldr	r0, [pc, #16]	; (8008d34 <pbuf_ref+0x34>)
}
 8008d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008d26:	f004 beb3 	b.w	800da90 <iprintf>
}
 8008d2a:	bd10      	pop	{r4, pc}
 8008d2c:	08013e9c 	.word	0x08013e9c
 8008d30:	08014016 	.word	0x08014016
 8008d34:	08012bab 	.word	0x08012bab

08008d38 <pbuf_cat>:
{
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	460d      	mov	r5, r1
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	b100      	cbz	r0, 8008d42 <pbuf_cat+0xa>
 8008d40:	b961      	cbnz	r1, 8008d5c <pbuf_cat+0x24>
 8008d42:	4b15      	ldr	r3, [pc, #84]	; (8008d98 <pbuf_cat+0x60>)
 8008d44:	f240 3259 	movw	r2, #857	; 0x359
 8008d48:	4914      	ldr	r1, [pc, #80]	; (8008d9c <pbuf_cat+0x64>)
 8008d4a:	4815      	ldr	r0, [pc, #84]	; (8008da0 <pbuf_cat+0x68>)
}
 8008d4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008d50:	f004 be9e 	b.w	800da90 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008d54:	8929      	ldrh	r1, [r5, #8]
 8008d56:	440b      	add	r3, r1
 8008d58:	8123      	strh	r3, [r4, #8]
 8008d5a:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8008d5c:	6822      	ldr	r2, [r4, #0]
 8008d5e:	8923      	ldrh	r3, [r4, #8]
 8008d60:	2a00      	cmp	r2, #0
 8008d62:	d1f7      	bne.n	8008d54 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008d64:	8962      	ldrh	r2, [r4, #10]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d00f      	beq.n	8008d8a <pbuf_cat+0x52>
 8008d6a:	4b0b      	ldr	r3, [pc, #44]	; (8008d98 <pbuf_cat+0x60>)
 8008d6c:	f240 3262 	movw	r2, #866	; 0x362
 8008d70:	490c      	ldr	r1, [pc, #48]	; (8008da4 <pbuf_cat+0x6c>)
 8008d72:	480b      	ldr	r0, [pc, #44]	; (8008da0 <pbuf_cat+0x68>)
 8008d74:	f004 fe8c 	bl	800da90 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008d78:	6823      	ldr	r3, [r4, #0]
 8008d7a:	b133      	cbz	r3, 8008d8a <pbuf_cat+0x52>
 8008d7c:	4b06      	ldr	r3, [pc, #24]	; (8008d98 <pbuf_cat+0x60>)
 8008d7e:	f240 3263 	movw	r2, #867	; 0x363
 8008d82:	4909      	ldr	r1, [pc, #36]	; (8008da8 <pbuf_cat+0x70>)
 8008d84:	4806      	ldr	r0, [pc, #24]	; (8008da0 <pbuf_cat+0x68>)
 8008d86:	f004 fe83 	bl	800da90 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008d8a:	892a      	ldrh	r2, [r5, #8]
 8008d8c:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8008d8e:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008d90:	4413      	add	r3, r2
 8008d92:	8123      	strh	r3, [r4, #8]
}
 8008d94:	bd70      	pop	{r4, r5, r6, pc}
 8008d96:	bf00      	nop
 8008d98:	08013e9c 	.word	0x08013e9c
 8008d9c:	08014028 	.word	0x08014028
 8008da0:	08012bab 	.word	0x08012bab
 8008da4:	0801405d 	.word	0x0801405d
 8008da8:	0801408a 	.word	0x0801408a

08008dac <pbuf_chain>:
{
 8008dac:	b510      	push	{r4, lr}
 8008dae:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8008db0:	f7ff ffc2 	bl	8008d38 <pbuf_cat>
  pbuf_ref(t);
 8008db4:	4620      	mov	r0, r4
}
 8008db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 8008dba:	f7ff bfa1 	b.w	8008d00 <pbuf_ref>
	...

08008dc0 <pbuf_copy>:
{
 8008dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	460c      	mov	r4, r1
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008dc6:	4605      	mov	r5, r0
 8008dc8:	b120      	cbz	r0, 8008dd4 <pbuf_copy+0x14>
 8008dca:	b119      	cbz	r1, 8008dd4 <pbuf_copy+0x14>
 8008dcc:	8902      	ldrh	r2, [r0, #8]
 8008dce:	890b      	ldrh	r3, [r1, #8]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d20a      	bcs.n	8008dea <pbuf_copy+0x2a>
 8008dd4:	4b34      	ldr	r3, [pc, #208]	; (8008ea8 <pbuf_copy+0xe8>)
 8008dd6:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008dda:	4934      	ldr	r1, [pc, #208]	; (8008eac <pbuf_copy+0xec>)
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008ddc:	4834      	ldr	r0, [pc, #208]	; (8008eb0 <pbuf_copy+0xf0>)
 8008dde:	f004 fe57 	bl	800da90 <iprintf>
 8008de2:	f06f 000f 	mvn.w	r0, #15
}
 8008de6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 8008dea:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008dec:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8008ea8 <pbuf_copy+0xe8>
 8008df0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8008ec0 <pbuf_copy+0x100>
  size_t offset_to = 0, offset_from = 0, len;
 8008df4:	4637      	mov	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008df6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8008eb0 <pbuf_copy+0xf0>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008dfa:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 8008dfe:	8962      	ldrh	r2, [r4, #10]
 8008e00:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008e04:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008e06:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008e08:	6861      	ldr	r1, [r4, #4]
 8008e0a:	4438      	add	r0, r7
 8008e0c:	4590      	cmp	r8, r2
 8008e0e:	4431      	add	r1, r6
 8008e10:	bf28      	it	cs
 8008e12:	4690      	movcs	r8, r2
 8008e14:	4642      	mov	r2, r8
    offset_to += len;
 8008e16:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008e18:	f004 fe24 	bl	800da64 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008e1c:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 8008e1e:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008e20:	429f      	cmp	r7, r3
 8008e22:	d906      	bls.n	8008e32 <pbuf_copy+0x72>
 8008e24:	465b      	mov	r3, fp
 8008e26:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008e2a:	4651      	mov	r1, sl
 8008e2c:	4648      	mov	r0, r9
 8008e2e:	f004 fe2f 	bl	800da90 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008e32:	8963      	ldrh	r3, [r4, #10]
 8008e34:	429e      	cmp	r6, r3
 8008e36:	d906      	bls.n	8008e46 <pbuf_copy+0x86>
 8008e38:	465b      	mov	r3, fp
 8008e3a:	f240 32da 	movw	r2, #986	; 0x3da
 8008e3e:	491d      	ldr	r1, [pc, #116]	; (8008eb4 <pbuf_copy+0xf4>)
 8008e40:	4648      	mov	r0, r9
 8008e42:	f004 fe25 	bl	800da90 <iprintf>
    if (offset_from >= p_from->len) {
 8008e46:	8963      	ldrh	r3, [r4, #10]
 8008e48:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 8008e4a:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8008e4c:	bf24      	itt	cs
 8008e4e:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 8008e50:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 8008e52:	429f      	cmp	r7, r3
 8008e54:	d108      	bne.n	8008e68 <pbuf_copy+0xa8>
      p_to = p_to->next;
 8008e56:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008e58:	b92d      	cbnz	r5, 8008e66 <pbuf_copy+0xa6>
 8008e5a:	b314      	cbz	r4, 8008ea2 <pbuf_copy+0xe2>
 8008e5c:	4b12      	ldr	r3, [pc, #72]	; (8008ea8 <pbuf_copy+0xe8>)
 8008e5e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008e62:	4915      	ldr	r1, [pc, #84]	; (8008eb8 <pbuf_copy+0xf8>)
 8008e64:	e7ba      	b.n	8008ddc <pbuf_copy+0x1c>
      offset_to = 0;
 8008e66:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008e68:	b17c      	cbz	r4, 8008e8a <pbuf_copy+0xca>
 8008e6a:	8962      	ldrh	r2, [r4, #10]
 8008e6c:	8923      	ldrh	r3, [r4, #8]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d10b      	bne.n	8008e8a <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	b14b      	cbz	r3, 8008e8a <pbuf_copy+0xca>
 8008e76:	4b0c      	ldr	r3, [pc, #48]	; (8008ea8 <pbuf_copy+0xe8>)
 8008e78:	f240 32e9 	movw	r2, #1001	; 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008e7c:	490f      	ldr	r1, [pc, #60]	; (8008ebc <pbuf_copy+0xfc>)
 8008e7e:	480c      	ldr	r0, [pc, #48]	; (8008eb0 <pbuf_copy+0xf0>)
 8008e80:	f004 fe06 	bl	800da90 <iprintf>
 8008e84:	f06f 0005 	mvn.w	r0, #5
 8008e88:	e7ad      	b.n	8008de6 <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008e8a:	896a      	ldrh	r2, [r5, #10]
 8008e8c:	892b      	ldrh	r3, [r5, #8]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d105      	bne.n	8008e9e <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008e92:	682b      	ldr	r3, [r5, #0]
 8008e94:	b11b      	cbz	r3, 8008e9e <pbuf_copy+0xde>
 8008e96:	4b04      	ldr	r3, [pc, #16]	; (8008ea8 <pbuf_copy+0xe8>)
 8008e98:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008e9c:	e7ee      	b.n	8008e7c <pbuf_copy+0xbc>
  } while (p_from);
 8008e9e:	2c00      	cmp	r4, #0
 8008ea0:	d1ab      	bne.n	8008dfa <pbuf_copy+0x3a>
  return ERR_OK;
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	e79f      	b.n	8008de6 <pbuf_copy+0x26>
 8008ea6:	bf00      	nop
 8008ea8:	08013e9c 	.word	0x08013e9c
 8008eac:	080140d1 	.word	0x080140d1
 8008eb0:	08012bab 	.word	0x08012bab
 8008eb4:	08014118 	.word	0x08014118
 8008eb8:	08014133 	.word	0x08014133
 8008ebc:	08014140 	.word	0x08014140
 8008ec0:	08014101 	.word	0x08014101

08008ec4 <pbuf_copy_partial>:
{
 8008ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ec8:	4688      	mov	r8, r1
 8008eca:	4691      	mov	r9, r2
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008ecc:	4606      	mov	r6, r0
 8008ece:	b950      	cbnz	r0, 8008ee6 <pbuf_copy_partial+0x22>
 8008ed0:	4637      	mov	r7, r6
 8008ed2:	4b1b      	ldr	r3, [pc, #108]	; (8008f40 <pbuf_copy_partial+0x7c>)
 8008ed4:	f240 420a 	movw	r2, #1034	; 0x40a
 8008ed8:	491a      	ldr	r1, [pc, #104]	; (8008f44 <pbuf_copy_partial+0x80>)
 8008eda:	481b      	ldr	r0, [pc, #108]	; (8008f48 <pbuf_copy_partial+0x84>)
 8008edc:	f004 fdd8 	bl	800da90 <iprintf>
}
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008ee6:	bb49      	cbnz	r1, 8008f3c <pbuf_copy_partial+0x78>
 8008ee8:	4b15      	ldr	r3, [pc, #84]	; (8008f40 <pbuf_copy_partial+0x7c>)
 8008eea:	f240 420b 	movw	r2, #1035	; 0x40b
 8008eee:	4917      	ldr	r1, [pc, #92]	; (8008f4c <pbuf_copy_partial+0x88>)
 8008ef0:	4647      	mov	r7, r8
 8008ef2:	4815      	ldr	r0, [pc, #84]	; (8008f48 <pbuf_copy_partial+0x84>)
 8008ef4:	f004 fdcc 	bl	800da90 <iprintf>
 8008ef8:	e7f2      	b.n	8008ee0 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8008efa:	8975      	ldrh	r5, [r6, #10]
 8008efc:	b153      	cbz	r3, 8008f14 <pbuf_copy_partial+0x50>
 8008efe:	42ab      	cmp	r3, r5
 8008f00:	d308      	bcc.n	8008f14 <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
 8008f02:	1b5b      	subs	r3, r3, r5
 8008f04:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008f06:	6836      	ldr	r6, [r6, #0]
 8008f08:	f1b9 0f00 	cmp.w	r9, #0
 8008f0c:	d0e8      	beq.n	8008ee0 <pbuf_copy_partial+0x1c>
 8008f0e:	2e00      	cmp	r6, #0
 8008f10:	d1f3      	bne.n	8008efa <pbuf_copy_partial+0x36>
 8008f12:	e7e5      	b.n	8008ee0 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 8008f14:	1aec      	subs	r4, r5, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008f16:	6871      	ldr	r1, [r6, #4]
 8008f18:	eb08 0007 	add.w	r0, r8, r7
      buf_copy_len = (u16_t)(p->len - offset);
 8008f1c:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008f1e:	4419      	add	r1, r3
 8008f20:	454c      	cmp	r4, r9
 8008f22:	bf28      	it	cs
 8008f24:	464c      	movcs	r4, r9
 8008f26:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008f28:	4427      	add	r7, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008f2a:	f004 fd9b 	bl	800da64 <memcpy>
      len = (u16_t)(len - buf_copy_len);
 8008f2e:	eba9 0204 	sub.w	r2, r9, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008f32:	b2bf      	uxth	r7, r7
      offset = 0;
 8008f34:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 8008f36:	fa1f f982 	uxth.w	r9, r2
      offset = 0;
 8008f3a:	e7e4      	b.n	8008f06 <pbuf_copy_partial+0x42>
  u16_t left = 0;
 8008f3c:	2700      	movs	r7, #0
 8008f3e:	e7e3      	b.n	8008f08 <pbuf_copy_partial+0x44>
 8008f40:	08013e9c 	.word	0x08013e9c
 8008f44:	0801416a 	.word	0x0801416a
 8008f48:	08012bab 	.word	0x08012bab
 8008f4c:	08014189 	.word	0x08014189

08008f50 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008f54:	460a      	mov	r2, r1
 8008f56:	8929      	ldrh	r1, [r5, #8]
 8008f58:	f7ff fdf6 	bl	8008b48 <pbuf_alloc>
  if (q == NULL) {
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	b150      	cbz	r0, 8008f76 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8008f60:	4629      	mov	r1, r5
 8008f62:	f7ff ff2d 	bl	8008dc0 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008f66:	b130      	cbz	r0, 8008f76 <pbuf_clone+0x26>
 8008f68:	4b04      	ldr	r3, [pc, #16]	; (8008f7c <pbuf_clone+0x2c>)
 8008f6a:	f240 5224 	movw	r2, #1316	; 0x524
 8008f6e:	4904      	ldr	r1, [pc, #16]	; (8008f80 <pbuf_clone+0x30>)
 8008f70:	4804      	ldr	r0, [pc, #16]	; (8008f84 <pbuf_clone+0x34>)
 8008f72:	f004 fd8d 	bl	800da90 <iprintf>
  return q;
}
 8008f76:	4620      	mov	r0, r4
 8008f78:	bd38      	pop	{r3, r4, r5, pc}
 8008f7a:	bf00      	nop
 8008f7c:	08013e9c 	.word	0x08013e9c
 8008f80:	08014289 	.word	0x08014289
 8008f84:	08012bab 	.word	0x08012bab

08008f88 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8008f88:	b507      	push	{r0, r1, r2, lr}
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8008f8a:	f10d 0206 	add.w	r2, sp, #6
 8008f8e:	f7ff fcbf 	bl	8008910 <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8008f92:	b148      	cbz	r0, 8008fa8 <pbuf_try_get_at+0x20>
 8008f94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008f98:	8942      	ldrh	r2, [r0, #10]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d904      	bls.n	8008fa8 <pbuf_try_get_at+0x20>
    return ((u8_t *)q->payload)[q_idx];
 8008f9e:	6842      	ldr	r2, [r0, #4]
 8008fa0:	5cd0      	ldrb	r0, [r2, r3]
  }
  return -1;
}
 8008fa2:	b003      	add	sp, #12
 8008fa4:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 8008fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fac:	e7f9      	b.n	8008fa2 <pbuf_try_get_at+0x1a>

08008fae <pbuf_get_at>:
{
 8008fae:	b508      	push	{r3, lr}
  int ret = pbuf_try_get_at(p, offset);
 8008fb0:	f7ff ffea 	bl	8008f88 <pbuf_try_get_at>
  if (ret >= 0) {
 8008fb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8008fb8:	b2c0      	uxtb	r0, r0
 8008fba:	bd08      	pop	{r3, pc}

08008fbc <tcp_new_port>:
 */
static u16_t
tcp_new_port(void)
{
  u8_t i;
  u16_t n = 0;
 8008fbc:	4a12      	ldr	r2, [pc, #72]	; (8009008 <tcp_new_port+0x4c>)
{
 8008fbe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fc4:	8813      	ldrh	r3, [r2, #0]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008fc6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  tcp_port++;
 8008fca:	3301      	adds	r3, #1
 8008fcc:	4d0f      	ldr	r5, [pc, #60]	; (800900c <tcp_new_port+0x50>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008fce:	2104      	movs	r1, #4
  tcp_port++;
 8008fd0:	b29b      	uxth	r3, r3
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008fd2:	42b3      	cmp	r3, r6
 8008fd4:	bf08      	it	eq
 8008fd6:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008fda:	f855 4b04 	ldr.w	r4, [r5], #4
 8008fde:	6824      	ldr	r4, [r4, #0]
 8008fe0:	b934      	cbnz	r4, 8008ff0 <tcp_new_port+0x34>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008fe2:	3901      	subs	r1, #1
 8008fe4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8008fe8:	d1f7      	bne.n	8008fda <tcp_new_port+0x1e>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008fea:	4618      	mov	r0, r3
 8008fec:	8013      	strh	r3, [r2, #0]
 8008fee:	e007      	b.n	8009000 <tcp_new_port+0x44>
      if (pcb->local_port == tcp_port) {
 8008ff0:	8ae7      	ldrh	r7, [r4, #22]
 8008ff2:	429f      	cmp	r7, r3
 8008ff4:	d105      	bne.n	8009002 <tcp_new_port+0x46>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008ff6:	3801      	subs	r0, #1
 8008ff8:	b280      	uxth	r0, r0
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	d1e5      	bne.n	8008fca <tcp_new_port+0xe>
 8008ffe:	8013      	strh	r3, [r2, #0]
}
 8009000:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009002:	68e4      	ldr	r4, [r4, #12]
 8009004:	e7ec      	b.n	8008fe0 <tcp_new_port+0x24>
 8009006:	bf00      	nop
 8009008:	2000003c 	.word	0x2000003c
 800900c:	08012a00 	.word	0x08012a00

08009010 <tcp_close_shutdown_fin>:
{
 8009010:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009012:	4604      	mov	r4, r0
 8009014:	b930      	cbnz	r0, 8009024 <tcp_close_shutdown_fin+0x14>
 8009016:	4b13      	ldr	r3, [pc, #76]	; (8009064 <tcp_close_shutdown_fin+0x54>)
 8009018:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800901c:	4912      	ldr	r1, [pc, #72]	; (8009068 <tcp_close_shutdown_fin+0x58>)
 800901e:	4813      	ldr	r0, [pc, #76]	; (800906c <tcp_close_shutdown_fin+0x5c>)
 8009020:	f004 fd36 	bl	800da90 <iprintf>
  switch (pcb->state) {
 8009024:	7d23      	ldrb	r3, [r4, #20]
 8009026:	2b04      	cmp	r3, #4
 8009028:	d003      	beq.n	8009032 <tcp_close_shutdown_fin+0x22>
 800902a:	2b07      	cmp	r3, #7
 800902c:	d00c      	beq.n	8009048 <tcp_close_shutdown_fin+0x38>
 800902e:	2b03      	cmp	r3, #3
 8009030:	d108      	bne.n	8009044 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 8009032:	4620      	mov	r0, r4
 8009034:	f002 fd94 	bl	800bb60 <tcp_send_fin>
      if (err == ERR_OK) {
 8009038:	b960      	cbnz	r0, 8009054 <tcp_close_shutdown_fin+0x44>
        pcb->state = FIN_WAIT_1;
 800903a:	2305      	movs	r3, #5
    tcp_output(pcb);
 800903c:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800903e:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8009040:	f002 feee 	bl	800be20 <tcp_output>
  switch (pcb->state) {
 8009044:	2000      	movs	r0, #0
}
 8009046:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8009048:	4620      	mov	r0, r4
 800904a:	f002 fd89 	bl	800bb60 <tcp_send_fin>
      if (err == ERR_OK) {
 800904e:	b908      	cbnz	r0, 8009054 <tcp_close_shutdown_fin+0x44>
        pcb->state = LAST_ACK;
 8009050:	2309      	movs	r3, #9
 8009052:	e7f3      	b.n	800903c <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	d1f6      	bne.n	8009046 <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009058:	8b63      	ldrh	r3, [r4, #26]
 800905a:	f043 0308 	orr.w	r3, r3, #8
 800905e:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8009060:	e7f0      	b.n	8009044 <tcp_close_shutdown_fin+0x34>
 8009062:	bf00      	nop
 8009064:	0801429a 	.word	0x0801429a
 8009068:	08014333 	.word	0x08014333
 800906c:	08012bab 	.word	0x08012bab

08009070 <tcp_init>:
{
 8009070:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009072:	f004 fd9b 	bl	800dbac <rand>
 8009076:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800907a:	4b02      	ldr	r3, [pc, #8]	; (8009084 <tcp_init+0x14>)
 800907c:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8009080:	8018      	strh	r0, [r3, #0]
}
 8009082:	bd08      	pop	{r3, pc}
 8009084:	2000003c 	.word	0x2000003c

08009088 <tcp_free>:
{
 8009088:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800908a:	7d03      	ldrb	r3, [r0, #20]
{
 800908c:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800908e:	2b01      	cmp	r3, #1
 8009090:	d105      	bne.n	800909e <tcp_free+0x16>
 8009092:	4b06      	ldr	r3, [pc, #24]	; (80090ac <tcp_free+0x24>)
 8009094:	22d4      	movs	r2, #212	; 0xd4
 8009096:	4906      	ldr	r1, [pc, #24]	; (80090b0 <tcp_free+0x28>)
 8009098:	4806      	ldr	r0, [pc, #24]	; (80090b4 <tcp_free+0x2c>)
 800909a:	f004 fcf9 	bl	800da90 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800909e:	4621      	mov	r1, r4
 80090a0:	2001      	movs	r0, #1
}
 80090a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 80090a6:	f7ff bab1 	b.w	800860c <memp_free>
 80090aa:	bf00      	nop
 80090ac:	0801429a 	.word	0x0801429a
 80090b0:	0801433f 	.word	0x0801433f
 80090b4:	08012bab 	.word	0x08012bab

080090b8 <tcp_bind>:
{
 80090b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 80090ba:	4d23      	ldr	r5, [pc, #140]	; (8009148 <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80090bc:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 80090be:	2900      	cmp	r1, #0
 80090c0:	bf18      	it	ne
 80090c2:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80090c4:	b948      	cbnz	r0, 80090da <tcp_bind+0x22>
 80090c6:	4b21      	ldr	r3, [pc, #132]	; (800914c <tcp_bind+0x94>)
 80090c8:	f240 22a9 	movw	r2, #681	; 0x2a9
 80090cc:	4920      	ldr	r1, [pc, #128]	; (8009150 <tcp_bind+0x98>)
 80090ce:	4821      	ldr	r0, [pc, #132]	; (8009154 <tcp_bind+0x9c>)
 80090d0:	f004 fcde 	bl	800da90 <iprintf>
 80090d4:	f06f 000f 	mvn.w	r0, #15
}
 80090d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80090da:	7d03      	ldrb	r3, [r0, #20]
 80090dc:	b14b      	cbz	r3, 80090f2 <tcp_bind+0x3a>
 80090de:	4b1b      	ldr	r3, [pc, #108]	; (800914c <tcp_bind+0x94>)
 80090e0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80090e4:	491c      	ldr	r1, [pc, #112]	; (8009158 <tcp_bind+0xa0>)
 80090e6:	481b      	ldr	r0, [pc, #108]	; (8009154 <tcp_bind+0x9c>)
 80090e8:	f004 fcd2 	bl	800da90 <iprintf>
 80090ec:	f06f 0005 	mvn.w	r0, #5
 80090f0:	e7f2      	b.n	80090d8 <tcp_bind+0x20>
  if (port == 0) {
 80090f2:	b932      	cbnz	r2, 8009102 <tcp_bind+0x4a>
    port = tcp_new_port();
 80090f4:	f7ff ff62 	bl	8008fbc <tcp_new_port>
    if (port == 0) {
 80090f8:	4602      	mov	r2, r0
 80090fa:	b950      	cbnz	r0, 8009112 <tcp_bind+0x5a>
      return ERR_BUF;
 80090fc:	f06f 0001 	mvn.w	r0, #1
 8009100:	e7ea      	b.n	80090d8 <tcp_bind+0x20>
 8009102:	4816      	ldr	r0, [pc, #88]	; (800915c <tcp_bind+0xa4>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009104:	f850 1b04 	ldr.w	r1, [r0], #4
 8009108:	6809      	ldr	r1, [r1, #0]
 800910a:	b971      	cbnz	r1, 800912a <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 800910c:	3301      	adds	r3, #1
 800910e:	2b04      	cmp	r3, #4
 8009110:	d1f8      	bne.n	8009104 <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 8009112:	682b      	ldr	r3, [r5, #0]
 8009114:	b103      	cbz	r3, 8009118 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009116:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009118:	4b11      	ldr	r3, [pc, #68]	; (8009160 <tcp_bind+0xa8>)
  pcb->local_port = port;
 800911a:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	601c      	str	r4, [r3, #0]
 8009120:	60e2      	str	r2, [r4, #12]
 8009122:	f003 f953 	bl	800c3cc <tcp_timer_needed>
  return ERR_OK;
 8009126:	2000      	movs	r0, #0
 8009128:	e7d6      	b.n	80090d8 <tcp_bind+0x20>
        if (cpcb->local_port == port) {
 800912a:	8ace      	ldrh	r6, [r1, #22]
 800912c:	4296      	cmp	r6, r2
 800912e:	d105      	bne.n	800913c <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 8009130:	680f      	ldr	r7, [r1, #0]
 8009132:	b12f      	cbz	r7, 8009140 <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 8009134:	682e      	ldr	r6, [r5, #0]
 8009136:	b11e      	cbz	r6, 8009140 <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009138:	42b7      	cmp	r7, r6
 800913a:	d001      	beq.n	8009140 <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800913c:	68c9      	ldr	r1, [r1, #12]
 800913e:	e7e4      	b.n	800910a <tcp_bind+0x52>
              return ERR_USE;
 8009140:	f06f 0007 	mvn.w	r0, #7
 8009144:	e7c8      	b.n	80090d8 <tcp_bind+0x20>
 8009146:	bf00      	nop
 8009148:	0801292c 	.word	0x0801292c
 800914c:	0801429a 	.word	0x0801429a
 8009150:	08014350 	.word	0x08014350
 8009154:	08012bab 	.word	0x08012bab
 8009158:	08014366 	.word	0x08014366
 800915c:	08012a00 	.word	0x08012a00
 8009160:	20010d1c 	.word	0x20010d1c

08009164 <tcp_update_rcv_ann_wnd>:
{
 8009164:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009166:	4604      	mov	r4, r0
 8009168:	b930      	cbnz	r0, 8009178 <tcp_update_rcv_ann_wnd+0x14>
 800916a:	4b15      	ldr	r3, [pc, #84]	; (80091c0 <tcp_update_rcv_ann_wnd+0x5c>)
 800916c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009170:	4914      	ldr	r1, [pc, #80]	; (80091c4 <tcp_update_rcv_ann_wnd+0x60>)
 8009172:	4815      	ldr	r0, [pc, #84]	; (80091c8 <tcp_update_rcv_ann_wnd+0x64>)
 8009174:	f004 fc8c 	bl	800da90 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009178:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800917a:	f240 56b4 	movw	r6, #1460	; 0x5b4
 800917e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009180:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009182:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009184:	1ac8      	subs	r0, r1, r3
 8009186:	42b2      	cmp	r2, r6
 8009188:	4428      	add	r0, r5
 800918a:	bf94      	ite	ls
 800918c:	1a82      	subls	r2, r0, r2
 800918e:	1b82      	subhi	r2, r0, r6
 8009190:	2a00      	cmp	r2, #0
 8009192:	db01      	blt.n	8009198 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009194:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 8009196:	bd70      	pop	{r4, r5, r6, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009198:	1aea      	subs	r2, r5, r3
 800919a:	2a00      	cmp	r2, #0
 800919c:	dd02      	ble.n	80091a4 <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 800919e:	2000      	movs	r0, #0
 80091a0:	8560      	strh	r0, [r4, #42]	; 0x2a
 80091a2:	e7f8      	b.n	8009196 <tcp_update_rcv_ann_wnd+0x32>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80091a4:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80091a6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80091aa:	d306      	bcc.n	80091ba <tcp_update_rcv_ann_wnd+0x56>
 80091ac:	4b04      	ldr	r3, [pc, #16]	; (80091c0 <tcp_update_rcv_ann_wnd+0x5c>)
 80091ae:	f240 32b6 	movw	r2, #950	; 0x3b6
 80091b2:	4906      	ldr	r1, [pc, #24]	; (80091cc <tcp_update_rcv_ann_wnd+0x68>)
 80091b4:	4804      	ldr	r0, [pc, #16]	; (80091c8 <tcp_update_rcv_ann_wnd+0x64>)
 80091b6:	f004 fc6b 	bl	800da90 <iprintf>
    return 0;
 80091ba:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80091bc:	8565      	strh	r5, [r4, #42]	; 0x2a
 80091be:	e7ea      	b.n	8009196 <tcp_update_rcv_ann_wnd+0x32>
 80091c0:	0801429a 	.word	0x0801429a
 80091c4:	080143f2 	.word	0x080143f2
 80091c8:	08012bab 	.word	0x08012bab
 80091cc:	08014416 	.word	0x08014416

080091d0 <tcp_recved>:
{
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80091d4:	4605      	mov	r5, r0
 80091d6:	b940      	cbnz	r0, 80091ea <tcp_recved+0x1a>
 80091d8:	4b18      	ldr	r3, [pc, #96]	; (800923c <tcp_recved+0x6c>)
 80091da:	f240 32cf 	movw	r2, #975	; 0x3cf
 80091de:	4918      	ldr	r1, [pc, #96]	; (8009240 <tcp_recved+0x70>)
 80091e0:	4818      	ldr	r0, [pc, #96]	; (8009244 <tcp_recved+0x74>)
}
 80091e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80091e6:	f004 bc53 	b.w	800da90 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80091ea:	7d03      	ldrb	r3, [r0, #20]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d106      	bne.n	80091fe <tcp_recved+0x2e>
 80091f0:	4b12      	ldr	r3, [pc, #72]	; (800923c <tcp_recved+0x6c>)
 80091f2:	f240 32d2 	movw	r2, #978	; 0x3d2
 80091f6:	4914      	ldr	r1, [pc, #80]	; (8009248 <tcp_recved+0x78>)
 80091f8:	4812      	ldr	r0, [pc, #72]	; (8009244 <tcp_recved+0x74>)
 80091fa:	f004 fc49 	bl	800da90 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80091fe:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009200:	f640 3368 	movw	r3, #2920	; 0xb68
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009204:	1911      	adds	r1, r2, r4
 8009206:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009208:	4299      	cmp	r1, r3
 800920a:	d813      	bhi.n	8009234 <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800920c:	428a      	cmp	r2, r1
 800920e:	bf88      	it	hi
 8009210:	4619      	movhi	r1, r3
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009212:	4628      	mov	r0, r5
 8009214:	8529      	strh	r1, [r5, #40]	; 0x28
 8009216:	f7ff ffa5 	bl	8009164 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800921a:	f240 23d9 	movw	r3, #729	; 0x2d9
 800921e:	4298      	cmp	r0, r3
 8009220:	d90a      	bls.n	8009238 <tcp_recved+0x68>
    tcp_ack_now(pcb);
 8009222:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 8009224:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 8009226:	f043 0302 	orr.w	r3, r3, #2
 800922a:	836b      	strh	r3, [r5, #26]
}
 800922c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8009230:	f002 bdf6 	b.w	800be20 <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009234:	4619      	mov	r1, r3
 8009236:	e7ec      	b.n	8009212 <tcp_recved+0x42>
}
 8009238:	bd70      	pop	{r4, r5, r6, pc}
 800923a:	bf00      	nop
 800923c:	0801429a 	.word	0x0801429a
 8009240:	08014430 	.word	0x08014430
 8009244:	08012bab 	.word	0x08012bab
 8009248:	08014448 	.word	0x08014448

0800924c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800924c:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800924e:	4604      	mov	r4, r0
 8009250:	b148      	cbz	r0, 8009266 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8009252:	6840      	ldr	r0, [r0, #4]
 8009254:	b108      	cbz	r0, 800925a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8009256:	f7ff fc0f 	bl	8008a78 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800925a:	4621      	mov	r1, r4
 800925c:	2003      	movs	r0, #3
  }
}
 800925e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8009262:	f7ff b9d3 	b.w	800860c <memp_free>
}
 8009266:	bd10      	pop	{r4, pc}

08009268 <tcp_segs_free>:
{
 8009268:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800926a:	b900      	cbnz	r0, 800926e <tcp_segs_free+0x6>
}
 800926c:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800926e:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8009270:	f7ff ffec 	bl	800924c <tcp_seg_free>
    seg = next;
 8009274:	4620      	mov	r0, r4
 8009276:	e7f8      	b.n	800926a <tcp_segs_free+0x2>

08009278 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8009278:	b100      	cbz	r0, 800927c <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800927a:	6101      	str	r1, [r0, #16]
  }
}
 800927c:	4770      	bx	lr
	...

08009280 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009284:	4604      	mov	r4, r0
 8009286:	b158      	cbz	r0, 80092a0 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009288:	7d03      	ldrb	r3, [r0, #20]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d106      	bne.n	800929c <tcp_recv+0x1c>
 800928e:	4b05      	ldr	r3, [pc, #20]	; (80092a4 <tcp_recv+0x24>)
 8009290:	f240 72df 	movw	r2, #2015	; 0x7df
 8009294:	4904      	ldr	r1, [pc, #16]	; (80092a8 <tcp_recv+0x28>)
 8009296:	4805      	ldr	r0, [pc, #20]	; (80092ac <tcp_recv+0x2c>)
 8009298:	f004 fbfa 	bl	800da90 <iprintf>
    pcb->recv = recv;
 800929c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 80092a0:	bd38      	pop	{r3, r4, r5, pc}
 80092a2:	bf00      	nop
 80092a4:	0801429a 	.word	0x0801429a
 80092a8:	08014487 	.word	0x08014487
 80092ac:	08012bab 	.word	0x08012bab

080092b0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80092b4:	4604      	mov	r4, r0
 80092b6:	b150      	cbz	r0, 80092ce <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80092b8:	7d03      	ldrb	r3, [r0, #20]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d106      	bne.n	80092cc <tcp_sent+0x1c>
 80092be:	4b04      	ldr	r3, [pc, #16]	; (80092d0 <tcp_sent+0x20>)
 80092c0:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80092c4:	4903      	ldr	r1, [pc, #12]	; (80092d4 <tcp_sent+0x24>)
 80092c6:	4804      	ldr	r0, [pc, #16]	; (80092d8 <tcp_sent+0x28>)
 80092c8:	f004 fbe2 	bl	800da90 <iprintf>
    pcb->sent = sent;
 80092cc:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 80092ce:	bd38      	pop	{r3, r4, r5, pc}
 80092d0:	0801429a 	.word	0x0801429a
 80092d4:	080144ae 	.word	0x080144ae
 80092d8:	08012bab 	.word	0x08012bab

080092dc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80092e0:	4604      	mov	r4, r0
 80092e2:	b158      	cbz	r0, 80092fc <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80092e4:	7d03      	ldrb	r3, [r0, #20]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d106      	bne.n	80092f8 <tcp_err+0x1c>
 80092ea:	4b05      	ldr	r3, [pc, #20]	; (8009300 <tcp_err+0x24>)
 80092ec:	f640 020d 	movw	r2, #2061	; 0x80d
 80092f0:	4904      	ldr	r1, [pc, #16]	; (8009304 <tcp_err+0x28>)
 80092f2:	4805      	ldr	r0, [pc, #20]	; (8009308 <tcp_err+0x2c>)
 80092f4:	f004 fbcc 	bl	800da90 <iprintf>
    pcb->errf = err;
 80092f8:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 80092fc:	bd38      	pop	{r3, r4, r5, pc}
 80092fe:	bf00      	nop
 8009300:	0801429a 	.word	0x0801429a
 8009304:	080144d5 	.word	0x080144d5
 8009308:	08012bab 	.word	0x08012bab

0800930c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	460e      	mov	r6, r1
 8009310:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009312:	4604      	mov	r4, r0
 8009314:	b940      	cbnz	r0, 8009328 <tcp_poll+0x1c>
 8009316:	4b0b      	ldr	r3, [pc, #44]	; (8009344 <tcp_poll+0x38>)
 8009318:	f640 023d 	movw	r2, #2109	; 0x83d
 800931c:	490a      	ldr	r1, [pc, #40]	; (8009348 <tcp_poll+0x3c>)
 800931e:	480b      	ldr	r0, [pc, #44]	; (800934c <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 8009320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009324:	f004 bbb4 	b.w	800da90 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009328:	7d03      	ldrb	r3, [r0, #20]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d106      	bne.n	800933c <tcp_poll+0x30>
 800932e:	4b05      	ldr	r3, [pc, #20]	; (8009344 <tcp_poll+0x38>)
 8009330:	f640 023e 	movw	r2, #2110	; 0x83e
 8009334:	4906      	ldr	r1, [pc, #24]	; (8009350 <tcp_poll+0x44>)
 8009336:	4805      	ldr	r0, [pc, #20]	; (800934c <tcp_poll+0x40>)
 8009338:	f004 fbaa 	bl	800da90 <iprintf>
  pcb->poll = poll;
 800933c:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 8009340:	7765      	strb	r5, [r4, #29]
}
 8009342:	bd70      	pop	{r4, r5, r6, pc}
 8009344:	0801429a 	.word	0x0801429a
 8009348:	080144fb 	.word	0x080144fb
 800934c:	08012bab 	.word	0x08012bab
 8009350:	08014511 	.word	0x08014511

08009354 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009354:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009356:	4604      	mov	r4, r0
 8009358:	b940      	cbnz	r0, 800936c <tcp_pcb_purge+0x18>
 800935a:	4b11      	ldr	r3, [pc, #68]	; (80093a0 <tcp_pcb_purge+0x4c>)
 800935c:	f640 0251 	movw	r2, #2129	; 0x851
 8009360:	4910      	ldr	r1, [pc, #64]	; (80093a4 <tcp_pcb_purge+0x50>)
 8009362:	4811      	ldr	r0, [pc, #68]	; (80093a8 <tcp_pcb_purge+0x54>)
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 8009364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009368:	f004 bb92 	b.w	800da90 <iprintf>
  if (pcb->state != CLOSED &&
 800936c:	7d03      	ldrb	r3, [r0, #20]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d915      	bls.n	800939e <tcp_pcb_purge+0x4a>
 8009372:	2b0a      	cmp	r3, #10
 8009374:	d013      	beq.n	800939e <tcp_pcb_purge+0x4a>
    if (pcb->refused_data != NULL) {
 8009376:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8009378:	b118      	cbz	r0, 8009382 <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 800937a:	f7ff fb7d 	bl	8008a78 <pbuf_free>
      pcb->refused_data = NULL;
 800937e:	2300      	movs	r3, #0
 8009380:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->rtime = -1;
 8009382:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 8009386:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 8009388:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 800938a:	f7ff ff6d 	bl	8009268 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800938e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009390:	f7ff ff6a 	bl	8009268 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009394:	2300      	movs	r3, #0
 8009396:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 800939a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 800939e:	bd10      	pop	{r4, pc}
 80093a0:	0801429a 	.word	0x0801429a
 80093a4:	0801452f 	.word	0x0801452f
 80093a8:	08012bab 	.word	0x08012bab

080093ac <tcp_slowtmr>:
{
 80093ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 80093b0:	4eaf      	ldr	r6, [pc, #700]	; (8009670 <tcp_slowtmr+0x2c4>)
{
 80093b2:	b087      	sub	sp, #28
 80093b4:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 800967c <tcp_slowtmr+0x2d0>
  ++tcp_ticks;
 80093b8:	6833      	ldr	r3, [r6, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80093ba:	4fae      	ldr	r7, [pc, #696]	; (8009674 <tcp_slowtmr+0x2c8>)
  ++tcp_ticks;
 80093bc:	3301      	adds	r3, #1
 80093be:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 80093c0:	4bad      	ldr	r3, [pc, #692]	; (8009678 <tcp_slowtmr+0x2cc>)
 80093c2:	781a      	ldrb	r2, [r3, #0]
 80093c4:	9304      	str	r3, [sp, #16]
 80093c6:	3201      	adds	r2, #1
 80093c8:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 80093ca:	4bac      	ldr	r3, [pc, #688]	; (800967c <tcp_slowtmr+0x2d0>)
  prev = NULL;
 80093cc:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80093d0:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 80096a4 <tcp_slowtmr+0x2f8>
  pcb = tcp_active_pcbs;
 80093d4:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 80093d6:	b96c      	cbnz	r4, 80093f4 <tcp_slowtmr+0x48>
  pcb = tcp_tw_pcbs;
 80093d8:	4fa9      	ldr	r7, [pc, #676]	; (8009680 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80093da:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8009674 <tcp_slowtmr+0x2c8>
  pcb = tcp_tw_pcbs;
 80093de:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80093e0:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 80096a8 <tcp_slowtmr+0x2fc>
 80093e4:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 80096a4 <tcp_slowtmr+0x2f8>
  while (pcb != NULL) {
 80093e8:	2d00      	cmp	r5, #0
 80093ea:	f040 81aa 	bne.w	8009742 <tcp_slowtmr+0x396>
}
 80093ee:	b007      	add	sp, #28
 80093f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80093f4:	7d23      	ldrb	r3, [r4, #20]
 80093f6:	b933      	cbnz	r3, 8009406 <tcp_slowtmr+0x5a>
 80093f8:	463b      	mov	r3, r7
 80093fa:	f240 42be 	movw	r2, #1214	; 0x4be
 80093fe:	49a1      	ldr	r1, [pc, #644]	; (8009684 <tcp_slowtmr+0x2d8>)
 8009400:	4640      	mov	r0, r8
 8009402:	f004 fb45 	bl	800da90 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009406:	7d23      	ldrb	r3, [r4, #20]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d106      	bne.n	800941a <tcp_slowtmr+0x6e>
 800940c:	463b      	mov	r3, r7
 800940e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009412:	499d      	ldr	r1, [pc, #628]	; (8009688 <tcp_slowtmr+0x2dc>)
 8009414:	4640      	mov	r0, r8
 8009416:	f004 fb3b 	bl	800da90 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800941a:	7d23      	ldrb	r3, [r4, #20]
 800941c:	2b0a      	cmp	r3, #10
 800941e:	d106      	bne.n	800942e <tcp_slowtmr+0x82>
 8009420:	463b      	mov	r3, r7
 8009422:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009426:	4999      	ldr	r1, [pc, #612]	; (800968c <tcp_slowtmr+0x2e0>)
 8009428:	4640      	mov	r0, r8
 800942a:	f004 fb31 	bl	800da90 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800942e:	9b04      	ldr	r3, [sp, #16]
 8009430:	7fa2      	ldrb	r2, [r4, #30]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	429a      	cmp	r2, r3
 8009436:	d103      	bne.n	8009440 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 8009438:	68e5      	ldr	r5, [r4, #12]
      continue;
 800943a:	46a1      	mov	r9, r4
 800943c:	462c      	mov	r4, r5
 800943e:	e7ca      	b.n	80093d6 <tcp_slowtmr+0x2a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009440:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8009442:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009444:	2a02      	cmp	r2, #2
 8009446:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800944a:	d178      	bne.n	800953e <tcp_slowtmr+0x192>
 800944c:	2b05      	cmp	r3, #5
 800944e:	d978      	bls.n	8009542 <tcp_slowtmr+0x196>
      ++pcb_remove;
 8009450:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 8009454:	7d23      	ldrb	r3, [r4, #20]
 8009456:	2b06      	cmp	r3, #6
 8009458:	d10b      	bne.n	8009472 <tcp_slowtmr+0xc6>
      if (pcb->flags & TF_RXCLOSED) {
 800945a:	8b62      	ldrh	r2, [r4, #26]
 800945c:	06d2      	lsls	r2, r2, #27
 800945e:	d508      	bpl.n	8009472 <tcp_slowtmr+0xc6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009460:	6832      	ldr	r2, [r6, #0]
 8009462:	6a21      	ldr	r1, [r4, #32]
 8009464:	1a52      	subs	r2, r2, r1
 8009466:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8009468:	bf84      	itt	hi
 800946a:	f10b 0b01 	addhi.w	fp, fp, #1
 800946e:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009472:	7a65      	ldrb	r5, [r4, #9]
 8009474:	f015 0508 	ands.w	r5, r5, #8
 8009478:	d019      	beq.n	80094ae <tcp_slowtmr+0x102>
 800947a:	2b04      	cmp	r3, #4
 800947c:	d002      	beq.n	8009484 <tcp_slowtmr+0xd8>
        ((pcb->state == ESTABLISHED) ||
 800947e:	2b07      	cmp	r3, #7
 8009480:	f040 8126 	bne.w	80096d0 <tcp_slowtmr+0x324>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009484:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8009488:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800948c:	6831      	ldr	r1, [r6, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800948e:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009492:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009494:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009498:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800949a:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800949e:	4291      	cmp	r1, r2
 80094a0:	f240 8104 	bls.w	80096ac <tcp_slowtmr+0x300>
        ++pcb_remove;
 80094a4:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 80094a8:	2501      	movs	r5, #1
        ++pcb_remove;
 80094aa:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->state == SYN_RCVD) {
 80094ae:	7d23      	ldrb	r3, [r4, #20]
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	f040 810f 	bne.w	80096d4 <tcp_slowtmr+0x328>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094b6:	6833      	ldr	r3, [r6, #0]
 80094b8:	6a22      	ldr	r2, [r4, #32]
 80094ba:	1a9b      	subs	r3, r3, r2
 80094bc:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80094be:	d803      	bhi.n	80094c8 <tcp_slowtmr+0x11c>
    if (pcb_remove) {
 80094c0:	f1bb 0f00 	cmp.w	fp, #0
 80094c4:	f000 811b 	beq.w	80096fe <tcp_slowtmr+0x352>
      tcp_pcb_purge(pcb);
 80094c8:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 80094ca:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 80094ce:	f7ff ff41 	bl	8009354 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80094d2:	f8da 3000 	ldr.w	r3, [sl]
      if (prev != NULL) {
 80094d6:	f1b9 0f00 	cmp.w	r9, #0
 80094da:	f000 8103 	beq.w	80096e4 <tcp_slowtmr+0x338>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80094de:	42a3      	cmp	r3, r4
 80094e0:	d106      	bne.n	80094f0 <tcp_slowtmr+0x144>
 80094e2:	463b      	mov	r3, r7
 80094e4:	f240 526d 	movw	r2, #1389	; 0x56d
 80094e8:	4969      	ldr	r1, [pc, #420]	; (8009690 <tcp_slowtmr+0x2e4>)
 80094ea:	4640      	mov	r0, r8
 80094ec:	f004 fad0 	bl	800da90 <iprintf>
        prev->next = pcb->next;
 80094f0:	68e3      	ldr	r3, [r4, #12]
 80094f2:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 80094f6:	b15d      	cbz	r5, 8009510 <tcp_slowtmr+0x164>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80094f8:	8b23      	ldrh	r3, [r4, #24]
 80094fa:	4620      	mov	r0, r4
 80094fc:	9302      	str	r3, [sp, #8]
 80094fe:	8ae3      	ldrh	r3, [r4, #22]
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	1d23      	adds	r3, r4, #4
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	4623      	mov	r3, r4
 8009508:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800950a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800950c:	f002 fc10 	bl	800bd30 <tcp_rst>
      err_arg = pcb->callback_arg;
 8009510:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 8009512:	4620      	mov	r0, r4
      pcb = pcb->next;
 8009514:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 8009516:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 8009518:	f7ff fdb6 	bl	8009088 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800951c:	4c5d      	ldr	r4, [pc, #372]	; (8009694 <tcp_slowtmr+0x2e8>)
 800951e:	2200      	movs	r2, #0
 8009520:	7022      	strb	r2, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009522:	f1bb 0f00 	cmp.w	fp, #0
 8009526:	d008      	beq.n	800953a <tcp_slowtmr+0x18e>
 8009528:	9b05      	ldr	r3, [sp, #20]
 800952a:	f06f 010c 	mvn.w	r1, #12
 800952e:	4618      	mov	r0, r3
 8009530:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8009532:	7823      	ldrb	r3, [r4, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	f47f af48 	bne.w	80093ca <tcp_slowtmr+0x1e>
 800953a:	464c      	mov	r4, r9
 800953c:	e77d      	b.n	800943a <tcp_slowtmr+0x8e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800953e:	2b0b      	cmp	r3, #11
 8009540:	e785      	b.n	800944e <tcp_slowtmr+0xa2>
      if (pcb->persist_backoff > 0) {
 8009542:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8009546:	f1bb 0f00 	cmp.w	fp, #0
 800954a:	d045      	beq.n	80095d8 <tcp_slowtmr+0x22c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800954c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800954e:	b133      	cbz	r3, 800955e <tcp_slowtmr+0x1b2>
 8009550:	463b      	mov	r3, r7
 8009552:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009556:	4950      	ldr	r1, [pc, #320]	; (8009698 <tcp_slowtmr+0x2ec>)
 8009558:	4640      	mov	r0, r8
 800955a:	f004 fa99 	bl	800da90 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800955e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009560:	b933      	cbnz	r3, 8009570 <tcp_slowtmr+0x1c4>
 8009562:	463b      	mov	r3, r7
 8009564:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009568:	494c      	ldr	r1, [pc, #304]	; (800969c <tcp_slowtmr+0x2f0>)
 800956a:	4640      	mov	r0, r8
 800956c:	f004 fa90 	bl	800da90 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009570:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8009574:	2b0b      	cmp	r3, #11
 8009576:	f63f af6b 	bhi.w	8009450 <tcp_slowtmr+0xa4>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800957a:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800957e:	4b48      	ldr	r3, [pc, #288]	; (80096a0 <tcp_slowtmr+0x2f4>)
 8009580:	4413      	add	r3, r2
 8009582:	7bda      	ldrb	r2, [r3, #15]
          if (pcb->persist_cnt < backoff_cnt) {
 8009584:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8009588:	4293      	cmp	r3, r2
 800958a:	d30b      	bcc.n	80095a4 <tcp_slowtmr+0x1f8>
            if (pcb->snd_wnd == 0) {
 800958c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8009590:	b189      	cbz	r1, 80095b6 <tcp_slowtmr+0x20a>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009592:	4620      	mov	r0, r4
 8009594:	f002 f984 	bl	800b8a0 <tcp_split_unsent_seg>
 8009598:	b990      	cbnz	r0, 80095c0 <tcp_slowtmr+0x214>
                if (tcp_output(pcb) == ERR_OK) {
 800959a:	4620      	mov	r0, r4
 800959c:	f002 fc40 	bl	800be20 <tcp_output>
 80095a0:	b130      	cbz	r0, 80095b0 <tcp_slowtmr+0x204>
 80095a2:	e00d      	b.n	80095c0 <tcp_slowtmr+0x214>
            pcb->persist_cnt++;
 80095a4:	3301      	adds	r3, #1
 80095a6:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 80095a8:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 80095aa:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 80095ae:	d2ed      	bcs.n	800958c <tcp_slowtmr+0x1e0>
    pcb_remove = 0;
 80095b0:	f04f 0b00 	mov.w	fp, #0
 80095b4:	e74e      	b.n	8009454 <tcp_slowtmr+0xa8>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80095b6:	4620      	mov	r0, r4
 80095b8:	f002 fe3a 	bl	800c230 <tcp_zero_window_probe>
 80095bc:	2800      	cmp	r0, #0
 80095be:	d1f7      	bne.n	80095b0 <tcp_slowtmr+0x204>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80095c0:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
              pcb->persist_cnt = 0;
 80095c4:	f04f 0b00 	mov.w	fp, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80095c8:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 80095ca:	f884 b094 	strb.w	fp, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80095ce:	d8ef      	bhi.n	80095b0 <tcp_slowtmr+0x204>
                pcb->persist_backoff++;
 80095d0:	3301      	adds	r3, #1
 80095d2:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80095d6:	e73d      	b.n	8009454 <tcp_slowtmr+0xa8>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80095d8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80095da:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80095de:	4293      	cmp	r3, r2
          ++pcb->rtime;
 80095e0:	bf9c      	itt	ls
 80095e2:	3301      	addls	r3, #1
 80095e4:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 80095e6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80095ea:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80095ee:	429a      	cmp	r2, r3
 80095f0:	dbde      	blt.n	80095b0 <tcp_slowtmr+0x204>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80095f2:	4620      	mov	r0, r4
 80095f4:	f002 fae4 	bl	800bbc0 <tcp_rexmit_rto_prepare>
 80095f8:	b128      	cbz	r0, 8009606 <tcp_slowtmr+0x25a>
 80095fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1d7      	bne.n	80095b0 <tcp_slowtmr+0x204>
 8009600:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0d4      	beq.n	80095b0 <tcp_slowtmr+0x204>
            if (pcb->state != SYN_SENT) {
 8009606:	7d23      	ldrb	r3, [r4, #20]
 8009608:	2b02      	cmp	r3, #2
 800960a:	d015      	beq.n	8009638 <tcp_slowtmr+0x28c>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800960c:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8009610:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009614:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009618:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800961c:	4a20      	ldr	r2, [pc, #128]	; (80096a0 <tcp_slowtmr+0x2f4>)
 800961e:	290c      	cmp	r1, #12
 8009620:	bf94      	ite	ls
 8009622:	1852      	addls	r2, r2, r1
 8009624:	320c      	addhi	r2, #12
 8009626:	7dd2      	ldrb	r2, [r2, #23]
 8009628:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800962a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800962e:	4293      	cmp	r3, r2
 8009630:	bfa8      	it	ge
 8009632:	4613      	movge	r3, r2
 8009634:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009638:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
            pcb->rtime = 0;
 800963c:	2000      	movs	r0, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800963e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009642:	8e65      	ldrh	r5, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 8009644:	429a      	cmp	r2, r3
            pcb->rtime = 0;
 8009646:	8620      	strh	r0, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 8009648:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800964c:	4620      	mov	r0, r4
            pcb->ssthresh = eff_wnd >> 1;
 800964e:	bf28      	it	cs
 8009650:	461a      	movcs	r2, r3
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009652:	006b      	lsls	r3, r5, #1
            pcb->cwnd = pcb->mss;
 8009654:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009658:	b29b      	uxth	r3, r3
            pcb->ssthresh = eff_wnd >> 1;
 800965a:	0851      	lsrs	r1, r2, #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800965c:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8009660:	bf98      	it	ls
 8009662:	460b      	movls	r3, r1
 8009664:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 8009668:	f002 fd84 	bl	800c174 <tcp_rexmit_rto_commit>
 800966c:	e6f2      	b.n	8009454 <tcp_slowtmr+0xa8>
 800966e:	bf00      	nop
 8009670:	20010d14 	.word	0x20010d14
 8009674:	0801429a 	.word	0x0801429a
 8009678:	20006945 	.word	0x20006945
 800967c:	20010d10 	.word	0x20010d10
 8009680:	20010d20 	.word	0x20010d20
 8009684:	0801454a 	.word	0x0801454a
 8009688:	08014574 	.word	0x08014574
 800968c:	0801459e 	.word	0x0801459e
 8009690:	08014632 	.word	0x08014632
 8009694:	20010d0c 	.word	0x20010d0c
 8009698:	080145cb 	.word	0x080145cb
 800969c:	080145fd 	.word	0x080145fd
 80096a0:	08012a00 	.word	0x08012a00
 80096a4:	08012bab 	.word	0x08012bab
 80096a8:	08014687 	.word	0x08014687
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80096ac:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 80096b0:	4a3f      	ldr	r2, [pc, #252]	; (80097b0 <tcp_slowtmr+0x404>)
 80096b2:	fb02 5303 	mla	r3, r2, r3, r5
                 / TCP_SLOW_INTERVAL) {
 80096b6:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80096ba:	4299      	cmp	r1, r3
 80096bc:	d908      	bls.n	80096d0 <tcp_slowtmr+0x324>
        err = tcp_keepalive(pcb);
 80096be:	4620      	mov	r0, r4
 80096c0:	f002 fd8e 	bl	800c1e0 <tcp_keepalive>
        if (err == ERR_OK) {
 80096c4:	b920      	cbnz	r0, 80096d0 <tcp_slowtmr+0x324>
          pcb->keep_cnt_sent++;
 80096c6:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 80096ca:	3301      	adds	r3, #1
 80096cc:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 80096d0:	2500      	movs	r5, #0
 80096d2:	e6ec      	b.n	80094ae <tcp_slowtmr+0x102>
    if (pcb->state == LAST_ACK) {
 80096d4:	2b09      	cmp	r3, #9
 80096d6:	f47f aef3 	bne.w	80094c0 <tcp_slowtmr+0x114>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80096da:	6833      	ldr	r3, [r6, #0]
 80096dc:	6a22      	ldr	r2, [r4, #32]
 80096de:	1a9b      	subs	r3, r3, r2
 80096e0:	2bf0      	cmp	r3, #240	; 0xf0
 80096e2:	e6ec      	b.n	80094be <tcp_slowtmr+0x112>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80096e4:	42a3      	cmp	r3, r4
 80096e6:	d006      	beq.n	80096f6 <tcp_slowtmr+0x34a>
 80096e8:	463b      	mov	r3, r7
 80096ea:	f240 5271 	movw	r2, #1393	; 0x571
 80096ee:	4931      	ldr	r1, [pc, #196]	; (80097b4 <tcp_slowtmr+0x408>)
 80096f0:	4640      	mov	r0, r8
 80096f2:	f004 f9cd 	bl	800da90 <iprintf>
        tcp_active_pcbs = pcb->next;
 80096f6:	68e3      	ldr	r3, [r4, #12]
 80096f8:	f8ca 3000 	str.w	r3, [sl]
 80096fc:	e6fb      	b.n	80094f6 <tcp_slowtmr+0x14a>
      ++prev->polltmr;
 80096fe:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009700:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 8009702:	3301      	adds	r3, #1
      pcb = pcb->next;
 8009704:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8009706:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8009708:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800970a:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800970c:	f63f ae95 	bhi.w	800943a <tcp_slowtmr+0x8e>
        tcp_active_pcbs_changed = 0;
 8009710:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80097c0 <tcp_slowtmr+0x414>
        TCP_EVENT_POLL(prev, err);
 8009714:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8009718:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800971c:	f889 b000 	strb.w	fp, [r9]
        TCP_EVENT_POLL(prev, err);
 8009720:	b91b      	cbnz	r3, 800972a <tcp_slowtmr+0x37e>
          tcp_output(prev);
 8009722:	4620      	mov	r0, r4
 8009724:	f002 fb7c 	bl	800be20 <tcp_output>
 8009728:	e687      	b.n	800943a <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 800972a:	4621      	mov	r1, r4
 800972c:	6920      	ldr	r0, [r4, #16]
 800972e:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8009730:	f899 3000 	ldrb.w	r3, [r9]
 8009734:	2b00      	cmp	r3, #0
 8009736:	f47f ae48 	bne.w	80093ca <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 800973a:	2800      	cmp	r0, #0
 800973c:	f47f ae7d 	bne.w	800943a <tcp_slowtmr+0x8e>
 8009740:	e7ef      	b.n	8009722 <tcp_slowtmr+0x376>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009742:	7d2b      	ldrb	r3, [r5, #20]
 8009744:	2b0a      	cmp	r3, #10
 8009746:	d006      	beq.n	8009756 <tcp_slowtmr+0x3aa>
 8009748:	4643      	mov	r3, r8
 800974a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800974e:	4651      	mov	r1, sl
 8009750:	4648      	mov	r0, r9
 8009752:	f004 f99d 	bl	800da90 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009756:	6833      	ldr	r3, [r6, #0]
 8009758:	6a2a      	ldr	r2, [r5, #32]
 800975a:	1a9b      	subs	r3, r3, r2
 800975c:	2bf0      	cmp	r3, #240	; 0xf0
 800975e:	d910      	bls.n	8009782 <tcp_slowtmr+0x3d6>
      tcp_pcb_purge(pcb);
 8009760:	4628      	mov	r0, r5
 8009762:	f7ff fdf7 	bl	8009354 <tcp_pcb_purge>
      if (prev != NULL) {
 8009766:	b97c      	cbnz	r4, 8009788 <tcp_slowtmr+0x3dc>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	42ab      	cmp	r3, r5
 800976c:	d006      	beq.n	800977c <tcp_slowtmr+0x3d0>
 800976e:	4643      	mov	r3, r8
 8009770:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009774:	4910      	ldr	r1, [pc, #64]	; (80097b8 <tcp_slowtmr+0x40c>)
 8009776:	4648      	mov	r0, r9
 8009778:	f004 f98a 	bl	800da90 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800977c:	68eb      	ldr	r3, [r5, #12]
 800977e:	603b      	str	r3, [r7, #0]
 8009780:	e00e      	b.n	80097a0 <tcp_slowtmr+0x3f4>
      pcb = pcb->next;
 8009782:	462c      	mov	r4, r5
 8009784:	68ed      	ldr	r5, [r5, #12]
 8009786:	e62f      	b.n	80093e8 <tcp_slowtmr+0x3c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	42ab      	cmp	r3, r5
 800978c:	d106      	bne.n	800979c <tcp_slowtmr+0x3f0>
 800978e:	4643      	mov	r3, r8
 8009790:	f240 52af 	movw	r2, #1455	; 0x5af
 8009794:	4909      	ldr	r1, [pc, #36]	; (80097bc <tcp_slowtmr+0x410>)
 8009796:	4648      	mov	r0, r9
 8009798:	f004 f97a 	bl	800da90 <iprintf>
        prev->next = pcb->next;
 800979c:	68eb      	ldr	r3, [r5, #12]
 800979e:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 80097a0:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      tcp_free(pcb2);
 80097a4:	4628      	mov	r0, r5
 80097a6:	f7ff fc6f 	bl	8009088 <tcp_free>
      pcb = pcb->next;
 80097aa:	465d      	mov	r5, fp
 80097ac:	e61c      	b.n	80093e8 <tcp_slowtmr+0x3c>
 80097ae:	bf00      	nop
 80097b0:	000124f8 	.word	0x000124f8
 80097b4:	0801465d 	.word	0x0801465d
 80097b8:	080146dd 	.word	0x080146dd
 80097bc:	080146b6 	.word	0x080146b6
 80097c0:	20010d0c 	.word	0x20010d0c

080097c4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80097c8:	460c      	mov	r4, r1
 80097ca:	b931      	cbnz	r1, 80097da <tcp_pcb_remove+0x16>
 80097cc:	4b25      	ldr	r3, [pc, #148]	; (8009864 <tcp_pcb_remove+0xa0>)
 80097ce:	f640 0283 	movw	r2, #2179	; 0x883
 80097d2:	4925      	ldr	r1, [pc, #148]	; (8009868 <tcp_pcb_remove+0xa4>)
 80097d4:	4825      	ldr	r0, [pc, #148]	; (800986c <tcp_pcb_remove+0xa8>)
 80097d6:	f004 f95b 	bl	800da90 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80097da:	b935      	cbnz	r5, 80097ea <tcp_pcb_remove+0x26>
 80097dc:	4b21      	ldr	r3, [pc, #132]	; (8009864 <tcp_pcb_remove+0xa0>)
 80097de:	f640 0284 	movw	r2, #2180	; 0x884
 80097e2:	4923      	ldr	r1, [pc, #140]	; (8009870 <tcp_pcb_remove+0xac>)
 80097e4:	4821      	ldr	r0, [pc, #132]	; (800986c <tcp_pcb_remove+0xa8>)
 80097e6:	f004 f953 	bl	800da90 <iprintf>

  TCP_RMV(pcblist, pcb);
 80097ea:	682b      	ldr	r3, [r5, #0]
 80097ec:	42a3      	cmp	r3, r4
 80097ee:	d116      	bne.n	800981e <tcp_pcb_remove+0x5a>
 80097f0:	68e3      	ldr	r3, [r4, #12]
 80097f2:	602b      	str	r3, [r5, #0]
 80097f4:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 80097f6:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 80097f8:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 80097fa:	f7ff fdab 	bl	8009354 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80097fe:	7d23      	ldrb	r3, [r4, #20]
 8009800:	2b0a      	cmp	r3, #10
 8009802:	d114      	bne.n	800982e <tcp_pcb_remove+0x6a>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009804:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009806:	bb23      	cbnz	r3, 8009852 <tcp_pcb_remove+0x8e>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009808:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800980a:	b1f3      	cbz	r3, 800984a <tcp_pcb_remove+0x86>
 800980c:	4b15      	ldr	r3, [pc, #84]	; (8009864 <tcp_pcb_remove+0xa0>)
 800980e:	f640 0294 	movw	r2, #2196	; 0x894
 8009812:	4918      	ldr	r1, [pc, #96]	; (8009874 <tcp_pcb_remove+0xb0>)
 8009814:	4815      	ldr	r0, [pc, #84]	; (800986c <tcp_pcb_remove+0xa8>)
 8009816:	f004 f93b 	bl	800da90 <iprintf>
 800981a:	e016      	b.n	800984a <tcp_pcb_remove+0x86>
 800981c:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 800981e:	2b00      	cmp	r3, #0
 8009820:	d0e8      	beq.n	80097f4 <tcp_pcb_remove+0x30>
 8009822:	68da      	ldr	r2, [r3, #12]
 8009824:	42a2      	cmp	r2, r4
 8009826:	d1f9      	bne.n	800981c <tcp_pcb_remove+0x58>
 8009828:	68e2      	ldr	r2, [r4, #12]
 800982a:	60da      	str	r2, [r3, #12]
 800982c:	e7e2      	b.n	80097f4 <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 800982e:	2b01      	cmp	r3, #1
 8009830:	d00b      	beq.n	800984a <tcp_pcb_remove+0x86>
      (pcb->flags & TF_ACK_DELAY)) {
 8009832:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8009834:	07da      	lsls	r2, r3, #31
 8009836:	d5e5      	bpl.n	8009804 <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 8009838:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800983c:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800983e:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8009840:	f002 faee 	bl	800be20 <tcp_output>
  if (pcb->state != LISTEN) {
 8009844:	7d23      	ldrb	r3, [r4, #20]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d1dc      	bne.n	8009804 <tcp_pcb_remove+0x40>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800984a:	2300      	movs	r3, #0
 800984c:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800984e:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009850:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009852:	4b04      	ldr	r3, [pc, #16]	; (8009864 <tcp_pcb_remove+0xa0>)
 8009854:	f640 0293 	movw	r2, #2195	; 0x893
 8009858:	4907      	ldr	r1, [pc, #28]	; (8009878 <tcp_pcb_remove+0xb4>)
 800985a:	4804      	ldr	r0, [pc, #16]	; (800986c <tcp_pcb_remove+0xa8>)
 800985c:	f004 f918 	bl	800da90 <iprintf>
 8009860:	e7d2      	b.n	8009808 <tcp_pcb_remove+0x44>
 8009862:	bf00      	nop
 8009864:	0801429a 	.word	0x0801429a
 8009868:	08014703 	.word	0x08014703
 800986c:	08012bab 	.word	0x08012bab
 8009870:	0801471f 	.word	0x0801471f
 8009874:	08014757 	.word	0x08014757
 8009878:	0801473f 	.word	0x0801473f

0800987c <tcp_close_shutdown>:
{
 800987c:	b530      	push	{r4, r5, lr}
 800987e:	460d      	mov	r5, r1
 8009880:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009882:	4604      	mov	r4, r0
 8009884:	b930      	cbnz	r0, 8009894 <tcp_close_shutdown+0x18>
 8009886:	4b4b      	ldr	r3, [pc, #300]	; (80099b4 <tcp_close_shutdown+0x138>)
 8009888:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800988c:	494a      	ldr	r1, [pc, #296]	; (80099b8 <tcp_close_shutdown+0x13c>)
 800988e:	484b      	ldr	r0, [pc, #300]	; (80099bc <tcp_close_shutdown+0x140>)
 8009890:	f004 f8fe 	bl	800da90 <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009894:	7d23      	ldrb	r3, [r4, #20]
 8009896:	2d00      	cmp	r5, #0
 8009898:	d040      	beq.n	800991c <tcp_close_shutdown+0xa0>
 800989a:	2b04      	cmp	r3, #4
 800989c:	d001      	beq.n	80098a2 <tcp_close_shutdown+0x26>
 800989e:	2b07      	cmp	r3, #7
 80098a0:	d13c      	bne.n	800991c <tcp_close_shutdown+0xa0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80098a2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80098a4:	b922      	cbnz	r2, 80098b0 <tcp_close_shutdown+0x34>
 80098a6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80098a8:	f640 3268 	movw	r2, #2920	; 0xb68
 80098ac:	4291      	cmp	r1, r2
 80098ae:	d035      	beq.n	800991c <tcp_close_shutdown+0xa0>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80098b0:	8b63      	ldrh	r3, [r4, #26]
 80098b2:	06db      	lsls	r3, r3, #27
 80098b4:	d406      	bmi.n	80098c4 <tcp_close_shutdown+0x48>
 80098b6:	4b3f      	ldr	r3, [pc, #252]	; (80099b4 <tcp_close_shutdown+0x138>)
 80098b8:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80098bc:	4940      	ldr	r1, [pc, #256]	; (80099c0 <tcp_close_shutdown+0x144>)
 80098be:	483f      	ldr	r0, [pc, #252]	; (80099bc <tcp_close_shutdown+0x140>)
 80098c0:	f004 f8e6 	bl	800da90 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80098c4:	8b23      	ldrh	r3, [r4, #24]
 80098c6:	4620      	mov	r0, r4
 80098c8:	9302      	str	r3, [sp, #8]
 80098ca:	8ae3      	ldrh	r3, [r4, #22]
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	1d23      	adds	r3, r4, #4
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	4623      	mov	r3, r4
 80098d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80098d6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80098d8:	f002 fa2a 	bl	800bd30 <tcp_rst>
      tcp_pcb_purge(pcb);
 80098dc:	4620      	mov	r0, r4
 80098de:	f7ff fd39 	bl	8009354 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80098e2:	4a38      	ldr	r2, [pc, #224]	; (80099c4 <tcp_close_shutdown+0x148>)
 80098e4:	6813      	ldr	r3, [r2, #0]
 80098e6:	42a3      	cmp	r3, r4
 80098e8:	d110      	bne.n	800990c <tcp_close_shutdown+0x90>
 80098ea:	68e3      	ldr	r3, [r4, #12]
 80098ec:	6013      	str	r3, [r2, #0]
 80098ee:	2300      	movs	r3, #0
 80098f0:	2201      	movs	r2, #1
 80098f2:	60e3      	str	r3, [r4, #12]
 80098f4:	4b34      	ldr	r3, [pc, #208]	; (80099c8 <tcp_close_shutdown+0x14c>)
 80098f6:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 80098f8:	4b34      	ldr	r3, [pc, #208]	; (80099cc <tcp_close_shutdown+0x150>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	42a3      	cmp	r3, r4
 80098fe:	d11d      	bne.n	800993c <tcp_close_shutdown+0xc0>
        tcp_trigger_input_pcb_close();
 8009900:	f001 fba4 	bl	800b04c <tcp_trigger_input_pcb_close>
}
 8009904:	2000      	movs	r0, #0
 8009906:	b005      	add	sp, #20
 8009908:	bd30      	pop	{r4, r5, pc}
 800990a:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 800990c:	2b00      	cmp	r3, #0
 800990e:	d0ee      	beq.n	80098ee <tcp_close_shutdown+0x72>
 8009910:	68da      	ldr	r2, [r3, #12]
 8009912:	42a2      	cmp	r2, r4
 8009914:	d1f9      	bne.n	800990a <tcp_close_shutdown+0x8e>
 8009916:	68e2      	ldr	r2, [r4, #12]
 8009918:	60da      	str	r2, [r3, #12]
 800991a:	e7e8      	b.n	80098ee <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 800991c:	2b01      	cmp	r3, #1
 800991e:	d01a      	beq.n	8009956 <tcp_close_shutdown+0xda>
 8009920:	2b02      	cmp	r3, #2
 8009922:	d039      	beq.n	8009998 <tcp_close_shutdown+0x11c>
 8009924:	2b00      	cmp	r3, #0
 8009926:	d13f      	bne.n	80099a8 <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 8009928:	8ae3      	ldrh	r3, [r4, #22]
 800992a:	b13b      	cbz	r3, 800993c <tcp_close_shutdown+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800992c:	4a28      	ldr	r2, [pc, #160]	; (80099d0 <tcp_close_shutdown+0x154>)
 800992e:	6813      	ldr	r3, [r2, #0]
 8009930:	42a3      	cmp	r3, r4
 8009932:	d108      	bne.n	8009946 <tcp_close_shutdown+0xca>
 8009934:	68e3      	ldr	r3, [r4, #12]
 8009936:	6013      	str	r3, [r2, #0]
 8009938:	2300      	movs	r3, #0
 800993a:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800993c:	4620      	mov	r0, r4
 800993e:	f7ff fba3 	bl	8009088 <tcp_free>
      break;
 8009942:	e7df      	b.n	8009904 <tcp_close_shutdown+0x88>
 8009944:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009946:	2b00      	cmp	r3, #0
 8009948:	d0f6      	beq.n	8009938 <tcp_close_shutdown+0xbc>
 800994a:	68da      	ldr	r2, [r3, #12]
 800994c:	42a2      	cmp	r2, r4
 800994e:	d1f9      	bne.n	8009944 <tcp_close_shutdown+0xc8>
 8009950:	68e2      	ldr	r2, [r4, #12]
 8009952:	60da      	str	r2, [r3, #12]
 8009954:	e7f0      	b.n	8009938 <tcp_close_shutdown+0xbc>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009956:	491f      	ldr	r1, [pc, #124]	; (80099d4 <tcp_close_shutdown+0x158>)
      pcb->listener = NULL;
 8009958:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800995a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800995e:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009960:	b9a2      	cbnz	r2, 800998c <tcp_close_shutdown+0x110>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009962:	3301      	adds	r3, #1
 8009964:	2b04      	cmp	r3, #4
 8009966:	d1f8      	bne.n	800995a <tcp_close_shutdown+0xde>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009968:	4621      	mov	r1, r4
 800996a:	481b      	ldr	r0, [pc, #108]	; (80099d8 <tcp_close_shutdown+0x15c>)
 800996c:	f7ff ff2a 	bl	80097c4 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009970:	7d23      	ldrb	r3, [r4, #20]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d105      	bne.n	8009982 <tcp_close_shutdown+0x106>
 8009976:	4b0f      	ldr	r3, [pc, #60]	; (80099b4 <tcp_close_shutdown+0x138>)
 8009978:	22df      	movs	r2, #223	; 0xdf
 800997a:	4918      	ldr	r1, [pc, #96]	; (80099dc <tcp_close_shutdown+0x160>)
 800997c:	480f      	ldr	r0, [pc, #60]	; (80099bc <tcp_close_shutdown+0x140>)
 800997e:	f004 f887 	bl	800da90 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009982:	4621      	mov	r1, r4
 8009984:	2002      	movs	r0, #2
 8009986:	f7fe fe41 	bl	800860c <memp_free>
}
 800998a:	e7bb      	b.n	8009904 <tcp_close_shutdown+0x88>
    if (pcb->listener == lpcb) {
 800998c:	6f95      	ldr	r5, [r2, #120]	; 0x78
 800998e:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 8009990:	bf08      	it	eq
 8009992:	6790      	streq	r0, [r2, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009994:	68d2      	ldr	r2, [r2, #12]
 8009996:	e7e3      	b.n	8009960 <tcp_close_shutdown+0xe4>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009998:	4621      	mov	r1, r4
 800999a:	480a      	ldr	r0, [pc, #40]	; (80099c4 <tcp_close_shutdown+0x148>)
 800999c:	f7ff ff12 	bl	80097c4 <tcp_pcb_remove>
 80099a0:	4b09      	ldr	r3, [pc, #36]	; (80099c8 <tcp_close_shutdown+0x14c>)
 80099a2:	2201      	movs	r2, #1
 80099a4:	701a      	strb	r2, [r3, #0]
 80099a6:	e7c9      	b.n	800993c <tcp_close_shutdown+0xc0>
      return tcp_close_shutdown_fin(pcb);
 80099a8:	4620      	mov	r0, r4
}
 80099aa:	b005      	add	sp, #20
 80099ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 80099b0:	f7ff bb2e 	b.w	8009010 <tcp_close_shutdown_fin>
 80099b4:	0801429a 	.word	0x0801429a
 80099b8:	08014770 	.word	0x08014770
 80099bc:	08012bab 	.word	0x08012bab
 80099c0:	08014790 	.word	0x08014790
 80099c4:	20010d10 	.word	0x20010d10
 80099c8:	20010d0c 	.word	0x20010d0c
 80099cc:	20010d24 	.word	0x20010d24
 80099d0:	20010d1c 	.word	0x20010d1c
 80099d4:	08012a00 	.word	0x08012a00
 80099d8:	20010d18 	.word	0x20010d18
 80099dc:	080147a9 	.word	0x080147a9

080099e0 <tcp_close>:
{
 80099e0:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80099e2:	b158      	cbz	r0, 80099fc <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 80099e4:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 80099e6:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 80099e8:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 80099ea:	bf1e      	ittt	ne
 80099ec:	8b43      	ldrhne	r3, [r0, #26]
 80099ee:	f043 0310 	orrne.w	r3, r3, #16
 80099f2:	8343      	strhne	r3, [r0, #26]
}
 80099f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 80099f8:	f7ff bf40 	b.w	800987c <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80099fc:	4b04      	ldr	r3, [pc, #16]	; (8009a10 <tcp_close+0x30>)
 80099fe:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009a02:	4904      	ldr	r1, [pc, #16]	; (8009a14 <tcp_close+0x34>)
 8009a04:	4804      	ldr	r0, [pc, #16]	; (8009a18 <tcp_close+0x38>)
 8009a06:	f004 f843 	bl	800da90 <iprintf>
}
 8009a0a:	f06f 000f 	mvn.w	r0, #15
 8009a0e:	bd08      	pop	{r3, pc}
 8009a10:	0801429a 	.word	0x0801429a
 8009a14:	080147c2 	.word	0x080147c2
 8009a18:	08012bab 	.word	0x08012bab

08009a1c <tcp_recv_null>:
{
 8009a1c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a1e:	4608      	mov	r0, r1
{
 8009a20:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a22:	b949      	cbnz	r1, 8009a38 <tcp_recv_null+0x1c>
 8009a24:	4b0c      	ldr	r3, [pc, #48]	; (8009a58 <tcp_recv_null+0x3c>)
 8009a26:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009a2a:	490c      	ldr	r1, [pc, #48]	; (8009a5c <tcp_recv_null+0x40>)
 8009a2c:	480c      	ldr	r0, [pc, #48]	; (8009a60 <tcp_recv_null+0x44>)
 8009a2e:	f004 f82f 	bl	800da90 <iprintf>
 8009a32:	f06f 000f 	mvn.w	r0, #15
}
 8009a36:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 8009a38:	b13a      	cbz	r2, 8009a4a <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 8009a3a:	8911      	ldrh	r1, [r2, #8]
 8009a3c:	f7ff fbc8 	bl	80091d0 <tcp_recved>
    pbuf_free(p);
 8009a40:	4620      	mov	r0, r4
 8009a42:	f7ff f819 	bl	8008a78 <pbuf_free>
  return ERR_OK;
 8009a46:	2000      	movs	r0, #0
 8009a48:	e7f5      	b.n	8009a36 <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 8009a4a:	b91b      	cbnz	r3, 8009a54 <tcp_recv_null+0x38>
}
 8009a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8009a50:	f7ff bfc6 	b.w	80099e0 <tcp_close>
  return ERR_OK;
 8009a54:	4610      	mov	r0, r2
 8009a56:	e7ee      	b.n	8009a36 <tcp_recv_null+0x1a>
 8009a58:	0801429a 	.word	0x0801429a
 8009a5c:	080147d9 	.word	0x080147d9
 8009a60:	08012bab 	.word	0x08012bab

08009a64 <tcp_process_refused_data>:
{
 8009a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a66:	4604      	mov	r4, r0
 8009a68:	b950      	cbnz	r0, 8009a80 <tcp_process_refused_data+0x1c>
 8009a6a:	f06f 050f 	mvn.w	r5, #15
 8009a6e:	4b1d      	ldr	r3, [pc, #116]	; (8009ae4 <tcp_process_refused_data+0x80>)
 8009a70:	f240 6209 	movw	r2, #1545	; 0x609
 8009a74:	491c      	ldr	r1, [pc, #112]	; (8009ae8 <tcp_process_refused_data+0x84>)
 8009a76:	481d      	ldr	r0, [pc, #116]	; (8009aec <tcp_process_refused_data+0x88>)
 8009a78:	f004 f80a 	bl	800da90 <iprintf>
}
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 8009a80:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 8009a82:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009a84:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 8009a88:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8009a8a:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009a8c:	b1e5      	cbz	r5, 8009ac8 <tcp_process_refused_data+0x64>
 8009a8e:	4601      	mov	r1, r0
 8009a90:	4632      	mov	r2, r6
 8009a92:	6900      	ldr	r0, [r0, #16]
 8009a94:	47a8      	blx	r5
 8009a96:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8009a98:	b9e8      	cbnz	r0, 8009ad6 <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009a9a:	06bb      	lsls	r3, r7, #26
 8009a9c:	d5ee      	bpl.n	8009a7c <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009a9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009aa0:	f640 3268 	movw	r2, #2920	; 0xb68
        TCP_EVENT_CLOSED(pcb, err);
 8009aa4:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009aa8:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 8009aaa:	bf1c      	itt	ne
 8009aac:	3301      	addne	r3, #1
 8009aae:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8009ab0:	2e00      	cmp	r6, #0
 8009ab2:	d0e3      	beq.n	8009a7c <tcp_process_refused_data+0x18>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	6920      	ldr	r0, [r4, #16]
 8009aba:	461a      	mov	r2, r3
 8009abc:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8009abe:	300d      	adds	r0, #13
 8009ac0:	d1dc      	bne.n	8009a7c <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 8009ac2:	f06f 050c 	mvn.w	r5, #12
 8009ac6:	e7d9      	b.n	8009a7c <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009ac8:	4601      	mov	r1, r0
 8009aca:	462b      	mov	r3, r5
 8009acc:	4632      	mov	r2, r6
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f7ff ffa4 	bl	8009a1c <tcp_recv_null>
 8009ad4:	e7df      	b.n	8009a96 <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 8009ad6:	350d      	adds	r5, #13
 8009ad8:	d0f3      	beq.n	8009ac2 <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 8009ada:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 8009ade:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8009ae0:	e7cc      	b.n	8009a7c <tcp_process_refused_data+0x18>
 8009ae2:	bf00      	nop
 8009ae4:	0801429a 	.word	0x0801429a
 8009ae8:	080147f4 	.word	0x080147f4
 8009aec:	08012bab 	.word	0x08012bab

08009af0 <tcp_fasttmr>:
{
 8009af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8009af4:	4d1b      	ldr	r5, [pc, #108]	; (8009b64 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 8009af6:	4f1c      	ldr	r7, [pc, #112]	; (8009b68 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8009af8:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8009afa:	4e1c      	ldr	r6, [pc, #112]	; (8009b6c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8009afc:	3301      	adds	r3, #1
 8009afe:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8009b00:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8009b02:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8009b06:	b90c      	cbnz	r4, 8009b0c <tcp_fasttmr+0x1c>
}
 8009b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8009b0c:	782b      	ldrb	r3, [r5, #0]
 8009b0e:	7fa2      	ldrb	r2, [r4, #30]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d024      	beq.n	8009b5e <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8009b14:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8009b16:	8b63      	ldrh	r3, [r4, #26]
 8009b18:	07d9      	lsls	r1, r3, #31
 8009b1a:	d509      	bpl.n	8009b30 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8009b1c:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8009b20:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8009b22:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8009b24:	f002 f97c 	bl	800be20 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009b28:	8b63      	ldrh	r3, [r4, #26]
 8009b2a:	f023 0303 	bic.w	r3, r3, #3
 8009b2e:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8009b30:	8b63      	ldrh	r3, [r4, #26]
 8009b32:	071a      	lsls	r2, r3, #28
 8009b34:	d505      	bpl.n	8009b42 <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009b36:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 8009b3a:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009b3c:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8009b3e:	f7ff fa67 	bl	8009010 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8009b42:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8009b44:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8009b48:	b13b      	cbz	r3, 8009b5a <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8009b4a:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8009b4c:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8009b50:	f7ff ff88 	bl	8009a64 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009b54:	7833      	ldrb	r3, [r6, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1d2      	bne.n	8009b00 <tcp_fasttmr+0x10>
{
 8009b5a:	464c      	mov	r4, r9
 8009b5c:	e7d3      	b.n	8009b06 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8009b5e:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8009b62:	e7fa      	b.n	8009b5a <tcp_fasttmr+0x6a>
 8009b64:	20006945 	.word	0x20006945
 8009b68:	20010d10 	.word	0x20010d10
 8009b6c:	20010d0c 	.word	0x20010d0c

08009b70 <tcp_tmr>:
{
 8009b70:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8009b72:	f7ff ffbd 	bl	8009af0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8009b76:	4a06      	ldr	r2, [pc, #24]	; (8009b90 <tcp_tmr+0x20>)
 8009b78:	7853      	ldrb	r3, [r2, #1]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	7053      	strb	r3, [r2, #1]
 8009b80:	07db      	lsls	r3, r3, #31
 8009b82:	d503      	bpl.n	8009b8c <tcp_tmr+0x1c>
}
 8009b84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8009b88:	f7ff bc10 	b.w	80093ac <tcp_slowtmr>
}
 8009b8c:	bd08      	pop	{r3, pc}
 8009b8e:	bf00      	nop
 8009b90:	20006945 	.word	0x20006945

08009b94 <tcp_abandon>:
{
 8009b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b98:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	b948      	cbnz	r0, 8009bb2 <tcp_abandon+0x1e>
 8009b9e:	4b34      	ldr	r3, [pc, #208]	; (8009c70 <tcp_abandon+0xdc>)
 8009ba0:	f240 223d 	movw	r2, #573	; 0x23d
 8009ba4:	4933      	ldr	r1, [pc, #204]	; (8009c74 <tcp_abandon+0xe0>)
 8009ba6:	4834      	ldr	r0, [pc, #208]	; (8009c78 <tcp_abandon+0xe4>)
}
 8009ba8:	b004      	add	sp, #16
 8009baa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009bae:	f003 bf6f 	b.w	800da90 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009bb2:	7d03      	ldrb	r3, [r0, #20]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d106      	bne.n	8009bc6 <tcp_abandon+0x32>
 8009bb8:	4b2d      	ldr	r3, [pc, #180]	; (8009c70 <tcp_abandon+0xdc>)
 8009bba:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009bbe:	492f      	ldr	r1, [pc, #188]	; (8009c7c <tcp_abandon+0xe8>)
 8009bc0:	482d      	ldr	r0, [pc, #180]	; (8009c78 <tcp_abandon+0xe4>)
 8009bc2:	f003 ff65 	bl	800da90 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8009bc6:	7d23      	ldrb	r3, [r4, #20]
 8009bc8:	2b0a      	cmp	r3, #10
 8009bca:	d109      	bne.n	8009be0 <tcp_abandon+0x4c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009bcc:	4621      	mov	r1, r4
 8009bce:	482c      	ldr	r0, [pc, #176]	; (8009c80 <tcp_abandon+0xec>)
 8009bd0:	f7ff fdf8 	bl	80097c4 <tcp_pcb_remove>
    tcp_free(pcb);
 8009bd4:	4620      	mov	r0, r4
}
 8009bd6:	b004      	add	sp, #16
 8009bd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 8009bdc:	f7ff ba54 	b.w	8009088 <tcp_free>
    seqno = pcb->snd_nxt;
 8009be0:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8009be4:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8009be8:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8009bec:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (pcb->state == CLOSED) {
 8009bf0:	8ae5      	ldrh	r5, [r4, #22]
 8009bf2:	b99b      	cbnz	r3, 8009c1c <tcp_abandon+0x88>
      if (pcb->local_port != 0) {
 8009bf4:	b13d      	cbz	r5, 8009c06 <tcp_abandon+0x72>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009bf6:	4a23      	ldr	r2, [pc, #140]	; (8009c84 <tcp_abandon+0xf0>)
 8009bf8:	6813      	ldr	r3, [r2, #0]
 8009bfa:	42a3      	cmp	r3, r4
 8009bfc:	d106      	bne.n	8009c0c <tcp_abandon+0x78>
 8009bfe:	68e3      	ldr	r3, [r4, #12]
 8009c00:	6013      	str	r3, [r2, #0]
 8009c02:	2500      	movs	r5, #0
 8009c04:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8009c06:	462e      	mov	r6, r5
 8009c08:	e00f      	b.n	8009c2a <tcp_abandon+0x96>
 8009c0a:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0f8      	beq.n	8009c02 <tcp_abandon+0x6e>
 8009c10:	68da      	ldr	r2, [r3, #12]
 8009c12:	42a2      	cmp	r2, r4
 8009c14:	d1f9      	bne.n	8009c0a <tcp_abandon+0x76>
 8009c16:	68e2      	ldr	r2, [r4, #12]
 8009c18:	60da      	str	r2, [r3, #12]
 8009c1a:	e7f2      	b.n	8009c02 <tcp_abandon+0x6e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	481a      	ldr	r0, [pc, #104]	; (8009c88 <tcp_abandon+0xf4>)
 8009c20:	f7ff fdd0 	bl	80097c4 <tcp_pcb_remove>
 8009c24:	4b19      	ldr	r3, [pc, #100]	; (8009c8c <tcp_abandon+0xf8>)
 8009c26:	2201      	movs	r2, #1
 8009c28:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8009c2a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009c2c:	b108      	cbz	r0, 8009c32 <tcp_abandon+0x9e>
      tcp_segs_free(pcb->unacked);
 8009c2e:	f7ff fb1b 	bl	8009268 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8009c32:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009c34:	b108      	cbz	r0, 8009c3a <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unsent);
 8009c36:	f7ff fb17 	bl	8009268 <tcp_segs_free>
    if (send_rst) {
 8009c3a:	b156      	cbz	r6, 8009c52 <tcp_abandon+0xbe>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009c3c:	8b23      	ldrh	r3, [r4, #24]
 8009c3e:	4652      	mov	r2, sl
 8009c40:	4649      	mov	r1, r9
 8009c42:	4620      	mov	r0, r4
 8009c44:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8009c48:	1d23      	adds	r3, r4, #4
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	4623      	mov	r3, r4
 8009c4e:	f002 f86f 	bl	800bd30 <tcp_rst>
    tcp_free(pcb);
 8009c52:	4620      	mov	r0, r4
 8009c54:	f7ff fa18 	bl	8009088 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009c58:	b13f      	cbz	r7, 8009c6a <tcp_abandon+0xd6>
 8009c5a:	f06f 010c 	mvn.w	r1, #12
 8009c5e:	4640      	mov	r0, r8
 8009c60:	463b      	mov	r3, r7
}
 8009c62:	b004      	add	sp, #16
 8009c64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009c68:	4718      	bx	r3
}
 8009c6a:	b004      	add	sp, #16
 8009c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c70:	0801429a 	.word	0x0801429a
 8009c74:	08014834 	.word	0x08014834
 8009c78:	08012bab 	.word	0x08012bab
 8009c7c:	0801484d 	.word	0x0801484d
 8009c80:	20010d20 	.word	0x20010d20
 8009c84:	20010d1c 	.word	0x20010d1c
 8009c88:	20010d10 	.word	0x20010d10
 8009c8c:	20010d0c 	.word	0x20010d0c

08009c90 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8009c90:	2101      	movs	r1, #1
 8009c92:	f7ff bf7f 	b.w	8009b94 <tcp_abandon>
	...

08009c98 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009c98:	b570      	push	{r4, r5, r6, lr}
 8009c9a:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009c9c:	4605      	mov	r5, r0
 8009c9e:	b930      	cbnz	r0, 8009cae <tcp_netif_ip_addr_changed_pcblist+0x16>
 8009ca0:	4b09      	ldr	r3, [pc, #36]	; (8009cc8 <tcp_netif_ip_addr_changed_pcblist+0x30>)
 8009ca2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009ca6:	4909      	ldr	r1, [pc, #36]	; (8009ccc <tcp_netif_ip_addr_changed_pcblist+0x34>)
 8009ca8:	4809      	ldr	r0, [pc, #36]	; (8009cd0 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8009caa:	f003 fef1 	bl	800da90 <iprintf>

  while (pcb != NULL) {
 8009cae:	b904      	cbnz	r4, 8009cb2 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8009cb0:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009cb2:	6822      	ldr	r2, [r4, #0]
 8009cb4:	682b      	ldr	r3, [r5, #0]
 8009cb6:	68e6      	ldr	r6, [r4, #12]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d102      	bne.n	8009cc2 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f7ff ffe7 	bl	8009c90 <tcp_abort>
{
 8009cc2:	4634      	mov	r4, r6
 8009cc4:	e7f3      	b.n	8009cae <tcp_netif_ip_addr_changed_pcblist+0x16>
 8009cc6:	bf00      	nop
 8009cc8:	0801429a 	.word	0x0801429a
 8009ccc:	0801489b 	.word	0x0801489b
 8009cd0:	08012bab 	.word	0x08012bab

08009cd4 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cd4:	4b0c      	ldr	r3, [pc, #48]	; (8009d08 <tcp_kill_state+0x34>)
  inactivity = 0;
 8009cd6:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cd8:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009cda:	4b0c      	ldr	r3, [pc, #48]	; (8009d0c <tcp_kill_state+0x38>)
{
 8009cdc:	b430      	push	{r4, r5}
 8009cde:	4604      	mov	r4, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009ce0:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8009ce2:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ce4:	b919      	cbnz	r1, 8009cee <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 8009ce6:	b168      	cbz	r0, 8009d04 <tcp_kill_state+0x30>
}
 8009ce8:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 8009cea:	f7ff bf53 	b.w	8009b94 <tcp_abandon>
    if (pcb->state == state) {
 8009cee:	7d0b      	ldrb	r3, [r1, #20]
 8009cf0:	42a3      	cmp	r3, r4
 8009cf2:	d105      	bne.n	8009d00 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009cf4:	6a0b      	ldr	r3, [r1, #32]
 8009cf6:	1aeb      	subs	r3, r5, r3
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	bf24      	itt	cs
 8009cfc:	461a      	movcs	r2, r3
 8009cfe:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d00:	68c9      	ldr	r1, [r1, #12]
 8009d02:	e7ef      	b.n	8009ce4 <tcp_kill_state+0x10>
}
 8009d04:	bc30      	pop	{r4, r5}
 8009d06:	4770      	bx	lr
 8009d08:	20010d10 	.word	0x20010d10
 8009d0c:	20010d14 	.word	0x20010d14

08009d10 <tcp_alloc>:
{
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009d14:	2001      	movs	r0, #1
 8009d16:	f7fe fc5d 	bl	80085d4 <memp_malloc>
  if (pcb == NULL) {
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d136      	bne.n	8009d8e <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009d20:	4e3f      	ldr	r6, [pc, #252]	; (8009e20 <tcp_alloc+0x110>)
 8009d22:	6830      	ldr	r0, [r6, #0]
  while (pcb != NULL) {
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d157      	bne.n	8009dd8 <tcp_alloc+0xc8>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d28:	4b3e      	ldr	r3, [pc, #248]	; (8009e24 <tcp_alloc+0x114>)
  inactivity = 0;
 8009d2a:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009d2c:	4d3e      	ldr	r5, [pc, #248]	; (8009e28 <tcp_alloc+0x118>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d2e:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009d30:	682f      	ldr	r7, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d15b      	bne.n	8009dee <tcp_alloc+0xde>
  if (inactive != NULL) {
 8009d36:	b108      	cbz	r0, 8009d3c <tcp_alloc+0x2c>
    tcp_abort(inactive);
 8009d38:	f7ff ffaa 	bl	8009c90 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009d3c:	2001      	movs	r0, #1
 8009d3e:	f7fe fc49 	bl	80085d4 <memp_malloc>
    if (pcb == NULL) {
 8009d42:	4603      	mov	r3, r0
 8009d44:	bb18      	cbnz	r0, 8009d8e <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 8009d46:	2009      	movs	r0, #9
 8009d48:	f7ff ffc4 	bl	8009cd4 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009d4c:	2001      	movs	r0, #1
 8009d4e:	f7fe fc41 	bl	80085d4 <memp_malloc>
      if (pcb == NULL) {
 8009d52:	4603      	mov	r3, r0
 8009d54:	b9d8      	cbnz	r0, 8009d8e <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 8009d56:	2008      	movs	r0, #8
 8009d58:	f7ff ffbc 	bl	8009cd4 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009d5c:	2001      	movs	r0, #1
 8009d5e:	f7fe fc39 	bl	80085d4 <memp_malloc>
        if (pcb == NULL) {
 8009d62:	4603      	mov	r3, r0
 8009d64:	b998      	cbnz	r0, 8009d8e <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009d66:	0622      	lsls	r2, r4, #24
 8009d68:	d449      	bmi.n	8009dfe <tcp_alloc+0xee>
  if (mprio == 0) {
 8009d6a:	b15c      	cbz	r4, 8009d84 <tcp_alloc+0x74>
 8009d6c:	4621      	mov	r1, r4
  mprio--;
 8009d6e:	3901      	subs	r1, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d70:	6832      	ldr	r2, [r6, #0]
  inactivity = 0;
 8009d72:	2000      	movs	r0, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009d74:	682e      	ldr	r6, [r5, #0]
  mprio--;
 8009d76:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d78:	2a00      	cmp	r2, #0
 8009d7a:	d142      	bne.n	8009e02 <tcp_alloc+0xf2>
  if (inactive != NULL) {
 8009d7c:	b113      	cbz	r3, 8009d84 <tcp_alloc+0x74>
    tcp_abort(inactive);
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7ff ff86 	bl	8009c90 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009d84:	2001      	movs	r0, #1
 8009d86:	f7fe fc25 	bl	80085d4 <memp_malloc>
  if (pcb != NULL) {
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	b310      	cbz	r0, 8009dd4 <tcp_alloc+0xc4>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009d8e:	2298      	movs	r2, #152	; 0x98
 8009d90:	4618      	mov	r0, r3
 8009d92:	2100      	movs	r1, #0
 8009d94:	f003 fe74 	bl	800da80 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 8009d98:	f241 62d0 	movw	r2, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009d9c:	4603      	mov	r3, r0
    pcb->prio = prio;
 8009d9e:	7544      	strb	r4, [r0, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009da0:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009da4:	4a21      	ldr	r2, [pc, #132]	; (8009e2c <tcp_alloc+0x11c>)
 8009da6:	6282      	str	r2, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009da8:	22ff      	movs	r2, #255	; 0xff
 8009daa:	72c2      	strb	r2, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009dac:	2206      	movs	r2, #6
 8009dae:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009db2:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 8009db4:	4a1e      	ldr	r2, [pc, #120]	; (8009e30 <tcp_alloc+0x120>)
 8009db6:	6302      	str	r2, [r0, #48]	; 0x30
    pcb->tmr = tcp_ticks;
 8009db8:	4a1b      	ldr	r2, [pc, #108]	; (8009e28 <tcp_alloc+0x118>)
 8009dba:	6812      	ldr	r2, [r2, #0]
 8009dbc:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009dbe:	4a1d      	ldr	r2, [pc, #116]	; (8009e34 <tcp_alloc+0x124>)
 8009dc0:	7812      	ldrb	r2, [r2, #0]
 8009dc2:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
 8009dc4:	4a1c      	ldr	r2, [pc, #112]	; (8009e38 <tcp_alloc+0x128>)
 8009dc6:	6482      	str	r2, [r0, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 8009dc8:	4a1c      	ldr	r2, [pc, #112]	; (8009e3c <tcp_alloc+0x12c>)
 8009dca:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009dce:	4a1c      	ldr	r2, [pc, #112]	; (8009e40 <tcp_alloc+0x130>)
 8009dd0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 8009dd8:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 8009dda:	68c5      	ldr	r5, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8009ddc:	0719      	lsls	r1, r3, #28
 8009dde:	d504      	bpl.n	8009dea <tcp_alloc+0xda>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009de0:	f023 0308 	bic.w	r3, r3, #8
 8009de4:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8009de6:	f7ff f913 	bl	8009010 <tcp_close_shutdown_fin>
{
 8009dea:	4628      	mov	r0, r5
 8009dec:	e79a      	b.n	8009d24 <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009dee:	6a1a      	ldr	r2, [r3, #32]
 8009df0:	1aba      	subs	r2, r7, r2
 8009df2:	428a      	cmp	r2, r1
 8009df4:	bf24      	itt	cs
 8009df6:	4618      	movcs	r0, r3
 8009df8:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	e799      	b.n	8009d32 <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009dfe:	217f      	movs	r1, #127	; 0x7f
 8009e00:	e7b5      	b.n	8009d6e <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 8009e02:	7d57      	ldrb	r7, [r2, #21]
 8009e04:	428f      	cmp	r7, r1
 8009e06:	d304      	bcc.n	8009e12 <tcp_alloc+0x102>
 8009e08:	d107      	bne.n	8009e1a <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009e0a:	6a15      	ldr	r5, [r2, #32]
 8009e0c:	1b75      	subs	r5, r6, r5
 8009e0e:	4285      	cmp	r5, r0
 8009e10:	d303      	bcc.n	8009e1a <tcp_alloc+0x10a>
      inactivity = tcp_ticks - pcb->tmr;
 8009e12:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
 8009e14:	4639      	mov	r1, r7
      inactivity = tcp_ticks - pcb->tmr;
 8009e16:	4613      	mov	r3, r2
 8009e18:	1a30      	subs	r0, r6, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e1a:	68d2      	ldr	r2, [r2, #12]
 8009e1c:	e7ac      	b.n	8009d78 <tcp_alloc+0x68>
 8009e1e:	bf00      	nop
 8009e20:	20010d10 	.word	0x20010d10
 8009e24:	20010d20 	.word	0x20010d20
 8009e28:	20010d14 	.word	0x20010d14
 8009e2c:	0b680b68 	.word	0x0b680b68
 8009e30:	0218ffff 	.word	0x0218ffff
 8009e34:	20006945 	.word	0x20006945
 8009e38:	16d00001 	.word	0x16d00001
 8009e3c:	08009a1d 	.word	0x08009a1d
 8009e40:	006ddd00 	.word	0x006ddd00

08009e44 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8009e44:	2040      	movs	r0, #64	; 0x40
 8009e46:	f7ff bf63 	b.w	8009d10 <tcp_alloc>
	...

08009e4c <tcp_next_iss>:
{
 8009e4c:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009e4e:	b930      	cbnz	r0, 8009e5e <tcp_next_iss+0x12>
 8009e50:	4b06      	ldr	r3, [pc, #24]	; (8009e6c <tcp_next_iss+0x20>)
 8009e52:	f640 02af 	movw	r2, #2223	; 0x8af
 8009e56:	4906      	ldr	r1, [pc, #24]	; (8009e70 <tcp_next_iss+0x24>)
 8009e58:	4806      	ldr	r0, [pc, #24]	; (8009e74 <tcp_next_iss+0x28>)
 8009e5a:	f003 fe19 	bl	800da90 <iprintf>
  iss += tcp_ticks;       /* XXX */
 8009e5e:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <tcp_next_iss+0x2c>)
 8009e60:	4a06      	ldr	r2, [pc, #24]	; (8009e7c <tcp_next_iss+0x30>)
 8009e62:	6858      	ldr	r0, [r3, #4]
 8009e64:	6812      	ldr	r2, [r2, #0]
 8009e66:	4410      	add	r0, r2
 8009e68:	6058      	str	r0, [r3, #4]
}
 8009e6a:	bd08      	pop	{r3, pc}
 8009e6c:	0801429a 	.word	0x0801429a
 8009e70:	080148cf 	.word	0x080148cf
 8009e74:	08012bab 	.word	0x08012bab
 8009e78:	2000003c 	.word	0x2000003c
 8009e7c:	20010d14 	.word	0x20010d14

08009e80 <tcp_eff_send_mss_netif>:
{
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	4604      	mov	r4, r0
 8009e84:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009e86:	b932      	cbnz	r2, 8009e96 <tcp_eff_send_mss_netif+0x16>
 8009e88:	4b09      	ldr	r3, [pc, #36]	; (8009eb0 <tcp_eff_send_mss_netif+0x30>)
 8009e8a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009e8e:	4909      	ldr	r1, [pc, #36]	; (8009eb4 <tcp_eff_send_mss_netif+0x34>)
 8009e90:	4809      	ldr	r0, [pc, #36]	; (8009eb8 <tcp_eff_send_mss_netif+0x38>)
 8009e92:	f003 fdfd 	bl	800da90 <iprintf>
    if (outif == NULL) {
 8009e96:	b14d      	cbz	r5, 8009eac <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 8009e98:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
  if (mtu != 0) {
 8009e9a:	b13b      	cbz	r3, 8009eac <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009e9c:	2b28      	cmp	r3, #40	; 0x28
 8009e9e:	bf8a      	itet	hi
 8009ea0:	3b28      	subhi	r3, #40	; 0x28
 8009ea2:	2300      	movls	r3, #0
 8009ea4:	b29b      	uxthhi	r3, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009ea6:	429c      	cmp	r4, r3
 8009ea8:	bf28      	it	cs
 8009eaa:	461c      	movcs	r4, r3
}
 8009eac:	4620      	mov	r0, r4
 8009eae:	bd38      	pop	{r3, r4, r5, pc}
 8009eb0:	0801429a 	.word	0x0801429a
 8009eb4:	080148e9 	.word	0x080148e9
 8009eb8:	08012bab 	.word	0x08012bab

08009ebc <tcp_connect>:
{
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	461f      	mov	r7, r3
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	b950      	cbnz	r0, 8009eda <tcp_connect+0x1e>
 8009ec4:	4b40      	ldr	r3, [pc, #256]	; (8009fc8 <tcp_connect+0x10c>)
 8009ec6:	f240 4235 	movw	r2, #1077	; 0x435
 8009eca:	4940      	ldr	r1, [pc, #256]	; (8009fcc <tcp_connect+0x110>)
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8009ecc:	f06f 050f 	mvn.w	r5, #15
 8009ed0:	483f      	ldr	r0, [pc, #252]	; (8009fd0 <tcp_connect+0x114>)
 8009ed2:	f003 fddd 	bl	800da90 <iprintf>
}
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8009eda:	b921      	cbnz	r1, 8009ee6 <tcp_connect+0x2a>
 8009edc:	4b3a      	ldr	r3, [pc, #232]	; (8009fc8 <tcp_connect+0x10c>)
 8009ede:	f240 4236 	movw	r2, #1078	; 0x436
 8009ee2:	493c      	ldr	r1, [pc, #240]	; (8009fd4 <tcp_connect+0x118>)
 8009ee4:	e7f2      	b.n	8009ecc <tcp_connect+0x10>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8009ee6:	7d03      	ldrb	r3, [r0, #20]
 8009ee8:	b14b      	cbz	r3, 8009efe <tcp_connect+0x42>
 8009eea:	4b37      	ldr	r3, [pc, #220]	; (8009fc8 <tcp_connect+0x10c>)
 8009eec:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8009ef0:	4939      	ldr	r1, [pc, #228]	; (8009fd8 <tcp_connect+0x11c>)
 8009ef2:	f06f 0509 	mvn.w	r5, #9
 8009ef6:	4836      	ldr	r0, [pc, #216]	; (8009fd0 <tcp_connect+0x114>)
 8009ef8:	f003 fdca 	bl	800da90 <iprintf>
 8009efc:	e7eb      	b.n	8009ed6 <tcp_connect+0x1a>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8009efe:	680b      	ldr	r3, [r1, #0]
  pcb->remote_port = port;
 8009f00:	8302      	strh	r2, [r0, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8009f02:	6043      	str	r3, [r0, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8009f04:	7a00      	ldrb	r0, [r0, #8]
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d046      	beq.n	8009f98 <tcp_connect+0xdc>
    netif = netif_get_by_index(pcb->netif_idx);
 8009f0a:	f7fe fcef 	bl	80088ec <netif_get_by_index>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009f0e:	4605      	mov	r5, r0
  if (netif == NULL) {
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d056      	beq.n	8009fc2 <tcp_connect+0x106>
  if (ip_addr_isany(&pcb->local_ip)) {
 8009f14:	6823      	ldr	r3, [r4, #0]
 8009f16:	b90b      	cbnz	r3, 8009f1c <tcp_connect+0x60>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009f18:	6843      	ldr	r3, [r0, #4]
 8009f1a:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 8009f1c:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 8009f1e:	2e00      	cmp	r6, #0
 8009f20:	d03e      	beq.n	8009fa0 <tcp_connect+0xe4>
  iss = tcp_next_iss(pcb);
 8009f22:	4620      	mov	r0, r4
 8009f24:	f7ff ff92 	bl	8009e4c <tcp_next_iss>
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009f28:	2300      	movs	r3, #0
 8009f2a:	4a2c      	ldr	r2, [pc, #176]	; (8009fdc <tcp_connect+0x120>)
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8009f2c:	4629      	mov	r1, r5
  pcb->snd_nxt = iss;
 8009f2e:	6520      	str	r0, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 8009f30:	3801      	subs	r0, #1
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009f32:	62e3      	str	r3, [r4, #44]	; 0x2c
  pcb->lastack = iss - 1;
 8009f34:	6460      	str	r0, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009f36:	e9c4 3209 	strd	r3, r2, [r4, #36]	; 0x24
  pcb->snd_lbb = iss - 1;
 8009f3a:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
  pcb->snd_wnd = TCP_WND;
 8009f3e:	f640 3368 	movw	r3, #2920	; 0xb68
  pcb->mss = INITIAL_MSS;
 8009f42:	f44f 7006 	mov.w	r0, #536	; 0x218
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8009f46:	1d22      	adds	r2, r4, #4
  pcb->snd_wnd = TCP_WND;
 8009f48:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  pcb->mss = INITIAL_MSS;
 8009f4c:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8009f4e:	f7ff ff97 	bl	8009e80 <tcp_eff_send_mss_netif>
  pcb->cwnd = 1;
 8009f52:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8009f54:	8660      	strh	r0, [r4, #50]	; 0x32
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8009f56:	2102      	movs	r1, #2
 8009f58:	4620      	mov	r0, r4
  pcb->cwnd = 1;
 8009f5a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  pcb->connected = connected;
 8009f5e:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8009f62:	f001 fd69 	bl	800ba38 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 8009f66:	4605      	mov	r5, r0
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d1b4      	bne.n	8009ed6 <tcp_connect+0x1a>
    pcb->state = SYN_SENT;
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 8009f70:	b12e      	cbz	r6, 8009f7e <tcp_connect+0xc2>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009f72:	4a1b      	ldr	r2, [pc, #108]	; (8009fe0 <tcp_connect+0x124>)
 8009f74:	6813      	ldr	r3, [r2, #0]
 8009f76:	42a3      	cmp	r3, r4
 8009f78:	d11b      	bne.n	8009fb2 <tcp_connect+0xf6>
 8009f7a:	68e3      	ldr	r3, [r4, #12]
 8009f7c:	6013      	str	r3, [r2, #0]
    TCP_REG_ACTIVE(pcb);
 8009f7e:	4b19      	ldr	r3, [pc, #100]	; (8009fe4 <tcp_connect+0x128>)
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	601c      	str	r4, [r3, #0]
 8009f84:	60e2      	str	r2, [r4, #12]
 8009f86:	f002 fa21 	bl	800c3cc <tcp_timer_needed>
 8009f8a:	4b17      	ldr	r3, [pc, #92]	; (8009fe8 <tcp_connect+0x12c>)
 8009f8c:	2201      	movs	r2, #1
    tcp_output(pcb);
 8009f8e:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 8009f90:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8009f92:	f001 ff45 	bl	800be20 <tcp_output>
 8009f96:	e79e      	b.n	8009ed6 <tcp_connect+0x1a>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009f98:	1d20      	adds	r0, r4, #4
 8009f9a:	f7fd fa3d 	bl	8007418 <ip4_route>
 8009f9e:	e7b6      	b.n	8009f0e <tcp_connect+0x52>
    pcb->local_port = tcp_new_port();
 8009fa0:	f7ff f80c 	bl	8008fbc <tcp_new_port>
 8009fa4:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d1bb      	bne.n	8009f22 <tcp_connect+0x66>
      return ERR_BUF;
 8009faa:	f06f 0501 	mvn.w	r5, #1
 8009fae:	e792      	b.n	8009ed6 <tcp_connect+0x1a>
 8009fb0:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0e3      	beq.n	8009f7e <tcp_connect+0xc2>
 8009fb6:	68da      	ldr	r2, [r3, #12]
 8009fb8:	42a2      	cmp	r2, r4
 8009fba:	d1f9      	bne.n	8009fb0 <tcp_connect+0xf4>
 8009fbc:	68e2      	ldr	r2, [r4, #12]
 8009fbe:	60da      	str	r2, [r3, #12]
 8009fc0:	e7dd      	b.n	8009f7e <tcp_connect+0xc2>
    return ERR_RTE;
 8009fc2:	f06f 0503 	mvn.w	r5, #3
 8009fc6:	e786      	b.n	8009ed6 <tcp_connect+0x1a>
 8009fc8:	0801429a 	.word	0x0801429a
 8009fcc:	08014910 	.word	0x08014910
 8009fd0:	08012bab 	.word	0x08012bab
 8009fd4:	08014929 	.word	0x08014929
 8009fd8:	08014945 	.word	0x08014945
 8009fdc:	0b680b68 	.word	0x0b680b68
 8009fe0:	20010d1c 	.word	0x20010d1c
 8009fe4:	20010d10 	.word	0x20010d10
 8009fe8:	20010d0c 	.word	0x20010d0c

08009fec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	b180      	cbz	r0, 800a016 <tcp_netif_ip_addr_changed+0x2a>
 8009ff4:	6803      	ldr	r3, [r0, #0]
 8009ff6:	b173      	cbz	r3, 800a016 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009ff8:	4b0b      	ldr	r3, [pc, #44]	; (800a028 <tcp_netif_ip_addr_changed+0x3c>)
 8009ffa:	6819      	ldr	r1, [r3, #0]
 8009ffc:	f7ff fe4c 	bl	8009c98 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a000:	4b0a      	ldr	r3, [pc, #40]	; (800a02c <tcp_netif_ip_addr_changed+0x40>)
 800a002:	4620      	mov	r0, r4
 800a004:	6819      	ldr	r1, [r3, #0]
 800a006:	f7ff fe47 	bl	8009c98 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a00a:	b125      	cbz	r5, 800a016 <tcp_netif_ip_addr_changed+0x2a>
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	b113      	cbz	r3, 800a016 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a010:	4b07      	ldr	r3, [pc, #28]	; (800a030 <tcp_netif_ip_addr_changed+0x44>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	b903      	cbnz	r3, 800a018 <tcp_netif_ip_addr_changed+0x2c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 800a016:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a018:	6819      	ldr	r1, [r3, #0]
 800a01a:	6822      	ldr	r2, [r4, #0]
 800a01c:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a01e:	bf04      	itt	eq
 800a020:	682a      	ldreq	r2, [r5, #0]
 800a022:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	e7f5      	b.n	800a014 <tcp_netif_ip_addr_changed+0x28>
 800a028:	20010d10 	.word	0x20010d10
 800a02c:	20010d1c 	.word	0x20010d1c
 800a030:	20010d18 	.word	0x20010d18

0800a034 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800a034:	4a08      	ldr	r2, [pc, #32]	; (800a058 <tcp_get_next_optbyte+0x24>)
 800a036:	8813      	ldrh	r3, [r2, #0]
 800a038:	4610      	mov	r0, r2
 800a03a:	1c59      	adds	r1, r3, #1
 800a03c:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a03e:	6851      	ldr	r1, [r2, #4]
 800a040:	b111      	cbz	r1, 800a048 <tcp_get_next_optbyte+0x14>
 800a042:	8912      	ldrh	r2, [r2, #8]
 800a044:	4293      	cmp	r3, r2
 800a046:	d203      	bcs.n	800a050 <tcp_get_next_optbyte+0x1c>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 800a048:	68c2      	ldr	r2, [r0, #12]
 800a04a:	4413      	add	r3, r2
 800a04c:	7d18      	ldrb	r0, [r3, #20]
 800a04e:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a050:	1a9b      	subs	r3, r3, r2
    return tcphdr_opt2[idx];
 800a052:	b2db      	uxtb	r3, r3
 800a054:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800a056:	4770      	bx	lr
 800a058:	20006948 	.word	0x20006948

0800a05c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a060:	4606      	mov	r6, r0
 800a062:	b930      	cbnz	r0, 800a072 <tcp_parseopt+0x16>
 800a064:	4b1e      	ldr	r3, [pc, #120]	; (800a0e0 <tcp_parseopt+0x84>)
 800a066:	f240 727d 	movw	r2, #1917	; 0x77d
 800a06a:	491e      	ldr	r1, [pc, #120]	; (800a0e4 <tcp_parseopt+0x88>)
 800a06c:	481e      	ldr	r0, [pc, #120]	; (800a0e8 <tcp_parseopt+0x8c>)
 800a06e:	f003 fd0f 	bl	800da90 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a072:	4d1e      	ldr	r5, [pc, #120]	; (800a0ec <tcp_parseopt+0x90>)
 800a074:	8a2f      	ldrh	r7, [r5, #16]
 800a076:	b17f      	cbz	r7, 800a098 <tcp_parseopt+0x3c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a078:	2300      	movs	r3, #0
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a07a:	f240 58b3 	movw	r8, #1459	; 0x5b3
 800a07e:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a082:	802b      	strh	r3, [r5, #0]
 800a084:	882b      	ldrh	r3, [r5, #0]
 800a086:	42bb      	cmp	r3, r7
 800a088:	d206      	bcs.n	800a098 <tcp_parseopt+0x3c>
      u8_t opt = tcp_get_next_optbyte();
 800a08a:	f7ff ffd3 	bl	800a034 <tcp_get_next_optbyte>
      switch (opt) {
 800a08e:	2801      	cmp	r0, #1
 800a090:	d0f8      	beq.n	800a084 <tcp_parseopt+0x28>
 800a092:	2802      	cmp	r0, #2
 800a094:	d002      	beq.n	800a09c <tcp_parseopt+0x40>
 800a096:	b9c8      	cbnz	r0, 800a0cc <tcp_parseopt+0x70>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 800a098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a09c:	f7ff ffca 	bl	800a034 <tcp_get_next_optbyte>
 800a0a0:	2804      	cmp	r0, #4
 800a0a2:	d1f9      	bne.n	800a098 <tcp_parseopt+0x3c>
 800a0a4:	882b      	ldrh	r3, [r5, #0]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	42bb      	cmp	r3, r7
 800a0aa:	daf5      	bge.n	800a098 <tcp_parseopt+0x3c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a0ac:	f7ff ffc2 	bl	800a034 <tcp_get_next_optbyte>
 800a0b0:	0200      	lsls	r0, r0, #8
 800a0b2:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 800a0b4:	f7ff ffbe 	bl	800a034 <tcp_get_next_optbyte>
 800a0b8:	ea44 0300 	orr.w	r3, r4, r0
 800a0bc:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a0be:	1e5a      	subs	r2, r3, #1
 800a0c0:	b292      	uxth	r2, r2
 800a0c2:	4542      	cmp	r2, r8
 800a0c4:	bf88      	it	hi
 800a0c6:	464b      	movhi	r3, r9
 800a0c8:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 800a0ca:	e7db      	b.n	800a084 <tcp_parseopt+0x28>
          data = tcp_get_next_optbyte();
 800a0cc:	f7ff ffb2 	bl	800a034 <tcp_get_next_optbyte>
          if (data < 2) {
 800a0d0:	2801      	cmp	r0, #1
 800a0d2:	d9e1      	bls.n	800a098 <tcp_parseopt+0x3c>
          tcp_optidx += data - 2;
 800a0d4:	882b      	ldrh	r3, [r5, #0]
 800a0d6:	3b02      	subs	r3, #2
 800a0d8:	4418      	add	r0, r3
 800a0da:	8028      	strh	r0, [r5, #0]
 800a0dc:	e7d2      	b.n	800a084 <tcp_parseopt+0x28>
 800a0de:	bf00      	nop
 800a0e0:	080149cf 	.word	0x080149cf
 800a0e4:	08014a6b 	.word	0x08014a6b
 800a0e8:	08012bab 	.word	0x08012bab
 800a0ec:	20006948 	.word	0x20006948

0800a0f0 <tcp_input_delayed_close>:
{
 800a0f0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	b930      	cbnz	r0, 800a104 <tcp_input_delayed_close+0x14>
 800a0f6:	4b0f      	ldr	r3, [pc, #60]	; (800a134 <tcp_input_delayed_close+0x44>)
 800a0f8:	f240 225a 	movw	r2, #602	; 0x25a
 800a0fc:	490e      	ldr	r1, [pc, #56]	; (800a138 <tcp_input_delayed_close+0x48>)
 800a0fe:	480f      	ldr	r0, [pc, #60]	; (800a13c <tcp_input_delayed_close+0x4c>)
 800a100:	f003 fcc6 	bl	800da90 <iprintf>
  if (recv_flags & TF_CLOSED) {
 800a104:	4b0e      	ldr	r3, [pc, #56]	; (800a140 <tcp_input_delayed_close+0x50>)
 800a106:	7c98      	ldrb	r0, [r3, #18]
 800a108:	f010 0010 	ands.w	r0, r0, #16
 800a10c:	d011      	beq.n	800a132 <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a10e:	8b63      	ldrh	r3, [r4, #26]
 800a110:	06db      	lsls	r3, r3, #27
 800a112:	d406      	bmi.n	800a122 <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a114:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a118:	b11b      	cbz	r3, 800a122 <tcp_input_delayed_close+0x32>
 800a11a:	f06f 010e 	mvn.w	r1, #14
 800a11e:	6920      	ldr	r0, [r4, #16]
 800a120:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a122:	4621      	mov	r1, r4
 800a124:	4807      	ldr	r0, [pc, #28]	; (800a144 <tcp_input_delayed_close+0x54>)
 800a126:	f7ff fb4d 	bl	80097c4 <tcp_pcb_remove>
    tcp_free(pcb);
 800a12a:	4620      	mov	r0, r4
 800a12c:	f7fe ffac 	bl	8009088 <tcp_free>
 800a130:	2001      	movs	r0, #1
}
 800a132:	bd10      	pop	{r4, pc}
 800a134:	080149cf 	.word	0x080149cf
 800a138:	08014a85 	.word	0x08014a85
 800a13c:	08012bab 	.word	0x08012bab
 800a140:	20006948 	.word	0x20006948
 800a144:	20010d10 	.word	0x20010d10

0800a148 <tcp_free_acked_segments.isra.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800a148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a14c:	4606      	mov	r6, r0
 800a14e:	4617      	mov	r7, r2
    seg_list = seg_list->next;
 800a150:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a152:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800a1fc <tcp_free_acked_segments.isra.0+0xb4>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a156:	f8df 909c 	ldr.w	r9, [pc, #156]	; 800a1f4 <tcp_free_acked_segments.isra.0+0xac>
  while (seg_list != NULL &&
 800a15a:	2c00      	cmp	r4, #0
 800a15c:	d037      	beq.n	800a1ce <tcp_free_acked_segments.isra.0+0x86>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a15e:	68e3      	ldr	r3, [r4, #12]
 800a160:	6858      	ldr	r0, [r3, #4]
 800a162:	f7fd ff1a 	bl	8007f9a <lwip_htonl>
 800a166:	68e3      	ldr	r3, [r4, #12]
 800a168:	4682      	mov	sl, r0
 800a16a:	8925      	ldrh	r5, [r4, #8]
 800a16c:	8998      	ldrh	r0, [r3, #12]
 800a16e:	f7fd ff11 	bl	8007f94 <lwip_htons>
 800a172:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800a176:	f010 0003 	ands.w	r0, r0, #3
 800a17a:	eba5 0303 	sub.w	r3, r5, r3
 800a17e:	bf18      	it	ne
 800a180:	2001      	movne	r0, #1
 800a182:	eb03 050a 	add.w	r5, r3, sl
 800a186:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800a188:	2d00      	cmp	r5, #0
 800a18a:	dc21      	bgt.n	800a1d0 <tcp_free_acked_segments.isra.0+0x88>
    clen = pbuf_clen(next->p);
 800a18c:	e9d4 a000 	ldrd	sl, r0, [r4]
 800a190:	f7fe fdae 	bl	8008cf0 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a194:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(next->p);
 800a196:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a198:	4283      	cmp	r3, r0
 800a19a:	d206      	bcs.n	800a1aa <tcp_free_acked_segments.isra.0+0x62>
 800a19c:	464b      	mov	r3, r9
 800a19e:	f240 4257 	movw	r2, #1111	; 0x457
 800a1a2:	4912      	ldr	r1, [pc, #72]	; (800a1ec <tcp_free_acked_segments.isra.0+0xa4>)
 800a1a4:	4812      	ldr	r0, [pc, #72]	; (800a1f0 <tcp_free_acked_segments.isra.0+0xa8>)
 800a1a6:	f003 fc73 	bl	800da90 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a1aa:	8830      	ldrh	r0, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a1ac:	f8b8 2014 	ldrh.w	r2, [r8, #20]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a1b0:	1b45      	subs	r5, r0, r5
    tcp_seg_free(next);
 800a1b2:	4620      	mov	r0, r4
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a1b4:	8035      	strh	r5, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a1b6:	8923      	ldrh	r3, [r4, #8]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f8a8 3014 	strh.w	r3, [r8, #20]
    tcp_seg_free(next);
 800a1be:	f7ff f845 	bl	800924c <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800a1c2:	8833      	ldrh	r3, [r6, #0]
 800a1c4:	b17b      	cbz	r3, 800a1e6 <tcp_free_acked_segments.isra.0+0x9e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a1c6:	f1ba 0f00 	cmp.w	sl, #0
 800a1ca:	d10c      	bne.n	800a1e6 <tcp_free_acked_segments.isra.0+0x9e>
 800a1cc:	b11f      	cbz	r7, 800a1d6 <tcp_free_acked_segments.isra.0+0x8e>
    seg_list = seg_list->next;
 800a1ce:	2400      	movs	r4, #0
}
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a1d6:	4b07      	ldr	r3, [pc, #28]	; (800a1f4 <tcp_free_acked_segments.isra.0+0xac>)
 800a1d8:	f240 4261 	movw	r2, #1121	; 0x461
 800a1dc:	4906      	ldr	r1, [pc, #24]	; (800a1f8 <tcp_free_acked_segments.isra.0+0xb0>)
 800a1de:	4804      	ldr	r0, [pc, #16]	; (800a1f0 <tcp_free_acked_segments.isra.0+0xa8>)
 800a1e0:	f003 fc56 	bl	800da90 <iprintf>
  while (seg_list != NULL &&
 800a1e4:	e7f3      	b.n	800a1ce <tcp_free_acked_segments.isra.0+0x86>
    seg_list = seg_list->next;
 800a1e6:	4654      	mov	r4, sl
 800a1e8:	e7b7      	b.n	800a15a <tcp_free_acked_segments.isra.0+0x12>
 800a1ea:	bf00      	nop
 800a1ec:	08014aaa 	.word	0x08014aaa
 800a1f0:	08012bab 	.word	0x08012bab
 800a1f4:	080149cf 	.word	0x080149cf
 800a1f8:	08014ad2 	.word	0x08014ad2
 800a1fc:	20006948 	.word	0x20006948

0800a200 <tcp_receive>:
{
 800a200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a202:	4604      	mov	r4, r0
 800a204:	b930      	cbnz	r0, 800a214 <tcp_receive+0x14>
 800a206:	4bb4      	ldr	r3, [pc, #720]	; (800a4d8 <tcp_receive+0x2d8>)
 800a208:	f240 427b 	movw	r2, #1147	; 0x47b
 800a20c:	49b3      	ldr	r1, [pc, #716]	; (800a4dc <tcp_receive+0x2dc>)
 800a20e:	48b4      	ldr	r0, [pc, #720]	; (800a4e0 <tcp_receive+0x2e0>)
 800a210:	f003 fc3e 	bl	800da90 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a214:	7d23      	ldrb	r3, [r4, #20]
 800a216:	2b03      	cmp	r3, #3
 800a218:	d806      	bhi.n	800a228 <tcp_receive+0x28>
 800a21a:	4baf      	ldr	r3, [pc, #700]	; (800a4d8 <tcp_receive+0x2d8>)
 800a21c:	f240 427c 	movw	r2, #1148	; 0x47c
 800a220:	49b0      	ldr	r1, [pc, #704]	; (800a4e4 <tcp_receive+0x2e4>)
 800a222:	48af      	ldr	r0, [pc, #700]	; (800a4e0 <tcp_receive+0x2e0>)
 800a224:	f003 fc34 	bl	800da90 <iprintf>
  if (flags & TCP_ACK) {
 800a228:	4daf      	ldr	r5, [pc, #700]	; (800a4e8 <tcp_receive+0x2e8>)
 800a22a:	7f2b      	ldrb	r3, [r5, #28]
 800a22c:	06de      	lsls	r6, r3, #27
 800a22e:	d57e      	bpl.n	800a32e <tcp_receive+0x12e>
 800a230:	6a2b      	ldr	r3, [r5, #32]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a232:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800a236:	69aa      	ldr	r2, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a238:	e9d4 6015 	ldrd	r6, r0, [r4, #84]	; 0x54
 800a23c:	1af7      	subs	r7, r6, r3
 800a23e:	2f00      	cmp	r7, #0
 800a240:	db0a      	blt.n	800a258 <tcp_receive+0x58>
 800a242:	429e      	cmp	r6, r3
 800a244:	d102      	bne.n	800a24c <tcp_receive+0x4c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a246:	1a86      	subs	r6, r0, r2
 800a248:	2e00      	cmp	r6, #0
 800a24a:	db05      	blt.n	800a258 <tcp_receive+0x58>
 800a24c:	4290      	cmp	r0, r2
 800a24e:	d110      	bne.n	800a272 <tcp_receive+0x72>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a250:	68ee      	ldr	r6, [r5, #12]
 800a252:	89f6      	ldrh	r6, [r6, #14]
 800a254:	428e      	cmp	r6, r1
 800a256:	d90c      	bls.n	800a272 <tcp_receive+0x72>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a258:	68ee      	ldr	r6, [r5, #12]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a25a:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a25e:	89f6      	ldrh	r6, [r6, #14]
 800a260:	b2b7      	uxth	r7, r6
 800a262:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a266:	45bc      	cmp	ip, r7
      pcb->snd_wl2 = ackno;
 800a268:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a26c:	bf38      	it	cc
 800a26e:	f8a4 6062 	strhcc.w	r6, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a272:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800a274:	1b93      	subs	r3, r2, r6
 800a276:	2b00      	cmp	r3, #0
 800a278:	f300 8148 	bgt.w	800a50c <tcp_receive+0x30c>
      if (tcplen == 0) {
 800a27c:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800a27e:	2b00      	cmp	r3, #0
 800a280:	f040 8140 	bne.w	800a504 <tcp_receive+0x304>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a284:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a288:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a28a:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800a28c:	443b      	add	r3, r7
 800a28e:	428b      	cmp	r3, r1
 800a290:	f040 8138 	bne.w	800a504 <tcp_receive+0x304>
          if (pcb->rtime >= 0) {
 800a294:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f2c0 8133 	blt.w	800a504 <tcp_receive+0x304>
            if (pcb->lastack == ackno) {
 800a29e:	4296      	cmp	r6, r2
 800a2a0:	f040 8130 	bne.w	800a504 <tcp_receive+0x304>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a2a4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a2a8:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 800a2aa:	bf1c      	itt	ne
 800a2ac:	3301      	addne	r3, #1
 800a2ae:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800a2b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a2b6:	2b03      	cmp	r3, #3
 800a2b8:	d90f      	bls.n	800a2da <tcp_receive+0xda>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a2ba:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a2be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a2c2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a2c4:	4413      	add	r3, r2
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	bf88      	it	hi
 800a2cc:	460b      	movhi	r3, r1
 800a2ce:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f001 fcf8 	bl	800bcc8 <tcp_rexmit_fast>
      if (!found_dupack) {
 800a2d8:	e000      	b.n	800a2dc <tcp_receive+0xdc>
              if (pcb->dupacks >= 3) {
 800a2da:	d0fa      	beq.n	800a2d2 <tcp_receive+0xd2>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a2dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a2de:	b330      	cbz	r0, 800a32e <tcp_receive+0x12e>
 800a2e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2e2:	69aa      	ldr	r2, [r5, #24]
 800a2e4:	1a9b      	subs	r3, r3, r2
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	da21      	bge.n	800a32e <tcp_receive+0x12e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a2ea:	4b80      	ldr	r3, [pc, #512]	; (800a4ec <tcp_receive+0x2ec>)
 800a2ec:	b280      	uxth	r0, r0
      m = (s16_t)(m - (pcb->sa >> 3));
 800a2ee:	f9b4 703c 	ldrsh.w	r7, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a2f2:	881a      	ldrh	r2, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800a2f4:	f3c7 06cf 	ubfx	r6, r7, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a2f8:	1a11      	subs	r1, r2, r0
      m = (s16_t)(m - (pcb->sa >> 3));
 800a2fa:	1b89      	subs	r1, r1, r6
 800a2fc:	b20b      	sxth	r3, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 800a2fe:	fa17 f181 	uxtah	r1, r7, r1
      if (m < 0) {
 800a302:	2b00      	cmp	r3, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800a304:	b209      	sxth	r1, r1
        m = (s16_t) - m;
 800a306:	bfb8      	it	lt
 800a308:	1a80      	sublt	r0, r0, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 800a30a:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a30e:	87a1      	strh	r1, [r4, #60]	; 0x3c
        m = (s16_t) - m;
 800a310:	bfb8      	it	lt
 800a312:	1980      	addlt	r0, r0, r6
      pcb->sv = (s16_t)(pcb->sv + m);
 800a314:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
        m = (s16_t) - m;
 800a318:	bfb8      	it	lt
 800a31a:	b203      	sxthlt	r3, r0
      pcb->sv = (s16_t)(pcb->sv + m);
 800a31c:	4413      	add	r3, r2
 800a31e:	b29b      	uxth	r3, r3
 800a320:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a322:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800a326:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800a32a:	2300      	movs	r3, #0
 800a32c:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a32e:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800a330:	6a2b      	ldr	r3, [r5, #32]
 800a332:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a334:	2800      	cmp	r0, #0
 800a336:	f000 818b 	beq.w	800a650 <tcp_receive+0x450>
 800a33a:	7d21      	ldrb	r1, [r4, #20]
 800a33c:	2906      	cmp	r1, #6
 800a33e:	f200 8187 	bhi.w	800a650 <tcp_receive+0x450>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a342:	1ad7      	subs	r7, r2, r3
 800a344:	2f01      	cmp	r7, #1
 800a346:	f100 8172 	bmi.w	800a62e <tcp_receive+0x42e>
 800a34a:	f1c3 0101 	rsb	r1, r3, #1
 800a34e:	1a09      	subs	r1, r1, r0
 800a350:	4411      	add	r1, r2
 800a352:	2900      	cmp	r1, #0
 800a354:	f300 816b 	bgt.w	800a62e <tcp_receive+0x42e>
      struct pbuf *p = inseg.p;
 800a358:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a35a:	b936      	cbnz	r6, 800a36a <tcp_receive+0x16a>
 800a35c:	4b5e      	ldr	r3, [pc, #376]	; (800a4d8 <tcp_receive+0x2d8>)
 800a35e:	f240 5294 	movw	r2, #1428	; 0x594
 800a362:	4963      	ldr	r1, [pc, #396]	; (800a4f0 <tcp_receive+0x2f0>)
 800a364:	485e      	ldr	r0, [pc, #376]	; (800a4e0 <tcp_receive+0x2e0>)
 800a366:	f003 fb93 	bl	800da90 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a36a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a36e:	429f      	cmp	r7, r3
 800a370:	d906      	bls.n	800a380 <tcp_receive+0x180>
 800a372:	4b59      	ldr	r3, [pc, #356]	; (800a4d8 <tcp_receive+0x2d8>)
 800a374:	f240 5295 	movw	r2, #1429	; 0x595
 800a378:	495e      	ldr	r1, [pc, #376]	; (800a4f4 <tcp_receive+0x2f4>)
 800a37a:	4859      	ldr	r0, [pc, #356]	; (800a4e0 <tcp_receive+0x2e0>)
 800a37c:	f003 fb88 	bl	800da90 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a380:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      off = (u16_t)off32;
 800a382:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a384:	891b      	ldrh	r3, [r3, #8]
 800a386:	42bb      	cmp	r3, r7
 800a388:	d206      	bcs.n	800a398 <tcp_receive+0x198>
 800a38a:	4b53      	ldr	r3, [pc, #332]	; (800a4d8 <tcp_receive+0x2d8>)
 800a38c:	f240 5297 	movw	r2, #1431	; 0x597
 800a390:	4959      	ldr	r1, [pc, #356]	; (800a4f8 <tcp_receive+0x2f8>)
 800a392:	4853      	ldr	r0, [pc, #332]	; (800a4e0 <tcp_receive+0x2e0>)
 800a394:	f003 fb7c 	bl	800da90 <iprintf>
      inseg.len -= off;
 800a398:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
        p->len = 0;
 800a39a:	2100      	movs	r1, #0
      inseg.len -= off;
 800a39c:	1bdb      	subs	r3, r3, r7
 800a39e:	862b      	strh	r3, [r5, #48]	; 0x30
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a3a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a3a2:	891b      	ldrh	r3, [r3, #8]
 800a3a4:	1bdb      	subs	r3, r3, r7
 800a3a6:	b29b      	uxth	r3, r3
      while (p->len < off) {
 800a3a8:	8972      	ldrh	r2, [r6, #10]
 800a3aa:	42ba      	cmp	r2, r7
 800a3ac:	f0c0 8139 	bcc.w	800a622 <tcp_receive+0x422>
      pbuf_remove_header(p, off);
 800a3b0:	4639      	mov	r1, r7
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	f7fe fb2c 	bl	8008a10 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a3b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3ba:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800a3bc:	622b      	str	r3, [r5, #32]
 800a3be:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a3c0:	6a29      	ldr	r1, [r5, #32]
 800a3c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a3c4:	1a8b      	subs	r3, r1, r2
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f2c0 813d 	blt.w	800a646 <tcp_receive+0x446>
 800a3cc:	1c4b      	adds	r3, r1, #1
 800a3ce:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800a3d0:	1a9b      	subs	r3, r3, r2
 800a3d2:	1a1b      	subs	r3, r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f300 8136 	bgt.w	800a646 <tcp_receive+0x446>
      if (pcb->rcv_nxt == seqno) {
 800a3da:	4291      	cmp	r1, r2
 800a3dc:	f040 8133 	bne.w	800a646 <tcp_receive+0x446>
        tcplen = TCP_TCPLEN(&inseg);
 800a3e0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a3e2:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800a3e4:	8998      	ldrh	r0, [r3, #12]
 800a3e6:	f7fd fdd5 	bl	8007f94 <lwip_htons>
 800a3ea:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800a3ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800a3f0:	bf18      	it	ne
 800a3f2:	2001      	movne	r0, #1
 800a3f4:	4430      	add	r0, r6
 800a3f6:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800a3f8:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 800a3fa:	84a8      	strh	r0, [r5, #36]	; 0x24
        if (tcplen > pcb->rcv_wnd) {
 800a3fc:	d23d      	bcs.n	800a47a <tcp_receive+0x27a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a3fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a400:	8998      	ldrh	r0, [r3, #12]
 800a402:	f7fd fdc7 	bl	8007f94 <lwip_htons>
 800a406:	07c6      	lsls	r6, r0, #31
 800a408:	d50d      	bpl.n	800a426 <tcp_receive+0x226>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a40a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a40c:	899e      	ldrh	r6, [r3, #12]
 800a40e:	4630      	mov	r0, r6
 800a410:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800a414:	f7fd fdbe 	bl	8007f94 <lwip_htons>
 800a418:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800a41c:	f7fd fdba 	bl	8007f94 <lwip_htons>
 800a420:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a422:	4306      	orrs	r6, r0
 800a424:	819e      	strh	r6, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a426:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a428:	862b      	strh	r3, [r5, #48]	; 0x30
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a42a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a42c:	8998      	ldrh	r0, [r3, #12]
 800a42e:	f7fd fdb1 	bl	8007f94 <lwip_htons>
 800a432:	0780      	lsls	r0, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 800a434:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            inseg.len -= 1;
 800a436:	bf42      	ittt	mi
 800a438:	8e2b      	ldrhmi	r3, [r5, #48]	; 0x30
 800a43a:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 800a43e:	862b      	strhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 800a440:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800a442:	f7fe fbfd 	bl	8008c40 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a446:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a448:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800a44a:	8998      	ldrh	r0, [r3, #12]
 800a44c:	f7fd fda2 	bl	8007f94 <lwip_htons>
 800a450:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a454:	6a2b      	ldr	r3, [r5, #32]
          tcplen = TCP_TCPLEN(&inseg);
 800a456:	bf18      	it	ne
 800a458:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a45a:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800a45c:	4430      	add	r0, r6
 800a45e:	b280      	uxth	r0, r0
 800a460:	84a8      	strh	r0, [r5, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a462:	4418      	add	r0, r3
 800a464:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a466:	4413      	add	r3, r2
 800a468:	4298      	cmp	r0, r3
 800a46a:	d006      	beq.n	800a47a <tcp_receive+0x27a>
 800a46c:	4b1a      	ldr	r3, [pc, #104]	; (800a4d8 <tcp_receive+0x2d8>)
 800a46e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a472:	4922      	ldr	r1, [pc, #136]	; (800a4fc <tcp_receive+0x2fc>)
 800a474:	481a      	ldr	r0, [pc, #104]	; (800a4e0 <tcp_receive+0x2e0>)
 800a476:	f003 fb0b 	bl	800da90 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800a47a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800a47c:	6a2b      	ldr	r3, [r5, #32]
 800a47e:	4413      	add	r3, r2
 800a480:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a482:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a484:	4293      	cmp	r3, r2
 800a486:	d206      	bcs.n	800a496 <tcp_receive+0x296>
 800a488:	4b13      	ldr	r3, [pc, #76]	; (800a4d8 <tcp_receive+0x2d8>)
 800a48a:	f240 6207 	movw	r2, #1543	; 0x607
 800a48e:	491c      	ldr	r1, [pc, #112]	; (800a500 <tcp_receive+0x300>)
 800a490:	4813      	ldr	r0, [pc, #76]	; (800a4e0 <tcp_receive+0x2e0>)
 800a492:	f003 fafd 	bl	800da90 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a496:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800a498:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800a49a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800a49c:	1a9b      	subs	r3, r3, r2
 800a49e:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800a4a0:	f7fe fe60 	bl	8009164 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800a4a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a4a6:	891a      	ldrh	r2, [r3, #8]
 800a4a8:	b112      	cbz	r2, 800a4b0 <tcp_receive+0x2b0>
          recv_data = inseg.p;
 800a4aa:	63ab      	str	r3, [r5, #56]	; 0x38
          inseg.p = NULL;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a4b0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a4b2:	8998      	ldrh	r0, [r3, #12]
 800a4b4:	f7fd fd6e 	bl	8007f94 <lwip_htons>
 800a4b8:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 800a4ba:	bf42      	ittt	mi
 800a4bc:	7cab      	ldrbmi	r3, [r5, #18]
 800a4be:	f043 0320 	orrmi.w	r3, r3, #32
 800a4c2:	74ab      	strbmi	r3, [r5, #18]
        tcp_ack(pcb);
 800a4c4:	8b63      	ldrh	r3, [r4, #26]
 800a4c6:	07da      	lsls	r2, r3, #31
 800a4c8:	f140 80b9 	bpl.w	800a63e <tcp_receive+0x43e>
 800a4cc:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 800a4d0:	f043 0302 	orr.w	r3, r3, #2
 800a4d4:	e0b5      	b.n	800a642 <tcp_receive+0x442>
 800a4d6:	bf00      	nop
 800a4d8:	080149cf 	.word	0x080149cf
 800a4dc:	08014af2 	.word	0x08014af2
 800a4e0:	08012bab 	.word	0x08012bab
 800a4e4:	08014b0b 	.word	0x08014b0b
 800a4e8:	20006948 	.word	0x20006948
 800a4ec:	20010d14 	.word	0x20010d14
 800a4f0:	08014b24 	.word	0x08014b24
 800a4f4:	08014b34 	.word	0x08014b34
 800a4f8:	08014b43 	.word	0x08014b43
 800a4fc:	08014b53 	.word	0x08014b53
 800a500:	08014b8a 	.word	0x08014b8a
        pcb->dupacks = 0;
 800a504:	2300      	movs	r3, #0
 800a506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a50a:	e6e7      	b.n	800a2dc <tcp_receive+0xdc>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a50c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a50e:	1a51      	subs	r1, r2, r1
 800a510:	2900      	cmp	r1, #0
 800a512:	f300 8082 	bgt.w	800a61a <tcp_receive+0x41a>
      if (pcb->flags & TF_INFR) {
 800a516:	8b61      	ldrh	r1, [r4, #26]
 800a518:	0748      	lsls	r0, r1, #29
 800a51a:	d509      	bpl.n	800a530 <tcp_receive+0x330>
        tcp_clear_flags(pcb, TF_INFR);
 800a51c:	f021 0104 	bic.w	r1, r1, #4
 800a520:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800a522:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800a526:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a52a:	2100      	movs	r1, #0
 800a52c:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a530:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 800a534:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 800a536:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a538:	eb01 01e0 	add.w	r1, r1, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800a53c:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a53e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 800a542:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 800a544:	f04f 0100 	mov.w	r1, #0
 800a548:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800a54c:	d926      	bls.n	800a59c <tcp_receive+0x39c>
        if (pcb->cwnd < pcb->ssthresh) {
 800a54e:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a552:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800a554:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800a558:	428a      	cmp	r2, r1
 800a55a:	d915      	bls.n	800a588 <tcp_receive+0x388>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a55c:	8b62      	ldrh	r2, [r4, #26]
 800a55e:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a562:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a564:	bf14      	ite	ne
 800a566:	2001      	movne	r0, #1
 800a568:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a56a:	fb12 f200 	smulbb	r2, r2, r0
 800a56e:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800a570:	429a      	cmp	r2, r3
 800a572:	bf94      	ite	ls
 800a574:	188b      	addls	r3, r1, r2
 800a576:	18cb      	addhi	r3, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a578:	b29b      	uxth	r3, r3
 800a57a:	4299      	cmp	r1, r3
 800a57c:	d901      	bls.n	800a582 <tcp_receive+0x382>
          TCP_WND_INC(pcb->cwnd, increase);
 800a57e:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a582:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800a586:	e009      	b.n	800a59c <tcp_receive+0x39c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a588:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800a58c:	4413      	add	r3, r2
 800a58e:	b29b      	uxth	r3, r3
 800a590:	429a      	cmp	r2, r3
 800a592:	d82d      	bhi.n	800a5f0 <tcp_receive+0x3f0>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a594:	4299      	cmp	r1, r3
 800a596:	d92d      	bls.n	800a5f4 <tcp_receive+0x3f4>
 800a598:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a59c:	f104 0666 	add.w	r6, r4, #102	; 0x66
 800a5a0:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	f7ff fdcf 	bl	800a148 <tcp_free_acked_segments.isra.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a5aa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f7ff fdc9 	bl	800a148 <tcp_free_acked_segments.isra.0>
      if (pcb->unacked == NULL) {
 800a5b6:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a5b8:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800a5ba:	fab2 f382 	clz	r3, r2
 800a5be:	095b      	lsrs	r3, r3, #5
 800a5c0:	425b      	negs	r3, r3
 800a5c2:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800a5c8:	b908      	cbnz	r0, 800a5ce <tcp_receive+0x3ce>
        pcb->unsent_oversize = 0;
 800a5ca:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a5ce:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800a5d2:	8aa9      	ldrh	r1, [r5, #20]
 800a5d4:	440b      	add	r3, r1
 800a5d6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800a5da:	8b63      	ldrh	r3, [r4, #26]
 800a5dc:	051f      	lsls	r7, r3, #20
 800a5de:	f57f ae7d 	bpl.w	800a2dc <tcp_receive+0xdc>
        if (pcb->unacked == NULL) {
 800a5e2:	b9ba      	cbnz	r2, 800a614 <tcp_receive+0x414>
          if ((pcb->unsent == NULL) ||
 800a5e4:	b960      	cbnz	r0, 800a600 <tcp_receive+0x400>
          tcp_clear_flags(pcb, TF_RTO);
 800a5e6:	8b63      	ldrh	r3, [r4, #26]
 800a5e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a5ec:	8363      	strh	r3, [r4, #26]
 800a5ee:	e675      	b.n	800a2dc <tcp_receive+0xdc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a5f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a5f4:	1a5b      	subs	r3, r3, r1
 800a5f6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a5fa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a5fc:	440b      	add	r3, r1
 800a5fe:	e7bb      	b.n	800a578 <tcp_receive+0x378>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a600:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800a602:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a604:	6858      	ldr	r0, [r3, #4]
 800a606:	f7fd fcc8 	bl	8007f9a <lwip_htonl>
 800a60a:	1a30      	subs	r0, r6, r0
 800a60c:	2800      	cmp	r0, #0
 800a60e:	f73f ae65 	bgt.w	800a2dc <tcp_receive+0xdc>
 800a612:	e7e8      	b.n	800a5e6 <tcp_receive+0x3e6>
 800a614:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800a616:	68d3      	ldr	r3, [r2, #12]
 800a618:	e7f4      	b.n	800a604 <tcp_receive+0x404>
      tcp_send_empty_ack(pcb);
 800a61a:	4620      	mov	r0, r4
 800a61c:	f001 fbce 	bl	800bdbc <tcp_send_empty_ack>
 800a620:	e65c      	b.n	800a2dc <tcp_receive+0xdc>
        off -= p->len;
 800a622:	1abf      	subs	r7, r7, r2
        p->tot_len = new_tot_len;
 800a624:	8133      	strh	r3, [r6, #8]
        p->len = 0;
 800a626:	8171      	strh	r1, [r6, #10]
        off -= p->len;
 800a628:	b2bf      	uxth	r7, r7
        p = p->next;
 800a62a:	6836      	ldr	r6, [r6, #0]
 800a62c:	e6bc      	b.n	800a3a8 <tcp_receive+0x1a8>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a62e:	1a9b      	subs	r3, r3, r2
 800a630:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800a632:	bfbe      	ittt	lt
 800a634:	8b63      	ldrhlt	r3, [r4, #26]
 800a636:	f043 0302 	orrlt.w	r3, r3, #2
 800a63a:	8363      	strhlt	r3, [r4, #26]
 800a63c:	e6c0      	b.n	800a3c0 <tcp_receive+0x1c0>
        tcp_ack(pcb);
 800a63e:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 800a642:	8363      	strh	r3, [r4, #26]
}
 800a644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tcp_send_empty_ack(pcb);
 800a646:	4620      	mov	r0, r4
}
 800a648:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        tcp_send_empty_ack(pcb);
 800a64c:	f001 bbb6 	b.w	800bdbc <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a650:	1a99      	subs	r1, r3, r2
 800a652:	2900      	cmp	r1, #0
 800a654:	db05      	blt.n	800a662 <tcp_receive+0x462>
 800a656:	3301      	adds	r3, #1
 800a658:	1a9b      	subs	r3, r3, r2
 800a65a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a65c:	1a9b      	subs	r3, r3, r2
 800a65e:	2b00      	cmp	r3, #0
 800a660:	ddf0      	ble.n	800a644 <tcp_receive+0x444>
      tcp_ack_now(pcb);
 800a662:	8b63      	ldrh	r3, [r4, #26]
 800a664:	e734      	b.n	800a4d0 <tcp_receive+0x2d0>
 800a666:	bf00      	nop

0800a668 <tcp_input>:
{
 800a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a66c:	4606      	mov	r6, r0
{
 800a66e:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a670:	b928      	cbnz	r0, 800a67e <tcp_input+0x16>
 800a672:	4ba0      	ldr	r3, [pc, #640]	; (800a8f4 <tcp_input+0x28c>)
 800a674:	2283      	movs	r2, #131	; 0x83
 800a676:	49a0      	ldr	r1, [pc, #640]	; (800a8f8 <tcp_input+0x290>)
 800a678:	48a0      	ldr	r0, [pc, #640]	; (800a8fc <tcp_input+0x294>)
 800a67a:	f003 fa09 	bl	800da90 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 800a67e:	6873      	ldr	r3, [r6, #4]
 800a680:	4d9f      	ldr	r5, [pc, #636]	; (800a900 <tcp_input+0x298>)
 800a682:	60eb      	str	r3, [r5, #12]
  if (p->len < TCP_HLEN) {
 800a684:	8973      	ldrh	r3, [r6, #10]
 800a686:	2b13      	cmp	r3, #19
 800a688:	f240 80a2 	bls.w	800a7d0 <tcp_input+0x168>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a68c:	4f9d      	ldr	r7, [pc, #628]	; (800a904 <tcp_input+0x29c>)
 800a68e:	6839      	ldr	r1, [r7, #0]
 800a690:	46b8      	mov	r8, r7
 800a692:	6978      	ldr	r0, [r7, #20]
 800a694:	f7fd f83d 	bl	8007712 <ip4_addr_isbroadcast_u32>
 800a698:	4604      	mov	r4, r0
 800a69a:	2800      	cmp	r0, #0
 800a69c:	f040 8098 	bne.w	800a7d0 <tcp_input+0x168>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a6a6:	2be0      	cmp	r3, #224	; 0xe0
 800a6a8:	f000 8092 	beq.w	800a7d0 <tcp_input+0x168>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a6ac:	68eb      	ldr	r3, [r5, #12]
 800a6ae:	8998      	ldrh	r0, [r3, #12]
 800a6b0:	f7fd fc70 	bl	8007f94 <lwip_htons>
 800a6b4:	0a81      	lsrs	r1, r0, #10
 800a6b6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a6ba:	2913      	cmp	r1, #19
 800a6bc:	f240 8088 	bls.w	800a7d0 <tcp_input+0x168>
 800a6c0:	8933      	ldrh	r3, [r6, #8]
 800a6c2:	b28a      	uxth	r2, r1
 800a6c4:	428b      	cmp	r3, r1
 800a6c6:	f0c0 8083 	bcc.w	800a7d0 <tcp_input+0x168>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a6ca:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800a6ce:	8970      	ldrh	r0, [r6, #10]
  tcphdr_opt2 = NULL;
 800a6d0:	606c      	str	r4, [r5, #4]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a6d2:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800a6d4:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a6d6:	822b      	strh	r3, [r5, #16]
  if (p->len >= hdrlen_bytes) {
 800a6d8:	d33c      	bcc.n	800a754 <tcp_input+0xec>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a6da:	4630      	mov	r0, r6
    tcphdr_opt1len = tcphdr_optlen;
 800a6dc:	812b      	strh	r3, [r5, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a6de:	f7fe f997 	bl	8008a10 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a6e2:	68ec      	ldr	r4, [r5, #12]
 800a6e4:	8820      	ldrh	r0, [r4, #0]
 800a6e6:	f7fd fc55 	bl	8007f94 <lwip_htons>
 800a6ea:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a6ec:	68ec      	ldr	r4, [r5, #12]
 800a6ee:	8860      	ldrh	r0, [r4, #2]
 800a6f0:	f7fd fc50 	bl	8007f94 <lwip_htons>
 800a6f4:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a6f6:	68ec      	ldr	r4, [r5, #12]
 800a6f8:	6860      	ldr	r0, [r4, #4]
 800a6fa:	f7fd fc4e 	bl	8007f9a <lwip_htonl>
 800a6fe:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a700:	68ec      	ldr	r4, [r5, #12]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a702:	6228      	str	r0, [r5, #32]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a704:	68a0      	ldr	r0, [r4, #8]
 800a706:	f7fd fc48 	bl	8007f9a <lwip_htonl>
 800a70a:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a70c:	68ec      	ldr	r4, [r5, #12]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a70e:	61a8      	str	r0, [r5, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a710:	89e0      	ldrh	r0, [r4, #14]
 800a712:	f7fd fc3f 	bl	8007f94 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800a716:	68eb      	ldr	r3, [r5, #12]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a718:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800a71a:	8998      	ldrh	r0, [r3, #12]
 800a71c:	f7fd fc3a 	bl	8007f94 <lwip_htons>
 800a720:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 800a724:	8932      	ldrh	r2, [r6, #8]
  flags = TCPH_FLAGS(tcphdr);
 800a726:	772b      	strb	r3, [r5, #28]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a728:	0783      	lsls	r3, r0, #30
 800a72a:	d14c      	bne.n	800a7c6 <tcp_input+0x15e>
  tcplen = p->tot_len;
 800a72c:	84aa      	strh	r2, [r5, #36]	; 0x24
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a72e:	4b76      	ldr	r3, [pc, #472]	; (800a908 <tcp_input+0x2a0>)
  prev = NULL;
 800a730:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a732:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a930 <tcp_input+0x2c8>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a736:	681c      	ldr	r4, [r3, #0]
 800a738:	4699      	mov	r9, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a73a:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 800a8fc <tcp_input+0x294>
 800a73e:	4b6d      	ldr	r3, [pc, #436]	; (800a8f4 <tcp_input+0x28c>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a740:	2c00      	cmp	r4, #0
 800a742:	d14b      	bne.n	800a7dc <tcp_input+0x174>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a744:	4b71      	ldr	r3, [pc, #452]	; (800a90c <tcp_input+0x2a4>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a746:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 800a8f4 <tcp_input+0x28c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a74a:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a74c:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 800a934 <tcp_input+0x2cc>
 800a750:	4f6a      	ldr	r7, [pc, #424]	; (800a8fc <tcp_input+0x294>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a752:	e145      	b.n	800a9e0 <tcp_input+0x378>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a754:	6833      	ldr	r3, [r6, #0]
 800a756:	b92b      	cbnz	r3, 800a764 <tcp_input+0xfc>
 800a758:	4b66      	ldr	r3, [pc, #408]	; (800a8f4 <tcp_input+0x28c>)
 800a75a:	22c2      	movs	r2, #194	; 0xc2
 800a75c:	496c      	ldr	r1, [pc, #432]	; (800a910 <tcp_input+0x2a8>)
 800a75e:	4867      	ldr	r0, [pc, #412]	; (800a8fc <tcp_input+0x294>)
 800a760:	f003 f996 	bl	800da90 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 800a764:	2114      	movs	r1, #20
 800a766:	4630      	mov	r0, r6
 800a768:	f7fe f952 	bl	8008a10 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800a76c:	8974      	ldrh	r4, [r6, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a76e:	f8b5 9010 	ldrh.w	r9, [r5, #16]
    pbuf_remove_header(p, tcphdr_opt1len);
 800a772:	4630      	mov	r0, r6
 800a774:	4621      	mov	r1, r4
    tcphdr_opt1len = p->len;
 800a776:	812c      	strh	r4, [r5, #8]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a778:	eba9 0704 	sub.w	r7, r9, r4
    pbuf_remove_header(p, tcphdr_opt1len);
 800a77c:	f7fe f948 	bl	8008a10 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800a780:	6830      	ldr	r0, [r6, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a782:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 800a784:	8943      	ldrh	r3, [r0, #10]
 800a786:	42bb      	cmp	r3, r7
 800a788:	d322      	bcc.n	800a7d0 <tcp_input+0x168>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a78a:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800a78c:	4639      	mov	r1, r7
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a78e:	606b      	str	r3, [r5, #4]
    pbuf_remove_header(p->next, opt2len);
 800a790:	f7fe f93e 	bl	8008a10 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a794:	8933      	ldrh	r3, [r6, #8]
 800a796:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a798:	8973      	ldrh	r3, [r6, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a79a:	eba4 0409 	sub.w	r4, r4, r9
 800a79e:	8134      	strh	r4, [r6, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a7a0:	b12b      	cbz	r3, 800a7ae <tcp_input+0x146>
 800a7a2:	4b54      	ldr	r3, [pc, #336]	; (800a8f4 <tcp_input+0x28c>)
 800a7a4:	22df      	movs	r2, #223	; 0xdf
 800a7a6:	495b      	ldr	r1, [pc, #364]	; (800a914 <tcp_input+0x2ac>)
 800a7a8:	4854      	ldr	r0, [pc, #336]	; (800a8fc <tcp_input+0x294>)
 800a7aa:	f003 f971 	bl	800da90 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a7ae:	6833      	ldr	r3, [r6, #0]
 800a7b0:	8932      	ldrh	r2, [r6, #8]
 800a7b2:	891b      	ldrh	r3, [r3, #8]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d094      	beq.n	800a6e2 <tcp_input+0x7a>
 800a7b8:	4b4e      	ldr	r3, [pc, #312]	; (800a8f4 <tcp_input+0x28c>)
 800a7ba:	22e0      	movs	r2, #224	; 0xe0
 800a7bc:	4956      	ldr	r1, [pc, #344]	; (800a918 <tcp_input+0x2b0>)
 800a7be:	484f      	ldr	r0, [pc, #316]	; (800a8fc <tcp_input+0x294>)
 800a7c0:	f003 f966 	bl	800da90 <iprintf>
 800a7c4:	e78d      	b.n	800a6e2 <tcp_input+0x7a>
    tcplen++;
 800a7c6:	1c53      	adds	r3, r2, #1
 800a7c8:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800a7ca:	429a      	cmp	r2, r3
    tcplen++;
 800a7cc:	84ab      	strh	r3, [r5, #36]	; 0x24
    if (tcplen < p->tot_len) {
 800a7ce:	d9ae      	bls.n	800a72e <tcp_input+0xc6>
  pbuf_free(p);
 800a7d0:	4630      	mov	r0, r6
}
 800a7d2:	b007      	add	sp, #28
 800a7d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800a7d8:	f7fe b94e 	b.w	8008a78 <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a7dc:	7d22      	ldrb	r2, [r4, #20]
 800a7de:	b92a      	cbnz	r2, 800a7ec <tcp_input+0x184>
 800a7e0:	22fb      	movs	r2, #251	; 0xfb
 800a7e2:	4659      	mov	r1, fp
 800a7e4:	4650      	mov	r0, sl
 800a7e6:	f003 f953 	bl	800da90 <iprintf>
 800a7ea:	4b42      	ldr	r3, [pc, #264]	; (800a8f4 <tcp_input+0x28c>)
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a7ec:	7d22      	ldrb	r2, [r4, #20]
 800a7ee:	2a0a      	cmp	r2, #10
 800a7f0:	d105      	bne.n	800a7fe <tcp_input+0x196>
 800a7f2:	22fc      	movs	r2, #252	; 0xfc
 800a7f4:	4949      	ldr	r1, [pc, #292]	; (800a91c <tcp_input+0x2b4>)
 800a7f6:	4650      	mov	r0, sl
 800a7f8:	f003 f94a 	bl	800da90 <iprintf>
 800a7fc:	4b3d      	ldr	r3, [pc, #244]	; (800a8f4 <tcp_input+0x28c>)
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a7fe:	7d22      	ldrb	r2, [r4, #20]
 800a800:	2a01      	cmp	r2, #1
 800a802:	d105      	bne.n	800a810 <tcp_input+0x1a8>
 800a804:	22fd      	movs	r2, #253	; 0xfd
 800a806:	4946      	ldr	r1, [pc, #280]	; (800a920 <tcp_input+0x2b8>)
 800a808:	4650      	mov	r0, sl
 800a80a:	f003 f941 	bl	800da90 <iprintf>
 800a80e:	4b39      	ldr	r3, [pc, #228]	; (800a8f4 <tcp_input+0x28c>)
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a810:	7a20      	ldrb	r0, [r4, #8]
 800a812:	68e1      	ldr	r1, [r4, #12]
 800a814:	b138      	cbz	r0, 800a826 <tcp_input+0x1be>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a816:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a81a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a81e:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a820:	b2d2      	uxtb	r2, r2
 800a822:	4290      	cmp	r0, r2
 800a824:	d162      	bne.n	800a8ec <tcp_input+0x284>
    if (pcb->remote_port == tcphdr->src &&
 800a826:	68ea      	ldr	r2, [r5, #12]
 800a828:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 800a82c:	8810      	ldrh	r0, [r2, #0]
 800a82e:	4584      	cmp	ip, r0
 800a830:	d15c      	bne.n	800a8ec <tcp_input+0x284>
 800a832:	8ae0      	ldrh	r0, [r4, #22]
 800a834:	8852      	ldrh	r2, [r2, #2]
 800a836:	4290      	cmp	r0, r2
 800a838:	d158      	bne.n	800a8ec <tcp_input+0x284>
        pcb->local_port == tcphdr->dest &&
 800a83a:	6860      	ldr	r0, [r4, #4]
 800a83c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a840:	4290      	cmp	r0, r2
 800a842:	d153      	bne.n	800a8ec <tcp_input+0x284>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a844:	6820      	ldr	r0, [r4, #0]
 800a846:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800a84a:	4290      	cmp	r0, r2
 800a84c:	d14e      	bne.n	800a8ec <tcp_input+0x284>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a84e:	42a1      	cmp	r1, r4
 800a850:	f040 83ef 	bne.w	800b032 <tcp_input+0x9ca>
 800a854:	4b27      	ldr	r3, [pc, #156]	; (800a8f4 <tcp_input+0x28c>)
 800a856:	f240 120d 	movw	r2, #269	; 0x10d
 800a85a:	4932      	ldr	r1, [pc, #200]	; (800a924 <tcp_input+0x2bc>)
 800a85c:	4827      	ldr	r0, [pc, #156]	; (800a8fc <tcp_input+0x294>)
 800a85e:	f003 f917 	bl	800da90 <iprintf>
      if (prev != NULL) {
 800a862:	b137      	cbz	r7, 800a872 <tcp_input+0x20a>
        prev->next = pcb->next;
 800a864:	68e3      	ldr	r3, [r4, #12]
 800a866:	60fb      	str	r3, [r7, #12]
        pcb->next = tcp_active_pcbs;
 800a868:	f8d9 3000 	ldr.w	r3, [r9]
        tcp_active_pcbs = pcb;
 800a86c:	f8c9 4000 	str.w	r4, [r9]
        pcb->next = tcp_active_pcbs;
 800a870:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a872:	68e3      	ldr	r3, [r4, #12]
 800a874:	42a3      	cmp	r3, r4
 800a876:	d106      	bne.n	800a886 <tcp_input+0x21e>
 800a878:	4b1e      	ldr	r3, [pc, #120]	; (800a8f4 <tcp_input+0x28c>)
 800a87a:	f240 1215 	movw	r2, #277	; 0x115
 800a87e:	492a      	ldr	r1, [pc, #168]	; (800a928 <tcp_input+0x2c0>)
 800a880:	481e      	ldr	r0, [pc, #120]	; (800a8fc <tcp_input+0x294>)
 800a882:	f003 f905 	bl	800da90 <iprintf>
    inseg.len = p->tot_len;
 800a886:	8932      	ldrh	r2, [r6, #8]
    inseg.next = NULL;
 800a888:	2300      	movs	r3, #0
    inseg.p = p;
 800a88a:	62ee      	str	r6, [r5, #44]	; 0x2c
    inseg.len = p->tot_len;
 800a88c:	862a      	strh	r2, [r5, #48]	; 0x30
    inseg.tcphdr = tcphdr;
 800a88e:	68ea      	ldr	r2, [r5, #12]
    inseg.next = NULL;
 800a890:	62ab      	str	r3, [r5, #40]	; 0x28
    recv_flags = 0;
 800a892:	74ab      	strb	r3, [r5, #18]
    recv_acked = 0;
 800a894:	82ab      	strh	r3, [r5, #20]
    recv_data = NULL;
 800a896:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
    if (flags & TCP_PSH) {
 800a89a:	7f2b      	ldrb	r3, [r5, #28]
 800a89c:	071b      	lsls	r3, r3, #28
 800a89e:	d503      	bpl.n	800a8a8 <tcp_input+0x240>
      p->flags |= PBUF_FLAG_PUSH;
 800a8a0:	7b73      	ldrb	r3, [r6, #13]
 800a8a2:	f043 0301 	orr.w	r3, r3, #1
 800a8a6:	7373      	strb	r3, [r6, #13]
    if (pcb->refused_data != NULL) {
 800a8a8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a8aa:	4e20      	ldr	r6, [pc, #128]	; (800a92c <tcp_input+0x2c4>)
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 8131 	beq.w	800ab14 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f7ff f8d6 	bl	8009a64 <tcp_process_refused_data>
 800a8b8:	300d      	adds	r0, #13
 800a8ba:	d007      	beq.n	800a8cc <tcp_input+0x264>
 800a8bc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f000 8128 	beq.w	800ab14 <tcp_input+0x4ac>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a8c4:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f000 8124 	beq.w	800ab14 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 800a8cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a8ce:	b913      	cbnz	r3, 800a8d6 <tcp_input+0x26e>
          tcp_send_empty_ack(pcb);
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f001 fa73 	bl	800bdbc <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800a8d6:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 800a8d8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    tcp_input_pcb = NULL;
 800a8da:	6034      	str	r4, [r6, #0]
    recv_data = NULL;
 800a8dc:	63ac      	str	r4, [r5, #56]	; 0x38
    if (inseg.p != NULL) {
 800a8de:	b110      	cbz	r0, 800a8e6 <tcp_input+0x27e>
      pbuf_free(inseg.p);
 800a8e0:	f7fe f8ca 	bl	8008a78 <pbuf_free>
      inseg.p = NULL;
 800a8e4:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 800a8e6:	b007      	add	sp, #28
 800a8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8ec:	4627      	mov	r7, r4
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	e726      	b.n	800a740 <tcp_input+0xd8>
 800a8f2:	bf00      	nop
 800a8f4:	080149cf 	.word	0x080149cf
 800a8f8:	08014ba9 	.word	0x08014ba9
 800a8fc:	08012bab 	.word	0x08012bab
 800a900:	20006948 	.word	0x20006948
 800a904:	2000a7dc 	.word	0x2000a7dc
 800a908:	20010d10 	.word	0x20010d10
 800a90c:	20010d20 	.word	0x20010d20
 800a910:	08014bc1 	.word	0x08014bc1
 800a914:	08014bd1 	.word	0x08014bd1
 800a918:	08014bdd 	.word	0x08014bdd
 800a91c:	08014c23 	.word	0x08014c23
 800a920:	08014c4d 	.word	0x08014c4d
 800a924:	08014c74 	.word	0x08014c74
 800a928:	08014c9f 	.word	0x08014c9f
 800a92c:	20010d24 	.word	0x20010d24
 800a930:	08014bfc 	.word	0x08014bfc
 800a934:	08014cc9 	.word	0x08014cc9
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a938:	7d23      	ldrb	r3, [r4, #20]
 800a93a:	2b0a      	cmp	r3, #10
 800a93c:	d006      	beq.n	800a94c <tcp_input+0x2e4>
 800a93e:	465b      	mov	r3, fp
 800a940:	f240 121f 	movw	r2, #287	; 0x11f
 800a944:	4651      	mov	r1, sl
 800a946:	4638      	mov	r0, r7
 800a948:	f003 f8a2 	bl	800da90 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a94c:	7a22      	ldrb	r2, [r4, #8]
 800a94e:	b13a      	cbz	r2, 800a960 <tcp_input+0x2f8>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a950:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a954:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a958:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d13e      	bne.n	800a9de <tcp_input+0x376>
      if (pcb->remote_port == tcphdr->src &&
 800a960:	68eb      	ldr	r3, [r5, #12]
 800a962:	8b20      	ldrh	r0, [r4, #24]
 800a964:	881a      	ldrh	r2, [r3, #0]
 800a966:	4290      	cmp	r0, r2
 800a968:	d139      	bne.n	800a9de <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800a96a:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800a96c:	8ae1      	ldrh	r1, [r4, #22]
 800a96e:	4299      	cmp	r1, r3
 800a970:	d135      	bne.n	800a9de <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800a972:	6862      	ldr	r2, [r4, #4]
 800a974:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d130      	bne.n	800a9de <tcp_input+0x376>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a97c:	6822      	ldr	r2, [r4, #0]
 800a97e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a982:	429a      	cmp	r2, r3
 800a984:	d12b      	bne.n	800a9de <tcp_input+0x376>
  if (flags & TCP_RST) {
 800a986:	7f2b      	ldrb	r3, [r5, #28]
 800a988:	075f      	lsls	r7, r3, #29
 800a98a:	f53f af21 	bmi.w	800a7d0 <tcp_input+0x168>
  if (flags & TCP_SYN) {
 800a98e:	079a      	lsls	r2, r3, #30
 800a990:	8caf      	ldrh	r7, [r5, #36]	; 0x24
 800a992:	d514      	bpl.n	800a9be <tcp_input+0x356>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a994:	6a2a      	ldr	r2, [r5, #32]
 800a996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	d415      	bmi.n	800a9c8 <tcp_input+0x360>
 800a99c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 800a9a0:	eba3 030c 	sub.w	r3, r3, ip
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	dc0f      	bgt.n	800a9c8 <tcp_input+0x360>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9a8:	4b8a      	ldr	r3, [pc, #552]	; (800abd4 <tcp_input+0x56c>)
 800a9aa:	443a      	add	r2, r7
 800a9ac:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	3304      	adds	r3, #4
 800a9b6:	69a9      	ldr	r1, [r5, #24]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9b8:	f001 f9ba 	bl	800bd30 <tcp_rst>
 800a9bc:	e708      	b.n	800a7d0 <tcp_input+0x168>
  } else if (flags & TCP_FIN) {
 800a9be:	07dd      	lsls	r5, r3, #31
    pcb->tmr = tcp_ticks;
 800a9c0:	bf42      	ittt	mi
 800a9c2:	4b85      	ldrmi	r3, [pc, #532]	; (800abd8 <tcp_input+0x570>)
 800a9c4:	681b      	ldrmi	r3, [r3, #0]
 800a9c6:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800a9c8:	2f00      	cmp	r7, #0
 800a9ca:	f43f af01 	beq.w	800a7d0 <tcp_input+0x168>
    tcp_ack_now(pcb);
 800a9ce:	8b63      	ldrh	r3, [r4, #26]
 800a9d0:	f043 0302 	orr.w	r3, r3, #2
 800a9d4:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f001 fa22 	bl	800be20 <tcp_output>
        pbuf_free(p);
 800a9dc:	e6f8      	b.n	800a7d0 <tcp_input+0x168>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9de:	68e4      	ldr	r4, [r4, #12]
 800a9e0:	2c00      	cmp	r4, #0
 800a9e2:	d1a9      	bne.n	800a938 <tcp_input+0x2d0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a9e4:	4a7d      	ldr	r2, [pc, #500]	; (800abdc <tcp_input+0x574>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a9e6:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a9ea:	6810      	ldr	r0, [r2, #0]
      if (lpcb->local_port == tcphdr->dest) {
 800a9ec:	68e9      	ldr	r1, [r5, #12]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a9ee:	f8d8 a014 	ldr.w	sl, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a9f2:	4607      	mov	r7, r0
 800a9f4:	b98f      	cbnz	r7, 800aa1a <tcp_input+0x3b2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a9f6:	8988      	ldrh	r0, [r1, #12]
 800a9f8:	f7fd facc 	bl	8007f94 <lwip_htons>
 800a9fc:	0742      	lsls	r2, r0, #29
 800a9fe:	f53f aee7 	bmi.w	800a7d0 <tcp_input+0x168>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa02:	68eb      	ldr	r3, [r5, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa04:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800aa06:	8818      	ldrh	r0, [r3, #0]
 800aa08:	6a2a      	ldr	r2, [r5, #32]
 800aa0a:	9002      	str	r0, [sp, #8]
 800aa0c:	885b      	ldrh	r3, [r3, #2]
 800aa0e:	440a      	add	r2, r1
 800aa10:	9301      	str	r3, [sp, #4]
 800aa12:	4b70      	ldr	r3, [pc, #448]	; (800abd4 <tcp_input+0x56c>)
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	3304      	adds	r3, #4
 800aa18:	e308      	b.n	800b02c <tcp_input+0x9c4>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800aa1a:	f897 c008 	ldrb.w	ip, [r7, #8]
 800aa1e:	f1bc 0f00 	cmp.w	ip, #0
 800aa22:	d005      	beq.n	800aa30 <tcp_input+0x3c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800aa24:	f89e 3034 	ldrb.w	r3, [lr, #52]	; 0x34
 800aa28:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	459c      	cmp	ip, r3
 800aa2e:	d10b      	bne.n	800aa48 <tcp_input+0x3e0>
      if (lpcb->local_port == tcphdr->dest) {
 800aa30:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800aa34:	8afb      	ldrh	r3, [r7, #22]
 800aa36:	4563      	cmp	r3, ip
 800aa38:	d106      	bne.n	800aa48 <tcp_input+0x3e0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	4553      	cmp	r3, sl
 800aa3e:	f000 82df 	beq.w	800b000 <tcp_input+0x998>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f000 82dc 	beq.w	800b000 <tcp_input+0x998>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aa48:	463c      	mov	r4, r7
 800aa4a:	68ff      	ldr	r7, [r7, #12]
 800aa4c:	e7d2      	b.n	800a9f4 <tcp_input+0x38c>
  } else if (flags & TCP_SYN) {
 800aa4e:	079a      	lsls	r2, r3, #30
 800aa50:	f57f aebe 	bpl.w	800a7d0 <tcp_input+0x168>
    npcb = tcp_alloc(pcb->prio);
 800aa54:	7d78      	ldrb	r0, [r7, #21]
 800aa56:	f7ff f95b 	bl	8009d10 <tcp_alloc>
    if (npcb == NULL) {
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	b948      	cbnz	r0, 800aa72 <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f43f aeb5 	beq.w	800a7d0 <tcp_input+0x168>
 800aa66:	4601      	mov	r1, r0
 800aa68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa6c:	6938      	ldr	r0, [r7, #16]
 800aa6e:	4798      	blx	r3
 800aa70:	e6ae      	b.n	800a7d0 <tcp_input+0x168>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800aa72:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800aa76:	68ea      	ldr	r2, [r5, #12]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800aa78:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800aa7a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800aa7e:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800aa80:	8afb      	ldrh	r3, [r7, #22]
 800aa82:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800aa84:	7813      	ldrb	r3, [r2, #0]
 800aa86:	7852      	ldrb	r2, [r2, #1]
 800aa88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800aa8c:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800aa92:	6a2b      	ldr	r3, [r5, #32]
 800aa94:	3301      	adds	r3, #1
 800aa96:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800aa98:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800aa9a:	f7ff f9d7 	bl	8009e4c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800aa9e:	6a2b      	ldr	r3, [r5, #32]
    npcb->snd_wl2 = iss;
 800aaa0:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800aaa2:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800aaa4:	6520      	str	r0, [r4, #80]	; 0x50
    npcb->lastack = iss;
 800aaa6:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800aaa8:	6563      	str	r3, [r4, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800aaaa:	693b      	ldr	r3, [r7, #16]
    npcb->snd_lbb = iss;
 800aaac:	65e0      	str	r0, [r4, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 800aaae:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800aab0:	67a7      	str	r7, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800aab2:	7a7b      	ldrb	r3, [r7, #9]
 800aab4:	f003 030c 	and.w	r3, r3, #12
 800aab8:	7263      	strb	r3, [r4, #9]
    npcb->netif_idx = pcb->netif_idx;
 800aaba:	7a3b      	ldrb	r3, [r7, #8]
 800aabc:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800aabe:	f8d9 3000 	ldr.w	r3, [r9]
 800aac2:	f8c9 4000 	str.w	r4, [r9]
 800aac6:	60e3      	str	r3, [r4, #12]
 800aac8:	f001 fc80 	bl	800c3cc <tcp_timer_needed>
 800aacc:	4b44      	ldr	r3, [pc, #272]	; (800abe0 <tcp_input+0x578>)
 800aace:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800aad0:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(npcb);
 800aad2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800aad4:	f7ff fac2 	bl	800a05c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800aad8:	68eb      	ldr	r3, [r5, #12]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800aada:	1d22      	adds	r2, r4, #4
 800aadc:	8e65      	ldrh	r5, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800aade:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800aae0:	4610      	mov	r0, r2
 800aae2:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 800aae4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800aae8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800aaec:	f7fc fc94 	bl	8007418 <ip4_route>
 800aaf0:	9a05      	ldr	r2, [sp, #20]
 800aaf2:	4601      	mov	r1, r0
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	f7ff f9c3 	bl	8009e80 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800aafa:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800aafc:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800aafe:	4620      	mov	r0, r4
 800ab00:	f000 ff9a 	bl	800ba38 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800ab04:	2800      	cmp	r0, #0
 800ab06:	f43f af66 	beq.w	800a9d6 <tcp_input+0x36e>
      tcp_abandon(npcb, 0);
 800ab0a:	4651      	mov	r1, sl
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f7ff f841 	bl	8009b94 <tcp_abandon>
      return;
 800ab12:	e65d      	b.n	800a7d0 <tcp_input+0x168>
  if (flags & TCP_RST) {
 800ab14:	7f2a      	ldrb	r2, [r5, #28]
    tcp_input_pcb = pcb;
 800ab16:	6034      	str	r4, [r6, #0]
  if (flags & TCP_RST) {
 800ab18:	0753      	lsls	r3, r2, #29
 800ab1a:	d537      	bpl.n	800ab8c <tcp_input+0x524>
    if (pcb->state == SYN_SENT) {
 800ab1c:	7d21      	ldrb	r1, [r4, #20]
 800ab1e:	2902      	cmp	r1, #2
 800ab20:	d11e      	bne.n	800ab60 <tcp_input+0x4f8>
      if (ackno == pcb->snd_nxt) {
 800ab22:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ab24:	69ab      	ldr	r3, [r5, #24]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d107      	bne.n	800ab3a <tcp_input+0x4d2>
      recv_flags |= TF_RESET;
 800ab2a:	7cab      	ldrb	r3, [r5, #18]
 800ab2c:	f043 0308 	orr.w	r3, r3, #8
 800ab30:	74ab      	strb	r3, [r5, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ab32:	8b63      	ldrh	r3, [r4, #26]
 800ab34:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
 800ab38:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800ab3a:	7cab      	ldrb	r3, [r5, #18]
 800ab3c:	0718      	lsls	r0, r3, #28
 800ab3e:	f140 81fe 	bpl.w	800af3e <tcp_input+0x8d6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ab42:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800ab46:	b11b      	cbz	r3, 800ab50 <tcp_input+0x4e8>
 800ab48:	f06f 010d 	mvn.w	r1, #13
 800ab4c:	6920      	ldr	r0, [r4, #16]
 800ab4e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ab50:	4621      	mov	r1, r4
 800ab52:	4824      	ldr	r0, [pc, #144]	; (800abe4 <tcp_input+0x57c>)
 800ab54:	f7fe fe36 	bl	80097c4 <tcp_pcb_remove>
        tcp_free(pcb);
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f7fe fa95 	bl	8009088 <tcp_free>
 800ab5e:	e6ba      	b.n	800a8d6 <tcp_input+0x26e>
      if (seqno == pcb->rcv_nxt) {
 800ab60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ab62:	6a2b      	ldr	r3, [r5, #32]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d007      	beq.n	800ab78 <tcp_input+0x510>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ab68:	1a9b      	subs	r3, r3, r2
 800ab6a:	d4e6      	bmi.n	800ab3a <tcp_input+0x4d2>
 800ab6c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800ab6e:	1a9b      	subs	r3, r3, r2
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	dce2      	bgt.n	800ab3a <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800ab74:	8b63      	ldrh	r3, [r4, #26]
 800ab76:	e010      	b.n	800ab9a <tcp_input+0x532>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ab78:	2900      	cmp	r1, #0
 800ab7a:	d1d6      	bne.n	800ab2a <tcp_input+0x4c2>
 800ab7c:	4b1a      	ldr	r3, [pc, #104]	; (800abe8 <tcp_input+0x580>)
 800ab7e:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ab82:	491a      	ldr	r1, [pc, #104]	; (800abec <tcp_input+0x584>)
 800ab84:	481a      	ldr	r0, [pc, #104]	; (800abf0 <tcp_input+0x588>)
 800ab86:	f002 ff83 	bl	800da90 <iprintf>
 800ab8a:	e7ce      	b.n	800ab2a <tcp_input+0x4c2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ab8c:	0797      	lsls	r7, r2, #30
 800ab8e:	8b63      	ldrh	r3, [r4, #26]
 800ab90:	d506      	bpl.n	800aba0 <tcp_input+0x538>
 800ab92:	7d22      	ldrb	r2, [r4, #20]
 800ab94:	3a02      	subs	r2, #2
 800ab96:	2a01      	cmp	r2, #1
 800ab98:	d902      	bls.n	800aba0 <tcp_input+0x538>
        tcp_ack_now(pcb);
 800ab9a:	f043 0302 	orr.w	r3, r3, #2
 800ab9e:	e7cb      	b.n	800ab38 <tcp_input+0x4d0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800aba0:	06d8      	lsls	r0, r3, #27
  tcp_parseopt(pcb);
 800aba2:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 800aba4:	bf5e      	ittt	pl
 800aba6:	4b0c      	ldrpl	r3, [pc, #48]	; (800abd8 <tcp_input+0x570>)
 800aba8:	681b      	ldrpl	r3, [r3, #0]
 800abaa:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800abb2:	f7ff fa53 	bl	800a05c <tcp_parseopt>
  switch (pcb->state) {
 800abb6:	7d23      	ldrb	r3, [r4, #20]
 800abb8:	3b02      	subs	r3, #2
 800abba:	2b07      	cmp	r3, #7
 800abbc:	d8bd      	bhi.n	800ab3a <tcp_input+0x4d2>
 800abbe:	e8df f013 	tbh	[pc, r3, lsl #1]
 800abc2:	0019      	.short	0x0019
 800abc4:	011200a6 	.word	0x011200a6
 800abc8:	015f0117 	.word	0x015f0117
 800abcc:	01780112 	.word	0x01780112
 800abd0:	01a9      	.short	0x01a9
 800abd2:	bf00      	nop
 800abd4:	2000a7ec 	.word	0x2000a7ec
 800abd8:	20010d14 	.word	0x20010d14
 800abdc:	20010d18 	.word	0x20010d18
 800abe0:	20010d0c 	.word	0x20010d0c
 800abe4:	20010d10 	.word	0x20010d10
 800abe8:	080149cf 	.word	0x080149cf
 800abec:	08014cf6 	.word	0x08014cf6
 800abf0:	08012bab 	.word	0x08012bab
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800abf4:	7f2b      	ldrb	r3, [r5, #28]
 800abf6:	f003 0212 	and.w	r2, r3, #18
 800abfa:	2a12      	cmp	r2, #18
 800abfc:	d16a      	bne.n	800acd4 <tcp_input+0x66c>
          && (ackno == pcb->lastack + 1)) {
 800abfe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ac00:	69a9      	ldr	r1, [r5, #24]
 800ac02:	3201      	adds	r2, #1
 800ac04:	428a      	cmp	r2, r1
 800ac06:	d165      	bne.n	800acd4 <tcp_input+0x66c>
        pcb->rcv_nxt = seqno + 1;
 800ac08:	6a2b      	ldr	r3, [r5, #32]
        pcb->lastack = ackno;
 800ac0a:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 800ac0c:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800ac0e:	68ea      	ldr	r2, [r5, #12]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ac10:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ac12:	8e67      	ldrh	r7, [r4, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800ac14:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ac16:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800ac18:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ac1a:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ac1c:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800ac1e:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ac22:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ac26:	18e2      	adds	r2, r4, r3
        pcb->state = ESTABLISHED;
 800ac28:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ac2a:	4610      	mov	r0, r2
 800ac2c:	9205      	str	r2, [sp, #20]
 800ac2e:	f7fc fbf3 	bl	8007418 <ip4_route>
 800ac32:	9a05      	ldr	r2, [sp, #20]
 800ac34:	4601      	mov	r1, r0
 800ac36:	4638      	mov	r0, r7
 800ac38:	f7ff f922 	bl	8009e80 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ac3c:	f241 131c 	movw	r3, #4380	; 0x111c
 800ac40:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ac42:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ac44:	0081      	lsls	r1, r0, #2
 800ac46:	429a      	cmp	r2, r3
 800ac48:	4617      	mov	r7, r2
 800ac4a:	bf38      	it	cc
 800ac4c:	461f      	movcc	r7, r3
 800ac4e:	ebb7 0f80 	cmp.w	r7, r0, lsl #2
 800ac52:	d933      	bls.n	800acbc <tcp_input+0x654>
 800ac54:	b28b      	uxth	r3, r1
 800ac56:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ac5a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800ac5e:	b933      	cbnz	r3, 800ac6e <tcp_input+0x606>
 800ac60:	4ba3      	ldr	r3, [pc, #652]	; (800aef0 <tcp_input+0x888>)
 800ac62:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ac66:	49a3      	ldr	r1, [pc, #652]	; (800aef4 <tcp_input+0x88c>)
 800ac68:	48a3      	ldr	r0, [pc, #652]	; (800aef8 <tcp_input+0x890>)
 800ac6a:	f002 ff11 	bl	800da90 <iprintf>
        --pcb->snd_queuelen;
 800ac6e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800ac72:	6f27      	ldr	r7, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 800ac74:	3b01      	subs	r3, #1
 800ac76:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 800ac7a:	bb1f      	cbnz	r7, 800acc4 <tcp_input+0x65c>
          rseg = pcb->unsent;
 800ac7c:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ac7e:	b937      	cbnz	r7, 800ac8e <tcp_input+0x626>
 800ac80:	4b9b      	ldr	r3, [pc, #620]	; (800aef0 <tcp_input+0x888>)
 800ac82:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ac86:	499d      	ldr	r1, [pc, #628]	; (800aefc <tcp_input+0x894>)
 800ac88:	489b      	ldr	r0, [pc, #620]	; (800aef8 <tcp_input+0x890>)
 800ac8a:	f002 ff01 	bl	800da90 <iprintf>
          pcb->unsent = rseg->next;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 800ac92:	4638      	mov	r0, r7
 800ac94:	f7fe fada 	bl	800924c <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800ac98:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ac9a:	b9b3      	cbnz	r3, 800acca <tcp_input+0x662>
          pcb->rtime = -1;
 800ac9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aca0:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800aca2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f43f af64 	beq.w	800ab74 <tcp_input+0x50c>
 800acac:	2200      	movs	r2, #0
 800acae:	4621      	mov	r1, r4
 800acb0:	6920      	ldr	r0, [r4, #16]
 800acb2:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800acb4:	300d      	adds	r0, #13
 800acb6:	f47f af5d 	bne.w	800ab74 <tcp_input+0x50c>
 800acba:	e60c      	b.n	800a8d6 <tcp_input+0x26e>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800acbc:	429a      	cmp	r2, r3
 800acbe:	bf88      	it	hi
 800acc0:	b293      	uxthhi	r3, r2
 800acc2:	e7c8      	b.n	800ac56 <tcp_input+0x5ee>
          pcb->unacked = rseg->next;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	6723      	str	r3, [r4, #112]	; 0x70
 800acc8:	e7e3      	b.n	800ac92 <tcp_input+0x62a>
          pcb->rtime = 0;
 800acca:	2300      	movs	r3, #0
 800accc:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800acce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acd2:	e7e6      	b.n	800aca2 <tcp_input+0x63a>
      else if (flags & TCP_ACK) {
 800acd4:	06d9      	lsls	r1, r3, #27
 800acd6:	f57f af30 	bpl.w	800ab3a <tcp_input+0x4d2>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800acda:	68eb      	ldr	r3, [r5, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acdc:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800acde:	8818      	ldrh	r0, [r3, #0]
 800ace0:	6a2a      	ldr	r2, [r5, #32]
 800ace2:	9002      	str	r0, [sp, #8]
 800ace4:	4620      	mov	r0, r4
 800ace6:	885b      	ldrh	r3, [r3, #2]
 800ace8:	440a      	add	r2, r1
 800acea:	9301      	str	r3, [sp, #4]
 800acec:	4b84      	ldr	r3, [pc, #528]	; (800af00 <tcp_input+0x898>)
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	3304      	adds	r3, #4
 800acf2:	69a9      	ldr	r1, [r5, #24]
 800acf4:	f001 f81c 	bl	800bd30 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800acf8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800acfc:	2b05      	cmp	r3, #5
 800acfe:	f63f af1c 	bhi.w	800ab3a <tcp_input+0x4d2>
          pcb->rtime = 0;
 800ad02:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800ad04:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800ad06:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ad08:	f001 fa50 	bl	800c1ac <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800ad0c:	e715      	b.n	800ab3a <tcp_input+0x4d2>
      if (flags & TCP_ACK) {
 800ad0e:	7f2b      	ldrb	r3, [r5, #28]
 800ad10:	06da      	lsls	r2, r3, #27
 800ad12:	d55b      	bpl.n	800adcc <tcp_input+0x764>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ad14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ad16:	69a9      	ldr	r1, [r5, #24]
 800ad18:	43db      	mvns	r3, r3
 800ad1a:	42cb      	cmn	r3, r1
 800ad1c:	d447      	bmi.n	800adae <tcp_input+0x746>
 800ad1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ad20:	1acb      	subs	r3, r1, r3
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	dc43      	bgt.n	800adae <tcp_input+0x746>
          pcb->state = ESTABLISHED;
 800ad26:	2304      	movs	r3, #4
 800ad28:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800ad2a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ad2c:	b91b      	cbnz	r3, 800ad36 <tcp_input+0x6ce>
            tcp_abort(pcb);
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f7fe ffae 	bl	8009c90 <tcp_abort>
            goto aborted;
 800ad34:	e5cf      	b.n	800a8d6 <tcp_input+0x26e>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	b933      	cbnz	r3, 800ad48 <tcp_input+0x6e0>
 800ad3a:	4b6d      	ldr	r3, [pc, #436]	; (800aef0 <tcp_input+0x888>)
 800ad3c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ad40:	4970      	ldr	r1, [pc, #448]	; (800af04 <tcp_input+0x89c>)
 800ad42:	486d      	ldr	r0, [pc, #436]	; (800aef8 <tcp_input+0x890>)
 800ad44:	f002 fea4 	bl	800da90 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ad48:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d0ee      	beq.n	800ad2e <tcp_input+0x6c6>
 800ad50:	2200      	movs	r2, #0
 800ad52:	4621      	mov	r1, r4
 800ad54:	6920      	ldr	r0, [r4, #16]
 800ad56:	4798      	blx	r3
          if (err != ERR_OK) {
 800ad58:	b118      	cbz	r0, 800ad62 <tcp_input+0x6fa>
            if (err != ERR_ABRT) {
 800ad5a:	300d      	adds	r0, #13
 800ad5c:	f43f adbb 	beq.w	800a8d6 <tcp_input+0x26e>
 800ad60:	e7e5      	b.n	800ad2e <tcp_input+0x6c6>
          tcp_receive(pcb);
 800ad62:	4620      	mov	r0, r4
 800ad64:	f7ff fa4c 	bl	800a200 <tcp_receive>
          if (recv_acked != 0) {
 800ad68:	4a67      	ldr	r2, [pc, #412]	; (800af08 <tcp_input+0x8a0>)
 800ad6a:	8a93      	ldrh	r3, [r2, #20]
 800ad6c:	b10b      	cbz	r3, 800ad72 <tcp_input+0x70a>
            recv_acked--;
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	8293      	strh	r3, [r2, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ad72:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800ad74:	f241 131c 	movw	r3, #4380	; 0x111c
 800ad78:	0041      	lsls	r1, r0, #1
 800ad7a:	0087      	lsls	r7, r0, #2
 800ad7c:	4299      	cmp	r1, r3
 800ad7e:	468c      	mov	ip, r1
 800ad80:	bf38      	it	cc
 800ad82:	469c      	movcc	ip, r3
 800ad84:	ebbc 0f80 	cmp.w	ip, r0, lsl #2
 800ad88:	d90d      	bls.n	800ada6 <tcp_input+0x73e>
 800ad8a:	b2bb      	uxth	r3, r7
 800ad8c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800ad90:	7c93      	ldrb	r3, [r2, #18]
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ad92:	0698      	lsls	r0, r3, #26
 800ad94:	f57f aed1 	bpl.w	800ab3a <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800ad98:	8b63      	ldrh	r3, [r4, #26]
 800ad9a:	f043 0302 	orr.w	r3, r3, #2
 800ad9e:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800ada0:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 800ada2:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 800ada4:	e6c9      	b.n	800ab3a <tcp_input+0x4d2>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ada6:	4299      	cmp	r1, r3
 800ada8:	bf88      	it	hi
 800adaa:	b28b      	uxthhi	r3, r1
 800adac:	e7ee      	b.n	800ad8c <tcp_input+0x724>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adae:	68eb      	ldr	r3, [r5, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adb0:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800adb2:	881f      	ldrh	r7, [r3, #0]
 800adb4:	6a2a      	ldr	r2, [r5, #32]
 800adb6:	9702      	str	r7, [sp, #8]
 800adb8:	885b      	ldrh	r3, [r3, #2]
 800adba:	4402      	add	r2, r0
 800adbc:	4620      	mov	r0, r4
 800adbe:	9301      	str	r3, [sp, #4]
 800adc0:	4b4f      	ldr	r3, [pc, #316]	; (800af00 <tcp_input+0x898>)
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	3304      	adds	r3, #4
 800adc6:	f000 ffb3 	bl	800bd30 <tcp_rst>
    if (err != ERR_ABRT) {
 800adca:	e6b6      	b.n	800ab3a <tcp_input+0x4d2>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800adcc:	079f      	lsls	r7, r3, #30
 800adce:	f57f aeb4 	bpl.w	800ab3a <tcp_input+0x4d2>
 800add2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800add4:	6a2a      	ldr	r2, [r5, #32]
 800add6:	3b01      	subs	r3, #1
 800add8:	4293      	cmp	r3, r2
 800adda:	f47f aeae 	bne.w	800ab3a <tcp_input+0x4d2>
        tcp_rexmit(pcb);
 800adde:	4620      	mov	r0, r4
 800ade0:	f000 ff32 	bl	800bc48 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800ade4:	e6a9      	b.n	800ab3a <tcp_input+0x4d2>
      tcp_receive(pcb);
 800ade6:	4620      	mov	r0, r4
 800ade8:	f7ff fa0a 	bl	800a200 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800adec:	7cab      	ldrb	r3, [r5, #18]
 800adee:	e7d0      	b.n	800ad92 <tcp_input+0x72a>
      tcp_receive(pcb);
 800adf0:	4620      	mov	r0, r4
 800adf2:	f7ff fa05 	bl	800a200 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800adf6:	7cab      	ldrb	r3, [r5, #18]
 800adf8:	f013 0f20 	tst.w	r3, #32
 800adfc:	7f2b      	ldrb	r3, [r5, #28]
 800adfe:	d031      	beq.n	800ae64 <tcp_input+0x7fc>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ae00:	f013 0f10 	tst.w	r3, #16
 800ae04:	8b63      	ldrh	r3, [r4, #26]
 800ae06:	d028      	beq.n	800ae5a <tcp_input+0x7f2>
 800ae08:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800ae0a:	69aa      	ldr	r2, [r5, #24]
 800ae0c:	4291      	cmp	r1, r2
 800ae0e:	d124      	bne.n	800ae5a <tcp_input+0x7f2>
 800ae10:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800ae12:	bb12      	cbnz	r2, 800ae5a <tcp_input+0x7f2>
          tcp_ack_now(pcb);
 800ae14:	f043 0302 	orr.w	r3, r3, #2
          tcp_pcb_purge(pcb);
 800ae18:	4620      	mov	r0, r4
          tcp_ack_now(pcb);
 800ae1a:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800ae1c:	f7fe fa9a 	bl	8009354 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ae20:	f8d9 3000 	ldr.w	r3, [r9]
 800ae24:	429c      	cmp	r4, r3
 800ae26:	d10a      	bne.n	800ae3e <tcp_input+0x7d6>
        TCP_RMV_ACTIVE(pcb);
 800ae28:	68e3      	ldr	r3, [r4, #12]
 800ae2a:	f8c9 3000 	str.w	r3, [r9]
 800ae2e:	e008      	b.n	800ae42 <tcp_input+0x7da>
          TCP_RMV_ACTIVE(pcb);
 800ae30:	68da      	ldr	r2, [r3, #12]
 800ae32:	4294      	cmp	r4, r2
 800ae34:	d102      	bne.n	800ae3c <tcp_input+0x7d4>
        TCP_RMV_ACTIVE(pcb);
 800ae36:	68e2      	ldr	r2, [r4, #12]
 800ae38:	60da      	str	r2, [r3, #12]
 800ae3a:	e002      	b.n	800ae42 <tcp_input+0x7da>
 800ae3c:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1f6      	bne.n	800ae30 <tcp_input+0x7c8>
        TCP_RMV_ACTIVE(pcb);
 800ae42:	4b32      	ldr	r3, [pc, #200]	; (800af0c <tcp_input+0x8a4>)
 800ae44:	2201      	movs	r2, #1
 800ae46:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ae48:	230a      	movs	r3, #10
 800ae4a:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ae4c:	4b30      	ldr	r3, [pc, #192]	; (800af10 <tcp_input+0x8a8>)
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	601c      	str	r4, [r3, #0]
 800ae52:	60e2      	str	r2, [r4, #12]
 800ae54:	f001 faba 	bl	800c3cc <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800ae58:	e66f      	b.n	800ab3a <tcp_input+0x4d2>
          tcp_ack_now(pcb);
 800ae5a:	f043 0302 	orr.w	r3, r3, #2
 800ae5e:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800ae60:	2308      	movs	r3, #8
 800ae62:	e79e      	b.n	800ada2 <tcp_input+0x73a>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ae64:	06d9      	lsls	r1, r3, #27
 800ae66:	f57f ae68 	bpl.w	800ab3a <tcp_input+0x4d2>
 800ae6a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ae6c:	69ab      	ldr	r3, [r5, #24]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	f47f ae63 	bne.w	800ab3a <tcp_input+0x4d2>
 800ae74:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f47f ae5f 	bne.w	800ab3a <tcp_input+0x4d2>
        pcb->state = FIN_WAIT_2;
 800ae7c:	2306      	movs	r3, #6
 800ae7e:	e790      	b.n	800ada2 <tcp_input+0x73a>
      tcp_receive(pcb);
 800ae80:	4620      	mov	r0, r4
 800ae82:	f7ff f9bd 	bl	800a200 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ae86:	7cab      	ldrb	r3, [r5, #18]
 800ae88:	069a      	lsls	r2, r3, #26
 800ae8a:	f57f ae56 	bpl.w	800ab3a <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800ae8e:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800ae90:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800ae92:	f043 0302 	orr.w	r3, r3, #2
 800ae96:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800ae98:	f7fe fa5c 	bl	8009354 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ae9c:	f8d9 3000 	ldr.w	r3, [r9]
 800aea0:	429c      	cmp	r4, r3
 800aea2:	d0c1      	beq.n	800ae28 <tcp_input+0x7c0>
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d0cc      	beq.n	800ae42 <tcp_input+0x7da>
 800aea8:	68da      	ldr	r2, [r3, #12]
 800aeaa:	4294      	cmp	r4, r2
 800aeac:	d0c3      	beq.n	800ae36 <tcp_input+0x7ce>
 800aeae:	4613      	mov	r3, r2
 800aeb0:	e7f8      	b.n	800aea4 <tcp_input+0x83c>
      tcp_receive(pcb);
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f7ff f9a4 	bl	800a200 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aeb8:	7f2b      	ldrb	r3, [r5, #28]
 800aeba:	06db      	lsls	r3, r3, #27
 800aebc:	f57f ae3d 	bpl.w	800ab3a <tcp_input+0x4d2>
 800aec0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800aec2:	69ab      	ldr	r3, [r5, #24]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	f47f ae38 	bne.w	800ab3a <tcp_input+0x4d2>
 800aeca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f47f ae34 	bne.w	800ab3a <tcp_input+0x4d2>
        tcp_pcb_purge(pcb);
 800aed2:	4620      	mov	r0, r4
 800aed4:	f7fe fa3e 	bl	8009354 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aed8:	f8d9 3000 	ldr.w	r3, [r9]
 800aedc:	429c      	cmp	r4, r3
 800aede:	d0a3      	beq.n	800ae28 <tcp_input+0x7c0>
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d0ae      	beq.n	800ae42 <tcp_input+0x7da>
 800aee4:	68da      	ldr	r2, [r3, #12]
 800aee6:	4294      	cmp	r4, r2
 800aee8:	d0a5      	beq.n	800ae36 <tcp_input+0x7ce>
 800aeea:	4613      	mov	r3, r2
 800aeec:	e7f8      	b.n	800aee0 <tcp_input+0x878>
 800aeee:	bf00      	nop
 800aef0:	080149cf 	.word	0x080149cf
 800aef4:	08014d16 	.word	0x08014d16
 800aef8:	08012bab 	.word	0x08012bab
 800aefc:	08014d2c 	.word	0x08014d2c
 800af00:	2000a7ec 	.word	0x2000a7ec
 800af04:	08014d3f 	.word	0x08014d3f
 800af08:	20006948 	.word	0x20006948
 800af0c:	20010d0c 	.word	0x20010d0c
 800af10:	20010d20 	.word	0x20010d20
      tcp_receive(pcb);
 800af14:	4620      	mov	r0, r4
 800af16:	f7ff f973 	bl	800a200 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800af1a:	7f2b      	ldrb	r3, [r5, #28]
 800af1c:	06df      	lsls	r7, r3, #27
 800af1e:	f57f ae0c 	bpl.w	800ab3a <tcp_input+0x4d2>
 800af22:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800af24:	69ab      	ldr	r3, [r5, #24]
 800af26:	429a      	cmp	r2, r3
 800af28:	f47f ae07 	bne.w	800ab3a <tcp_input+0x4d2>
 800af2c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f47f ae03 	bne.w	800ab3a <tcp_input+0x4d2>
        recv_flags |= TF_CLOSED;
 800af34:	7cab      	ldrb	r3, [r5, #18]
 800af36:	f043 0310 	orr.w	r3, r3, #16
 800af3a:	74ab      	strb	r3, [r5, #18]
    if (err != ERR_ABRT) {
 800af3c:	e5fd      	b.n	800ab3a <tcp_input+0x4d2>
        if (recv_acked > 0) {
 800af3e:	8aaa      	ldrh	r2, [r5, #20]
 800af40:	b11a      	cbz	r2, 800af4a <tcp_input+0x8e2>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800af42:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800af44:	b9db      	cbnz	r3, 800af7e <tcp_input+0x916>
          recv_acked = 0;
 800af46:	2300      	movs	r3, #0
 800af48:	82ab      	strh	r3, [r5, #20]
        if (tcp_input_delayed_close(pcb)) {
 800af4a:	4620      	mov	r0, r4
 800af4c:	f7ff f8d0 	bl	800a0f0 <tcp_input_delayed_close>
 800af50:	2800      	cmp	r0, #0
 800af52:	f47f acc0 	bne.w	800a8d6 <tcp_input+0x26e>
        if (recv_data != NULL) {
 800af56:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800af58:	b323      	cbz	r3, 800afa4 <tcp_input+0x93c>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800af5a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800af5c:	b133      	cbz	r3, 800af6c <tcp_input+0x904>
 800af5e:	4b37      	ldr	r3, [pc, #220]	; (800b03c <tcp_input+0x9d4>)
 800af60:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800af64:	4936      	ldr	r1, [pc, #216]	; (800b040 <tcp_input+0x9d8>)
 800af66:	4837      	ldr	r0, [pc, #220]	; (800b044 <tcp_input+0x9dc>)
 800af68:	f002 fd92 	bl	800da90 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800af6c:	8b63      	ldrh	r3, [r4, #26]
 800af6e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800af70:	f013 0310 	ands.w	r3, r3, #16
 800af74:	d009      	beq.n	800af8a <tcp_input+0x922>
            pbuf_free(recv_data);
 800af76:	4610      	mov	r0, r2
 800af78:	f7fd fd7e 	bl	8008a78 <pbuf_free>
 800af7c:	e6d7      	b.n	800ad2e <tcp_input+0x6c6>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800af7e:	4621      	mov	r1, r4
 800af80:	6920      	ldr	r0, [r4, #16]
 800af82:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800af84:	300d      	adds	r0, #13
 800af86:	d1de      	bne.n	800af46 <tcp_input+0x8de>
 800af88:	e4a5      	b.n	800a8d6 <tcp_input+0x26e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800af8a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800af8e:	b1f7      	cbz	r7, 800afce <tcp_input+0x966>
 800af90:	4621      	mov	r1, r4
 800af92:	6920      	ldr	r0, [r4, #16]
 800af94:	47b8      	blx	r7
          if (err == ERR_ABRT) {
 800af96:	f110 0f0d 	cmn.w	r0, #13
 800af9a:	f43f ac9c 	beq.w	800a8d6 <tcp_input+0x26e>
          if (err != ERR_OK) {
 800af9e:	b108      	cbz	r0, 800afa4 <tcp_input+0x93c>
            pcb->refused_data = recv_data;
 800afa0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800afa2:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800afa4:	7cab      	ldrb	r3, [r5, #18]
 800afa6:	0699      	lsls	r1, r3, #26
 800afa8:	d505      	bpl.n	800afb6 <tcp_input+0x94e>
          if (pcb->refused_data != NULL) {
 800afaa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800afac:	b1ab      	cbz	r3, 800afda <tcp_input+0x972>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800afae:	7b5a      	ldrb	r2, [r3, #13]
 800afb0:	f042 0220 	orr.w	r2, r2, #32
 800afb4:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800afb6:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800afb8:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800afba:	6033      	str	r3, [r6, #0]
        if (tcp_input_delayed_close(pcb)) {
 800afbc:	f7ff f898 	bl	800a0f0 <tcp_input_delayed_close>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	f47f ac88 	bne.w	800a8d6 <tcp_input+0x26e>
        tcp_output(pcb);
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 ff2a 	bl	800be20 <tcp_output>
 800afcc:	e483      	b.n	800a8d6 <tcp_input+0x26e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800afce:	463b      	mov	r3, r7
 800afd0:	4621      	mov	r1, r4
 800afd2:	4638      	mov	r0, r7
 800afd4:	f7fe fd22 	bl	8009a1c <tcp_recv_null>
 800afd8:	e7dd      	b.n	800af96 <tcp_input+0x92e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800afda:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800afdc:	f640 3268 	movw	r2, #2920	; 0xb68
            TCP_EVENT_CLOSED(pcb, err);
 800afe0:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800afe4:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800afe6:	bf1c      	itt	ne
 800afe8:	3301      	addne	r3, #1
 800afea:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800afec:	2f00      	cmp	r7, #0
 800afee:	d0e2      	beq.n	800afb6 <tcp_input+0x94e>
 800aff0:	2300      	movs	r3, #0
 800aff2:	4621      	mov	r1, r4
 800aff4:	6920      	ldr	r0, [r4, #16]
 800aff6:	461a      	mov	r2, r3
 800aff8:	47b8      	blx	r7
            if (err == ERR_ABRT) {
 800affa:	300d      	adds	r0, #13
 800affc:	d1db      	bne.n	800afb6 <tcp_input+0x94e>
 800affe:	e46a      	b.n	800a8d6 <tcp_input+0x26e>
      if (prev != NULL) {
 800b000:	b11c      	cbz	r4, 800b00a <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b002:	68fb      	ldr	r3, [r7, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b004:	6017      	str	r7, [r2, #0]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b006:	60e3      	str	r3, [r4, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b008:	60f8      	str	r0, [r7, #12]
  if (flags & TCP_RST) {
 800b00a:	7f2b      	ldrb	r3, [r5, #28]
 800b00c:	0758      	lsls	r0, r3, #29
 800b00e:	f53f abdf 	bmi.w	800a7d0 <tcp_input+0x168>
  if (flags & TCP_ACK) {
 800b012:	f013 0a10 	ands.w	sl, r3, #16
 800b016:	f43f ad1a 	beq.w	800aa4e <tcp_input+0x3e6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b01a:	880b      	ldrh	r3, [r1, #0]
 800b01c:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800b01e:	6a2a      	ldr	r2, [r5, #32]
 800b020:	e9cd c301 	strd	ip, r3, [sp, #4]
 800b024:	4b08      	ldr	r3, [pc, #32]	; (800b048 <tcp_input+0x9e0>)
 800b026:	4402      	add	r2, r0
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	3304      	adds	r3, #4
 800b02c:	69a9      	ldr	r1, [r5, #24]
 800b02e:	4638      	mov	r0, r7
 800b030:	e4c2      	b.n	800a9b8 <tcp_input+0x350>
      if (prev != NULL) {
 800b032:	2f00      	cmp	r7, #0
 800b034:	f47f ac16 	bne.w	800a864 <tcp_input+0x1fc>
 800b038:	e425      	b.n	800a886 <tcp_input+0x21e>
 800b03a:	bf00      	nop
 800b03c:	080149cf 	.word	0x080149cf
 800b040:	08014d5d 	.word	0x08014d5d
 800b044:	08012bab 	.word	0x08012bab
 800b048:	2000a7ec 	.word	0x2000a7ec

0800b04c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800b04c:	4a02      	ldr	r2, [pc, #8]	; (800b058 <tcp_trigger_input_pcb_close+0xc>)
 800b04e:	7c93      	ldrb	r3, [r2, #18]
 800b050:	f043 0310 	orr.w	r3, r3, #16
 800b054:	7493      	strb	r3, [r2, #18]
}
 800b056:	4770      	bx	lr
 800b058:	20006948 	.word	0x20006948

0800b05c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b05c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b05e:	4604      	mov	r4, r0
 800b060:	b930      	cbnz	r0, 800b070 <tcp_output_segment_busy+0x14>
 800b062:	4b06      	ldr	r3, [pc, #24]	; (800b07c <tcp_output_segment_busy+0x20>)
 800b064:	f240 529a 	movw	r2, #1434	; 0x59a
 800b068:	4905      	ldr	r1, [pc, #20]	; (800b080 <tcp_output_segment_busy+0x24>)
 800b06a:	4806      	ldr	r0, [pc, #24]	; (800b084 <tcp_output_segment_busy+0x28>)
 800b06c:	f002 fd10 	bl	800da90 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b070:	6863      	ldr	r3, [r4, #4]
 800b072:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800b074:	3801      	subs	r0, #1
 800b076:	bf18      	it	ne
 800b078:	2001      	movne	r0, #1
 800b07a:	bd10      	pop	{r4, pc}
 800b07c:	08014d77 	.word	0x08014d77
 800b080:	08014e14 	.word	0x08014e14
 800b084:	08012bab 	.word	0x08012bab

0800b088 <tcp_pbuf_prealloc>:
{
 800b088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b08c:	9d08      	ldr	r5, [sp, #32]
 800b08e:	4680      	mov	r8, r0
 800b090:	460c      	mov	r4, r1
 800b092:	4617      	mov	r7, r2
 800b094:	461e      	mov	r6, r3
 800b096:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b09a:	b92d      	cbnz	r5, 800b0a8 <tcp_pbuf_prealloc+0x20>
 800b09c:	4b1c      	ldr	r3, [pc, #112]	; (800b110 <tcp_pbuf_prealloc+0x88>)
 800b09e:	22e9      	movs	r2, #233	; 0xe9
 800b0a0:	491c      	ldr	r1, [pc, #112]	; (800b114 <tcp_pbuf_prealloc+0x8c>)
 800b0a2:	481d      	ldr	r0, [pc, #116]	; (800b118 <tcp_pbuf_prealloc+0x90>)
 800b0a4:	f002 fcf4 	bl	800da90 <iprintf>
  if (length < max_length) {
 800b0a8:	42bc      	cmp	r4, r7
 800b0aa:	d22e      	bcs.n	800b10a <tcp_pbuf_prealloc+0x82>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b0ac:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b0b0:	079a      	lsls	r2, r3, #30
 800b0b2:	d409      	bmi.n	800b0c8 <tcp_pbuf_prealloc+0x40>
 800b0b4:	8b6b      	ldrh	r3, [r5, #26]
 800b0b6:	065b      	lsls	r3, r3, #25
 800b0b8:	d427      	bmi.n	800b10a <tcp_pbuf_prealloc+0x82>
        (!(pcb->flags & TF_NODELAY) &&
 800b0ba:	f1b9 0f00 	cmp.w	r9, #0
 800b0be:	d003      	beq.n	800b0c8 <tcp_pbuf_prealloc+0x40>
         (!first_seg ||
 800b0c0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800b0c2:	b90b      	cbnz	r3, 800b0c8 <tcp_pbuf_prealloc+0x40>
          pcb->unsent != NULL ||
 800b0c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b0c6:	b303      	cbz	r3, 800b10a <tcp_pbuf_prealloc+0x82>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b0c8:	f204 55b7 	addw	r5, r4, #1463	; 0x5b7
 800b0cc:	f025 0103 	bic.w	r1, r5, #3
 800b0d0:	42b9      	cmp	r1, r7
 800b0d2:	460a      	mov	r2, r1
 800b0d4:	bf28      	it	cs
 800b0d6:	463a      	movcs	r2, r7
 800b0d8:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b0da:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b0de:	4640      	mov	r0, r8
 800b0e0:	f7fd fd32 	bl	8008b48 <pbuf_alloc>
  if (p == NULL) {
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	b168      	cbz	r0, 800b104 <tcp_pbuf_prealloc+0x7c>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b0e8:	6803      	ldr	r3, [r0, #0]
 800b0ea:	b133      	cbz	r3, 800b0fa <tcp_pbuf_prealloc+0x72>
 800b0ec:	4b08      	ldr	r3, [pc, #32]	; (800b110 <tcp_pbuf_prealloc+0x88>)
 800b0ee:	f240 120b 	movw	r2, #267	; 0x10b
 800b0f2:	490a      	ldr	r1, [pc, #40]	; (800b11c <tcp_pbuf_prealloc+0x94>)
 800b0f4:	4808      	ldr	r0, [pc, #32]	; (800b118 <tcp_pbuf_prealloc+0x90>)
 800b0f6:	f002 fccb 	bl	800da90 <iprintf>
  *oversize = p->len - length;
 800b0fa:	896b      	ldrh	r3, [r5, #10]
 800b0fc:	1b1b      	subs	r3, r3, r4
 800b0fe:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800b100:	812c      	strh	r4, [r5, #8]
 800b102:	816c      	strh	r4, [r5, #10]
}
 800b104:	4628      	mov	r0, r5
 800b106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b10a:	4621      	mov	r1, r4
 800b10c:	e7e5      	b.n	800b0da <tcp_pbuf_prealloc+0x52>
 800b10e:	bf00      	nop
 800b110:	08014d77 	.word	0x08014d77
 800b114:	08014e39 	.word	0x08014e39
 800b118:	08012bab 	.word	0x08012bab
 800b11c:	08014e58 	.word	0x08014e58

0800b120 <tcp_create_segment>:
{
 800b120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b124:	460e      	mov	r6, r1
 800b126:	4690      	mov	r8, r2
 800b128:	4699      	mov	r9, r3
 800b12a:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b12e:	4607      	mov	r7, r0
 800b130:	b928      	cbnz	r0, 800b13e <tcp_create_segment+0x1e>
 800b132:	4b2e      	ldr	r3, [pc, #184]	; (800b1ec <tcp_create_segment+0xcc>)
 800b134:	22a3      	movs	r2, #163	; 0xa3
 800b136:	492e      	ldr	r1, [pc, #184]	; (800b1f0 <tcp_create_segment+0xd0>)
 800b138:	482e      	ldr	r0, [pc, #184]	; (800b1f4 <tcp_create_segment+0xd4>)
 800b13a:	f002 fca9 	bl	800da90 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b13e:	b92e      	cbnz	r6, 800b14c <tcp_create_segment+0x2c>
 800b140:	4b2a      	ldr	r3, [pc, #168]	; (800b1ec <tcp_create_segment+0xcc>)
 800b142:	22a4      	movs	r2, #164	; 0xa4
 800b144:	492c      	ldr	r1, [pc, #176]	; (800b1f8 <tcp_create_segment+0xd8>)
 800b146:	482b      	ldr	r0, [pc, #172]	; (800b1f4 <tcp_create_segment+0xd4>)
 800b148:	f002 fca2 	bl	800da90 <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b14c:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b150:	2003      	movs	r0, #3
 800b152:	f7fd fa3f 	bl	80085d4 <memp_malloc>
 800b156:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b158:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b15c:	b928      	cbnz	r0, 800b16a <tcp_create_segment+0x4a>
    pbuf_free(p);
 800b15e:	4630      	mov	r0, r6
 800b160:	f7fd fc8a 	bl	8008a78 <pbuf_free>
}
 800b164:	4620      	mov	r0, r4
 800b166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800b16a:	2300      	movs	r3, #0
  seg->flags = optflags;
 800b16c:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b170:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800b174:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b178:	8933      	ldrh	r3, [r6, #8]
 800b17a:	42ab      	cmp	r3, r5
 800b17c:	d205      	bcs.n	800b18a <tcp_create_segment+0x6a>
 800b17e:	4b1b      	ldr	r3, [pc, #108]	; (800b1ec <tcp_create_segment+0xcc>)
 800b180:	22b0      	movs	r2, #176	; 0xb0
 800b182:	491e      	ldr	r1, [pc, #120]	; (800b1fc <tcp_create_segment+0xdc>)
 800b184:	481b      	ldr	r0, [pc, #108]	; (800b1f4 <tcp_create_segment+0xd4>)
 800b186:	f002 fc83 	bl	800da90 <iprintf>
  seg->len = p->tot_len - optlen;
 800b18a:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b18c:	4630      	mov	r0, r6
 800b18e:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800b190:	eba3 030a 	sub.w	r3, r3, sl
 800b194:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b196:	f7fd fc37 	bl	8008a08 <pbuf_add_header>
 800b19a:	4606      	mov	r6, r0
 800b19c:	b120      	cbz	r0, 800b1a8 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
 800b19e:	4620      	mov	r0, r4
    return NULL;
 800b1a0:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800b1a2:	f7fe f853 	bl	800924c <tcp_seg_free>
    return NULL;
 800b1a6:	e7dd      	b.n	800b164 <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b1a8:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b1aa:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b1ac:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b1ae:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b1b2:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b1b4:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b1b8:	f7fc feec 	bl	8007f94 <lwip_htons>
 800b1bc:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b1c0:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800b1c4:	8b38      	ldrh	r0, [r7, #24]
 800b1c6:	f7fc fee5 	bl	8007f94 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b1ca:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b1cc:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b1d0:	4648      	mov	r0, r9
 800b1d2:	f7fc fee2 	bl	8007f9a <lwip_htonl>
 800b1d6:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b1d8:	ea48 3005 	orr.w	r0, r8, r5, lsl #12
 800b1dc:	68e7      	ldr	r7, [r4, #12]
 800b1de:	f7fc fed9 	bl	8007f94 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800b1e2:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b1e4:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800b1e6:	749e      	strb	r6, [r3, #18]
 800b1e8:	74de      	strb	r6, [r3, #19]
  return seg;
 800b1ea:	e7bb      	b.n	800b164 <tcp_create_segment+0x44>
 800b1ec:	08014d77 	.word	0x08014d77
 800b1f0:	08014e6c 	.word	0x08014e6c
 800b1f4:	08012bab 	.word	0x08012bab
 800b1f8:	08014e8c 	.word	0x08014e8c
 800b1fc:	08014ead 	.word	0x08014ead

0800b200 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b200:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800b202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b206:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800b208:	4606      	mov	r6, r0
 800b20a:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b20c:	2022      	movs	r0, #34	; 0x22
 800b20e:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800b212:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b214:	f7fd fc98 	bl	8008b48 <pbuf_alloc>
  if (p != NULL) {
 800b218:	4605      	mov	r5, r0
 800b21a:	b348      	cbz	r0, 800b270 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b21c:	8943      	ldrh	r3, [r0, #10]
 800b21e:	2b13      	cmp	r3, #19
 800b220:	d806      	bhi.n	800b230 <tcp_output_alloc_header_common.constprop.0+0x30>
 800b222:	4b15      	ldr	r3, [pc, #84]	; (800b278 <tcp_output_alloc_header_common.constprop.0+0x78>)
 800b224:	f240 7223 	movw	r2, #1827	; 0x723
 800b228:	4914      	ldr	r1, [pc, #80]	; (800b27c <tcp_output_alloc_header_common.constprop.0+0x7c>)
 800b22a:	4815      	ldr	r0, [pc, #84]	; (800b280 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800b22c:	f002 fc30 	bl	800da90 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b230:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800b232:	4640      	mov	r0, r8
 800b234:	f7fc feae 	bl	8007f94 <lwip_htons>
 800b238:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b23a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800b23e:	f7fc fea9 	bl	8007f94 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800b242:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800b244:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800b246:	4630      	mov	r0, r6
 800b248:	f7fc fea7 	bl	8007f9a <lwip_htonl>
 800b24c:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b24e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800b252:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 800b256:	f7fc fe9d 	bl	8007f94 <lwip_htons>
 800b25a:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b25c:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800b260:	f7fc fe98 	bl	8007f94 <lwip_htons>
    tcphdr->chksum = 0;
 800b264:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800b266:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800b268:	7423      	strb	r3, [r4, #16]
 800b26a:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800b26c:	74a3      	strb	r3, [r4, #18]
 800b26e:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800b270:	4628      	mov	r0, r5
 800b272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b276:	bf00      	nop
 800b278:	08014d77 	.word	0x08014d77
 800b27c:	08014ec2 	.word	0x08014ec2
 800b280:	08012bab 	.word	0x08012bab

0800b284 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800b284:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b286:	460d      	mov	r5, r1
 800b288:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b28a:	4604      	mov	r4, r0
 800b28c:	b930      	cbnz	r0, 800b29c <tcp_output_alloc_header.constprop.0+0x18>
 800b28e:	4b0d      	ldr	r3, [pc, #52]	; (800b2c4 <tcp_output_alloc_header.constprop.0+0x40>)
 800b290:	f240 7242 	movw	r2, #1858	; 0x742
 800b294:	490c      	ldr	r1, [pc, #48]	; (800b2c8 <tcp_output_alloc_header.constprop.0+0x44>)
 800b296:	480d      	ldr	r0, [pc, #52]	; (800b2cc <tcp_output_alloc_header.constprop.0+0x48>)
 800b298:	f002 fbfa 	bl	800da90 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b29c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b29e:	4632      	mov	r2, r6
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	9302      	str	r3, [sp, #8]
 800b2a4:	2310      	movs	r3, #16
 800b2a6:	9301      	str	r3, [sp, #4]
 800b2a8:	8b23      	ldrh	r3, [r4, #24]
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	8ae3      	ldrh	r3, [r4, #22]
 800b2ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b2b0:	f7ff ffa6 	bl	800b200 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b2b4:	b118      	cbz	r0, 800b2be <tcp_output_alloc_header.constprop.0+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b2b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b2b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2ba:	4413      	add	r3, r2
 800b2bc:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800b2be:	b004      	add	sp, #16
 800b2c0:	bd70      	pop	{r4, r5, r6, pc}
 800b2c2:	bf00      	nop
 800b2c4:	08014d77 	.word	0x08014d77
 800b2c8:	08014ef0 	.word	0x08014ef0
 800b2cc:	08012bab 	.word	0x08012bab

0800b2d0 <tcp_output_fill_options.isra.0.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b2d0:	b930      	cbnz	r0, 800b2e0 <tcp_output_fill_options.isra.0.constprop.0+0x10>
 800b2d2:	4b04      	ldr	r3, [pc, #16]	; (800b2e4 <tcp_output_fill_options.isra.0.constprop.0+0x14>)
 800b2d4:	f240 7256 	movw	r2, #1878	; 0x756
 800b2d8:	4903      	ldr	r1, [pc, #12]	; (800b2e8 <tcp_output_fill_options.isra.0.constprop.0+0x18>)
 800b2da:	4804      	ldr	r0, [pc, #16]	; (800b2ec <tcp_output_fill_options.isra.0.constprop.0+0x1c>)
 800b2dc:	f002 bbd8 	b.w	800da90 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	08014d77 	.word	0x08014d77
 800b2e8:	08014f15 	.word	0x08014f15
 800b2ec:	08012bab 	.word	0x08012bab

0800b2f0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	b085      	sub	sp, #20
 800b2f6:	4617      	mov	r7, r2
 800b2f8:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b2fa:	460d      	mov	r5, r1
 800b2fc:	b931      	cbnz	r1, 800b30c <tcp_output_control_segment+0x1c>
 800b2fe:	4b15      	ldr	r3, [pc, #84]	; (800b354 <tcp_output_control_segment+0x64>)
 800b300:	f240 7287 	movw	r2, #1927	; 0x787
 800b304:	4914      	ldr	r1, [pc, #80]	; (800b358 <tcp_output_control_segment+0x68>)
 800b306:	4815      	ldr	r0, [pc, #84]	; (800b35c <tcp_output_control_segment+0x6c>)
 800b308:	f002 fbc2 	bl	800da90 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b30c:	b164      	cbz	r4, 800b328 <tcp_output_control_segment+0x38>
 800b30e:	7a20      	ldrb	r0, [r4, #8]
 800b310:	b150      	cbz	r0, 800b328 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800b312:	f7fd faeb 	bl	80088ec <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800b316:	b968      	cbnz	r0, 800b334 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800b318:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b31c:	4628      	mov	r0, r5
 800b31e:	f7fd fbab 	bl	8008a78 <pbuf_free>
  return err;
}
 800b322:	4620      	mov	r0, r4
 800b324:	b005      	add	sp, #20
 800b326:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800b328:	4630      	mov	r0, r6
 800b32a:	f7fc f875 	bl	8007418 <ip4_route>
  if (netif == NULL) {
 800b32e:	2800      	cmp	r0, #0
 800b330:	d0f2      	beq.n	800b318 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800b332:	b164      	cbz	r4, 800b34e <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800b334:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800b336:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b338:	2206      	movs	r2, #6
 800b33a:	9002      	str	r0, [sp, #8]
 800b33c:	4639      	mov	r1, r7
 800b33e:	4628      	mov	r0, r5
 800b340:	e9cd 4200 	strd	r4, r2, [sp]
 800b344:	4632      	mov	r2, r6
 800b346:	f7fc f9d3 	bl	80076f0 <ip4_output_if>
 800b34a:	4604      	mov	r4, r0
 800b34c:	e7e6      	b.n	800b31c <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800b34e:	23ff      	movs	r3, #255	; 0xff
 800b350:	e7f2      	b.n	800b338 <tcp_output_control_segment+0x48>
 800b352:	bf00      	nop
 800b354:	08014d77 	.word	0x08014d77
 800b358:	08014f3b 	.word	0x08014f3b
 800b35c:	08012bab 	.word	0x08012bab

0800b360 <tcp_write>:
{
 800b360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b364:	ed2d 8b02 	vpush	{d8}
 800b368:	b08f      	sub	sp, #60	; 0x3c
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b36a:	4604      	mov	r4, r0
{
 800b36c:	9308      	str	r3, [sp, #32]
  u16_t oversize = 0;
 800b36e:	2300      	movs	r3, #0
{
 800b370:	9107      	str	r1, [sp, #28]
 800b372:	9204      	str	r2, [sp, #16]
  u16_t oversize = 0;
 800b374:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b378:	b968      	cbnz	r0, 800b396 <tcp_write+0x36>
 800b37a:	4bab      	ldr	r3, [pc, #684]	; (800b628 <tcp_write+0x2c8>)
 800b37c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b380:	49aa      	ldr	r1, [pc, #680]	; (800b62c <tcp_write+0x2cc>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b382:	48ab      	ldr	r0, [pc, #684]	; (800b630 <tcp_write+0x2d0>)
 800b384:	f002 fb84 	bl	800da90 <iprintf>
 800b388:	f06f 000f 	mvn.w	r0, #15
}
 800b38c:	b00f      	add	sp, #60	; 0x3c
 800b38e:	ecbd 8b02 	vpop	{d8}
 800b392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b396:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800b39a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800b39c:	085b      	lsrs	r3, r3, #1
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	bf28      	it	cs
 800b3a2:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	bf08      	it	eq
 800b3a8:	4613      	moveq	r3, r2
 800b3aa:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b3ac:	9b07      	ldr	r3, [sp, #28]
 800b3ae:	b923      	cbnz	r3, 800b3ba <tcp_write+0x5a>
 800b3b0:	4b9d      	ldr	r3, [pc, #628]	; (800b628 <tcp_write+0x2c8>)
 800b3b2:	f240 12ad 	movw	r2, #429	; 0x1ad
 800b3b6:	499f      	ldr	r1, [pc, #636]	; (800b634 <tcp_write+0x2d4>)
 800b3b8:	e7e3      	b.n	800b382 <tcp_write+0x22>
  if ((pcb->state != ESTABLISHED) &&
 800b3ba:	7d03      	ldrb	r3, [r0, #20]
 800b3bc:	2b07      	cmp	r3, #7
 800b3be:	d003      	beq.n	800b3c8 <tcp_write+0x68>
      (pcb->state != CLOSE_WAIT) &&
 800b3c0:	3b02      	subs	r3, #2
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	f200 825b 	bhi.w	800b87e <tcp_write+0x51e>
  } else if (len == 0) {
 800b3c8:	9b04      	ldr	r3, [sp, #16]
 800b3ca:	b1db      	cbz	r3, 800b404 <tcp_write+0xa4>
  if (len > pcb->snd_buf) {
 800b3cc:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800b3d0:	9a04      	ldr	r2, [sp, #16]
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d206      	bcs.n	800b3e4 <tcp_write+0x84>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b3d6:	8b63      	ldrh	r3, [r4, #26]
 800b3d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3dc:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800b3de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3e2:	e7d3      	b.n	800b38c <tcp_write+0x2c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b3e4:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800b3e8:	2a07      	cmp	r2, #7
 800b3ea:	d8f4      	bhi.n	800b3d6 <tcp_write+0x76>
  if (pcb->snd_queuelen != 0) {
 800b3ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b3ee:	b302      	cbz	r2, 800b432 <tcp_write+0xd2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b3f0:	b943      	cbnz	r3, 800b404 <tcp_write+0xa4>
 800b3f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b3f4:	b933      	cbnz	r3, 800b404 <tcp_write+0xa4>
 800b3f6:	4b8c      	ldr	r3, [pc, #560]	; (800b628 <tcp_write+0x2c8>)
 800b3f8:	f240 1255 	movw	r2, #341	; 0x155
 800b3fc:	498e      	ldr	r1, [pc, #568]	; (800b638 <tcp_write+0x2d8>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b3fe:	488c      	ldr	r0, [pc, #560]	; (800b630 <tcp_write+0x2d0>)
 800b400:	f002 fb46 	bl	800da90 <iprintf>
  queuelen = pcb->snd_queuelen;
 800b404:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800b408:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800b40a:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
 800b40c:	b9de      	cbnz	r6, 800b446 <tcp_write+0xe6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b40e:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
 800b412:	2f00      	cmp	r7, #0
 800b414:	f000 81bc 	beq.w	800b790 <tcp_write+0x430>
 800b418:	4b83      	ldr	r3, [pc, #524]	; (800b628 <tcp_write+0x2c8>)
 800b41a:	f240 224a 	movw	r2, #586	; 0x24a
 800b41e:	4987      	ldr	r1, [pc, #540]	; (800b63c <tcp_write+0x2dc>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b420:	46b0      	mov	r8, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b422:	4883      	ldr	r0, [pc, #524]	; (800b630 <tcp_write+0x2d0>)
  struct pbuf *concat_p = NULL;
 800b424:	46b2      	mov	sl, r6
  u16_t extendlen = 0;
 800b426:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 800b428:	4635      	mov	r5, r6
  u16_t pos = 0; /* position in 'arg' data */
 800b42a:	4637      	mov	r7, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b42c:	f002 fb30 	bl	800da90 <iprintf>
 800b430:	e089      	b.n	800b546 <tcp_write+0x1e6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b432:	b913      	cbnz	r3, 800b43a <tcp_write+0xda>
 800b434:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b436:	2b00      	cmp	r3, #0
 800b438:	d0e4      	beq.n	800b404 <tcp_write+0xa4>
 800b43a:	4b7b      	ldr	r3, [pc, #492]	; (800b628 <tcp_write+0x2c8>)
 800b43c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b440:	497f      	ldr	r1, [pc, #508]	; (800b640 <tcp_write+0x2e0>)
 800b442:	e7dc      	b.n	800b3fe <tcp_write+0x9e>
 800b444:	4656      	mov	r6, sl
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b446:	f8d6 a000 	ldr.w	sl, [r6]
 800b44a:	46b0      	mov	r8, r6
 800b44c:	f1ba 0f00 	cmp.w	sl, #0
 800b450:	d1f8      	bne.n	800b444 <tcp_write+0xe4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b452:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b454:	8933      	ldrh	r3, [r6, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b456:	00ad      	lsls	r5, r5, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b458:	9a06      	ldr	r2, [sp, #24]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b45a:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b45e:	442b      	add	r3, r5
 800b460:	429a      	cmp	r2, r3
 800b462:	da06      	bge.n	800b472 <tcp_write+0x112>
 800b464:	4b70      	ldr	r3, [pc, #448]	; (800b628 <tcp_write+0x2c8>)
 800b466:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b46a:	4976      	ldr	r1, [pc, #472]	; (800b644 <tcp_write+0x2e4>)
 800b46c:	4870      	ldr	r0, [pc, #448]	; (800b630 <tcp_write+0x2d0>)
 800b46e:	f002 fb0f 	bl	800da90 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b472:	8937      	ldrh	r7, [r6, #8]
 800b474:	9b06      	ldr	r3, [sp, #24]
 800b476:	1bdf      	subs	r7, r3, r7
 800b478:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 800b47a:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b47e:	b2bf      	uxth	r7, r7
    oversize = pcb->unsent_oversize;
 800b480:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
    if (oversize > 0) {
 800b484:	2d00      	cmp	r5, #0
 800b486:	d067      	beq.n	800b558 <tcp_write+0x1f8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b488:	42bd      	cmp	r5, r7
 800b48a:	d906      	bls.n	800b49a <tcp_write+0x13a>
 800b48c:	4b66      	ldr	r3, [pc, #408]	; (800b628 <tcp_write+0x2c8>)
 800b48e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b492:	496d      	ldr	r1, [pc, #436]	; (800b648 <tcp_write+0x2e8>)
 800b494:	4866      	ldr	r0, [pc, #408]	; (800b630 <tcp_write+0x2d0>)
 800b496:	f002 fafb 	bl	800da90 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b49a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800b49e:	9a04      	ldr	r2, [sp, #16]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	bf28      	it	cs
 800b4a4:	461a      	movcs	r2, r3
 800b4a6:	42ba      	cmp	r2, r7
 800b4a8:	4615      	mov	r5, r2
 800b4aa:	bf28      	it	cs
 800b4ac:	463d      	movcs	r5, r7
      oversize -= oversize_used;
 800b4ae:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
 800b4b0:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 800b4b2:	b29b      	uxth	r3, r3
      space -= oversize_used;
 800b4b4:	b2bf      	uxth	r7, r7
      oversize -= oversize_used;
 800b4b6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b4ba:	b153      	cbz	r3, 800b4d2 <tcp_write+0x172>
 800b4bc:	9b04      	ldr	r3, [sp, #16]
 800b4be:	42ab      	cmp	r3, r5
 800b4c0:	f000 816b 	beq.w	800b79a <tcp_write+0x43a>
 800b4c4:	4b58      	ldr	r3, [pc, #352]	; (800b628 <tcp_write+0x2c8>)
 800b4c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4ca:	4960      	ldr	r1, [pc, #384]	; (800b64c <tcp_write+0x2ec>)
 800b4cc:	4858      	ldr	r0, [pc, #352]	; (800b630 <tcp_write+0x2d0>)
 800b4ce:	f002 fadf 	bl	800da90 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b4d2:	9b04      	ldr	r3, [sp, #16]
 800b4d4:	429d      	cmp	r5, r3
 800b4d6:	f080 8160 	bcs.w	800b79a <tcp_write+0x43a>
 800b4da:	2f00      	cmp	r7, #0
 800b4dc:	f000 8155 	beq.w	800b78a <tcp_write+0x42a>
 800b4e0:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800b4e4:	f1b9 0f00 	cmp.w	r9, #0
 800b4e8:	f000 8150 	beq.w	800b78c <tcp_write+0x42c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b4ec:	eba3 0905 	sub.w	r9, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b4f0:	9b08      	ldr	r3, [sp, #32]
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b4f2:	45b9      	cmp	r9, r7
 800b4f4:	bfa8      	it	ge
 800b4f6:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b4f8:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b4fa:	fa1f f689 	uxth.w	r6, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b4fe:	d52d      	bpl.n	800b55c <tcp_write+0x1fc>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b500:	2301      	movs	r3, #1
 800b502:	463a      	mov	r2, r7
 800b504:	4631      	mov	r1, r6
 800b506:	2000      	movs	r0, #0
 800b508:	9302      	str	r3, [sp, #8]
 800b50a:	9b08      	ldr	r3, [sp, #32]
 800b50c:	e9cd 4300 	strd	r4, r3, [sp]
 800b510:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800b514:	f7ff fdb8 	bl	800b088 <tcp_pbuf_prealloc>
 800b518:	4683      	mov	fp, r0
 800b51a:	2800      	cmp	r0, #0
 800b51c:	f000 81ac 	beq.w	800b878 <tcp_write+0x518>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b520:	9b07      	ldr	r3, [sp, #28]
 800b522:	4632      	mov	r2, r6
 800b524:	6840      	ldr	r0, [r0, #4]
 800b526:	1959      	adds	r1, r3, r5
 800b528:	f002 fa9c 	bl	800da64 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800b52c:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 800b52e:	f7fd fbdf 	bl	8008cf0 <pbuf_clen>
 800b532:	9b05      	ldr	r3, [sp, #20]
  u16_t extendlen = 0;
 800b534:	f04f 0900 	mov.w	r9, #0
          queuelen += pbuf_clen(concat_p);
 800b538:	4403      	add	r3, r0
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	9305      	str	r3, [sp, #20]
      pos += seglen;
 800b53e:	19af      	adds	r7, r5, r6
 800b540:	46da      	mov	sl, fp
 800b542:	4646      	mov	r6, r8
 800b544:	b2bf      	uxth	r7, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b546:	9b08      	ldr	r3, [sp, #32]
  struct pbuf *concat_p = NULL;
 800b548:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b54c:	f003 0301 	and.w	r3, r3, #1
  struct pbuf *concat_p = NULL;
 800b550:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b554:	930a      	str	r3, [sp, #40]	; 0x28
 800b556:	e0e7      	b.n	800b728 <tcp_write+0x3c8>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b558:	462e      	mov	r6, r5
 800b55a:	e7ba      	b.n	800b4d2 <tcp_write+0x172>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b55c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b560:	465a      	mov	r2, fp
 800b562:	f8db b000 	ldr.w	fp, [fp]
 800b566:	f1bb 0f00 	cmp.w	fp, #0
 800b56a:	d1f9      	bne.n	800b560 <tcp_write+0x200>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b56c:	7b13      	ldrb	r3, [r2, #12]
 800b56e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800b572:	d10f      	bne.n	800b594 <tcp_write+0x234>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b574:	8951      	ldrh	r1, [r2, #10]
 800b576:	6853      	ldr	r3, [r2, #4]
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b578:	9a07      	ldr	r2, [sp, #28]
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b57a:	440b      	add	r3, r1
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d109      	bne.n	800b594 <tcp_write+0x234>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b580:	b135      	cbz	r5, 800b590 <tcp_write+0x230>
 800b582:	4b29      	ldr	r3, [pc, #164]	; (800b628 <tcp_write+0x2c8>)
 800b584:	f240 2231 	movw	r2, #561	; 0x231
 800b588:	4931      	ldr	r1, [pc, #196]	; (800b650 <tcp_write+0x2f0>)
 800b58a:	4829      	ldr	r0, [pc, #164]	; (800b630 <tcp_write+0x2d0>)
 800b58c:	f002 fa80 	bl	800da90 <iprintf>
          extendlen = seglen;
 800b590:	46b1      	mov	r9, r6
 800b592:	e7d4      	b.n	800b53e <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b594:	2201      	movs	r2, #1
 800b596:	4631      	mov	r1, r6
 800b598:	2000      	movs	r0, #0
 800b59a:	f7fd fad5 	bl	8008b48 <pbuf_alloc>
 800b59e:	4683      	mov	fp, r0
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	f000 8169 	beq.w	800b878 <tcp_write+0x518>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b5a6:	9b07      	ldr	r3, [sp, #28]
 800b5a8:	442b      	add	r3, r5
 800b5aa:	6043      	str	r3, [r0, #4]
 800b5ac:	e7bf      	b.n	800b52e <tcp_write+0x1ce>
    u16_t left = len - pos;
 800b5ae:	9b04      	ldr	r3, [sp, #16]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b5b0:	9a06      	ldr	r2, [sp, #24]
    u16_t left = len - pos;
 800b5b2:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	bf28      	it	cs
 800b5ba:	4613      	movcs	r3, r2
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	ee08 3a10 	vmov	s16, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d047      	beq.n	800b658 <tcp_write+0x2f8>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b5c8:	fabb f38b 	clz	r3, fp
 800b5cc:	ee18 1a10 	vmov	r1, s16
 800b5d0:	2036      	movs	r0, #54	; 0x36
 800b5d2:	095b      	lsrs	r3, r3, #5
 800b5d4:	9302      	str	r3, [sp, #8]
 800b5d6:	9b08      	ldr	r3, [sp, #32]
 800b5d8:	e9cd 4300 	strd	r4, r3, [sp]
 800b5dc:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800b5e0:	f7ff fd52 	bl	800b088 <tcp_pbuf_prealloc>
 800b5e4:	4606      	mov	r6, r0
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	d057      	beq.n	800b69a <tcp_write+0x33a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b5ea:	8943      	ldrh	r3, [r0, #10]
 800b5ec:	ee18 2a10 	vmov	r2, s16
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d206      	bcs.n	800b602 <tcp_write+0x2a2>
 800b5f4:	4b0c      	ldr	r3, [pc, #48]	; (800b628 <tcp_write+0x2c8>)
 800b5f6:	f240 2266 	movw	r2, #614	; 0x266
 800b5fa:	4916      	ldr	r1, [pc, #88]	; (800b654 <tcp_write+0x2f4>)
 800b5fc:	480c      	ldr	r0, [pc, #48]	; (800b630 <tcp_write+0x2d0>)
 800b5fe:	f002 fa47 	bl	800da90 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b602:	9b07      	ldr	r3, [sp, #28]
 800b604:	ee18 2a10 	vmov	r2, s16
 800b608:	6870      	ldr	r0, [r6, #4]
 800b60a:	19d9      	adds	r1, r3, r7
 800b60c:	f002 fa2a 	bl	800da64 <memcpy>
    queuelen += pbuf_clen(p);
 800b610:	4630      	mov	r0, r6
 800b612:	f7fd fb6d 	bl	8008cf0 <pbuf_clen>
 800b616:	9b05      	ldr	r3, [sp, #20]
 800b618:	4403      	add	r3, r0
 800b61a:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b61c:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 800b61e:	9305      	str	r3, [sp, #20]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b620:	d964      	bls.n	800b6ec <tcp_write+0x38c>
      pbuf_free(p);
 800b622:	4630      	mov	r0, r6
 800b624:	e037      	b.n	800b696 <tcp_write+0x336>
 800b626:	bf00      	nop
 800b628:	08014d77 	.word	0x08014d77
 800b62c:	08014f64 	.word	0x08014f64
 800b630:	08012bab 	.word	0x08012bab
 800b634:	08014f7b 	.word	0x08014f7b
 800b638:	08014fac 	.word	0x08014fac
 800b63c:	08015096 	.word	0x08015096
 800b640:	08014fe6 	.word	0x08014fe6
 800b644:	08015018 	.word	0x08015018
 800b648:	0801502f 	.word	0x0801502f
 800b64c:	0801504f 	.word	0x0801504f
 800b650:	0801506d 	.word	0x0801506d
 800b654:	080150c5 	.word	0x080150c5
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b658:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800b65c:	b133      	cbz	r3, 800b66c <tcp_write+0x30c>
 800b65e:	4b89      	ldr	r3, [pc, #548]	; (800b884 <tcp_write+0x524>)
 800b660:	f240 2271 	movw	r2, #625	; 0x271
 800b664:	4988      	ldr	r1, [pc, #544]	; (800b888 <tcp_write+0x528>)
 800b666:	4889      	ldr	r0, [pc, #548]	; (800b88c <tcp_write+0x52c>)
 800b668:	f002 fa12 	bl	800da90 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b66c:	2201      	movs	r2, #1
 800b66e:	ee18 1a10 	vmov	r1, s16
 800b672:	2036      	movs	r0, #54	; 0x36
 800b674:	f7fd fa68 	bl	8008b48 <pbuf_alloc>
 800b678:	b178      	cbz	r0, 800b69a <tcp_write+0x33a>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b67a:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b67c:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b67e:	900b      	str	r0, [sp, #44]	; 0x2c
 800b680:	443a      	add	r2, r7
 800b682:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b684:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b688:	2036      	movs	r0, #54	; 0x36
 800b68a:	f7fd fa5d 	bl	8008b48 <pbuf_alloc>
 800b68e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b690:	4606      	mov	r6, r0
 800b692:	bb38      	cbnz	r0, 800b6e4 <tcp_write+0x384>
        pbuf_free(p2);
 800b694:	4618      	mov	r0, r3
      pbuf_free(p);
 800b696:	f7fd f9ef 	bl	8008a78 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b69a:	8b63      	ldrh	r3, [r4, #26]
 800b69c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6a0:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800b6a2:	f1ba 0f00 	cmp.w	sl, #0
 800b6a6:	d002      	beq.n	800b6ae <tcp_write+0x34e>
    pbuf_free(concat_p);
 800b6a8:	4650      	mov	r0, sl
 800b6aa:	f7fd f9e5 	bl	8008a78 <pbuf_free>
  if (queue != NULL) {
 800b6ae:	f1bb 0f00 	cmp.w	fp, #0
 800b6b2:	d002      	beq.n	800b6ba <tcp_write+0x35a>
    tcp_segs_free(queue);
 800b6b4:	4658      	mov	r0, fp
 800b6b6:	f7fd fdd7 	bl	8009268 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800b6ba:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f43f ae8d 	beq.w	800b3de <tcp_write+0x7e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b6c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f47f ae89 	bne.w	800b3de <tcp_write+0x7e>
 800b6cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	f47f ae85 	bne.w	800b3de <tcp_write+0x7e>
 800b6d4:	4b6b      	ldr	r3, [pc, #428]	; (800b884 <tcp_write+0x524>)
 800b6d6:	f240 3227 	movw	r2, #807	; 0x327
 800b6da:	496d      	ldr	r1, [pc, #436]	; (800b890 <tcp_write+0x530>)
 800b6dc:	486b      	ldr	r0, [pc, #428]	; (800b88c <tcp_write+0x52c>)
 800b6de:	f002 f9d7 	bl	800da90 <iprintf>
 800b6e2:	e67c      	b.n	800b3de <tcp_write+0x7e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	f7fd fb27 	bl	8008d38 <pbuf_cat>
 800b6ea:	e791      	b.n	800b610 <tcp_write+0x2b0>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b6ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	4631      	mov	r1, r6
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	443b      	add	r3, r7
 800b6f6:	9200      	str	r2, [sp, #0]
 800b6f8:	f7ff fd12 	bl	800b120 <tcp_create_segment>
 800b6fc:	4606      	mov	r6, r0
 800b6fe:	2800      	cmp	r0, #0
 800b700:	d0cb      	beq.n	800b69a <tcp_write+0x33a>
    if (queue == NULL) {
 800b702:	f1bb 0f00 	cmp.w	fp, #0
 800b706:	d03e      	beq.n	800b786 <tcp_write+0x426>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b70a:	b933      	cbnz	r3, 800b71a <tcp_write+0x3ba>
 800b70c:	4b5d      	ldr	r3, [pc, #372]	; (800b884 <tcp_write+0x524>)
 800b70e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b712:	4960      	ldr	r1, [pc, #384]	; (800b894 <tcp_write+0x534>)
 800b714:	485d      	ldr	r0, [pc, #372]	; (800b88c <tcp_write+0x52c>)
 800b716:	f002 f9bb 	bl	800da90 <iprintf>
      prev_seg->next = seg;
 800b71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b71c:	601e      	str	r6, [r3, #0]
    pos += seglen;
 800b71e:	ee18 3a10 	vmov	r3, s16
 800b722:	9609      	str	r6, [sp, #36]	; 0x24
 800b724:	441f      	add	r7, r3
 800b726:	b2bf      	uxth	r7, r7
  while (pos < len) {
 800b728:	9b04      	ldr	r3, [sp, #16]
 800b72a:	429f      	cmp	r7, r3
 800b72c:	f4ff af3f 	bcc.w	800b5ae <tcp_write+0x24e>
 800b730:	4657      	mov	r7, sl
 800b732:	46da      	mov	sl, fp
  if (oversize_used > 0) {
 800b734:	b14d      	cbz	r5, 800b74a <tcp_write+0x3ea>
    for (p = last_unsent->p; p; p = p->next) {
 800b736:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b73a:	f1bb 0f00 	cmp.w	fp, #0
 800b73e:	d12f      	bne.n	800b7a0 <tcp_write+0x440>
    last_unsent->len += oversize_used;
 800b740:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b744:	441d      	add	r5, r3
 800b746:	f8a8 5008 	strh.w	r5, [r8, #8]
  pcb->unsent_oversize = oversize;
 800b74a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800b74e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (concat_p != NULL) {
 800b752:	2f00      	cmp	r7, #0
 800b754:	d03d      	beq.n	800b7d2 <tcp_write+0x472>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b756:	f1b8 0f00 	cmp.w	r8, #0
 800b75a:	d106      	bne.n	800b76a <tcp_write+0x40a>
 800b75c:	4b49      	ldr	r3, [pc, #292]	; (800b884 <tcp_write+0x524>)
 800b75e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b762:	494d      	ldr	r1, [pc, #308]	; (800b898 <tcp_write+0x538>)
 800b764:	4849      	ldr	r0, [pc, #292]	; (800b88c <tcp_write+0x52c>)
 800b766:	f002 f993 	bl	800da90 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800b76a:	4639      	mov	r1, r7
 800b76c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b770:	f7fd fae2 	bl	8008d38 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b774:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b778:	893a      	ldrh	r2, [r7, #8]
 800b77a:	4413      	add	r3, r2
 800b77c:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 800b780:	f8c8 a000 	str.w	sl, [r8]
 800b784:	e04d      	b.n	800b822 <tcp_write+0x4c2>
 800b786:	4683      	mov	fp, r0
 800b788:	e7c9      	b.n	800b71e <tcp_write+0x3be>
  u16_t extendlen = 0;
 800b78a:	46b9      	mov	r9, r7
 800b78c:	462f      	mov	r7, r5
 800b78e:	e6da      	b.n	800b546 <tcp_write+0x1e6>
 800b790:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 800b792:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b794:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 800b796:	46ba      	mov	sl, r7
 800b798:	e6d5      	b.n	800b546 <tcp_write+0x1e6>
 800b79a:	2700      	movs	r7, #0
  u16_t extendlen = 0;
 800b79c:	46b9      	mov	r9, r7
 800b79e:	e7c9      	b.n	800b734 <tcp_write+0x3d4>
      p->tot_len += oversize_used;
 800b7a0:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800b7a4:	442b      	add	r3, r5
 800b7a6:	f8ab 3008 	strh.w	r3, [fp, #8]
      if (p->next == NULL) {
 800b7aa:	f8db 3000 	ldr.w	r3, [fp]
 800b7ae:	b96b      	cbnz	r3, 800b7cc <tcp_write+0x46c>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b7b0:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b7b4:	462a      	mov	r2, r5
 800b7b6:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 800b7ba:	9907      	ldr	r1, [sp, #28]
 800b7bc:	4418      	add	r0, r3
 800b7be:	f002 f951 	bl	800da64 <memcpy>
        p->len += oversize_used;
 800b7c2:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800b7c6:	442b      	add	r3, r5
 800b7c8:	f8ab 300a 	strh.w	r3, [fp, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b7cc:	f8db b000 	ldr.w	fp, [fp]
 800b7d0:	e7b3      	b.n	800b73a <tcp_write+0x3da>
  } else if (extendlen > 0) {
 800b7d2:	f1b9 0f00 	cmp.w	r9, #0
 800b7d6:	d01f      	beq.n	800b818 <tcp_write+0x4b8>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b7d8:	f1b8 0f00 	cmp.w	r8, #0
 800b7dc:	d002      	beq.n	800b7e4 <tcp_write+0x484>
 800b7de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b7e2:	b933      	cbnz	r3, 800b7f2 <tcp_write+0x492>
 800b7e4:	4b27      	ldr	r3, [pc, #156]	; (800b884 <tcp_write+0x524>)
 800b7e6:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b7ea:	492c      	ldr	r1, [pc, #176]	; (800b89c <tcp_write+0x53c>)
 800b7ec:	4827      	ldr	r0, [pc, #156]	; (800b88c <tcp_write+0x52c>)
 800b7ee:	f002 f94f 	bl	800da90 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b7f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b7f6:	891a      	ldrh	r2, [r3, #8]
 800b7f8:	6819      	ldr	r1, [r3, #0]
 800b7fa:	444a      	add	r2, r9
 800b7fc:	b292      	uxth	r2, r2
      p->tot_len += extendlen;
 800b7fe:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b800:	b941      	cbnz	r1, 800b814 <tcp_write+0x4b4>
    p->len += extendlen;
 800b802:	895a      	ldrh	r2, [r3, #10]
 800b804:	444a      	add	r2, r9
 800b806:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b808:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b80c:	4499      	add	r9, r3
 800b80e:	f8a8 9008 	strh.w	r9, [r8, #8]
 800b812:	e7b5      	b.n	800b780 <tcp_write+0x420>
      p->tot_len += extendlen;
 800b814:	460b      	mov	r3, r1
 800b816:	e7ee      	b.n	800b7f6 <tcp_write+0x496>
  if (last_unsent == NULL) {
 800b818:	f1b8 0f00 	cmp.w	r8, #0
 800b81c:	d1b0      	bne.n	800b780 <tcp_write+0x420>
    pcb->unsent = queue;
 800b81e:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
 800b822:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b824:	9a04      	ldr	r2, [sp, #16]
 800b826:	4413      	add	r3, r2
  pcb->snd_buf -= len;
 800b828:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
  pcb->snd_lbb += len;
 800b82c:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b82e:	9b04      	ldr	r3, [sp, #16]
 800b830:	1ad2      	subs	r2, r2, r3
  pcb->snd_queuelen = queuelen;
 800b832:	9b05      	ldr	r3, [sp, #20]
  pcb->snd_buf -= len;
 800b834:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b838:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800b83c:	b153      	cbz	r3, 800b854 <tcp_write+0x4f4>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b83e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b840:	b943      	cbnz	r3, 800b854 <tcp_write+0x4f4>
 800b842:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b844:	b933      	cbnz	r3, 800b854 <tcp_write+0x4f4>
 800b846:	4b0f      	ldr	r3, [pc, #60]	; (800b884 <tcp_write+0x524>)
 800b848:	f240 3212 	movw	r2, #786	; 0x312
 800b84c:	4910      	ldr	r1, [pc, #64]	; (800b890 <tcp_write+0x530>)
 800b84e:	480f      	ldr	r0, [pc, #60]	; (800b88c <tcp_write+0x52c>)
 800b850:	f002 f91e 	bl	800da90 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b854:	b176      	cbz	r6, 800b874 <tcp_write+0x514>
 800b856:	68f0      	ldr	r0, [r6, #12]
 800b858:	2800      	cmp	r0, #0
 800b85a:	f43f ad97 	beq.w	800b38c <tcp_write+0x2c>
 800b85e:	9b08      	ldr	r3, [sp, #32]
 800b860:	f013 0402 	ands.w	r4, r3, #2
 800b864:	d106      	bne.n	800b874 <tcp_write+0x514>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b866:	8985      	ldrh	r5, [r0, #12]
 800b868:	2008      	movs	r0, #8
 800b86a:	f7fc fb93 	bl	8007f94 <lwip_htons>
 800b86e:	68f3      	ldr	r3, [r6, #12]
 800b870:	4328      	orrs	r0, r5
 800b872:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 800b874:	2000      	movs	r0, #0
 800b876:	e589      	b.n	800b38c <tcp_write+0x2c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b878:	f04f 0b00 	mov.w	fp, #0
 800b87c:	e70d      	b.n	800b69a <tcp_write+0x33a>
    return ERR_CONN;
 800b87e:	f06f 000a 	mvn.w	r0, #10
 800b882:	e583      	b.n	800b38c <tcp_write+0x2c>
 800b884:	08014d77 	.word	0x08014d77
 800b888:	08015103 	.word	0x08015103
 800b88c:	08012bab 	.word	0x08012bab
 800b890:	0801518f 	.word	0x0801518f
 800b894:	08015111 	.word	0x08015111
 800b898:	08015122 	.word	0x08015122
 800b89c:	0801515a 	.word	0x0801515a

0800b8a0 <tcp_split_unsent_seg>:
{
 800b8a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a4:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b8a6:	4606      	mov	r6, r0
 800b8a8:	b930      	cbnz	r0, 800b8b8 <tcp_split_unsent_seg+0x18>
 800b8aa:	4b5d      	ldr	r3, [pc, #372]	; (800ba20 <tcp_split_unsent_seg+0x180>)
 800b8ac:	f240 324b 	movw	r2, #843	; 0x34b
 800b8b0:	495c      	ldr	r1, [pc, #368]	; (800ba24 <tcp_split_unsent_seg+0x184>)
 800b8b2:	485d      	ldr	r0, [pc, #372]	; (800ba28 <tcp_split_unsent_seg+0x188>)
 800b8b4:	f002 f8ec 	bl	800da90 <iprintf>
  useg = pcb->unsent;
 800b8b8:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
  if (useg == NULL) {
 800b8ba:	b914      	cbnz	r4, 800b8c2 <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 800b8bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8c0:	e009      	b.n	800b8d6 <tcp_split_unsent_seg+0x36>
  if (split == 0) {
 800b8c2:	b95d      	cbnz	r5, 800b8dc <tcp_split_unsent_seg+0x3c>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b8c4:	4b56      	ldr	r3, [pc, #344]	; (800ba20 <tcp_split_unsent_seg+0x180>)
 800b8c6:	f240 3253 	movw	r2, #851	; 0x353
 800b8ca:	4958      	ldr	r1, [pc, #352]	; (800ba2c <tcp_split_unsent_seg+0x18c>)
 800b8cc:	4856      	ldr	r0, [pc, #344]	; (800ba28 <tcp_split_unsent_seg+0x188>)
 800b8ce:	f002 f8df 	bl	800da90 <iprintf>
    return ERR_VAL;
 800b8d2:	f06f 0005 	mvn.w	r0, #5
}
 800b8d6:	b003      	add	sp, #12
 800b8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800b8dc:	8923      	ldrh	r3, [r4, #8]
 800b8de:	42ab      	cmp	r3, r5
 800b8e0:	d801      	bhi.n	800b8e6 <tcp_split_unsent_seg+0x46>
    return ERR_OK;
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	e7f7      	b.n	800b8d6 <tcp_split_unsent_seg+0x36>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b8e6:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 800b8e8:	42ab      	cmp	r3, r5
 800b8ea:	d206      	bcs.n	800b8fa <tcp_split_unsent_seg+0x5a>
 800b8ec:	4b4c      	ldr	r3, [pc, #304]	; (800ba20 <tcp_split_unsent_seg+0x180>)
 800b8ee:	f240 325b 	movw	r2, #859	; 0x35b
 800b8f2:	494f      	ldr	r1, [pc, #316]	; (800ba30 <tcp_split_unsent_seg+0x190>)
 800b8f4:	484c      	ldr	r0, [pc, #304]	; (800ba28 <tcp_split_unsent_seg+0x188>)
 800b8f6:	f002 f8cb 	bl	800da90 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b8fa:	8923      	ldrh	r3, [r4, #8]
 800b8fc:	b933      	cbnz	r3, 800b90c <tcp_split_unsent_seg+0x6c>
 800b8fe:	4b48      	ldr	r3, [pc, #288]	; (800ba20 <tcp_split_unsent_seg+0x180>)
 800b900:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b904:	494b      	ldr	r1, [pc, #300]	; (800ba34 <tcp_split_unsent_seg+0x194>)
 800b906:	4848      	ldr	r0, [pc, #288]	; (800ba28 <tcp_split_unsent_seg+0x188>)
 800b908:	f002 f8c2 	bl	800da90 <iprintf>
  optflags = useg->flags;
 800b90c:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b910:	f44f 7220 	mov.w	r2, #640	; 0x280
  remainder = useg->len - split;
 800b914:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b918:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b91a:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 800b91e:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b922:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 800b926:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b92a:	fa17 f181 	uxtah	r1, r7, r1
 800b92e:	b289      	uxth	r1, r1
 800b930:	f7fd f90a 	bl	8008b48 <pbuf_alloc>
  if (p == NULL) {
 800b934:	4681      	mov	r9, r0
 800b936:	2800      	cmp	r0, #0
 800b938:	d0c0      	beq.n	800b8bc <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 800b93a:	6860      	ldr	r0, [r4, #4]
 800b93c:	8922      	ldrh	r2, [r4, #8]
 800b93e:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b940:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 800b944:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b946:	4642      	mov	r2, r8
 800b948:	4439      	add	r1, r7
  offset = useg->p->tot_len - useg->len + split;
 800b94a:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	f7fd fab9 	bl	8008ec4 <pbuf_copy_partial>
 800b952:	4540      	cmp	r0, r8
 800b954:	d160      	bne.n	800ba18 <tcp_split_unsent_seg+0x178>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b956:	68e3      	ldr	r3, [r4, #12]
 800b958:	8998      	ldrh	r0, [r3, #12]
 800b95a:	f7fc fb1b 	bl	8007f94 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800b95e:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b962:	b2c7      	uxtb	r7, r0
    remainder_flags |= TCP_PSH;
 800b964:	bf16      	itet	ne
 800b966:	f04f 0808 	movne.w	r8, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b96a:	f007 073f 	andeq.w	r7, r7, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800b96e:	f007 0737 	andne.w	r7, r7, #55	; 0x37
  if (split_flags & TCP_FIN) {
 800b972:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b974:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 800b976:	bf48      	it	mi
 800b978:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b97c:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 800b97e:	bf48      	it	mi
 800b980:	f007 07fe 	andmi.w	r7, r7, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b984:	f7fc fb09 	bl	8007f9a <lwip_htonl>
 800b988:	4642      	mov	r2, r8
 800b98a:	182b      	adds	r3, r5, r0
 800b98c:	4649      	mov	r1, r9
 800b98e:	4630      	mov	r0, r6
 800b990:	f8cd b000 	str.w	fp, [sp]
 800b994:	f7ff fbc4 	bl	800b120 <tcp_create_segment>
  if (seg == NULL) {
 800b998:	4680      	mov	r8, r0
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d03c      	beq.n	800ba18 <tcp_split_unsent_seg+0x178>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b99e:	6860      	ldr	r0, [r4, #4]
 800b9a0:	eba5 050a 	sub.w	r5, r5, sl
 800b9a4:	f7fd f9a4 	bl	8008cf0 <pbuf_clen>
 800b9a8:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800b9ac:	fa1f f985 	uxth.w	r9, r5
 800b9b0:	1a18      	subs	r0, r3, r0
 800b9b2:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b9b6:	6860      	ldr	r0, [r4, #4]
 800b9b8:	8901      	ldrh	r1, [r0, #8]
 800b9ba:	fa11 f185 	uxtah	r1, r1, r5
 800b9be:	b289      	uxth	r1, r1
 800b9c0:	f7fd f93e 	bl	8008c40 <pbuf_realloc>
  useg->len -= remainder;
 800b9c4:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b9c6:	4638      	mov	r0, r7
  useg->len -= remainder;
 800b9c8:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b9ca:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800b9cc:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b9d0:	899d      	ldrh	r5, [r3, #12]
 800b9d2:	f7fc fadf 	bl	8007f94 <lwip_htons>
 800b9d6:	68e3      	ldr	r3, [r4, #12]
 800b9d8:	4328      	orrs	r0, r5
 800b9da:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b9dc:	6860      	ldr	r0, [r4, #4]
 800b9de:	f7fd f987 	bl	8008cf0 <pbuf_clen>
 800b9e2:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800b9e6:	4418      	add	r0, r3
 800b9e8:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b9ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b9f0:	f7fd f97e 	bl	8008cf0 <pbuf_clen>
 800b9f4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800b9f8:	4418      	add	r0, r3
  seg->next = useg->next;
 800b9fa:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b9fc:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  seg->next = useg->next;
 800ba00:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800ba04:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800ba08:	f8d8 0000 	ldr.w	r0, [r8]
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	f47f af68 	bne.w	800b8e2 <tcp_split_unsent_seg+0x42>
    pcb->unsent_oversize = 0;
 800ba12:	f8a6 0068 	strh.w	r0, [r6, #104]	; 0x68
 800ba16:	e75e      	b.n	800b8d6 <tcp_split_unsent_seg+0x36>
    pbuf_free(p);
 800ba18:	4648      	mov	r0, r9
 800ba1a:	f7fd f82d 	bl	8008a78 <pbuf_free>
 800ba1e:	e74d      	b.n	800b8bc <tcp_split_unsent_seg+0x1c>
 800ba20:	08014d77 	.word	0x08014d77
 800ba24:	080151ad 	.word	0x080151ad
 800ba28:	08012bab 	.word	0x08012bab
 800ba2c:	080151cf 	.word	0x080151cf
 800ba30:	080151f1 	.word	0x080151f1
 800ba34:	080151fe 	.word	0x080151fe

0800ba38 <tcp_enqueue_flags>:
{
 800ba38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ba3c:	f011 0803 	ands.w	r8, r1, #3
{
 800ba40:	4604      	mov	r4, r0
 800ba42:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ba44:	d106      	bne.n	800ba54 <tcp_enqueue_flags+0x1c>
 800ba46:	4b3e      	ldr	r3, [pc, #248]	; (800bb40 <tcp_enqueue_flags+0x108>)
 800ba48:	f240 4211 	movw	r2, #1041	; 0x411
 800ba4c:	493d      	ldr	r1, [pc, #244]	; (800bb44 <tcp_enqueue_flags+0x10c>)
 800ba4e:	483e      	ldr	r0, [pc, #248]	; (800bb48 <tcp_enqueue_flags+0x110>)
 800ba50:	f002 f81e 	bl	800da90 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ba54:	b934      	cbnz	r4, 800ba64 <tcp_enqueue_flags+0x2c>
 800ba56:	4b3a      	ldr	r3, [pc, #232]	; (800bb40 <tcp_enqueue_flags+0x108>)
 800ba58:	f240 4213 	movw	r2, #1043	; 0x413
 800ba5c:	493b      	ldr	r1, [pc, #236]	; (800bb4c <tcp_enqueue_flags+0x114>)
 800ba5e:	483a      	ldr	r0, [pc, #232]	; (800bb48 <tcp_enqueue_flags+0x110>)
 800ba60:	f002 f816 	bl	800da90 <iprintf>
  if (flags & TCP_SYN) {
 800ba64:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ba68:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ba6c:	2036      	movs	r0, #54	; 0x36
 800ba6e:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800ba72:	4649      	mov	r1, r9
 800ba74:	f7fd f868 	bl	8008b48 <pbuf_alloc>
 800ba78:	4605      	mov	r5, r0
 800ba7a:	b940      	cbnz	r0, 800ba8e <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba7c:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800ba7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba86:	8363      	strh	r3, [r4, #26]
}
 800ba88:	b003      	add	sp, #12
 800ba8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ba8e:	8943      	ldrh	r3, [r0, #10]
 800ba90:	454b      	cmp	r3, r9
 800ba92:	d206      	bcs.n	800baa2 <tcp_enqueue_flags+0x6a>
 800ba94:	4b2a      	ldr	r3, [pc, #168]	; (800bb40 <tcp_enqueue_flags+0x108>)
 800ba96:	f240 4239 	movw	r2, #1081	; 0x439
 800ba9a:	492d      	ldr	r1, [pc, #180]	; (800bb50 <tcp_enqueue_flags+0x118>)
 800ba9c:	482a      	ldr	r0, [pc, #168]	; (800bb48 <tcp_enqueue_flags+0x110>)
 800ba9e:	f001 fff7 	bl	800da90 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800baa2:	4629      	mov	r1, r5
 800baa4:	9700      	str	r7, [sp, #0]
 800baa6:	4632      	mov	r2, r6
 800baa8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800baaa:	4620      	mov	r0, r4
 800baac:	f7ff fb38 	bl	800b120 <tcp_create_segment>
 800bab0:	4605      	mov	r5, r0
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d0e2      	beq.n	800ba7c <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bab6:	68c3      	ldr	r3, [r0, #12]
 800bab8:	079a      	lsls	r2, r3, #30
 800baba:	d006      	beq.n	800baca <tcp_enqueue_flags+0x92>
 800babc:	4b20      	ldr	r3, [pc, #128]	; (800bb40 <tcp_enqueue_flags+0x108>)
 800babe:	f240 4242 	movw	r2, #1090	; 0x442
 800bac2:	4924      	ldr	r1, [pc, #144]	; (800bb54 <tcp_enqueue_flags+0x11c>)
 800bac4:	4820      	ldr	r0, [pc, #128]	; (800bb48 <tcp_enqueue_flags+0x110>)
 800bac6:	f001 ffe3 	bl	800da90 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800baca:	892b      	ldrh	r3, [r5, #8]
 800bacc:	b133      	cbz	r3, 800badc <tcp_enqueue_flags+0xa4>
 800bace:	4b1c      	ldr	r3, [pc, #112]	; (800bb40 <tcp_enqueue_flags+0x108>)
 800bad0:	f240 4243 	movw	r2, #1091	; 0x443
 800bad4:	4920      	ldr	r1, [pc, #128]	; (800bb58 <tcp_enqueue_flags+0x120>)
 800bad6:	481c      	ldr	r0, [pc, #112]	; (800bb48 <tcp_enqueue_flags+0x110>)
 800bad8:	f001 ffda 	bl	800da90 <iprintf>
  if (pcb->unsent == NULL) {
 800badc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bade:	bb43      	cbnz	r3, 800bb32 <tcp_enqueue_flags+0xfa>
    pcb->unsent = seg;
 800bae0:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 800bae2:	2300      	movs	r3, #0
 800bae4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bae8:	f1b8 0f00 	cmp.w	r8, #0
 800baec:	d002      	beq.n	800baf4 <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 800baee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800baf0:	3301      	adds	r3, #1
 800baf2:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800baf4:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800baf6:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800baf8:	bf42      	ittt	mi
 800bafa:	8b63      	ldrhmi	r3, [r4, #26]
 800bafc:	f043 0320 	orrmi.w	r3, r3, #32
 800bb00:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bb02:	f7fd f8f5 	bl	8008cf0 <pbuf_clen>
 800bb06:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800bb0a:	4418      	add	r0, r3
 800bb0c:	b280      	uxth	r0, r0
 800bb0e:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800bb12:	2800      	cmp	r0, #0
 800bb14:	d0b8      	beq.n	800ba88 <tcp_enqueue_flags+0x50>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800bb16:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800bb18:	b948      	cbnz	r0, 800bb2e <tcp_enqueue_flags+0xf6>
 800bb1a:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800bb1c:	2c00      	cmp	r4, #0
 800bb1e:	d1b3      	bne.n	800ba88 <tcp_enqueue_flags+0x50>
 800bb20:	4b07      	ldr	r3, [pc, #28]	; (800bb40 <tcp_enqueue_flags+0x108>)
 800bb22:	f240 4265 	movw	r2, #1125	; 0x465
 800bb26:	490d      	ldr	r1, [pc, #52]	; (800bb5c <tcp_enqueue_flags+0x124>)
 800bb28:	4807      	ldr	r0, [pc, #28]	; (800bb48 <tcp_enqueue_flags+0x110>)
 800bb2a:	f001 ffb1 	bl	800da90 <iprintf>
  return ERR_OK;
 800bb2e:	2000      	movs	r0, #0
 800bb30:	e7aa      	b.n	800ba88 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bb32:	461a      	mov	r2, r3
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1fb      	bne.n	800bb32 <tcp_enqueue_flags+0xfa>
    useg->next = seg;
 800bb3a:	6015      	str	r5, [r2, #0]
 800bb3c:	e7d1      	b.n	800bae2 <tcp_enqueue_flags+0xaa>
 800bb3e:	bf00      	nop
 800bb40:	08014d77 	.word	0x08014d77
 800bb44:	0801520c 	.word	0x0801520c
 800bb48:	08012bab 	.word	0x08012bab
 800bb4c:	08015261 	.word	0x08015261
 800bb50:	08015280 	.word	0x08015280
 800bb54:	080152b9 	.word	0x080152b9
 800bb58:	080152d1 	.word	0x080152d1
 800bb5c:	080152fb 	.word	0x080152fb

0800bb60 <tcp_send_fin>:
{
 800bb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bb62:	4604      	mov	r4, r0
 800bb64:	b930      	cbnz	r0, 800bb74 <tcp_send_fin+0x14>
 800bb66:	4b13      	ldr	r3, [pc, #76]	; (800bbb4 <tcp_send_fin+0x54>)
 800bb68:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800bb6c:	4912      	ldr	r1, [pc, #72]	; (800bbb8 <tcp_send_fin+0x58>)
 800bb6e:	4813      	ldr	r0, [pc, #76]	; (800bbbc <tcp_send_fin+0x5c>)
 800bb70:	f001 ff8e 	bl	800da90 <iprintf>
  if (pcb->unsent != NULL) {
 800bb74:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800bb76:	b14d      	cbz	r5, 800bb8c <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bb78:	462f      	mov	r7, r5
 800bb7a:	682d      	ldr	r5, [r5, #0]
 800bb7c:	2d00      	cmp	r5, #0
 800bb7e:	d1fb      	bne.n	800bb78 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	8998      	ldrh	r0, [r3, #12]
 800bb84:	f7fc fa06 	bl	8007f94 <lwip_htons>
 800bb88:	0743      	lsls	r3, r0, #29
 800bb8a:	d005      	beq.n	800bb98 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	2101      	movs	r1, #1
}
 800bb90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bb94:	f7ff bf50 	b.w	800ba38 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2001      	movs	r0, #1
 800bb9c:	899e      	ldrh	r6, [r3, #12]
 800bb9e:	f7fc f9f9 	bl	8007f94 <lwip_htons>
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	4330      	orrs	r0, r6
 800bba6:	8198      	strh	r0, [r3, #12]
}
 800bba8:	4628      	mov	r0, r5
      tcp_set_flags(pcb, TF_FIN);
 800bbaa:	8b63      	ldrh	r3, [r4, #26]
 800bbac:	f043 0320 	orr.w	r3, r3, #32
 800bbb0:	8363      	strh	r3, [r4, #26]
}
 800bbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbb4:	08014d77 	.word	0x08014d77
 800bbb8:	08015323 	.word	0x08015323
 800bbbc:	08012bab 	.word	0x08012bab

0800bbc0 <tcp_rexmit_rto_prepare>:
{
 800bbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	b930      	cbnz	r0, 800bbd6 <tcp_rexmit_rto_prepare+0x16>
 800bbc8:	4b1c      	ldr	r3, [pc, #112]	; (800bc3c <tcp_rexmit_rto_prepare+0x7c>)
 800bbca:	f240 6263 	movw	r2, #1635	; 0x663
 800bbce:	491c      	ldr	r1, [pc, #112]	; (800bc40 <tcp_rexmit_rto_prepare+0x80>)
 800bbd0:	481c      	ldr	r0, [pc, #112]	; (800bc44 <tcp_rexmit_rto_prepare+0x84>)
 800bbd2:	f001 ff5d 	bl	800da90 <iprintf>
  if (pcb->unacked == NULL) {
 800bbd6:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800bbd8:	b945      	cbnz	r5, 800bbec <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800bbda:	f06f 0005 	mvn.w	r0, #5
}
 800bbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800bbe2:	f7ff fa3b 	bl	800b05c <tcp_output_segment_busy>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d1f7      	bne.n	800bbda <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bbea:	682d      	ldr	r5, [r5, #0]
 800bbec:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800bbee:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1f6      	bne.n	800bbe2 <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800bbf4:	f7ff fa32 	bl	800b05c <tcp_output_segment_busy>
 800bbf8:	4606      	mov	r6, r0
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	d1ed      	bne.n	800bbda <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800bbfe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bc00:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800bc02:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 800bc04:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800bc08:	8b63      	ldrh	r3, [r4, #26]
 800bc0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bc0e:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bc10:	68eb      	ldr	r3, [r5, #12]
 800bc12:	6858      	ldr	r0, [r3, #4]
 800bc14:	f7fc f9c1 	bl	8007f9a <lwip_htonl>
 800bc18:	68eb      	ldr	r3, [r5, #12]
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800bc20:	8998      	ldrh	r0, [r3, #12]
 800bc22:	f7fc f9b7 	bl	8007f94 <lwip_htons>
 800bc26:	f010 0303 	ands.w	r3, r0, #3
 800bc2a:	4447      	add	r7, r8
  return ERR_OK;
 800bc2c:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bc2e:	bf18      	it	ne
 800bc30:	2301      	movne	r3, #1
  pcb->rttest = 0;
 800bc32:	6366      	str	r6, [r4, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bc34:	443b      	add	r3, r7
 800bc36:	64e3      	str	r3, [r4, #76]	; 0x4c
  return ERR_OK;
 800bc38:	e7d1      	b.n	800bbde <tcp_rexmit_rto_prepare+0x1e>
 800bc3a:	bf00      	nop
 800bc3c:	08014d77 	.word	0x08014d77
 800bc40:	0801533d 	.word	0x0801533d
 800bc44:	08012bab 	.word	0x08012bab

0800bc48 <tcp_rexmit>:
{
 800bc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	b930      	cbnz	r0, 800bc5c <tcp_rexmit+0x14>
 800bc4e:	4b1b      	ldr	r3, [pc, #108]	; (800bcbc <tcp_rexmit+0x74>)
 800bc50:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800bc54:	491a      	ldr	r1, [pc, #104]	; (800bcc0 <tcp_rexmit+0x78>)
 800bc56:	481b      	ldr	r0, [pc, #108]	; (800bcc4 <tcp_rexmit+0x7c>)
 800bc58:	f001 ff1a 	bl	800da90 <iprintf>
  if (pcb->unacked == NULL) {
 800bc5c:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800bc5e:	b915      	cbnz	r5, 800bc66 <tcp_rexmit+0x1e>
    return ERR_VAL;
 800bc60:	f06f 0005 	mvn.w	r0, #5
}
 800bc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800bc66:	4628      	mov	r0, r5
 800bc68:	f7ff f9f8 	bl	800b05c <tcp_output_segment_busy>
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	d1f7      	bne.n	800bc60 <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800bc70:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 800bc72:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  pcb->unacked = seg->next;
 800bc76:	6723      	str	r3, [r4, #112]	; 0x70
  while (*cur_seg &&
 800bc78:	6833      	ldr	r3, [r6, #0]
 800bc7a:	b983      	cbnz	r3, 800bc9e <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 800bc7c:	6833      	ldr	r3, [r6, #0]
 800bc7e:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800bc80:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800bc82:	682b      	ldr	r3, [r5, #0]
 800bc84:	b90b      	cbnz	r3, 800bc8a <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800bc86:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800bc8a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 800bc8e:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 800bc90:	2bff      	cmp	r3, #255	; 0xff
  pcb->rttest = 0;
 800bc92:	6360      	str	r0, [r4, #52]	; 0x34
    ++pcb->nrtx;
 800bc94:	bf1c      	itt	ne
 800bc96:	3301      	addne	r3, #1
 800bc98:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
 800bc9c:	e7e2      	b.n	800bc64 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	6858      	ldr	r0, [r3, #4]
 800bca2:	f7fc f97a 	bl	8007f9a <lwip_htonl>
 800bca6:	68eb      	ldr	r3, [r5, #12]
 800bca8:	4607      	mov	r7, r0
 800bcaa:	6858      	ldr	r0, [r3, #4]
 800bcac:	f7fc f975 	bl	8007f9a <lwip_htonl>
 800bcb0:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	dae2      	bge.n	800bc7c <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800bcb6:	6836      	ldr	r6, [r6, #0]
 800bcb8:	e7de      	b.n	800bc78 <tcp_rexmit+0x30>
 800bcba:	bf00      	nop
 800bcbc:	08014d77 	.word	0x08014d77
 800bcc0:	08015361 	.word	0x08015361
 800bcc4:	08012bab 	.word	0x08012bab

0800bcc8 <tcp_rexmit_fast>:
{
 800bcc8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bcca:	4604      	mov	r4, r0
 800bccc:	b930      	cbnz	r0, 800bcdc <tcp_rexmit_fast+0x14>
 800bcce:	4b15      	ldr	r3, [pc, #84]	; (800bd24 <tcp_rexmit_fast+0x5c>)
 800bcd0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800bcd4:	4914      	ldr	r1, [pc, #80]	; (800bd28 <tcp_rexmit_fast+0x60>)
 800bcd6:	4815      	ldr	r0, [pc, #84]	; (800bd2c <tcp_rexmit_fast+0x64>)
 800bcd8:	f001 feda 	bl	800da90 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bcdc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bcde:	b1fb      	cbz	r3, 800bd20 <tcp_rexmit_fast+0x58>
 800bce0:	8b63      	ldrh	r3, [r4, #26]
 800bce2:	075b      	lsls	r3, r3, #29
 800bce4:	d41c      	bmi.n	800bd20 <tcp_rexmit_fast+0x58>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bce6:	4620      	mov	r0, r4
 800bce8:	f7ff ffae 	bl	800bc48 <tcp_rexmit>
 800bcec:	b9c0      	cbnz	r0, 800bd20 <tcp_rexmit_fast+0x58>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bcee:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800bcf2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      pcb->rtime = 0;
 800bcf6:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bcf8:	4299      	cmp	r1, r3
 800bcfa:	bf28      	it	cs
 800bcfc:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bcfe:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800bd00:	005d      	lsls	r5, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bd02:	104a      	asrs	r2, r1, #1
        pcb->ssthresh = 2 * pcb->mss;
 800bd04:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bd08:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 800bd0a:	bf88      	it	hi
 800bd0c:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bd0e:	4413      	add	r3, r2
        pcb->ssthresh = 2 * pcb->mss;
 800bd10:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bd14:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800bd18:	8b63      	ldrh	r3, [r4, #26]
 800bd1a:	f043 0304 	orr.w	r3, r3, #4
 800bd1e:	8363      	strh	r3, [r4, #26]
}
 800bd20:	bd38      	pop	{r3, r4, r5, pc}
 800bd22:	bf00      	nop
 800bd24:	08014d77 	.word	0x08014d77
 800bd28:	08015379 	.word	0x08015379
 800bd2c:	08012bab 	.word	0x08012bab

0800bd30 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800bd30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd34:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800bd38:	4606      	mov	r6, r0
 800bd3a:	460f      	mov	r7, r1
 800bd3c:	4614      	mov	r4, r2
 800bd3e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bd42:	461d      	mov	r5, r3
{
 800bd44:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bd48:	b933      	cbnz	r3, 800bd58 <tcp_rst+0x28>
 800bd4a:	4b18      	ldr	r3, [pc, #96]	; (800bdac <tcp_rst+0x7c>)
 800bd4c:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800bd50:	4917      	ldr	r1, [pc, #92]	; (800bdb0 <tcp_rst+0x80>)
 800bd52:	4818      	ldr	r0, [pc, #96]	; (800bdb4 <tcp_rst+0x84>)
 800bd54:	f001 fe9c 	bl	800da90 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bd58:	f1b8 0f00 	cmp.w	r8, #0
 800bd5c:	d106      	bne.n	800bd6c <tcp_rst+0x3c>
 800bd5e:	4b13      	ldr	r3, [pc, #76]	; (800bdac <tcp_rst+0x7c>)
 800bd60:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800bd64:	4914      	ldr	r1, [pc, #80]	; (800bdb8 <tcp_rst+0x88>)
 800bd66:	4813      	ldr	r0, [pc, #76]	; (800bdb4 <tcp_rst+0x84>)
 800bd68:	f001 fe92 	bl	800da90 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bd6c:	4638      	mov	r0, r7
 800bd6e:	f7fc f914 	bl	8007f9a <lwip_htonl>
 800bd72:	2314      	movs	r3, #20
 800bd74:	f646 010b 	movw	r1, #26635	; 0x680b
 800bd78:	4602      	mov	r2, r0
 800bd7a:	f8cd a000 	str.w	sl, [sp]
 800bd7e:	4620      	mov	r0, r4
 800bd80:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800bd84:	464b      	mov	r3, r9
 800bd86:	2100      	movs	r1, #0
 800bd88:	f7ff fa3a 	bl	800b200 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	b150      	cbz	r0, 800bda6 <tcp_rst+0x76>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bd90:	f7ff fa9e 	bl	800b2d0 <tcp_output_fill_options.isra.0.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bd94:	4643      	mov	r3, r8
 800bd96:	462a      	mov	r2, r5
 800bd98:	4621      	mov	r1, r4
 800bd9a:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bd9c:	b004      	add	sp, #16
 800bd9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bda2:	f7ff baa5 	b.w	800b2f0 <tcp_output_control_segment>
}
 800bda6:	b004      	add	sp, #16
 800bda8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdac:	08014d77 	.word	0x08014d77
 800bdb0:	08015396 	.word	0x08015396
 800bdb4:	08012bab 	.word	0x08012bab
 800bdb8:	080153b0 	.word	0x080153b0

0800bdbc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bdbc:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	b930      	cbnz	r0, 800bdd0 <tcp_send_empty_ack+0x14>
 800bdc2:	4b14      	ldr	r3, [pc, #80]	; (800be14 <tcp_send_empty_ack+0x58>)
 800bdc4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800bdc8:	4913      	ldr	r1, [pc, #76]	; (800be18 <tcp_send_empty_ack+0x5c>)
 800bdca:	4814      	ldr	r0, [pc, #80]	; (800be1c <tcp_send_empty_ack+0x60>)
 800bdcc:	f001 fe60 	bl	800da90 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bdd0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800bdd2:	f7fc f8e2 	bl	8007f9a <lwip_htonl>
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	4602      	mov	r2, r0
 800bdda:	4620      	mov	r0, r4
 800bddc:	f7ff fa52 	bl	800b284 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800bde0:	4605      	mov	r5, r0
 800bde2:	b930      	cbnz	r0, 800bdf2 <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bde4:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bde6:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bdea:	f043 0303 	orr.w	r3, r3, #3
 800bdee:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800bdf0:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800bdf2:	f7ff fa6d 	bl	800b2d0 <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bdf6:	1d23      	adds	r3, r4, #4
 800bdf8:	4622      	mov	r2, r4
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f7ff fa77 	bl	800b2f0 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800be02:	8b63      	ldrh	r3, [r4, #26]
 800be04:	b118      	cbz	r0, 800be0e <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800be06:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800be0a:	8363      	strh	r3, [r4, #26]
 800be0c:	e7f0      	b.n	800bdf0 <tcp_send_empty_ack+0x34>
 800be0e:	f023 0303 	bic.w	r3, r3, #3
 800be12:	e7fa      	b.n	800be0a <tcp_send_empty_ack+0x4e>
 800be14:	08014d77 	.word	0x08014d77
 800be18:	080153cb 	.word	0x080153cb
 800be1c:	08012bab 	.word	0x08012bab

0800be20 <tcp_output>:
{
 800be20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800be24:	4604      	mov	r4, r0
{
 800be26:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800be28:	b930      	cbnz	r0, 800be38 <tcp_output+0x18>
 800be2a:	4b8f      	ldr	r3, [pc, #572]	; (800c068 <tcp_output+0x248>)
 800be2c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800be30:	498e      	ldr	r1, [pc, #568]	; (800c06c <tcp_output+0x24c>)
 800be32:	488f      	ldr	r0, [pc, #572]	; (800c070 <tcp_output+0x250>)
 800be34:	f001 fe2c 	bl	800da90 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800be38:	7d23      	ldrb	r3, [r4, #20]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d106      	bne.n	800be4c <tcp_output+0x2c>
 800be3e:	4b8a      	ldr	r3, [pc, #552]	; (800c068 <tcp_output+0x248>)
 800be40:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800be44:	498b      	ldr	r1, [pc, #556]	; (800c074 <tcp_output+0x254>)
 800be46:	488a      	ldr	r0, [pc, #552]	; (800c070 <tcp_output+0x250>)
 800be48:	f001 fe22 	bl	800da90 <iprintf>
  if (tcp_input_pcb == pcb) {
 800be4c:	4b8a      	ldr	r3, [pc, #552]	; (800c078 <tcp_output+0x258>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	42a3      	cmp	r3, r4
 800be52:	f000 8171 	beq.w	800c138 <tcp_output+0x318>
  seg = pcb->unsent;
 800be56:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800be58:	b94d      	cbnz	r5, 800be6e <tcp_output+0x4e>
    if (pcb->flags & TF_ACK_NOW) {
 800be5a:	8b63      	ldrh	r3, [r4, #26]
 800be5c:	0798      	lsls	r0, r3, #30
 800be5e:	f140 8167 	bpl.w	800c130 <tcp_output+0x310>
      return tcp_send_empty_ack(pcb);
 800be62:	4620      	mov	r0, r4
}
 800be64:	b007      	add	sp, #28
 800be66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800be6a:	f7ff bfa7 	b.w	800bdbc <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800be6e:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800be70:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800be74:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
 800be78:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800be7c:	b340      	cbz	r0, 800bed0 <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800be7e:	f7fc fd35 	bl	80088ec <netif_get_by_index>
    return ip_route(src, dst);
 800be82:	4607      	mov	r7, r0
  if (netif == NULL) {
 800be84:	2800      	cmp	r0, #0
 800be86:	f000 8170 	beq.w	800c16a <tcp_output+0x34a>
  if (ip_addr_isany(&pcb->local_ip)) {
 800be8a:	6823      	ldr	r3, [r4, #0]
 800be8c:	b90b      	cbnz	r3, 800be92 <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800be8e:	6843      	ldr	r3, [r0, #4]
 800be90:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800be92:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800be94:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800be96:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800be98:	bf28      	it	cs
 800be9a:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800be9c:	f7fc f87d 	bl	8007f9a <lwip_htonl>
 800bea0:	892b      	ldrh	r3, [r5, #8]
 800bea2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bea4:	1a9b      	subs	r3, r3, r2
 800bea6:	4418      	add	r0, r3
 800bea8:	4540      	cmp	r0, r8
 800beaa:	d915      	bls.n	800bed8 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800beac:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800beb0:	4543      	cmp	r3, r8
 800beb2:	d1d2      	bne.n	800be5a <tcp_output+0x3a>
 800beb4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1cf      	bne.n	800be5a <tcp_output+0x3a>
 800beba:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d1cb      	bne.n	800be5a <tcp_output+0x3a>
      pcb->persist_cnt = 0;
 800bec2:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 800bec6:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
      pcb->persist_cnt = 0;
 800beca:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
 800bece:	e7c4      	b.n	800be5a <tcp_output+0x3a>
    return ip_route(src, dst);
 800bed0:	4648      	mov	r0, r9
 800bed2:	f7fb faa1 	bl	8007418 <ip4_route>
 800bed6:	e7d4      	b.n	800be82 <tcp_output+0x62>
  pcb->persist_backoff = 0;
 800bed8:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800beda:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800bedc:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (useg != NULL) {
 800bee0:	b126      	cbz	r6, 800beec <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 800bee2:	4633      	mov	r3, r6
 800bee4:	6836      	ldr	r6, [r6, #0]
 800bee6:	2e00      	cmp	r6, #0
 800bee8:	d1fb      	bne.n	800bee2 <tcp_output+0xc2>
 800beea:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 800beec:	f8df a178 	ldr.w	sl, [pc, #376]	; 800c068 <tcp_output+0x248>
 800bef0:	f8df b17c 	ldr.w	fp, [pc, #380]	; 800c070 <tcp_output+0x250>
 800bef4:	e0de      	b.n	800c0b4 <tcp_output+0x294>
    if (pcb->state != SYN_SENT) {
 800bef6:	7d23      	ldrb	r3, [r4, #20]
 800bef8:	2b02      	cmp	r3, #2
 800befa:	d009      	beq.n	800bf10 <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800befc:	68eb      	ldr	r3, [r5, #12]
 800befe:	2010      	movs	r0, #16
 800bf00:	899b      	ldrh	r3, [r3, #12]
 800bf02:	9304      	str	r3, [sp, #16]
 800bf04:	f7fc f846 	bl	8007f94 <lwip_htons>
 800bf08:	9b04      	ldr	r3, [sp, #16]
 800bf0a:	68ea      	ldr	r2, [r5, #12]
 800bf0c:	4318      	orrs	r0, r3
 800bf0e:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800bf10:	4628      	mov	r0, r5
 800bf12:	f7ff f8a3 	bl	800b05c <tcp_output_segment_busy>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d16f      	bne.n	800bffa <tcp_output+0x1da>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bf1a:	68eb      	ldr	r3, [r5, #12]
 800bf1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bf1e:	9304      	str	r3, [sp, #16]
 800bf20:	f7fc f83b 	bl	8007f9a <lwip_htonl>
 800bf24:	9b04      	ldr	r3, [sp, #16]
 800bf26:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bf28:	68eb      	ldr	r3, [r5, #12]
 800bf2a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800bf2c:	9304      	str	r3, [sp, #16]
 800bf2e:	f7fc f831 	bl	8007f94 <lwip_htons>
 800bf32:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bf34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bf36:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bf38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf3a:	4413      	add	r3, r2
 800bf3c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bf3e:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bf40:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bf42:	07d2      	lsls	r2, r2, #31
 800bf44:	d449      	bmi.n	800bfda <tcp_output+0x1ba>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bf46:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800bf4a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800bf4e:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800bf50:	bfbc      	itt	lt
 800bf52:	2300      	movlt	r3, #0
 800bf54:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800bf56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf58:	b94b      	cbnz	r3, 800bf6e <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800bf5a:	4948      	ldr	r1, [pc, #288]	; (800c07c <tcp_output+0x25c>)
 800bf5c:	68eb      	ldr	r3, [r5, #12]
 800bf5e:	6809      	ldr	r1, [r1, #0]
 800bf60:	9204      	str	r2, [sp, #16]
 800bf62:	6361      	str	r1, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bf64:	6858      	ldr	r0, [r3, #4]
 800bf66:	f7fc f818 	bl	8007f9a <lwip_htonl>
 800bf6a:	9a04      	ldr	r2, [sp, #16]
 800bf6c:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bf6e:	6869      	ldr	r1, [r5, #4]
 800bf70:	68eb      	ldr	r3, [r5, #12]
 800bf72:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800bf74:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bf78:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800bf7a:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bf7c:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800bf7e:	ebac 0c00 	sub.w	ip, ip, r0
 800bf82:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800bf86:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800bf8a:	ebac 0000 	sub.w	r0, ip, r0
 800bf8e:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800bf90:	2100      	movs	r1, #0
 800bf92:	7419      	strb	r1, [r3, #16]
 800bf94:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bf96:	7aa9      	ldrb	r1, [r5, #10]
 800bf98:	0089      	lsls	r1, r1, #2
 800bf9a:	f001 0104 	and.w	r1, r1, #4
 800bf9e:	3114      	adds	r1, #20
 800bfa0:	440b      	add	r3, r1
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d006      	beq.n	800bfb4 <tcp_output+0x194>
 800bfa6:	4653      	mov	r3, sl
 800bfa8:	f240 621c 	movw	r2, #1564	; 0x61c
 800bfac:	4934      	ldr	r1, [pc, #208]	; (800c080 <tcp_output+0x260>)
 800bfae:	4658      	mov	r0, fp
 800bfb0:	f001 fd6e 	bl	800da90 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bfb4:	2306      	movs	r3, #6
 800bfb6:	9702      	str	r7, [sp, #8]
 800bfb8:	464a      	mov	r2, r9
 800bfba:	4621      	mov	r1, r4
 800bfbc:	9301      	str	r3, [sp, #4]
 800bfbe:	7aa3      	ldrb	r3, [r4, #10]
 800bfc0:	9300      	str	r3, [sp, #0]
 800bfc2:	7ae3      	ldrb	r3, [r4, #11]
 800bfc4:	6868      	ldr	r0, [r5, #4]
 800bfc6:	f7fb fb93 	bl	80076f0 <ip4_output_if>
    if (err != ERR_OK) {
 800bfca:	b1b0      	cbz	r0, 800bffa <tcp_output+0x1da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bfcc:	8b63      	ldrh	r3, [r4, #26]
 800bfce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfd2:	8363      	strh	r3, [r4, #26]
}
 800bfd4:	b007      	add	sp, #28
 800bfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bfda:	464a      	mov	r2, r9
 800bfdc:	4639      	mov	r1, r7
 800bfde:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800bfe2:	9304      	str	r3, [sp, #16]
 800bfe4:	f7fd ff4c 	bl	8009e80 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bfe8:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800bfec:	f7fb ffd5 	bl	8007f9a <lwip_htonl>
 800bff0:	9b04      	ldr	r3, [sp, #16]
    opts += 1;
 800bff2:	f103 0218 	add.w	r2, r3, #24
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bff6:	6158      	str	r0, [r3, #20]
    opts += 1;
 800bff8:	e7a7      	b.n	800bf4a <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800bffa:	682b      	ldr	r3, [r5, #0]
 800bffc:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800bffe:	7d23      	ldrb	r3, [r4, #20]
 800c000:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c002:	bf1e      	ittt	ne
 800c004:	8b63      	ldrhne	r3, [r4, #26]
 800c006:	f023 0303 	bicne.w	r3, r3, #3
 800c00a:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c00c:	68eb      	ldr	r3, [r5, #12]
 800c00e:	6858      	ldr	r0, [r3, #4]
 800c010:	f7fb ffc3 	bl	8007f9a <lwip_htonl>
 800c014:	8929      	ldrh	r1, [r5, #8]
 800c016:	68eb      	ldr	r3, [r5, #12]
 800c018:	9104      	str	r1, [sp, #16]
 800c01a:	9005      	str	r0, [sp, #20]
 800c01c:	8998      	ldrh	r0, [r3, #12]
 800c01e:	f7fb ffb9 	bl	8007f94 <lwip_htons>
 800c022:	f010 0303 	ands.w	r3, r0, #3
 800c026:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800c02a:	bf18      	it	ne
 800c02c:	2301      	movne	r3, #1
 800c02e:	440a      	add	r2, r1
 800c030:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c032:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c034:	1ad2      	subs	r2, r2, r3
 800c036:	2a00      	cmp	r2, #0
    if (TCP_TCPLEN(seg) > 0) {
 800c038:	68ea      	ldr	r2, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 800c03a:	bfb8      	it	lt
 800c03c:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800c03e:	892b      	ldrh	r3, [r5, #8]
 800c040:	9304      	str	r3, [sp, #16]
 800c042:	8990      	ldrh	r0, [r2, #12]
 800c044:	f7fb ffa6 	bl	8007f94 <lwip_htons>
 800c048:	f010 0003 	ands.w	r0, r0, #3
 800c04c:	9b04      	ldr	r3, [sp, #16]
 800c04e:	bf18      	it	ne
 800c050:	2001      	movne	r0, #1
 800c052:	42d8      	cmn	r0, r3
 800c054:	f000 8085 	beq.w	800c162 <tcp_output+0x342>
      seg->next = NULL;
 800c058:	2300      	movs	r3, #0
 800c05a:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800c05c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c05e:	b98b      	cbnz	r3, 800c084 <tcp_output+0x264>
        pcb->unacked = seg;
 800c060:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800c062:	462e      	mov	r6, r5
 800c064:	e023      	b.n	800c0ae <tcp_output+0x28e>
 800c066:	bf00      	nop
 800c068:	08014d77 	.word	0x08014d77
 800c06c:	080153eb 	.word	0x080153eb
 800c070:	08012bab 	.word	0x08012bab
 800c074:	08015403 	.word	0x08015403
 800c078:	20010d24 	.word	0x20010d24
 800c07c:	20010d14 	.word	0x20010d14
 800c080:	08015440 	.word	0x08015440
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c084:	68eb      	ldr	r3, [r5, #12]
 800c086:	6858      	ldr	r0, [r3, #4]
 800c088:	f7fb ff87 	bl	8007f9a <lwip_htonl>
 800c08c:	68f2      	ldr	r2, [r6, #12]
 800c08e:	9004      	str	r0, [sp, #16]
 800c090:	6850      	ldr	r0, [r2, #4]
 800c092:	f7fb ff82 	bl	8007f9a <lwip_htonl>
 800c096:	9b04      	ldr	r3, [sp, #16]
 800c098:	1a18      	subs	r0, r3, r0
 800c09a:	2800      	cmp	r0, #0
 800c09c:	da5f      	bge.n	800c15e <tcp_output+0x33e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c09e:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	2a00      	cmp	r2, #0
 800c0a6:	d149      	bne.n	800c13c <tcp_output+0x31c>
          seg->next = (*cur_seg);
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800c0ac:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800c0ae:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800c0b0:	2d00      	cmp	r5, #0
 800c0b2:	d03a      	beq.n	800c12a <tcp_output+0x30a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c0b4:	68eb      	ldr	r3, [r5, #12]
 800c0b6:	6858      	ldr	r0, [r3, #4]
 800c0b8:	f7fb ff6f 	bl	8007f9a <lwip_htonl>
 800c0bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c0be:	1ac0      	subs	r0, r0, r3
 800c0c0:	892b      	ldrh	r3, [r5, #8]
 800c0c2:	4418      	add	r0, r3
  while (seg != NULL &&
 800c0c4:	4540      	cmp	r0, r8
 800c0c6:	d82e      	bhi.n	800c126 <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 800c0c8:	68eb      	ldr	r3, [r5, #12]
 800c0ca:	8998      	ldrh	r0, [r3, #12]
 800c0cc:	f7fb ff62 	bl	8007f94 <lwip_htons>
 800c0d0:	0741      	lsls	r1, r0, #29
 800c0d2:	d506      	bpl.n	800c0e2 <tcp_output+0x2c2>
 800c0d4:	4653      	mov	r3, sl
 800c0d6:	f240 5236 	movw	r2, #1334	; 0x536
 800c0da:	4925      	ldr	r1, [pc, #148]	; (800c170 <tcp_output+0x350>)
 800c0dc:	4658      	mov	r0, fp
 800c0de:	f001 fcd7 	bl	800da90 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c0e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f43f af06 	beq.w	800bef6 <tcp_output+0xd6>
 800c0ea:	8b62      	ldrh	r2, [r4, #26]
 800c0ec:	f012 0f44 	tst.w	r2, #68	; 0x44
 800c0f0:	f47f af01 	bne.w	800bef6 <tcp_output+0xd6>
 800c0f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c0f6:	b143      	cbz	r3, 800c10a <tcp_output+0x2ea>
 800c0f8:	6819      	ldr	r1, [r3, #0]
 800c0fa:	2900      	cmp	r1, #0
 800c0fc:	f47f aefb 	bne.w	800bef6 <tcp_output+0xd6>
 800c100:	8919      	ldrh	r1, [r3, #8]
 800c102:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c104:	4299      	cmp	r1, r3
 800c106:	f4bf aef6 	bcs.w	800bef6 <tcp_output+0xd6>
 800c10a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f43f aef1 	beq.w	800bef6 <tcp_output+0xd6>
 800c114:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800c118:	2b07      	cmp	r3, #7
 800c11a:	f63f aeec 	bhi.w	800bef6 <tcp_output+0xd6>
 800c11e:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800c122:	f47f aee8 	bne.w	800bef6 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800c126:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c128:	b913      	cbnz	r3, 800c130 <tcp_output+0x310>
    pcb->unsent_oversize = 0;
 800c12a:	2300      	movs	r3, #0
 800c12c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c130:	8b63      	ldrh	r3, [r4, #26]
 800c132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c136:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800c138:	2000      	movs	r0, #0
 800c13a:	e74b      	b.n	800bfd4 <tcp_output+0x1b4>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c13c:	68d2      	ldr	r2, [r2, #12]
 800c13e:	9305      	str	r3, [sp, #20]
 800c140:	6850      	ldr	r0, [r2, #4]
 800c142:	f7fb ff2a 	bl	8007f9a <lwip_htonl>
 800c146:	68e9      	ldr	r1, [r5, #12]
 800c148:	9004      	str	r0, [sp, #16]
 800c14a:	6848      	ldr	r0, [r1, #4]
 800c14c:	f7fb ff25 	bl	8007f9a <lwip_htonl>
 800c150:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800c152:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c154:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800c156:	2800      	cmp	r0, #0
 800c158:	daa6      	bge.n	800c0a8 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	e7a1      	b.n	800c0a2 <tcp_output+0x282>
          useg->next = seg;
 800c15e:	6035      	str	r5, [r6, #0]
 800c160:	e77f      	b.n	800c062 <tcp_output+0x242>
      tcp_seg_free(seg);
 800c162:	4628      	mov	r0, r5
 800c164:	f7fd f872 	bl	800924c <tcp_seg_free>
 800c168:	e7a1      	b.n	800c0ae <tcp_output+0x28e>
    return ERR_RTE;
 800c16a:	f06f 0003 	mvn.w	r0, #3
 800c16e:	e731      	b.n	800bfd4 <tcp_output+0x1b4>
 800c170:	08015429 	.word	0x08015429

0800c174 <tcp_rexmit_rto_commit>:
{
 800c174:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c176:	4604      	mov	r4, r0
 800c178:	b930      	cbnz	r0, 800c188 <tcp_rexmit_rto_commit+0x14>
 800c17a:	4b09      	ldr	r3, [pc, #36]	; (800c1a0 <tcp_rexmit_rto_commit+0x2c>)
 800c17c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c180:	4908      	ldr	r1, [pc, #32]	; (800c1a4 <tcp_rexmit_rto_commit+0x30>)
 800c182:	4809      	ldr	r0, [pc, #36]	; (800c1a8 <tcp_rexmit_rto_commit+0x34>)
 800c184:	f001 fc84 	bl	800da90 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800c188:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800c18c:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800c18e:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800c190:	bf1c      	itt	ne
 800c192:	3301      	addne	r3, #1
 800c194:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 800c198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800c19c:	f7ff be40 	b.w	800be20 <tcp_output>
 800c1a0:	08014d77 	.word	0x08014d77
 800c1a4:	08015453 	.word	0x08015453
 800c1a8:	08012bab 	.word	0x08012bab

0800c1ac <tcp_rexmit_rto>:
{
 800c1ac:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	b930      	cbnz	r0, 800c1c0 <tcp_rexmit_rto+0x14>
 800c1b2:	4b08      	ldr	r3, [pc, #32]	; (800c1d4 <tcp_rexmit_rto+0x28>)
 800c1b4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c1b8:	4907      	ldr	r1, [pc, #28]	; (800c1d8 <tcp_rexmit_rto+0x2c>)
 800c1ba:	4808      	ldr	r0, [pc, #32]	; (800c1dc <tcp_rexmit_rto+0x30>)
 800c1bc:	f001 fc68 	bl	800da90 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f7ff fcfd 	bl	800bbc0 <tcp_rexmit_rto_prepare>
 800c1c6:	b920      	cbnz	r0, 800c1d2 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800c1c8:	4620      	mov	r0, r4
}
 800c1ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800c1ce:	f7ff bfd1 	b.w	800c174 <tcp_rexmit_rto_commit>
}
 800c1d2:	bd10      	pop	{r4, pc}
 800c1d4:	08014d77 	.word	0x08014d77
 800c1d8:	08015476 	.word	0x08015476
 800c1dc:	08012bab 	.word	0x08012bab

0800c1e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c1e0:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	b930      	cbnz	r0, 800c1f4 <tcp_keepalive+0x14>
 800c1e6:	4b0f      	ldr	r3, [pc, #60]	; (800c224 <tcp_keepalive+0x44>)
 800c1e8:	f640 0224 	movw	r2, #2084	; 0x824
 800c1ec:	490e      	ldr	r1, [pc, #56]	; (800c228 <tcp_keepalive+0x48>)
 800c1ee:	480f      	ldr	r0, [pc, #60]	; (800c22c <tcp_keepalive+0x4c>)
 800c1f0:	f001 fc4e 	bl	800da90 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c1f4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c1f6:	3801      	subs	r0, #1
 800c1f8:	f7fb fecf 	bl	8007f9a <lwip_htonl>
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	4602      	mov	r2, r0
 800c200:	4620      	mov	r0, r4
 800c202:	f7ff f83f 	bl	800b284 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800c206:	4605      	mov	r5, r0
 800c208:	b148      	cbz	r0, 800c21e <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c20a:	f7ff f861 	bl	800b2d0 <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c20e:	1d23      	adds	r3, r4, #4
 800c210:	4622      	mov	r2, r4
 800c212:	4629      	mov	r1, r5
 800c214:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c21a:	f7ff b869 	b.w	800b2f0 <tcp_output_control_segment>
}
 800c21e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c222:	bd70      	pop	{r4, r5, r6, pc}
 800c224:	08014d77 	.word	0x08014d77
 800c228:	08015492 	.word	0x08015492
 800c22c:	08012bab 	.word	0x08012bab

0800c230 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c234:	4606      	mov	r6, r0
 800c236:	b930      	cbnz	r0, 800c246 <tcp_zero_window_probe+0x16>
 800c238:	4b2c      	ldr	r3, [pc, #176]	; (800c2ec <tcp_zero_window_probe+0xbc>)
 800c23a:	f640 024f 	movw	r2, #2127	; 0x84f
 800c23e:	492c      	ldr	r1, [pc, #176]	; (800c2f0 <tcp_zero_window_probe+0xc0>)
 800c240:	482c      	ldr	r0, [pc, #176]	; (800c2f4 <tcp_zero_window_probe+0xc4>)
 800c242:	f001 fc25 	bl	800da90 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c246:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
  if (seg == NULL) {
 800c248:	2d00      	cmp	r5, #0
 800c24a:	d048      	beq.n	800c2de <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c24c:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
 800c250:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800c252:	bf1c      	itt	ne
 800c254:	3301      	addne	r3, #1
 800c256:	f886 3096 	strbne.w	r3, [r6, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c25a:	68eb      	ldr	r3, [r5, #12]
 800c25c:	8998      	ldrh	r0, [r3, #12]
 800c25e:	f7fb fe99 	bl	8007f94 <lwip_htons>
 800c262:	f010 0401 	ands.w	r4, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c266:	68eb      	ldr	r3, [r5, #12]
 800c268:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c26a:	bf18      	it	ne
 800c26c:	892c      	ldrhne	r4, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c26e:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c270:	bf1c      	itt	ne
 800c272:	fab4 f484 	clzne	r4, r4
 800c276:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c278:	f084 0101 	eor.w	r1, r4, #1
 800c27c:	f7ff f802 	bl	800b284 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800c280:	4607      	mov	r7, r0
 800c282:	b378      	cbz	r0, 800c2e4 <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c284:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800c288:	b1f4      	cbz	r4, 800c2c8 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c28a:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
 800c28e:	2011      	movs	r0, #17
 800c290:	f7fb fe80 	bl	8007f94 <lwip_htons>
 800c294:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800c298:	4320      	orrs	r0, r4
 800c29a:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c29e:	68eb      	ldr	r3, [r5, #12]
 800c2a0:	6858      	ldr	r0, [r3, #4]
 800c2a2:	f7fb fe7a 	bl	8007f9a <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c2a6:	6d33      	ldr	r3, [r6, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c2a8:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c2aa:	1a1b      	subs	r3, r3, r0
 800c2ac:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800c2ae:	bfb8      	it	lt
 800c2b0:	6530      	strlt	r0, [r6, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c2b2:	4638      	mov	r0, r7
 800c2b4:	f7ff f80c 	bl	800b2d0 <tcp_output_fill_options.isra.0.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c2b8:	1d33      	adds	r3, r6, #4
 800c2ba:	4632      	mov	r2, r6
 800c2bc:	4639      	mov	r1, r7
 800c2be:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c2c4:	f7ff b814 	b.w	800b2f0 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c2c8:	6868      	ldr	r0, [r5, #4]
 800c2ca:	f108 0114 	add.w	r1, r8, #20
 800c2ce:	892a      	ldrh	r2, [r5, #8]
 800c2d0:	8903      	ldrh	r3, [r0, #8]
 800c2d2:	1a9b      	subs	r3, r3, r2
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	f7fc fdf4 	bl	8008ec4 <pbuf_copy_partial>
 800c2dc:	e7df      	b.n	800c29e <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800c2de:	4628      	mov	r0, r5
}
 800c2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800c2e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2e8:	e7fa      	b.n	800c2e0 <tcp_zero_window_probe+0xb0>
 800c2ea:	bf00      	nop
 800c2ec:	08014d77 	.word	0x08014d77
 800c2f0:	080154ad 	.word	0x080154ad
 800c2f4:	08012bab 	.word	0x08012bab

0800c2f8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c2f8:	b570      	push	{r4, r5, r6, lr}
 800c2fa:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c2fc:	200a      	movs	r0, #10
{
 800c2fe:	460e      	mov	r6, r1
 800c300:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c302:	f7fc f967 	bl	80085d4 <memp_malloc>
  if (timeout == NULL) {
 800c306:	b938      	cbnz	r0, 800c318 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c308:	4b10      	ldr	r3, [pc, #64]	; (800c34c <sys_timeout_abs+0x54>)
 800c30a:	22be      	movs	r2, #190	; 0xbe
 800c30c:	4910      	ldr	r1, [pc, #64]	; (800c350 <sys_timeout_abs+0x58>)
 800c30e:	4811      	ldr	r0, [pc, #68]	; (800c354 <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800c310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c314:	f001 bbbc 	b.w	800da90 <iprintf>
  timeout->next = NULL;
 800c318:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 800c31a:	4a0f      	ldr	r2, [pc, #60]	; (800c358 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 800c31c:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 800c31e:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800c320:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800c322:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 800c326:	b90b      	cbnz	r3, 800c32c <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800c328:	6010      	str	r0, [r2, #0]
}
 800c32a:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c32c:	6859      	ldr	r1, [r3, #4]
 800c32e:	1a61      	subs	r1, r4, r1
 800c330:	2900      	cmp	r1, #0
 800c332:	da01      	bge.n	800c338 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 800c334:	6003      	str	r3, [r0, #0]
 800c336:	e7f7      	b.n	800c328 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c338:	4619      	mov	r1, r3
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	b11b      	cbz	r3, 800c346 <sys_timeout_abs+0x4e>
 800c33e:	685a      	ldr	r2, [r3, #4]
 800c340:	1aa2      	subs	r2, r4, r2
 800c342:	2a00      	cmp	r2, #0
 800c344:	daf8      	bge.n	800c338 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800c346:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800c348:	6008      	str	r0, [r1, #0]
        break;
 800c34a:	e7ee      	b.n	800c32a <sys_timeout_abs+0x32>
 800c34c:	080154d0 	.word	0x080154d0
 800c350:	0801556e 	.word	0x0801556e
 800c354:	08012bab 	.word	0x08012bab
 800c358:	20006984 	.word	0x20006984

0800c35c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c35c:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c35e:	6843      	ldr	r3, [r0, #4]
{
 800c360:	4604      	mov	r4, r0
  cyclic->handler();
 800c362:	4798      	blx	r3

  now = sys_now();
 800c364:	f7f4 fc08 	bl	8000b78 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c368:	4b07      	ldr	r3, [pc, #28]	; (800c388 <lwip_cyclic_timer+0x2c>)
 800c36a:	6825      	ldr	r5, [r4, #0]
 800c36c:	685b      	ldr	r3, [r3, #4]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c36e:	4907      	ldr	r1, [pc, #28]	; (800c38c <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c370:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c372:	1a1a      	subs	r2, r3, r0
 800c374:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c376:	4622      	mov	r2, r4
 800c378:	bfb4      	ite	lt
 800c37a:	1940      	addlt	r0, r0, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c37c:	4618      	movge	r0, r3
#endif
  }
}
 800c37e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c382:	f7ff bfb9 	b.w	800c2f8 <sys_timeout_abs>
 800c386:	bf00      	nop
 800c388:	20006984 	.word	0x20006984
 800c38c:	0800c35d 	.word	0x0800c35d

0800c390 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c390:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800c394:	b570      	push	{r4, r5, r6, lr}
 800c396:	4604      	mov	r4, r0
 800c398:	460d      	mov	r5, r1
 800c39a:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c39c:	d306      	bcc.n	800c3ac <sys_timeout+0x1c>
 800c39e:	4b08      	ldr	r3, [pc, #32]	; (800c3c0 <sys_timeout+0x30>)
 800c3a0:	f240 1229 	movw	r2, #297	; 0x129
 800c3a4:	4907      	ldr	r1, [pc, #28]	; (800c3c4 <sys_timeout+0x34>)
 800c3a6:	4808      	ldr	r0, [pc, #32]	; (800c3c8 <sys_timeout+0x38>)
 800c3a8:	f001 fb72 	bl	800da90 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c3ac:	f7f4 fbe4 	bl	8000b78 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c3b0:	4632      	mov	r2, r6
 800c3b2:	4629      	mov	r1, r5
 800c3b4:	4420      	add	r0, r4
#endif
}
 800c3b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c3ba:	f7ff bf9d 	b.w	800c2f8 <sys_timeout_abs>
 800c3be:	bf00      	nop
 800c3c0:	080154d0 	.word	0x080154d0
 800c3c4:	080155ab 	.word	0x080155ab
 800c3c8:	08012bab 	.word	0x08012bab

0800c3cc <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c3cc:	4b08      	ldr	r3, [pc, #32]	; (800c3f0 <tcp_timer_needed+0x24>)
 800c3ce:	689a      	ldr	r2, [r3, #8]
 800c3d0:	b962      	cbnz	r2, 800c3ec <tcp_timer_needed+0x20>
 800c3d2:	4a08      	ldr	r2, [pc, #32]	; (800c3f4 <tcp_timer_needed+0x28>)
 800c3d4:	6812      	ldr	r2, [r2, #0]
 800c3d6:	b912      	cbnz	r2, 800c3de <tcp_timer_needed+0x12>
 800c3d8:	4a07      	ldr	r2, [pc, #28]	; (800c3f8 <tcp_timer_needed+0x2c>)
 800c3da:	6812      	ldr	r2, [r2, #0]
 800c3dc:	b132      	cbz	r2, 800c3ec <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800c3de:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c3e0:	4906      	ldr	r1, [pc, #24]	; (800c3fc <tcp_timer_needed+0x30>)
 800c3e2:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800c3e4:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f7ff bfd2 	b.w	800c390 <sys_timeout>
}
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	20006984 	.word	0x20006984
 800c3f4:	20010d10 	.word	0x20010d10
 800c3f8:	20010d20 	.word	0x20010d20
 800c3fc:	0800c401 	.word	0x0800c401

0800c400 <tcpip_tcp_timer>:
{
 800c400:	b508      	push	{r3, lr}
  tcp_tmr();
 800c402:	f7fd fbb5 	bl	8009b70 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c406:	4b08      	ldr	r3, [pc, #32]	; (800c428 <tcpip_tcp_timer+0x28>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	b913      	cbnz	r3, 800c412 <tcpip_tcp_timer+0x12>
 800c40c:	4b07      	ldr	r3, [pc, #28]	; (800c42c <tcpip_tcp_timer+0x2c>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	b133      	cbz	r3, 800c420 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c412:	2200      	movs	r2, #0
 800c414:	4906      	ldr	r1, [pc, #24]	; (800c430 <tcpip_tcp_timer+0x30>)
 800c416:	20fa      	movs	r0, #250	; 0xfa
}
 800c418:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c41c:	f7ff bfb8 	b.w	800c390 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800c420:	4a04      	ldr	r2, [pc, #16]	; (800c434 <tcpip_tcp_timer+0x34>)
 800c422:	6093      	str	r3, [r2, #8]
}
 800c424:	bd08      	pop	{r3, pc}
 800c426:	bf00      	nop
 800c428:	20010d10 	.word	0x20010d10
 800c42c:	20010d20 	.word	0x20010d20
 800c430:	0800c401 	.word	0x0800c401
 800c434:	20006984 	.word	0x20006984

0800c438 <sys_timeouts_init>:
{
 800c438:	b510      	push	{r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c43a:	4c0f      	ldr	r4, [pc, #60]	; (800c478 <sys_timeouts_init+0x40>)
 800c43c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c440:	490e      	ldr	r1, [pc, #56]	; (800c47c <sys_timeouts_init+0x44>)
 800c442:	f104 0208 	add.w	r2, r4, #8
 800c446:	f7ff ffa3 	bl	800c390 <sys_timeout>
 800c44a:	f104 0210 	add.w	r2, r4, #16
 800c44e:	490b      	ldr	r1, [pc, #44]	; (800c47c <sys_timeouts_init+0x44>)
 800c450:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c454:	f7ff ff9c 	bl	800c390 <sys_timeout>
 800c458:	f104 0218 	add.w	r2, r4, #24
 800c45c:	4907      	ldr	r1, [pc, #28]	; (800c47c <sys_timeouts_init+0x44>)
 800c45e:	f64e 2060 	movw	r0, #60000	; 0xea60
 800c462:	f7ff ff95 	bl	800c390 <sys_timeout>
 800c466:	f104 0220 	add.w	r2, r4, #32
 800c46a:	4904      	ldr	r1, [pc, #16]	; (800c47c <sys_timeouts_init+0x44>)
 800c46c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 800c470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c474:	f7ff bf8c 	b.w	800c390 <sys_timeout>
 800c478:	08012a50 	.word	0x08012a50
 800c47c:	0800c35d 	.word	0x0800c35d

0800c480 <sys_untimeout>:
{
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800c480:	4a0d      	ldr	r2, [pc, #52]	; (800c4b8 <sys_untimeout+0x38>)
{
 800c482:	b470      	push	{r4, r5, r6}
 800c484:	460d      	mov	r5, r1
  if (next_timeout == NULL) {
 800c486:	6811      	ldr	r1, [r2, #0]
 800c488:	b1a1      	cbz	r1, 800c4b4 <sys_untimeout+0x34>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800c48a:	2400      	movs	r4, #0
    if ((t->h == handler) && (t->arg == arg)) {
 800c48c:	688b      	ldr	r3, [r1, #8]
 800c48e:	4283      	cmp	r3, r0
 800c490:	680b      	ldr	r3, [r1, #0]
 800c492:	d10c      	bne.n	800c4ae <sys_untimeout+0x2e>
 800c494:	68ce      	ldr	r6, [r1, #12]
 800c496:	42ae      	cmp	r6, r5
 800c498:	d109      	bne.n	800c4ae <sys_untimeout+0x2e>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 800c49a:	b934      	cbnz	r4, 800c4aa <sys_untimeout+0x2a>
        next_timeout = t->next;
 800c49c:	6013      	str	r3, [r2, #0]
      } else {
        prev_t->next = t->next;
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 800c49e:	200a      	movs	r0, #10
      return;
    }
  }
  return;
}
 800c4a0:	bc70      	pop	{r4, r5, r6}
      memp_free(MEMP_SYS_TIMEOUT, t);
 800c4a2:	f7fc b8b3 	b.w	800860c <memp_free>
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	e7f0      	b.n	800c48c <sys_untimeout+0xc>
        prev_t->next = t->next;
 800c4aa:	6023      	str	r3, [r4, #0]
 800c4ac:	e7f7      	b.n	800c49e <sys_untimeout+0x1e>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800c4ae:	460c      	mov	r4, r1
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d1f8      	bne.n	800c4a6 <sys_untimeout+0x26>
}
 800c4b4:	bc70      	pop	{r4, r5, r6}
 800c4b6:	4770      	bx	lr
 800c4b8:	20006984 	.word	0x20006984

0800c4bc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c4be:	f7f4 fb5b 	bl	8000b78 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800c4c2:	4d0b      	ldr	r5, [pc, #44]	; (800c4f0 <sys_check_timeouts+0x34>)
  now = sys_now();
 800c4c4:	4604      	mov	r4, r0
    tmptimeout = next_timeout;
 800c4c6:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 800c4c8:	b181      	cbz	r1, 800c4ec <sys_check_timeouts+0x30>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c4ca:	684b      	ldr	r3, [r1, #4]
 800c4cc:	1ae2      	subs	r2, r4, r3
 800c4ce:	2a00      	cmp	r2, #0
 800c4d0:	db0c      	blt.n	800c4ec <sys_check_timeouts+0x30>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c4d2:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c4d4:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 800c4d6:	606b      	str	r3, [r5, #4]
    next_timeout = tmptimeout->next;
 800c4d8:	602a      	str	r2, [r5, #0]
    arg = tmptimeout->arg;
 800c4da:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c4de:	f7fc f895 	bl	800860c <memp_free>
    if (handler != NULL) {
 800c4e2:	2e00      	cmp	r6, #0
 800c4e4:	d0ef      	beq.n	800c4c6 <sys_check_timeouts+0xa>
      handler(arg);
 800c4e6:	4638      	mov	r0, r7
 800c4e8:	47b0      	blx	r6
 800c4ea:	e7ec      	b.n	800c4c6 <sys_check_timeouts+0xa>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	20006984 	.word	0x20006984

0800c4f4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800c4f4:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800c4f6:	4c07      	ldr	r4, [pc, #28]	; (800c514 <sys_timeouts_sleeptime+0x20>)
 800c4f8:	6823      	ldr	r3, [r4, #0]
 800c4fa:	b13b      	cbz	r3, 800c50c <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800c4fc:	f7f4 fb3c 	bl	8000b78 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800c500:	6823      	ldr	r3, [r4, #0]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	1a18      	subs	r0, r3, r0
    return 0;
 800c506:	bf48      	it	mi
 800c508:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800c50a:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800c50c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c510:	e7fb      	b.n	800c50a <sys_timeouts_sleeptime+0x16>
 800c512:	bf00      	nop
 800c514:	20006984 	.word	0x20006984

0800c518 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c518:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c51a:	f001 fb47 	bl	800dbac <rand>
 800c51e:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800c522:	4b02      	ldr	r3, [pc, #8]	; (800c52c <udp_init+0x14>)
 800c524:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800c528:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800c52a:	bd08      	pop	{r3, pc}
 800c52c:	20000044 	.word	0x20000044

0800c530 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c534:	4688      	mov	r8, r1
 800c536:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c538:	4607      	mov	r7, r0
 800c53a:	b928      	cbnz	r0, 800c548 <udp_input+0x18>
 800c53c:	4b5f      	ldr	r3, [pc, #380]	; (800c6bc <udp_input+0x18c>)
 800c53e:	22cf      	movs	r2, #207	; 0xcf
 800c540:	495f      	ldr	r1, [pc, #380]	; (800c6c0 <udp_input+0x190>)
 800c542:	4860      	ldr	r0, [pc, #384]	; (800c6c4 <udp_input+0x194>)
 800c544:	f001 faa4 	bl	800da90 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c548:	f1b8 0f00 	cmp.w	r8, #0
 800c54c:	d105      	bne.n	800c55a <udp_input+0x2a>
 800c54e:	4b5b      	ldr	r3, [pc, #364]	; (800c6bc <udp_input+0x18c>)
 800c550:	22d0      	movs	r2, #208	; 0xd0
 800c552:	495d      	ldr	r1, [pc, #372]	; (800c6c8 <udp_input+0x198>)
 800c554:	485b      	ldr	r0, [pc, #364]	; (800c6c4 <udp_input+0x194>)
 800c556:	f001 fa9b 	bl	800da90 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c55a:	897b      	ldrh	r3, [r7, #10]
 800c55c:	2b07      	cmp	r3, #7
 800c55e:	d805      	bhi.n	800c56c <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c560:	4638      	mov	r0, r7
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c562:	b005      	add	sp, #20
 800c564:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800c568:	f7fc ba86 	b.w	8008a78 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c56c:	4e57      	ldr	r6, [pc, #348]	; (800c6cc <udp_input+0x19c>)
  uncon_pcb = NULL;
 800c56e:	2500      	movs	r5, #0
  udphdr = (struct udp_hdr *)p->payload;
 800c570:	687c      	ldr	r4, [r7, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c572:	6831      	ldr	r1, [r6, #0]
  prev = NULL;
 800c574:	46ab      	mov	fp, r5
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c576:	6970      	ldr	r0, [r6, #20]
 800c578:	f7fb f8cb 	bl	8007712 <ip4_addr_isbroadcast_u32>
 800c57c:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 800c57e:	8820      	ldrh	r0, [r4, #0]
 800c580:	f7fb fd08 	bl	8007f94 <lwip_htons>
 800c584:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800c586:	8860      	ldrh	r0, [r4, #2]
 800c588:	f7fb fd04 	bl	8007f94 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c58c:	4b50      	ldr	r3, [pc, #320]	; (800c6d0 <udp_input+0x1a0>)
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c58e:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800c6bc <udp_input+0x18c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c592:	681c      	ldr	r4, [r3, #0]
 800c594:	469a      	mov	sl, r3
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c596:	494f      	ldr	r1, [pc, #316]	; (800c6d4 <udp_input+0x1a4>)
  dest = lwip_ntohs(udphdr->dest);
 800c598:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c59a:	b99c      	cbnz	r4, 800c5c4 <udp_input+0x94>
  if (pcb != NULL) {
 800c59c:	b925      	cbnz	r5, 800c5a8 <udp_input+0x78>
  if (for_us) {
 800c59e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c5a2:	6973      	ldr	r3, [r6, #20]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d1db      	bne.n	800c560 <udp_input+0x30>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c5a8:	2108      	movs	r1, #8
 800c5aa:	4638      	mov	r0, r7
 800c5ac:	f7fc fa30 	bl	8008a10 <pbuf_remove_header>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d05e      	beq.n	800c672 <udp_input+0x142>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c5b4:	4b41      	ldr	r3, [pc, #260]	; (800c6bc <udp_input+0x18c>)
 800c5b6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c5ba:	4947      	ldr	r1, [pc, #284]	; (800c6d8 <udp_input+0x1a8>)
 800c5bc:	4841      	ldr	r0, [pc, #260]	; (800c6c4 <udp_input+0x194>)
 800c5be:	f001 fa67 	bl	800da90 <iprintf>
 800c5c2:	e7cd      	b.n	800c560 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 800c5c4:	8a62      	ldrh	r2, [r4, #18]
 800c5c6:	9803      	ldr	r0, [sp, #12]
 800c5c8:	4282      	cmp	r2, r0
 800c5ca:	d14d      	bne.n	800c668 <udp_input+0x138>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c5cc:	f1b8 0f00 	cmp.w	r8, #0
 800c5d0:	d107      	bne.n	800c5e2 <udp_input+0xb2>
 800c5d2:	4663      	mov	r3, ip
 800c5d4:	2288      	movs	r2, #136	; 0x88
 800c5d6:	483b      	ldr	r0, [pc, #236]	; (800c6c4 <udp_input+0x194>)
 800c5d8:	f001 fa5a 	bl	800da90 <iprintf>
 800c5dc:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800c6bc <udp_input+0x18c>
 800c5e0:	493c      	ldr	r1, [pc, #240]	; (800c6d4 <udp_input+0x1a4>)
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c5e2:	7a20      	ldrb	r0, [r4, #8]
 800c5e4:	b130      	cbz	r0, 800c5f4 <udp_input+0xc4>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c5e6:	6872      	ldr	r2, [r6, #4]
 800c5e8:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800c5ec:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c5ee:	b2d2      	uxtb	r2, r2
 800c5f0:	4290      	cmp	r0, r2
 800c5f2:	d139      	bne.n	800c668 <udp_input+0x138>
    if (broadcast != 0) {
 800c5f4:	6822      	ldr	r2, [r4, #0]
 800c5f6:	f1b9 0f00 	cmp.w	r9, #0
 800c5fa:	d030      	beq.n	800c65e <udp_input+0x12e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c5fc:	b13a      	cbz	r2, 800c60e <udp_input+0xde>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c5fe:	6970      	ldr	r0, [r6, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c600:	1c43      	adds	r3, r0, #1
 800c602:	d004      	beq.n	800c60e <udp_input+0xde>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c604:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c606:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c60a:	4218      	tst	r0, r3
 800c60c:	d12c      	bne.n	800c668 <udp_input+0x138>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c60e:	7c20      	ldrb	r0, [r4, #16]
 800c610:	0743      	lsls	r3, r0, #29
 800c612:	d40e      	bmi.n	800c632 <udp_input+0x102>
        if (uncon_pcb == NULL) {
 800c614:	b35d      	cbz	r5, 800c66e <udp_input+0x13e>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c616:	f1b9 0f00 	cmp.w	r9, #0
 800c61a:	d00a      	beq.n	800c632 <udp_input+0x102>
 800c61c:	6970      	ldr	r0, [r6, #20]
 800c61e:	3001      	adds	r0, #1
 800c620:	d107      	bne.n	800c632 <udp_input+0x102>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c622:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c626:	682b      	ldr	r3, [r5, #0]
 800c628:	4283      	cmp	r3, r0
 800c62a:	d002      	beq.n	800c632 <udp_input+0x102>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c62c:	4290      	cmp	r0, r2
 800c62e:	bf08      	it	eq
 800c630:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800c632:	8aa2      	ldrh	r2, [r4, #20]
 800c634:	9b02      	ldr	r3, [sp, #8]
 800c636:	429a      	cmp	r2, r3
 800c638:	d116      	bne.n	800c668 <udp_input+0x138>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c63a:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800c63c:	b112      	cbz	r2, 800c644 <udp_input+0x114>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c63e:	6930      	ldr	r0, [r6, #16]
 800c640:	4282      	cmp	r2, r0
 800c642:	d111      	bne.n	800c668 <udp_input+0x138>
        if (prev != NULL) {
 800c644:	f1bb 0f00 	cmp.w	fp, #0
 800c648:	d007      	beq.n	800c65a <udp_input+0x12a>
          prev->next = pcb->next;
 800c64a:	68e3      	ldr	r3, [r4, #12]
 800c64c:	f8cb 300c 	str.w	r3, [fp, #12]
          pcb->next = udp_pcbs;
 800c650:	f8da 3000 	ldr.w	r3, [sl]
          udp_pcbs = pcb;
 800c654:	f8ca 4000 	str.w	r4, [sl]
          pcb->next = udp_pcbs;
 800c658:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800c65a:	4625      	mov	r5, r4
 800c65c:	e7a4      	b.n	800c5a8 <udp_input+0x78>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c65e:	2a00      	cmp	r2, #0
 800c660:	d0d5      	beq.n	800c60e <udp_input+0xde>
 800c662:	6970      	ldr	r0, [r6, #20]
 800c664:	4290      	cmp	r0, r2
 800c666:	d0d2      	beq.n	800c60e <udp_input+0xde>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c668:	46a3      	mov	fp, r4
 800c66a:	68e4      	ldr	r4, [r4, #12]
 800c66c:	e795      	b.n	800c59a <udp_input+0x6a>
 800c66e:	4625      	mov	r5, r4
 800c670:	e7df      	b.n	800c632 <udp_input+0x102>
    if (pcb != NULL) {
 800c672:	b16d      	cbz	r5, 800c690 <udp_input+0x160>
      if (pcb->recv != NULL) {
 800c674:	69ac      	ldr	r4, [r5, #24]
 800c676:	2c00      	cmp	r4, #0
 800c678:	f43f af72 	beq.w	800c560 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c67c:	9b02      	ldr	r3, [sp, #8]
 800c67e:	463a      	mov	r2, r7
 800c680:	4629      	mov	r1, r5
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	4b15      	ldr	r3, [pc, #84]	; (800c6dc <udp_input+0x1ac>)
 800c686:	69e8      	ldr	r0, [r5, #28]
 800c688:	47a0      	blx	r4
}
 800c68a:	b005      	add	sp, #20
 800c68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c690:	f1b9 0f00 	cmp.w	r9, #0
 800c694:	f47f af64 	bne.w	800c560 <udp_input+0x30>
 800c698:	6973      	ldr	r3, [r6, #20]
 800c69a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c69e:	2be0      	cmp	r3, #224	; 0xe0
 800c6a0:	f43f af5e 	beq.w	800c560 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c6a4:	89b1      	ldrh	r1, [r6, #12]
 800c6a6:	4638      	mov	r0, r7
 800c6a8:	3108      	adds	r1, #8
 800c6aa:	b209      	sxth	r1, r1
 800c6ac:	f7fc f9dc 	bl	8008a68 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c6b0:	2103      	movs	r1, #3
 800c6b2:	4638      	mov	r0, r7
 800c6b4:	f7fa fe8c 	bl	80073d0 <icmp_dest_unreach>
 800c6b8:	e752      	b.n	800c560 <udp_input+0x30>
 800c6ba:	bf00      	nop
 800c6bc:	080155e1 	.word	0x080155e1
 800c6c0:	0801567a 	.word	0x0801567a
 800c6c4:	08012bab 	.word	0x08012bab
 800c6c8:	08015692 	.word	0x08015692
 800c6cc:	2000a7dc 	.word	0x2000a7dc
 800c6d0:	20010d28 	.word	0x20010d28
 800c6d4:	080156ab 	.word	0x080156ab
 800c6d8:	080156d0 	.word	0x080156d0
 800c6dc:	2000a7ec 	.word	0x2000a7ec

0800c6e0 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800c6e0:	4b2d      	ldr	r3, [pc, #180]	; (800c798 <udp_bind+0xb8>)
{
 800c6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800c6e6:	2900      	cmp	r1, #0
 800c6e8:	bf08      	it	eq
 800c6ea:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c6ec:	b950      	cbnz	r0, 800c704 <udp_bind+0x24>
 800c6ee:	4b2b      	ldr	r3, [pc, #172]	; (800c79c <udp_bind+0xbc>)
 800c6f0:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c6f4:	492a      	ldr	r1, [pc, #168]	; (800c7a0 <udp_bind+0xc0>)
 800c6f6:	482b      	ldr	r0, [pc, #172]	; (800c7a4 <udp_bind+0xc4>)
 800c6f8:	f001 f9ca 	bl	800da90 <iprintf>
 800c6fc:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800c700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c704:	4f28      	ldr	r7, [pc, #160]	; (800c7a8 <udp_bind+0xc8>)
 800c706:	683e      	ldr	r6, [r7, #0]
 800c708:	4635      	mov	r5, r6
 800c70a:	b9d5      	cbnz	r5, 800c742 <udp_bind+0x62>
  if (port == 0) {
 800c70c:	2a00      	cmp	r2, #0
 800c70e:	d140      	bne.n	800c792 <udp_bind+0xb2>
 800c710:	4b26      	ldr	r3, [pc, #152]	; (800c7ac <udp_bind+0xcc>)
 800c712:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c716:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800c71a:	881a      	ldrh	r2, [r3, #0]
 800c71c:	4572      	cmp	r2, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c71e:	46b4      	mov	ip, r6
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c720:	bf16      	itet	ne
 800c722:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c724:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c728:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c72a:	f1bc 0f00 	cmp.w	ip, #0
 800c72e:	d10e      	bne.n	800c74e <udp_bind+0x6e>
 800c730:	801a      	strh	r2, [r3, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c732:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 800c734:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c736:	6003      	str	r3, [r0, #0]
  if (rebind == 0) {
 800c738:	b90d      	cbnz	r5, 800c73e <udp_bind+0x5e>
    pcb->next = udp_pcbs;
 800c73a:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 800c73c:	6038      	str	r0, [r7, #0]
  return ERR_OK;
 800c73e:	2000      	movs	r0, #0
 800c740:	e7de      	b.n	800c700 <udp_bind+0x20>
    if (pcb == ipcb) {
 800c742:	4285      	cmp	r5, r0
 800c744:	d001      	beq.n	800c74a <udp_bind+0x6a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c746:	68ed      	ldr	r5, [r5, #12]
 800c748:	e7df      	b.n	800c70a <udp_bind+0x2a>
      rebind = 1;
 800c74a:	2501      	movs	r5, #1
 800c74c:	e7de      	b.n	800c70c <udp_bind+0x2c>
    if (pcb->local_port == udp_port) {
 800c74e:	f8bc 8012 	ldrh.w	r8, [ip, #18]
 800c752:	4590      	cmp	r8, r2
 800c754:	d107      	bne.n	800c766 <udp_bind+0x86>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c756:	3c01      	subs	r4, #1
 800c758:	b2a4      	uxth	r4, r4
 800c75a:	2c00      	cmp	r4, #0
 800c75c:	d1de      	bne.n	800c71c <udp_bind+0x3c>
 800c75e:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 800c760:	f06f 0007 	mvn.w	r0, #7
 800c764:	e7cc      	b.n	800c700 <udp_bind+0x20>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c766:	f8dc c00c 	ldr.w	ip, [ip, #12]
 800c76a:	e7de      	b.n	800c72a <udp_bind+0x4a>
      if (pcb != ipcb) {
 800c76c:	4283      	cmp	r3, r0
 800c76e:	d00c      	beq.n	800c78a <udp_bind+0xaa>
          if ((ipcb->local_port == port) &&
 800c770:	8a5c      	ldrh	r4, [r3, #18]
 800c772:	4294      	cmp	r4, r2
 800c774:	d109      	bne.n	800c78a <udp_bind+0xaa>
 800c776:	f8d1 c000 	ldr.w	ip, [r1]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c77a:	681c      	ldr	r4, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c77c:	4564      	cmp	r4, ip
 800c77e:	d0ef      	beq.n	800c760 <udp_bind+0x80>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c780:	f1bc 0f00 	cmp.w	ip, #0
 800c784:	d0ec      	beq.n	800c760 <udp_bind+0x80>
              ip_addr_isany(&ipcb->local_ip))) {
 800c786:	2c00      	cmp	r4, #0
 800c788:	d0ea      	beq.n	800c760 <udp_bind+0x80>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1ed      	bne.n	800c76c <udp_bind+0x8c>
 800c790:	e7cf      	b.n	800c732 <udp_bind+0x52>
 800c792:	4633      	mov	r3, r6
 800c794:	e7fa      	b.n	800c78c <udp_bind+0xac>
 800c796:	bf00      	nop
 800c798:	0801292c 	.word	0x0801292c
 800c79c:	080155e1 	.word	0x080155e1
 800c7a0:	080156eb 	.word	0x080156eb
 800c7a4:	08012bab 	.word	0x08012bab
 800c7a8:	20010d28 	.word	0x20010d28
 800c7ac:	20000044 	.word	0x20000044

0800c7b0 <udp_sendto_if_src>:
{
 800c7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b4:	b085      	sub	sp, #20
 800c7b6:	460e      	mov	r6, r1
 800c7b8:	4690      	mov	r8, r2
 800c7ba:	4699      	mov	r9, r3
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c7bc:	4607      	mov	r7, r0
{
 800c7be:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c7c2:	b960      	cbnz	r0, 800c7de <udp_sendto_if_src+0x2e>
 800c7c4:	4b3e      	ldr	r3, [pc, #248]	; (800c8c0 <udp_sendto_if_src+0x110>)
 800c7c6:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c7ca:	493e      	ldr	r1, [pc, #248]	; (800c8c4 <udp_sendto_if_src+0x114>)
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c7cc:	f06f 040f 	mvn.w	r4, #15
 800c7d0:	483d      	ldr	r0, [pc, #244]	; (800c8c8 <udp_sendto_if_src+0x118>)
 800c7d2:	f001 f95d 	bl	800da90 <iprintf>
}
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	b005      	add	sp, #20
 800c7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c7de:	b921      	cbnz	r1, 800c7ea <udp_sendto_if_src+0x3a>
 800c7e0:	4b37      	ldr	r3, [pc, #220]	; (800c8c0 <udp_sendto_if_src+0x110>)
 800c7e2:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c7e6:	4939      	ldr	r1, [pc, #228]	; (800c8cc <udp_sendto_if_src+0x11c>)
 800c7e8:	e7f0      	b.n	800c7cc <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c7ea:	b922      	cbnz	r2, 800c7f6 <udp_sendto_if_src+0x46>
 800c7ec:	4b34      	ldr	r3, [pc, #208]	; (800c8c0 <udp_sendto_if_src+0x110>)
 800c7ee:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c7f2:	4937      	ldr	r1, [pc, #220]	; (800c8d0 <udp_sendto_if_src+0x120>)
 800c7f4:	e7ea      	b.n	800c7cc <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c7f6:	f1ba 0f00 	cmp.w	sl, #0
 800c7fa:	d104      	bne.n	800c806 <udp_sendto_if_src+0x56>
 800c7fc:	4b30      	ldr	r3, [pc, #192]	; (800c8c0 <udp_sendto_if_src+0x110>)
 800c7fe:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c802:	4934      	ldr	r1, [pc, #208]	; (800c8d4 <udp_sendto_if_src+0x124>)
 800c804:	e7e2      	b.n	800c7cc <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c806:	f1bb 0f00 	cmp.w	fp, #0
 800c80a:	d104      	bne.n	800c816 <udp_sendto_if_src+0x66>
 800c80c:	4b2c      	ldr	r3, [pc, #176]	; (800c8c0 <udp_sendto_if_src+0x110>)
 800c80e:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c812:	4931      	ldr	r1, [pc, #196]	; (800c8d8 <udp_sendto_if_src+0x128>)
 800c814:	e7da      	b.n	800c7cc <udp_sendto_if_src+0x1c>
  if (pcb->local_port == 0) {
 800c816:	8a42      	ldrh	r2, [r0, #18]
 800c818:	b13a      	cbz	r2, 800c82a <udp_sendto_if_src+0x7a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c81a:	8932      	ldrh	r2, [r6, #8]
 800c81c:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800c820:	429a      	cmp	r2, r3
 800c822:	d909      	bls.n	800c838 <udp_sendto_if_src+0x88>
    return ERR_MEM;
 800c824:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c828:	e7d5      	b.n	800c7d6 <udp_sendto_if_src+0x26>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c82a:	4601      	mov	r1, r0
 800c82c:	f7ff ff58 	bl	800c6e0 <udp_bind>
    if (err != ERR_OK) {
 800c830:	4604      	mov	r4, r0
 800c832:	2800      	cmp	r0, #0
 800c834:	d0f1      	beq.n	800c81a <udp_sendto_if_src+0x6a>
 800c836:	e7ce      	b.n	800c7d6 <udp_sendto_if_src+0x26>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c838:	2108      	movs	r1, #8
 800c83a:	4630      	mov	r0, r6
 800c83c:	f7fc f8e4 	bl	8008a08 <pbuf_add_header>
 800c840:	2800      	cmp	r0, #0
 800c842:	d03a      	beq.n	800c8ba <udp_sendto_if_src+0x10a>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c844:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c848:	2108      	movs	r1, #8
 800c84a:	2022      	movs	r0, #34	; 0x22
 800c84c:	f7fc f97c 	bl	8008b48 <pbuf_alloc>
    if (q == NULL) {
 800c850:	4605      	mov	r5, r0
 800c852:	2800      	cmp	r0, #0
 800c854:	d0e6      	beq.n	800c824 <udp_sendto_if_src+0x74>
    if (p->tot_len != 0) {
 800c856:	8933      	ldrh	r3, [r6, #8]
 800c858:	b113      	cbz	r3, 800c860 <udp_sendto_if_src+0xb0>
      pbuf_chain(q, p);
 800c85a:	4631      	mov	r1, r6
 800c85c:	f7fc faa6 	bl	8008dac <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c860:	896b      	ldrh	r3, [r5, #10]
 800c862:	2b07      	cmp	r3, #7
 800c864:	d806      	bhi.n	800c874 <udp_sendto_if_src+0xc4>
 800c866:	4b16      	ldr	r3, [pc, #88]	; (800c8c0 <udp_sendto_if_src+0x110>)
 800c868:	f240 320d 	movw	r2, #781	; 0x30d
 800c86c:	491b      	ldr	r1, [pc, #108]	; (800c8dc <udp_sendto_if_src+0x12c>)
 800c86e:	4816      	ldr	r0, [pc, #88]	; (800c8c8 <udp_sendto_if_src+0x118>)
 800c870:	f001 f90e 	bl	800da90 <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 800c874:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800c876:	8a78      	ldrh	r0, [r7, #18]
 800c878:	f7fb fb8c 	bl	8007f94 <lwip_htons>
 800c87c:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c87e:	4648      	mov	r0, r9
 800c880:	f7fb fb88 	bl	8007f94 <lwip_htons>
  udphdr->chksum = 0x0000;
 800c884:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800c886:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 800c888:	71a3      	strb	r3, [r4, #6]
 800c88a:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800c88c:	8928      	ldrh	r0, [r5, #8]
 800c88e:	f7fb fb81 	bl	8007f94 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c892:	2311      	movs	r3, #17
    udphdr->len = lwip_htons(q->tot_len);
 800c894:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c896:	4642      	mov	r2, r8
 800c898:	f8cd b008 	str.w	fp, [sp, #8]
 800c89c:	4651      	mov	r1, sl
 800c89e:	9301      	str	r3, [sp, #4]
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	7abb      	ldrb	r3, [r7, #10]
 800c8a4:	9300      	str	r3, [sp, #0]
 800c8a6:	7afb      	ldrb	r3, [r7, #11]
 800c8a8:	f7fa fea8 	bl	80075fc <ip4_output_if_src>
  if (q != p) {
 800c8ac:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c8ae:	4604      	mov	r4, r0
  if (q != p) {
 800c8b0:	d091      	beq.n	800c7d6 <udp_sendto_if_src+0x26>
    pbuf_free(q);
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	f7fc f8e0 	bl	8008a78 <pbuf_free>
    q = NULL;
 800c8b8:	e78d      	b.n	800c7d6 <udp_sendto_if_src+0x26>
 800c8ba:	4635      	mov	r5, r6
 800c8bc:	e7d0      	b.n	800c860 <udp_sendto_if_src+0xb0>
 800c8be:	bf00      	nop
 800c8c0:	080155e1 	.word	0x080155e1
 800c8c4:	08015701 	.word	0x08015701
 800c8c8:	08012bab 	.word	0x08012bab
 800c8cc:	08015720 	.word	0x08015720
 800c8d0:	08015740 	.word	0x08015740
 800c8d4:	08015762 	.word	0x08015762
 800c8d8:	08015784 	.word	0x08015784
 800c8dc:	080157a5 	.word	0x080157a5

0800c8e0 <udp_sendto_if>:
{
 800c8e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c8e2:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c8e4:	b950      	cbnz	r0, 800c8fc <udp_sendto_if+0x1c>
 800c8e6:	4b18      	ldr	r3, [pc, #96]	; (800c948 <udp_sendto_if+0x68>)
 800c8e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c8ec:	4917      	ldr	r1, [pc, #92]	; (800c94c <udp_sendto_if+0x6c>)
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c8ee:	4818      	ldr	r0, [pc, #96]	; (800c950 <udp_sendto_if+0x70>)
 800c8f0:	f001 f8ce 	bl	800da90 <iprintf>
 800c8f4:	f06f 000f 	mvn.w	r0, #15
}
 800c8f8:	b002      	add	sp, #8
 800c8fa:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c8fc:	b921      	cbnz	r1, 800c908 <udp_sendto_if+0x28>
 800c8fe:	4b12      	ldr	r3, [pc, #72]	; (800c948 <udp_sendto_if+0x68>)
 800c900:	f240 2281 	movw	r2, #641	; 0x281
 800c904:	4913      	ldr	r1, [pc, #76]	; (800c954 <udp_sendto_if+0x74>)
 800c906:	e7f2      	b.n	800c8ee <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c908:	b922      	cbnz	r2, 800c914 <udp_sendto_if+0x34>
 800c90a:	4b0f      	ldr	r3, [pc, #60]	; (800c948 <udp_sendto_if+0x68>)
 800c90c:	f240 2282 	movw	r2, #642	; 0x282
 800c910:	4911      	ldr	r1, [pc, #68]	; (800c958 <udp_sendto_if+0x78>)
 800c912:	e7ec      	b.n	800c8ee <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c914:	b924      	cbnz	r4, 800c920 <udp_sendto_if+0x40>
 800c916:	4b0c      	ldr	r3, [pc, #48]	; (800c948 <udp_sendto_if+0x68>)
 800c918:	f240 2283 	movw	r2, #643	; 0x283
 800c91c:	490f      	ldr	r1, [pc, #60]	; (800c95c <udp_sendto_if+0x7c>)
 800c91e:	e7e6      	b.n	800c8ee <udp_sendto_if+0xe>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c920:	6805      	ldr	r5, [r0, #0]
 800c922:	b11d      	cbz	r5, 800c92c <udp_sendto_if+0x4c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c924:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c928:	2ee0      	cmp	r6, #224	; 0xe0
 800c92a:	d105      	bne.n	800c938 <udp_sendto_if+0x58>
      src_ip = netif_ip_addr4(netif);
 800c92c:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c92e:	e9cd 4500 	strd	r4, r5, [sp]
 800c932:	f7ff ff3d 	bl	800c7b0 <udp_sendto_if_src>
 800c936:	e7df      	b.n	800c8f8 <udp_sendto_if+0x18>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c938:	6866      	ldr	r6, [r4, #4]
 800c93a:	42b5      	cmp	r5, r6
 800c93c:	d101      	bne.n	800c942 <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c93e:	4605      	mov	r5, r0
 800c940:	e7f5      	b.n	800c92e <udp_sendto_if+0x4e>
        return ERR_RTE;
 800c942:	f06f 0003 	mvn.w	r0, #3
 800c946:	e7d7      	b.n	800c8f8 <udp_sendto_if+0x18>
 800c948:	080155e1 	.word	0x080155e1
 800c94c:	080157d3 	.word	0x080157d3
 800c950:	08012bab 	.word	0x08012bab
 800c954:	080157ee 	.word	0x080157ee
 800c958:	0801580a 	.word	0x0801580a
 800c95c:	08015828 	.word	0x08015828

0800c960 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c960:	b570      	push	{r4, r5, r6, lr}
 800c962:	460d      	mov	r5, r1
 800c964:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c966:	4604      	mov	r4, r0
 800c968:	b948      	cbnz	r0, 800c97e <udp_connect+0x1e>
 800c96a:	4b16      	ldr	r3, [pc, #88]	; (800c9c4 <udp_connect+0x64>)
 800c96c:	f240 4235 	movw	r2, #1077	; 0x435
 800c970:	4915      	ldr	r1, [pc, #84]	; (800c9c8 <udp_connect+0x68>)
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c972:	4816      	ldr	r0, [pc, #88]	; (800c9cc <udp_connect+0x6c>)
 800c974:	f001 f88c 	bl	800da90 <iprintf>
 800c978:	f06f 000f 	mvn.w	r0, #15
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
 800c97c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c97e:	b921      	cbnz	r1, 800c98a <udp_connect+0x2a>
 800c980:	4b10      	ldr	r3, [pc, #64]	; (800c9c4 <udp_connect+0x64>)
 800c982:	f240 4236 	movw	r2, #1078	; 0x436
 800c986:	4912      	ldr	r1, [pc, #72]	; (800c9d0 <udp_connect+0x70>)
 800c988:	e7f3      	b.n	800c972 <udp_connect+0x12>
  if (pcb->local_port == 0) {
 800c98a:	8a42      	ldrh	r2, [r0, #18]
 800c98c:	b16a      	cbz	r2, 800c9aa <udp_connect+0x4a>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c98e:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 800c990:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c992:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c994:	7c23      	ldrb	r3, [r4, #16]
 800c996:	f043 0304 	orr.w	r3, r3, #4
 800c99a:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c99c:	4b0d      	ldr	r3, [pc, #52]	; (800c9d4 <udp_connect+0x74>)
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	4610      	mov	r0, r2
 800c9a2:	b940      	cbnz	r0, 800c9b6 <udp_connect+0x56>
  pcb->next = udp_pcbs;
 800c9a4:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800c9a6:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800c9a8:	e7e8      	b.n	800c97c <udp_connect+0x1c>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c9aa:	4601      	mov	r1, r0
 800c9ac:	f7ff fe98 	bl	800c6e0 <udp_bind>
    if (err != ERR_OK) {
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	d0ec      	beq.n	800c98e <udp_connect+0x2e>
 800c9b4:	e7e2      	b.n	800c97c <udp_connect+0x1c>
    if (pcb == ipcb) {
 800c9b6:	42a0      	cmp	r0, r4
 800c9b8:	d001      	beq.n	800c9be <udp_connect+0x5e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c9ba:	68c0      	ldr	r0, [r0, #12]
 800c9bc:	e7f1      	b.n	800c9a2 <udp_connect+0x42>
      return ERR_OK;
 800c9be:	2000      	movs	r0, #0
 800c9c0:	e7dc      	b.n	800c97c <udp_connect+0x1c>
 800c9c2:	bf00      	nop
 800c9c4:	080155e1 	.word	0x080155e1
 800c9c8:	080158be 	.word	0x080158be
 800c9cc:	08012bab 	.word	0x08012bab
 800c9d0:	080158d7 	.word	0x080158d7
 800c9d4:	20010d28 	.word	0x20010d28

0800c9d8 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c9d8:	b930      	cbnz	r0, 800c9e8 <udp_recv+0x10>
 800c9da:	4b05      	ldr	r3, [pc, #20]	; (800c9f0 <udp_recv+0x18>)
 800c9dc:	f240 428a 	movw	r2, #1162	; 0x48a
 800c9e0:	4904      	ldr	r1, [pc, #16]	; (800c9f4 <udp_recv+0x1c>)
 800c9e2:	4805      	ldr	r0, [pc, #20]	; (800c9f8 <udp_recv+0x20>)
 800c9e4:	f001 b854 	b.w	800da90 <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800c9e8:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop
 800c9f0:	080155e1 	.word	0x080155e1
 800c9f4:	0801590f 	.word	0x0801590f
 800c9f8:	08012bab 	.word	0x08012bab

0800c9fc <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c9fc:	4601      	mov	r1, r0
 800c9fe:	b930      	cbnz	r0, 800ca0e <udp_remove+0x12>
 800ca00:	4b0d      	ldr	r3, [pc, #52]	; (800ca38 <udp_remove+0x3c>)
 800ca02:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800ca06:	490d      	ldr	r1, [pc, #52]	; (800ca3c <udp_remove+0x40>)
 800ca08:	480d      	ldr	r0, [pc, #52]	; (800ca40 <udp_remove+0x44>)
 800ca0a:	f001 b841 	b.w	800da90 <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800ca0e:	4a0d      	ldr	r2, [pc, #52]	; (800ca44 <udp_remove+0x48>)
 800ca10:	6813      	ldr	r3, [r2, #0]
 800ca12:	4283      	cmp	r3, r0
 800ca14:	d105      	bne.n	800ca22 <udp_remove+0x26>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800ca16:	68c3      	ldr	r3, [r0, #12]
 800ca18:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ca1a:	2000      	movs	r0, #0
 800ca1c:	f7fb bdf6 	b.w	800860c <memp_free>
 800ca20:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d0f9      	beq.n	800ca1a <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ca26:	68da      	ldr	r2, [r3, #12]
 800ca28:	2a00      	cmp	r2, #0
 800ca2a:	d0f6      	beq.n	800ca1a <udp_remove+0x1e>
 800ca2c:	428a      	cmp	r2, r1
 800ca2e:	d1f7      	bne.n	800ca20 <udp_remove+0x24>
        pcb2->next = pcb->next;
 800ca30:	68ca      	ldr	r2, [r1, #12]
 800ca32:	60da      	str	r2, [r3, #12]
        break;
 800ca34:	e7f1      	b.n	800ca1a <udp_remove+0x1e>
 800ca36:	bf00      	nop
 800ca38:	080155e1 	.word	0x080155e1
 800ca3c:	08015925 	.word	0x08015925
 800ca40:	08012bab 	.word	0x08012bab
 800ca44:	20010d28 	.word	0x20010d28

0800ca48 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ca48:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ca4a:	2000      	movs	r0, #0
 800ca4c:	f7fb fdc2 	bl	80085d4 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800ca50:	4604      	mov	r4, r0
 800ca52:	b128      	cbz	r0, 800ca60 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800ca54:	2220      	movs	r2, #32
 800ca56:	2100      	movs	r1, #0
 800ca58:	f001 f812 	bl	800da80 <memset>
    pcb->ttl = UDP_TTL;
 800ca5c:	23ff      	movs	r3, #255	; 0xff
 800ca5e:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800ca60:	4620      	mov	r0, r4
 800ca62:	bd10      	pop	{r4, pc}

0800ca64 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ca64:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ca66:	b138      	cbz	r0, 800ca78 <udp_netif_ip_addr_changed+0x14>
 800ca68:	6803      	ldr	r3, [r0, #0]
 800ca6a:	b12b      	cbz	r3, 800ca78 <udp_netif_ip_addr_changed+0x14>
 800ca6c:	b121      	cbz	r1, 800ca78 <udp_netif_ip_addr_changed+0x14>
 800ca6e:	680b      	ldr	r3, [r1, #0]
 800ca70:	b113      	cbz	r3, 800ca78 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ca72:	4b06      	ldr	r3, [pc, #24]	; (800ca8c <udp_netif_ip_addr_changed+0x28>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	b903      	cbnz	r3, 800ca7a <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800ca78:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ca7a:	681c      	ldr	r4, [r3, #0]
 800ca7c:	6802      	ldr	r2, [r0, #0]
 800ca7e:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ca80:	bf04      	itt	eq
 800ca82:	680a      	ldreq	r2, [r1, #0]
 800ca84:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	e7f5      	b.n	800ca76 <udp_netif_ip_addr_changed+0x12>
 800ca8a:	bf00      	nop
 800ca8c:	20010d28 	.word	0x20010d28

0800ca90 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ca90:	8943      	ldrh	r3, [r0, #10]
 800ca92:	2b0e      	cmp	r3, #14
{
 800ca94:	b570      	push	{r4, r5, r6, lr}
 800ca96:	4604      	mov	r4, r0
 800ca98:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800ca9a:	d91a      	bls.n	800cad2 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ca9c:	7bc3      	ldrb	r3, [r0, #15]
 800ca9e:	b91b      	cbnz	r3, 800caa8 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800caa0:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 800caa4:	3301      	adds	r3, #1
 800caa6:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800caa8:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800caaa:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800caac:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800caae:	07d9      	lsls	r1, r3, #31
 800cab0:	d50a      	bpl.n	800cac8 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d111      	bne.n	800cada <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cab6:	7843      	ldrb	r3, [r0, #1]
 800cab8:	b933      	cbnz	r3, 800cac8 <ethernet_input+0x38>
 800caba:	7883      	ldrb	r3, [r0, #2]
 800cabc:	2b5e      	cmp	r3, #94	; 0x5e
 800cabe:	d103      	bne.n	800cac8 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800cac0:	7b63      	ldrb	r3, [r4, #13]
 800cac2:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800cac6:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800cac8:	2e08      	cmp	r6, #8
 800caca:	d010      	beq.n	800caee <ethernet_input+0x5e>
 800cacc:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800cad0:	d01d      	beq.n	800cb0e <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800cad2:	4620      	mov	r0, r4
 800cad4:	f7fb ffd0 	bl	8008a78 <pbuf_free>
  return ERR_OK;
 800cad8:	e017      	b.n	800cb0a <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800cada:	2206      	movs	r2, #6
 800cadc:	4913      	ldr	r1, [pc, #76]	; (800cb2c <ethernet_input+0x9c>)
 800cade:	f000 ffb3 	bl	800da48 <memcmp>
 800cae2:	2800      	cmp	r0, #0
 800cae4:	d1f0      	bne.n	800cac8 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800cae6:	7b63      	ldrb	r3, [r4, #13]
 800cae8:	f043 0308 	orr.w	r3, r3, #8
 800caec:	e7eb      	b.n	800cac6 <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800caee:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800caf2:	071a      	lsls	r2, r3, #28
 800caf4:	d5ed      	bpl.n	800cad2 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800caf6:	210e      	movs	r1, #14
 800caf8:	4620      	mov	r0, r4
 800cafa:	f7fb ff89 	bl	8008a10 <pbuf_remove_header>
 800cafe:	2800      	cmp	r0, #0
 800cb00:	d1e7      	bne.n	800cad2 <ethernet_input+0x42>
        ip4_input(p, netif);
 800cb02:	4629      	mov	r1, r5
 800cb04:	4620      	mov	r0, r4
 800cb06:	f7fa fcb5 	bl	8007474 <ip4_input>
}
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cb0e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800cb12:	071b      	lsls	r3, r3, #28
 800cb14:	d5dd      	bpl.n	800cad2 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800cb16:	210e      	movs	r1, #14
 800cb18:	4620      	mov	r0, r4
 800cb1a:	f7fb ff79 	bl	8008a10 <pbuf_remove_header>
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d1d7      	bne.n	800cad2 <ethernet_input+0x42>
        etharp_input(p, netif);
 800cb22:	4629      	mov	r1, r5
 800cb24:	4620      	mov	r0, r4
 800cb26:	f7fa f8ff 	bl	8006d28 <etharp_input>
      break;
 800cb2a:	e7ee      	b.n	800cb0a <ethernet_input+0x7a>
 800cb2c:	08012a7c 	.word	0x08012a7c

0800cb30 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800cb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb34:	460d      	mov	r5, r1
 800cb36:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800cb38:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800cb3c:	4616      	mov	r6, r2
 800cb3e:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800cb40:	f7fb fa28 	bl	8007f94 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800cb44:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800cb46:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800cb48:	4628      	mov	r0, r5
 800cb4a:	f7fb ff5d 	bl	8008a08 <pbuf_add_header>
 800cb4e:	b9e0      	cbnz	r0, 800cb8a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800cb50:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800cb52:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	600b      	str	r3, [r1, #0]
 800cb5a:	88bb      	ldrh	r3, [r7, #4]
 800cb5c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800cb5e:	6833      	ldr	r3, [r6, #0]
 800cb60:	f8c1 3006 	str.w	r3, [r1, #6]
 800cb64:	88b3      	ldrh	r3, [r6, #4]
 800cb66:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800cb68:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800cb6c:	2b06      	cmp	r3, #6
 800cb6e:	d006      	beq.n	800cb7e <ethernet_output+0x4e>
 800cb70:	4b08      	ldr	r3, [pc, #32]	; (800cb94 <ethernet_output+0x64>)
 800cb72:	f44f 7299 	mov.w	r2, #306	; 0x132
 800cb76:	4908      	ldr	r1, [pc, #32]	; (800cb98 <ethernet_output+0x68>)
 800cb78:	4808      	ldr	r0, [pc, #32]	; (800cb9c <ethernet_output+0x6c>)
 800cb7a:	f000 ff89 	bl	800da90 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800cb7e:	69a3      	ldr	r3, [r4, #24]
 800cb80:	4629      	mov	r1, r5
 800cb82:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800cb84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800cb88:	4718      	bx	r3
}
 800cb8a:	f06f 0001 	mvn.w	r0, #1
 800cb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb92:	bf00      	nop
 800cb94:	0801593d 	.word	0x0801593d
 800cb98:	080159dc 	.word	0x080159dc
 800cb9c:	08012bab 	.word	0x08012bab

0800cba0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800cba0:	b513      	push	{r0, r1, r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800cba2:	2304      	movs	r3, #4
{
 800cba4:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800cba6:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800cba8:	4668      	mov	r0, sp
 800cbaa:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800cbac:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800cbae:	f7f8 fb31 	bl	8005214 <osMessageCreate>
 800cbb2:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800cbb4:	fab0 f080 	clz	r0, r0
 800cbb8:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800cbba:	4240      	negs	r0, r0
 800cbbc:	b002      	add	sp, #8
 800cbbe:	bd10      	pop	{r4, pc}

0800cbc0 <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	6800      	ldr	r0, [r0, #0]
{
 800cbc4:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800cbc6:	f7f8 fb2b 	bl	8005220 <osMessagePut>
 800cbca:	3800      	subs	r0, #0
 800cbcc:	bf18      	it	ne
 800cbce:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800cbd0:	4240      	negs	r0, r0
 800cbd2:	bd08      	pop	{r3, pc}

0800cbd4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800cbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbd6:	4617      	mov	r7, r2
 800cbd8:	b085      	sub	sp, #20
 800cbda:	4606      	mov	r6, r0
 800cbdc:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800cbde:	f7f8 fa62 	bl	80050a6 <osKernelSysTick>
 800cbe2:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800cbe4:	b177      	cbz	r7, 800cc04 <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800cbe6:	463a      	mov	r2, r7
 800cbe8:	6831      	ldr	r1, [r6, #0]
 800cbea:	a801      	add	r0, sp, #4
 800cbec:	f7f8 fb40 	bl	8005270 <osMessageGet>

    if(event.status == osEventMessage)
 800cbf0:	9b01      	ldr	r3, [sp, #4]
 800cbf2:	2b10      	cmp	r3, #16
 800cbf4:	d10d      	bne.n	800cc12 <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800cbf6:	9b02      	ldr	r3, [sp, #8]
 800cbf8:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800cbfa:	f7f8 fa54 	bl	80050a6 <osKernelSysTick>
 800cbfe:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800cc00:	b005      	add	sp, #20
 800cc02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800cc04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc08:	6831      	ldr	r1, [r6, #0]
 800cc0a:	a801      	add	r0, sp, #4
 800cc0c:	f7f8 fb30 	bl	8005270 <osMessageGet>
 800cc10:	e7f1      	b.n	800cbf6 <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800cc12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc16:	e7f3      	b.n	800cc00 <sys_arch_mbox_fetch+0x2c>

0800cc18 <sys_mbox_valid>:
 800cc18:	6800      	ldr	r0, [r0, #0]
 800cc1a:	3800      	subs	r0, #0
 800cc1c:	bf18      	it	ne
 800cc1e:	2001      	movne	r0, #1
 800cc20:	4770      	bx	lr
	...

0800cc24 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800cc24:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800cc26:	4803      	ldr	r0, [pc, #12]	; (800cc34 <sys_init+0x10>)
 800cc28:	f7f8 fa69 	bl	80050fe <osMutexCreate>
 800cc2c:	4b02      	ldr	r3, [pc, #8]	; (800cc38 <sys_init+0x14>)
 800cc2e:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800cc30:	bd08      	pop	{r3, pc}
 800cc32:	bf00      	nop
 800cc34:	08012a88 	.word	0x08012a88
 800cc38:	20010d30 	.word	0x20010d30

0800cc3c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800cc3c:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800cc3e:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800cc40:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 800cc42:	a801      	add	r0, sp, #4
  osMutexDef(MUTEX);
 800cc44:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800cc46:	f7f8 fa5a 	bl	80050fe <osMutexCreate>
 800cc4a:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800cc4c:	fab0 f080 	clz	r0, r0
 800cc50:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800cc52:	4240      	negs	r0, r0
 800cc54:	b002      	add	sp, #8
 800cc56:	bd10      	pop	{r4, pc}

0800cc58 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800cc58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cc5c:	6800      	ldr	r0, [r0, #0]
 800cc5e:	f7f8 ba51 	b.w	8005104 <osMutexWait>

0800cc62 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800cc62:	6800      	ldr	r0, [r0, #0]
 800cc64:	f7f8 ba74 	b.w	8005150 <osMutexRelease>

0800cc68 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800cc68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800cc6a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800cc6e:	9908      	ldr	r1, [sp, #32]
  return osThreadCreate(&os_thread_def, arg);
 800cc70:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800cc72:	f8ad 100c 	strh.w	r1, [sp, #12]
 800cc76:	2100      	movs	r1, #0
 800cc78:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800cc7c:	4611      	mov	r1, r2
 800cc7e:	f7f8 fa19 	bl	80050b4 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800cc82:	b007      	add	sp, #28
 800cc84:	f85d fb04 	ldr.w	pc, [sp], #4

0800cc88 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800cc88:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800cc8a:	4b04      	ldr	r3, [pc, #16]	; (800cc9c <sys_arch_protect+0x14>)
 800cc8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cc90:	6818      	ldr	r0, [r3, #0]
 800cc92:	f7f8 fa37 	bl	8005104 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800cc96:	2001      	movs	r0, #1
 800cc98:	bd08      	pop	{r3, pc}
 800cc9a:	bf00      	nop
 800cc9c:	20010d30 	.word	0x20010d30

0800cca0 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800cca0:	4b01      	ldr	r3, [pc, #4]	; (800cca8 <sys_arch_unprotect+0x8>)
 800cca2:	6818      	ldr	r0, [r3, #0]
 800cca4:	f7f8 ba54 	b.w	8005150 <osMutexRelease>
 800cca8:	20010d30 	.word	0x20010d30

0800ccac <mqtt_ringbuf_put>:

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
  rb->buf[rb->put] = item;
 800ccac:	8803      	ldrh	r3, [r0, #0]
 800ccae:	18c2      	adds	r2, r0, r3
  rb->put++;
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	b29b      	uxth	r3, r3
  rb->buf[rb->put] = item;
 800ccb4:	7111      	strb	r1, [r2, #4]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800ccb6:	2bff      	cmp	r3, #255	; 0xff
    rb->put = 0;
 800ccb8:	bf88      	it	hi
 800ccba:	2300      	movhi	r3, #0
 800ccbc:	8003      	strh	r3, [r0, #0]
  }
}
 800ccbe:	4770      	bx	lr

0800ccc0 <mqtt_output_append_u16>:
  mqtt_ringbuf_put(rb, value);
}

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	460c      	mov	r4, r1
  mqtt_ringbuf_put(rb, value >> 8);
 800ccc4:	0a09      	lsrs	r1, r1, #8
 800ccc6:	f7ff fff1 	bl	800ccac <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 800ccca:	b2e1      	uxtb	r1, r4
}
 800cccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  mqtt_ringbuf_put(rb, value & 0xff);
 800ccd0:	f7ff bfec 	b.w	800ccac <mqtt_ringbuf_put>

0800ccd4 <mqtt_output_append_string>:
  }
}

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 800ccd4:	b570      	push	{r4, r5, r6, lr}
 800ccd6:	4615      	mov	r5, r2
 800ccd8:	460c      	mov	r4, r1
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 800ccda:	0a11      	lsrs	r1, r2, #8
{
 800ccdc:	4606      	mov	r6, r0
  mqtt_ringbuf_put(rb, length >> 8);
 800ccde:	f7ff ffe5 	bl	800ccac <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 800cce2:	b2e9      	uxtb	r1, r5
 800cce4:	4425      	add	r5, r4
 800cce6:	f7ff ffe1 	bl	800ccac <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800ccea:	42ac      	cmp	r4, r5
 800ccec:	d100      	bne.n	800ccf0 <mqtt_output_append_string+0x1c>
    mqtt_ringbuf_put(rb, str[n]);
  }
}
 800ccee:	bd70      	pop	{r4, r5, r6, pc}
    mqtt_ringbuf_put(rb, str[n]);
 800ccf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	f7ff ffd9 	bl	800ccac <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800ccfa:	e7f6      	b.n	800ccea <mqtt_output_append_string+0x16>

0800ccfc <mqtt_append_request>:
  s16_t time_before = 0;
 800ccfc:	2200      	movs	r2, #0
{
 800ccfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd00:	4606      	mov	r6, r0
 800cd02:	460d      	mov	r5, r1
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800cd04:	6803      	ldr	r3, [r0, #0]
  struct mqtt_request_t *head = NULL;
 800cd06:	4617      	mov	r7, r2
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800cd08:	b294      	uxth	r4, r2
 800cd0a:	b973      	cbnz	r3, 800cd2a <mqtt_append_request+0x2e>
  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 800cd0c:	2a1e      	cmp	r2, #30
 800cd0e:	dd06      	ble.n	800cd1e <mqtt_append_request+0x22>
 800cd10:	4b0a      	ldr	r3, [pc, #40]	; (800cd3c <mqtt_append_request+0x40>)
 800cd12:	f240 1247 	movw	r2, #327	; 0x147
 800cd16:	490a      	ldr	r1, [pc, #40]	; (800cd40 <mqtt_append_request+0x44>)
 800cd18:	480a      	ldr	r0, [pc, #40]	; (800cd44 <mqtt_append_request+0x48>)
 800cd1a:	f000 feb9 	bl	800da90 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 800cd1e:	f1c4 041e 	rsb	r4, r4, #30
 800cd22:	81ec      	strh	r4, [r5, #14]
  if (head == NULL) {
 800cd24:	b93f      	cbnz	r7, 800cd36 <mqtt_append_request+0x3a>
    *tail = r;
 800cd26:	6035      	str	r5, [r6, #0]
}
 800cd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    time_before += iter->timeout_diff;
 800cd2a:	89da      	ldrh	r2, [r3, #14]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800cd2c:	461f      	mov	r7, r3
 800cd2e:	681b      	ldr	r3, [r3, #0]
    time_before += iter->timeout_diff;
 800cd30:	4414      	add	r4, r2
 800cd32:	b222      	sxth	r2, r4
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800cd34:	e7e8      	b.n	800cd08 <mqtt_append_request+0xc>
    head->next = r;
 800cd36:	603d      	str	r5, [r7, #0]
}
 800cd38:	e7f6      	b.n	800cd28 <mqtt_append_request+0x2c>
 800cd3a:	bf00      	nop
 800cd3c:	08015a0d 	.word	0x08015a0d
 800cd40:	08015a32 	.word	0x08015a32
 800cd44:	08012bab 	.word	0x08012bab

0800cd48 <mqtt_take_request>:
{
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	460d      	mov	r5, r1
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 800cd4c:	4604      	mov	r4, r0
 800cd4e:	b930      	cbnz	r0, 800cd5e <mqtt_take_request+0x16>
 800cd50:	4b0f      	ldr	r3, [pc, #60]	; (800cd90 <mqtt_take_request+0x48>)
 800cd52:	f240 1267 	movw	r2, #359	; 0x167
 800cd56:	490f      	ldr	r1, [pc, #60]	; (800cd94 <mqtt_take_request+0x4c>)
 800cd58:	480f      	ldr	r0, [pc, #60]	; (800cd98 <mqtt_take_request+0x50>)
 800cd5a:	f000 fe99 	bl	800da90 <iprintf>
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800cd5e:	6820      	ldr	r0, [r4, #0]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 800cd60:	2200      	movs	r2, #0
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800cd62:	b900      	cbnz	r0, 800cd66 <mqtt_take_request+0x1e>
}
 800cd64:	bd38      	pop	{r3, r4, r5, pc}
    if (iter->pkt_id == pkt_id) {
 800cd66:	8981      	ldrh	r1, [r0, #12]
 800cd68:	6803      	ldr	r3, [r0, #0]
 800cd6a:	42a9      	cmp	r1, r5
 800cd6c:	d004      	beq.n	800cd78 <mqtt_take_request+0x30>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	4618      	mov	r0, r3
 800cd72:	e7f6      	b.n	800cd62 <mqtt_take_request+0x1a>
      prev->next = iter->next;
 800cd74:	6013      	str	r3, [r2, #0]
 800cd76:	e002      	b.n	800cd7e <mqtt_take_request+0x36>
    if (prev == NULL) {
 800cd78:	2a00      	cmp	r2, #0
 800cd7a:	d1fb      	bne.n	800cd74 <mqtt_take_request+0x2c>
      *tail = iter->next;
 800cd7c:	6023      	str	r3, [r4, #0]
    if (iter->next != NULL) {
 800cd7e:	6803      	ldr	r3, [r0, #0]
 800cd80:	b11b      	cbz	r3, 800cd8a <mqtt_take_request+0x42>
      iter->next->timeout_diff += iter->timeout_diff;
 800cd82:	89da      	ldrh	r2, [r3, #14]
 800cd84:	89c1      	ldrh	r1, [r0, #14]
 800cd86:	440a      	add	r2, r1
 800cd88:	81da      	strh	r2, [r3, #14]
    iter->next = NULL;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	6003      	str	r3, [r0, #0]
  return iter;
 800cd8e:	e7e9      	b.n	800cd64 <mqtt_take_request+0x1c>
 800cd90:	08015a0d 	.word	0x08015a0d
 800cd94:	08015a67 	.word	0x08015a67
 800cd98:	08012bab 	.word	0x08012bab

0800cd9c <mqtt_ringbuf_advance_get_idx.isra.0>:
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 800cd9c:	29ff      	cmp	r1, #255	; 0xff
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
 800cd9e:	b538      	push	{r3, r4, r5, lr}
 800cda0:	4605      	mov	r5, r0
 800cda2:	460c      	mov	r4, r1
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 800cda4:	d905      	bls.n	800cdb2 <mqtt_ringbuf_advance_get_idx.isra.0+0x16>
 800cda6:	4b07      	ldr	r3, [pc, #28]	; (800cdc4 <mqtt_ringbuf_advance_get_idx.isra.0+0x28>)
 800cda8:	22cb      	movs	r2, #203	; 0xcb
 800cdaa:	4907      	ldr	r1, [pc, #28]	; (800cdc8 <mqtt_ringbuf_advance_get_idx.isra.0+0x2c>)
 800cdac:	4807      	ldr	r0, [pc, #28]	; (800cdcc <mqtt_ringbuf_advance_get_idx.isra.0+0x30>)
 800cdae:	f000 fe6f 	bl	800da90 <iprintf>
  rb->get += len;
 800cdb2:	8829      	ldrh	r1, [r5, #0]
 800cdb4:	4421      	add	r1, r4
 800cdb6:	b289      	uxth	r1, r1
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800cdb8:	29ff      	cmp	r1, #255	; 0xff
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 800cdba:	bf88      	it	hi
 800cdbc:	f5a1 7180 	subhi.w	r1, r1, #256	; 0x100
 800cdc0:	8029      	strh	r1, [r5, #0]
}
 800cdc2:	bd38      	pop	{r3, r4, r5, pc}
 800cdc4:	08015a0d 	.word	0x08015a0d
 800cdc8:	08015a87 	.word	0x08015a87
 800cdcc:	08012bab 	.word	0x08012bab

0800cdd0 <mqtt_output_append_fixed_header.constprop.0>:
static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 800cdd0:	0052      	lsls	r2, r2, #1
 800cdd2:	f002 0206 	and.w	r2, r2, #6
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
 800cdd6:	b538      	push	{r3, r4, r5, lr}
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 800cdd8:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 800cddc:	f003 0301 	and.w	r3, r3, #1
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
 800cde0:	4605      	mov	r5, r0
 800cde2:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 800cde6:	4319      	orrs	r1, r3
  mqtt_ringbuf_put(rb, value);
 800cde8:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 800cdec:	f7ff ff5e 	bl	800ccac <mqtt_ringbuf_put>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 800cdf0:	2c7f      	cmp	r4, #127	; 0x7f
 800cdf2:	f004 017f 	and.w	r1, r4, #127	; 0x7f
  mqtt_ringbuf_put(rb, value);
 800cdf6:	4628      	mov	r0, r5
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 800cdf8:	bf8c      	ite	hi
 800cdfa:	f06f 037f 	mvnhi.w	r3, #127	; 0x7f
 800cdfe:	2300      	movls	r3, #0
 800ce00:	4319      	orrs	r1, r3
  mqtt_ringbuf_put(rb, value);
 800ce02:	b2c9      	uxtb	r1, r1
 800ce04:	f7ff ff52 	bl	800ccac <mqtt_ringbuf_put>
    r_length >>= 7;
  } while (r_length > 0);
 800ce08:	09e4      	lsrs	r4, r4, #7
 800ce0a:	d1f1      	bne.n	800cdf0 <mqtt_output_append_fixed_header.constprop.0+0x20>
}
 800ce0c:	bd38      	pop	{r3, r4, r5, pc}

0800ce0e <mqtt_create_request.constprop.0>:
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
 800ce0e:	b530      	push	{r4, r5, lr}
 800ce10:	f100 0540 	add.w	r5, r0, #64	; 0x40
  for (n = 0; n < r_objs_len; n++) {
 800ce14:	4285      	cmp	r5, r0
 800ce16:	d101      	bne.n	800ce1c <mqtt_create_request.constprop.0+0xe>
  struct mqtt_request_t *r = NULL;
 800ce18:	2400      	movs	r4, #0
  return r;
 800ce1a:	e007      	b.n	800ce2c <mqtt_create_request.constprop.0+0x1e>
    if (r_objs[n].next == &r_objs[n]) {
 800ce1c:	6804      	ldr	r4, [r0, #0]
 800ce1e:	42a0      	cmp	r0, r4
 800ce20:	d106      	bne.n	800ce30 <mqtt_create_request.constprop.0+0x22>
      r->next = NULL;
 800ce22:	2000      	movs	r0, #0
      r->arg = arg;
 800ce24:	60a3      	str	r3, [r4, #8]
      r->pkt_id = pkt_id;
 800ce26:	81a1      	strh	r1, [r4, #12]
      r->cb = cb;
 800ce28:	e9c4 0200 	strd	r0, r2, [r4]
}
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	bd30      	pop	{r4, r5, pc}
  for (n = 0; n < r_objs_len; n++) {
 800ce30:	3010      	adds	r0, #16
 800ce32:	e7ef      	b.n	800ce14 <mqtt_create_request.constprop.0+0x6>

0800ce34 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 800ce34:	b570      	push	{r4, r5, r6, lr}
 800ce36:	460e      	mov	r6, r1
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 800ce38:	4604      	mov	r4, r0
 800ce3a:	b930      	cbnz	r0, 800ce4a <mqtt_close+0x16>
 800ce3c:	4b19      	ldr	r3, [pc, #100]	; (800cea4 <mqtt_close+0x70>)
 800ce3e:	f240 221b 	movw	r2, #539	; 0x21b
 800ce42:	4919      	ldr	r1, [pc, #100]	; (800cea8 <mqtt_close+0x74>)
 800ce44:	4819      	ldr	r0, [pc, #100]	; (800ceac <mqtt_close+0x78>)
 800ce46:	f000 fe23 	bl	800da90 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 800ce4a:	68e0      	ldr	r0, [r4, #12]
 800ce4c:	b198      	cbz	r0, 800ce76 <mqtt_close+0x42>
    err_t res;
    altcp_recv(client->conn, NULL);
 800ce4e:	2100      	movs	r1, #0
 800ce50:	f7fc fa16 	bl	8009280 <tcp_recv>
    altcp_err(client->conn,  NULL);
 800ce54:	2100      	movs	r1, #0
 800ce56:	68e0      	ldr	r0, [r4, #12]
 800ce58:	f7fc fa40 	bl	80092dc <tcp_err>
    altcp_sent(client->conn, NULL);
 800ce5c:	68e0      	ldr	r0, [r4, #12]
 800ce5e:	2100      	movs	r1, #0
 800ce60:	f7fc fa26 	bl	80092b0 <tcp_sent>
    res = altcp_close(client->conn);
 800ce64:	68e0      	ldr	r0, [r4, #12]
 800ce66:	f7fc fdbb 	bl	80099e0 <tcp_close>
    if (res != ERR_OK) {
 800ce6a:	b110      	cbz	r0, 800ce72 <mqtt_close+0x3e>
      altcp_abort(client->conn);
 800ce6c:	68e0      	ldr	r0, [r4, #12]
 800ce6e:	f7fc ff0f 	bl	8009c90 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 800ce72:	2300      	movs	r3, #0
 800ce74:	60e3      	str	r3, [r4, #12]
  for (iter = *tail; iter != NULL; iter = next) {
 800ce76:	69a5      	ldr	r5, [r4, #24]
 800ce78:	b97d      	cbnz	r5, 800ce9a <mqtt_close+0x66>
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 800ce7a:	4621      	mov	r1, r4
 800ce7c:	480c      	ldr	r0, [pc, #48]	; (800ceb0 <mqtt_close+0x7c>)
  *tail = NULL;
 800ce7e:	61a5      	str	r5, [r4, #24]
  sys_untimeout(mqtt_cyclic_timer, client);
 800ce80:	f7ff fafe 	bl	800c480 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 800ce84:	7aa3      	ldrb	r3, [r4, #10]
 800ce86:	b163      	cbz	r3, 800cea2 <mqtt_close+0x6e>

    client->conn_state = TCP_DISCONNECTED;
    if (client->connect_cb != NULL) {
 800ce88:	6963      	ldr	r3, [r4, #20]
    client->conn_state = TCP_DISCONNECTED;
 800ce8a:	72a5      	strb	r5, [r4, #10]
    if (client->connect_cb != NULL) {
 800ce8c:	b14b      	cbz	r3, 800cea2 <mqtt_close+0x6e>
      client->connect_cb(client, client->connect_arg, reason);
 800ce8e:	4632      	mov	r2, r6
 800ce90:	6921      	ldr	r1, [r4, #16]
 800ce92:	4620      	mov	r0, r4
    }
  }
}
 800ce94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      client->connect_cb(client, client->connect_arg, reason);
 800ce98:	4718      	bx	r3
    next = iter->next;
 800ce9a:	682b      	ldr	r3, [r5, #0]
    r->next = r;
 800ce9c:	602d      	str	r5, [r5, #0]
  for (iter = *tail; iter != NULL; iter = next) {
 800ce9e:	461d      	mov	r5, r3
}
 800cea0:	e7ea      	b.n	800ce78 <mqtt_close+0x44>
}
 800cea2:	bd70      	pop	{r4, r5, r6, pc}
 800cea4:	08015a0d 	.word	0x08015a0d
 800cea8:	08015ac4 	.word	0x08015ac4
 800ceac:	08012bab 	.word	0x08012bab
 800ceb0:	0800cf15 	.word	0x0800cf15

0800ceb4 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 800ceb4:	b510      	push	{r4, lr}
  mqtt_client_t *client = (mqtt_client_t *)arg;
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 800ceb6:	4604      	mov	r4, r0
 800ceb8:	b930      	cbnz	r0, 800cec8 <mqtt_tcp_err_cb+0x14>
 800ceba:	4b08      	ldr	r3, [pc, #32]	; (800cedc <mqtt_tcp_err_cb+0x28>)
 800cebc:	f240 32f6 	movw	r2, #1014	; 0x3f6
 800cec0:	4907      	ldr	r1, [pc, #28]	; (800cee0 <mqtt_tcp_err_cb+0x2c>)
 800cec2:	4808      	ldr	r0, [pc, #32]	; (800cee4 <mqtt_tcp_err_cb+0x30>)
 800cec4:	f000 fde4 	bl	800da90 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 800cec8:	2300      	movs	r3, #0
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800ceca:	4620      	mov	r0, r4
 800cecc:	f44f 7180 	mov.w	r1, #256	; 0x100
  client->conn = 0;
 800ced0:	60e3      	str	r3, [r4, #12]
}
 800ced2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800ced6:	f7ff bfad 	b.w	800ce34 <mqtt_close>
 800ceda:	bf00      	nop
 800cedc:	08015a0d 	.word	0x08015a0d
 800cee0:	08015adf 	.word	0x08015adf
 800cee4:	08012bab 	.word	0x08012bab

0800cee8 <mqtt_output_check_space>:
  u16_t total_len = 1 + r_length;
 800cee8:	1c4a      	adds	r2, r1, #1
 800ceea:	b292      	uxth	r2, r2
    total_len++;
 800ceec:	3201      	adds	r2, #1
  } while (r_length > 0);
 800ceee:	09c9      	lsrs	r1, r1, #7
    total_len++;
 800cef0:	b292      	uxth	r2, r2
  } while (r_length > 0);
 800cef2:	d1fb      	bne.n	800ceec <mqtt_output_check_space+0x4>
  u32_t len = rb->put - rb->get;
 800cef4:	8803      	ldrh	r3, [r0, #0]
 800cef6:	8840      	ldrh	r0, [r0, #2]
 800cef8:	1a1b      	subs	r3, r3, r0
  if (len > 0xFFFF) {
 800cefa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 800cefe:	bf28      	it	cs
 800cf00:	f503 7380 	addcs.w	r3, r3, #256	; 0x100
  return (total_len <= mqtt_ringbuf_free(rb));
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
}
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	bfcc      	ite	gt
 800cf0e:	2000      	movgt	r0, #0
 800cf10:	2001      	movle	r0, #1
 800cf12:	4770      	bx	lr

0800cf14 <mqtt_cyclic_timer>:
{
 800cf14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 800cf16:	4604      	mov	r4, r0
 800cf18:	b930      	cbnz	r0, 800cf28 <mqtt_cyclic_timer+0x14>
 800cf1a:	4b37      	ldr	r3, [pc, #220]	; (800cff8 <mqtt_cyclic_timer+0xe4>)
 800cf1c:	f44f 7211 	mov.w	r2, #580	; 0x244
 800cf20:	4936      	ldr	r1, [pc, #216]	; (800cffc <mqtt_cyclic_timer+0xe8>)
 800cf22:	4837      	ldr	r0, [pc, #220]	; (800d000 <mqtt_cyclic_timer+0xec>)
 800cf24:	f000 fdb4 	bl	800da90 <iprintf>
  if (client->conn_state == MQTT_CONNECTING) {
 800cf28:	7aa3      	ldrb	r3, [r4, #10]
 800cf2a:	2b02      	cmp	r3, #2
 800cf2c:	d118      	bne.n	800cf60 <mqtt_cyclic_timer+0x4c>
    client->cyclic_tick++;
 800cf2e:	8823      	ldrh	r3, [r4, #0]
 800cf30:	3301      	adds	r3, #1
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	8023      	strh	r3, [r4, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 800cf36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cf3a:	2b63      	cmp	r3, #99	; 0x63
 800cf3c:	dc08      	bgt.n	800cf50 <mqtt_cyclic_timer+0x3c>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 800cf3e:	4622      	mov	r2, r4
 800cf40:	4930      	ldr	r1, [pc, #192]	; (800d004 <mqtt_cyclic_timer+0xf0>)
 800cf42:	f241 3088 	movw	r0, #5000	; 0x1388
}
 800cf46:	b003      	add	sp, #12
 800cf48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 800cf4c:	f7ff ba20 	b.w	800c390 <sys_timeout>
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800cf50:	f240 1101 	movw	r1, #257	; 0x101
 800cf54:	4620      	mov	r0, r4
}
 800cf56:	b003      	add	sp, #12
 800cf58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800cf5c:	f7ff bf6a 	b.w	800ce34 <mqtt_close>
  } else if (client->conn_state == MQTT_CONNECTED) {
 800cf60:	2b03      	cmp	r3, #3
 800cf62:	d13f      	bne.n	800cfe4 <mqtt_cyclic_timer+0xd0>
  r = *tail;
 800cf64:	69a5      	ldr	r5, [r4, #24]
 800cf66:	2605      	movs	r6, #5
  while (t > 0 && r != NULL) {
 800cf68:	b18d      	cbz	r5, 800cf8e <mqtt_cyclic_timer+0x7a>
    if (t >= r->timeout_diff) {
 800cf6a:	89eb      	ldrh	r3, [r5, #14]
 800cf6c:	b2b2      	uxth	r2, r6
 800cf6e:	429e      	cmp	r6, r3
 800cf70:	d33a      	bcc.n	800cfe8 <mqtt_cyclic_timer+0xd4>
      t -= (u8_t)r->timeout_diff;
 800cf72:	1af6      	subs	r6, r6, r3
      *tail = r->next;
 800cf74:	682b      	ldr	r3, [r5, #0]
 800cf76:	61a3      	str	r3, [r4, #24]
      t -= (u8_t)r->timeout_diff;
 800cf78:	b2f6      	uxtb	r6, r6
      if (r->cb != NULL) {
 800cf7a:	686b      	ldr	r3, [r5, #4]
 800cf7c:	b11b      	cbz	r3, 800cf86 <mqtt_cyclic_timer+0x72>
        r->cb(r->arg, ERR_TIMEOUT);
 800cf7e:	f06f 0102 	mvn.w	r1, #2
 800cf82:	68a8      	ldr	r0, [r5, #8]
 800cf84:	4798      	blx	r3
    r->next = r;
 800cf86:	602d      	str	r5, [r5, #0]
      r = *(struct mqtt_request_t *const volatile *)tail;
 800cf88:	69a5      	ldr	r5, [r4, #24]
  while (t > 0 && r != NULL) {
 800cf8a:	2e00      	cmp	r6, #0
 800cf8c:	d1ec      	bne.n	800cf68 <mqtt_cyclic_timer+0x54>
    if (client->keep_alive > 0) {
 800cf8e:	8862      	ldrh	r2, [r4, #2]
 800cf90:	2a00      	cmp	r2, #0
 800cf92:	d0d4      	beq.n	800cf3e <mqtt_cyclic_timer+0x2a>
      client->server_watchdog++;
 800cf94:	88a3      	ldrh	r3, [r4, #4]
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 800cf96:	eb02 0252 	add.w	r2, r2, r2, lsr #1
      client->server_watchdog++;
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	80a3      	strh	r3, [r4, #4]
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 800cfa0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	dd22      	ble.n	800cfee <mqtt_cyclic_timer+0xda>
        restart_timer = 0;
 800cfa8:	2600      	movs	r6, #0
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800cfaa:	f240 1101 	movw	r1, #257	; 0x101
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f7ff ff40 	bl	800ce34 <mqtt_close>
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 800cfb4:	8823      	ldrh	r3, [r4, #0]
 800cfb6:	8862      	ldrh	r2, [r4, #2]
 800cfb8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800cfbc:	4291      	cmp	r1, r2
 800cfbe:	db18      	blt.n	800cff2 <mqtt_cyclic_timer+0xde>
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 800cfc0:	f104 07ec 	add.w	r7, r4, #236	; 0xec
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	4638      	mov	r0, r7
 800cfc8:	f7ff ff8e 	bl	800cee8 <mqtt_output_check_space>
 800cfcc:	b140      	cbz	r0, 800cfe0 <mqtt_cyclic_timer+0xcc>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 800cfce:	2500      	movs	r5, #0
 800cfd0:	210c      	movs	r1, #12
 800cfd2:	4638      	mov	r0, r7
 800cfd4:	462b      	mov	r3, r5
 800cfd6:	462a      	mov	r2, r5
 800cfd8:	9500      	str	r5, [sp, #0]
 800cfda:	f7ff fef9 	bl	800cdd0 <mqtt_output_append_fixed_header.constprop.0>
          client->cyclic_tick = 0;
 800cfde:	8025      	strh	r5, [r4, #0]
  if (restart_timer) {
 800cfe0:	2e00      	cmp	r6, #0
 800cfe2:	d1ac      	bne.n	800cf3e <mqtt_cyclic_timer+0x2a>
}
 800cfe4:	b003      	add	sp, #12
 800cfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      r->timeout_diff -= t;
 800cfe8:	1a9e      	subs	r6, r3, r2
 800cfea:	81ee      	strh	r6, [r5, #14]
  while (t > 0 && r != NULL) {
 800cfec:	e7cf      	b.n	800cf8e <mqtt_cyclic_timer+0x7a>
  u8_t restart_timer = 1;
 800cfee:	2601      	movs	r6, #1
 800cff0:	e7e0      	b.n	800cfb4 <mqtt_cyclic_timer+0xa0>
        client->cyclic_tick++;
 800cff2:	3301      	adds	r3, #1
 800cff4:	8023      	strh	r3, [r4, #0]
 800cff6:	e7f3      	b.n	800cfe0 <mqtt_cyclic_timer+0xcc>
 800cff8:	08015a0d 	.word	0x08015a0d
 800cffc:	08015aff 	.word	0x08015aff
 800d000:	08012bab 	.word	0x08012bab
 800d004:	0800cf15 	.word	0x0800cf15

0800d008 <mqtt_output_send>:
{
 800d008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t len = rb->put - rb->get;
 800d00c:	8803      	ldrh	r3, [r0, #0]
{
 800d00e:	460e      	mov	r6, r1
  u32_t len = rb->put - rb->get;
 800d010:	8841      	ldrh	r1, [r0, #2]
{
 800d012:	4605      	mov	r5, r0
  u32_t len = rb->put - rb->get;
 800d014:	1a5b      	subs	r3, r3, r1
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800d016:	f5c1 7480 	rsb	r4, r1, #256	; 0x100
  if (len > 0xFFFF) {
 800d01a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 800d01e:	bf28      	it	cs
 800d020:	f503 7380 	addcs.w	r3, r3, #256	; 0x100
  return (u16_t)len;
 800d024:	b298      	uxth	r0, r3
  u16_t send_len = altcp_sndbuf(tpcb);
 800d026:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800d02a:	42a0      	cmp	r0, r4
 800d02c:	bfac      	ite	ge
 800d02e:	b2a4      	uxthge	r4, r4
 800d030:	4604      	movlt	r4, r0
  if (send_len == 0 || ringbuf_lin_len == 0) {
 800d032:	2b00      	cmp	r3, #0
 800d034:	d047      	beq.n	800d0c6 <mqtt_output_send+0xbe>
 800d036:	2c00      	cmp	r4, #0
 800d038:	d045      	beq.n	800d0c6 <mqtt_output_send+0xbe>
  if (send_len > ringbuf_lin_len) {
 800d03a:	3104      	adds	r1, #4
 800d03c:	429c      	cmp	r4, r3
 800d03e:	4429      	add	r1, r5
 800d040:	d23c      	bcs.n	800d0bc <mqtt_output_send+0xb4>
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 800d042:	4284      	cmp	r4, r0
 800d044:	bf2b      	itete	cs
 800d046:	f04f 0800 	movcs.w	r8, #0
 800d04a:	f04f 0801 	movcc.w	r8, #1
 800d04e:	2301      	movcs	r3, #1
 800d050:	2303      	movcc	r3, #3
 800d052:	4622      	mov	r2, r4
 800d054:	4630      	mov	r0, r6
 800d056:	f7fe f983 	bl	800b360 <tcp_write>
  if ((err == ERR_OK) && wrap) {
 800d05a:	bba0      	cbnz	r0, 800d0c6 <mqtt_output_send+0xbe>
 800d05c:	1caf      	adds	r7, r5, #2
 800d05e:	f1b8 0f00 	cmp.w	r8, #0
 800d062:	d022      	beq.n	800d0aa <mqtt_output_send+0xa2>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800d064:	4621      	mov	r1, r4
 800d066:	4638      	mov	r0, r7
 800d068:	f7ff fe98 	bl	800cd9c <mqtt_ringbuf_advance_get_idx.isra.0>
  u32_t len = rb->put - rb->get;
 800d06c:	8869      	ldrh	r1, [r5, #2]
 800d06e:	882b      	ldrh	r3, [r5, #0]
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 800d070:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 800d074:	f8b6 4064 	ldrh.w	r4, [r6, #100]	; 0x64
  u32_t len = rb->put - rb->get;
 800d078:	1a5b      	subs	r3, r3, r1
  if (len > 0xFFFF) {
 800d07a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 800d07e:	bf28      	it	cs
 800d080:	f503 7380 	addcs.w	r3, r3, #256	; 0x100
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 800d084:	b298      	uxth	r0, r3
 800d086:	4290      	cmp	r0, r2
 800d088:	4684      	mov	ip, r0
 800d08a:	bfa8      	it	ge
 800d08c:	4694      	movge	ip, r2
 800d08e:	4564      	cmp	r4, ip
 800d090:	db03      	blt.n	800d09a <mqtt_output_send+0x92>
 800d092:	4290      	cmp	r0, r2
  return (u16_t)len;
 800d094:	bfb4      	ite	lt
 800d096:	4604      	movlt	r4, r0
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 800d098:	b294      	uxthge	r4, r2
  return &rb->buf[rb->get];
 800d09a:	3104      	adds	r1, #4
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 800d09c:	2301      	movs	r3, #1
 800d09e:	4622      	mov	r2, r4
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	4429      	add	r1, r5
 800d0a4:	f7fe f95c 	bl	800b360 <tcp_write>
  if (err == ERR_OK) {
 800d0a8:	b968      	cbnz	r0, 800d0c6 <mqtt_output_send+0xbe>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800d0aa:	4638      	mov	r0, r7
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	f7ff fe75 	bl	800cd9c <mqtt_ringbuf_advance_get_idx.isra.0>
    altcp_output(tpcb);
 800d0b2:	4630      	mov	r0, r6
}
 800d0b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    altcp_output(tpcb);
 800d0b8:	f7fe beb2 	b.w	800be20 <tcp_output>
 800d0bc:	461c      	mov	r4, r3
 800d0be:	f04f 0800 	mov.w	r8, #0
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	e7c5      	b.n	800d052 <mqtt_output_send+0x4a>
}
 800d0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d0ca <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 800d0ca:	b508      	push	{r3, lr}
  mqtt_client_t *client = (mqtt_client_t *)arg;
  if (client->conn_state == MQTT_CONNECTED) {
 800d0cc:	7a83      	ldrb	r3, [r0, #10]
 800d0ce:	2b03      	cmp	r3, #3
 800d0d0:	d102      	bne.n	800d0d8 <mqtt_tcp_poll_cb+0xe>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 800d0d2:	30ec      	adds	r0, #236	; 0xec
 800d0d4:	f7ff ff98 	bl	800d008 <mqtt_output_send>
  }
  return ERR_OK;
}
 800d0d8:	2000      	movs	r0, #0
 800d0da:	bd08      	pop	{r3, pc}

0800d0dc <mqtt_tcp_sent_cb>:
{
 800d0dc:	b570      	push	{r4, r5, r6, lr}
  if (client->conn_state == MQTT_CONNECTED) {
 800d0de:	7a83      	ldrb	r3, [r0, #10]
{
 800d0e0:	4604      	mov	r4, r0
  if (client->conn_state == MQTT_CONNECTED) {
 800d0e2:	2b03      	cmp	r3, #3
 800d0e4:	d10f      	bne.n	800d106 <mqtt_tcp_sent_cb+0x2a>
    client->cyclic_tick = 0;
 800d0e6:	2300      	movs	r3, #0
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800d0e8:	f100 0618 	add.w	r6, r0, #24
    client->cyclic_tick = 0;
 800d0ec:	8003      	strh	r3, [r0, #0]
    client->server_watchdog = 0;
 800d0ee:	8083      	strh	r3, [r0, #4]
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	f7ff fe28 	bl	800cd48 <mqtt_take_request>
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	b930      	cbnz	r0, 800d10a <mqtt_tcp_sent_cb+0x2e>
    mqtt_output_send(&client->output, client->conn);
 800d0fc:	68e1      	ldr	r1, [r4, #12]
 800d0fe:	f104 00ec 	add.w	r0, r4, #236	; 0xec
 800d102:	f7ff ff81 	bl	800d008 <mqtt_output_send>
}
 800d106:	2000      	movs	r0, #0
 800d108:	bd70      	pop	{r4, r5, r6, pc}
      if (r->cb != NULL) {
 800d10a:	686b      	ldr	r3, [r5, #4]
 800d10c:	b113      	cbz	r3, 800d114 <mqtt_tcp_sent_cb+0x38>
        r->cb(r->arg, ERR_OK);
 800d10e:	2100      	movs	r1, #0
 800d110:	68a8      	ldr	r0, [r5, #8]
 800d112:	4798      	blx	r3
    r->next = r;
 800d114:	602d      	str	r5, [r5, #0]
}
 800d116:	e7eb      	b.n	800d0f0 <mqtt_tcp_sent_cb+0x14>

0800d118 <pub_ack_rec_rel_response>:
{
 800d118:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (mqtt_output_check_space(&client->output, 2)) {
 800d11a:	f100 04ec 	add.w	r4, r0, #236	; 0xec
{
 800d11e:	b085      	sub	sp, #20
 800d120:	4605      	mov	r5, r0
 800d122:	460f      	mov	r7, r1
  if (mqtt_output_check_space(&client->output, 2)) {
 800d124:	4620      	mov	r0, r4
 800d126:	2102      	movs	r1, #2
{
 800d128:	4616      	mov	r6, r2
 800d12a:	9303      	str	r3, [sp, #12]
  if (mqtt_output_check_space(&client->output, 2)) {
 800d12c:	f7ff fedc 	bl	800cee8 <mqtt_output_check_space>
 800d130:	b188      	cbz	r0, 800d156 <pub_ack_rec_rel_response+0x3e>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 800d132:	2302      	movs	r3, #2
 800d134:	9a03      	ldr	r2, [sp, #12]
 800d136:	4639      	mov	r1, r7
 800d138:	4620      	mov	r0, r4
 800d13a:	9300      	str	r3, [sp, #0]
 800d13c:	2300      	movs	r3, #0
 800d13e:	f7ff fe47 	bl	800cdd0 <mqtt_output_append_fixed_header.constprop.0>
    mqtt_output_append_u16(&client->output, pkt_id);
 800d142:	4620      	mov	r0, r4
 800d144:	4631      	mov	r1, r6
 800d146:	f7ff fdbb 	bl	800ccc0 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 800d14a:	68e9      	ldr	r1, [r5, #12]
 800d14c:	f7ff ff5c 	bl	800d008 <mqtt_output_send>
  err_t err = ERR_OK;
 800d150:	2000      	movs	r0, #0
}
 800d152:	b005      	add	sp, #20
 800d154:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = ERR_MEM;
 800d156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d15a:	e7fa      	b.n	800d152 <pub_ack_rec_rel_response+0x3a>

0800d15c <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 800d15c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d15e:	4604      	mov	r4, r0
  mqtt_client_t *client = (mqtt_client_t *)arg;

  if (err != ERR_OK) {
 800d160:	4615      	mov	r5, r2
{
 800d162:	4608      	mov	r0, r1
  if (err != ERR_OK) {
 800d164:	b9da      	cbnz	r2, 800d19e <mqtt_tcp_connect_cb+0x42>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 800d166:	66a2      	str	r2, [r4, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 800d168:	490e      	ldr	r1, [pc, #56]	; (800d1a4 <mqtt_tcp_connect_cb+0x48>)
 800d16a:	9001      	str	r0, [sp, #4]
 800d16c:	f7fc f888 	bl	8009280 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 800d170:	490d      	ldr	r1, [pc, #52]	; (800d1a8 <mqtt_tcp_connect_cb+0x4c>)
 800d172:	9801      	ldr	r0, [sp, #4]
 800d174:	f7fc f89c 	bl	80092b0 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800d178:	2202      	movs	r2, #2
 800d17a:	490c      	ldr	r1, [pc, #48]	; (800d1ac <mqtt_tcp_connect_cb+0x50>)
 800d17c:	9801      	ldr	r0, [sp, #4]
 800d17e:	f7fc f8c5 	bl	800930c <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 800d182:	2302      	movs	r3, #2

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800d184:	490a      	ldr	r1, [pc, #40]	; (800d1b0 <mqtt_tcp_connect_cb+0x54>)
 800d186:	f241 3088 	movw	r0, #5000	; 0x1388
 800d18a:	4622      	mov	r2, r4
  client->conn_state = MQTT_CONNECTING;
 800d18c:	72a3      	strb	r3, [r4, #10]
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800d18e:	f7ff f8ff 	bl	800c390 <sys_timeout>
  client->cyclic_tick = 0;
 800d192:	4620      	mov	r0, r4

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 800d194:	68e1      	ldr	r1, [r4, #12]
  client->cyclic_tick = 0;
 800d196:	f820 5bec 	strh.w	r5, [r0], #236
  mqtt_output_send(&client->output, client->conn);
 800d19a:	f7ff ff35 	bl	800d008 <mqtt_output_send>

  return ERR_OK;
}
 800d19e:	4628      	mov	r0, r5
 800d1a0:	b003      	add	sp, #12
 800d1a2:	bd30      	pop	{r4, r5, pc}
 800d1a4:	0800d3e1 	.word	0x0800d3e1
 800d1a8:	0800d0dd 	.word	0x0800d0dd
 800d1ac:	0800d0cb 	.word	0x0800d0cb
 800d1b0:	0800cf15 	.word	0x0800cf15

0800d1b4 <mqtt_message_received>:
{
 800d1b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b8:	461d      	mov	r5, r3
  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 800d1ba:	6e83      	ldr	r3, [r0, #104]	; 0x68
  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800d1bc:	f100 0b6c 	add.w	fp, r0, #108	; 0x6c
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 800d1c0:	f890 606c 	ldrb.w	r6, [r0, #108]	; 0x6c
  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 800d1c4:	2b7f      	cmp	r3, #127	; 0x7f
{
 800d1c6:	4604      	mov	r4, r0
 800d1c8:	468a      	mov	sl, r1
 800d1ca:	4617      	mov	r7, r2
  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800d1cc:	eb0b 0801 	add.w	r8, fp, r1
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 800d1d0:	ea4f 1616 	mov.w	r6, r6, lsr #4
  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 800d1d4:	d906      	bls.n	800d1e4 <mqtt_message_received+0x30>
 800d1d6:	4b7d      	ldr	r3, [pc, #500]	; (800d3cc <mqtt_message_received+0x218>)
 800d1d8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d1dc:	497c      	ldr	r1, [pc, #496]	; (800d3d0 <mqtt_message_received+0x21c>)
 800d1de:	487d      	ldr	r0, [pc, #500]	; (800d3d4 <mqtt_message_received+0x220>)
 800d1e0:	f000 fc56 	bl	800da90 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 800d1e4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d1e6:	459a      	cmp	sl, r3
 800d1e8:	d906      	bls.n	800d1f8 <mqtt_message_received+0x44>
 800d1ea:	4b78      	ldr	r3, [pc, #480]	; (800d3cc <mqtt_message_received+0x218>)
 800d1ec:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 800d1f0:	4979      	ldr	r1, [pc, #484]	; (800d3d8 <mqtt_message_received+0x224>)
 800d1f2:	4878      	ldr	r0, [pc, #480]	; (800d3d4 <mqtt_message_received+0x220>)
 800d1f4:	f000 fc4c 	bl	800da90 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 800d1f8:	eb0a 0307 	add.w	r3, sl, r7
 800d1fc:	2b80      	cmp	r3, #128	; 0x80
 800d1fe:	dd0c      	ble.n	800d21a <mqtt_message_received+0x66>
 800d200:	4b72      	ldr	r3, [pc, #456]	; (800d3cc <mqtt_message_received+0x218>)
 800d202:	f240 22ad 	movw	r2, #685	; 0x2ad
 800d206:	4975      	ldr	r1, [pc, #468]	; (800d3dc <mqtt_message_received+0x228>)
 800d208:	4872      	ldr	r0, [pc, #456]	; (800d3d4 <mqtt_message_received+0x220>)
 800d20a:	f000 fc41 	bl	800da90 <iprintf>
  return MQTT_CONNECT_DISCONNECTED;
 800d20e:	f44f 7580 	mov.w	r5, #256	; 0x100
}
 800d212:	4628      	mov	r0, r5
 800d214:	b003      	add	sp, #12
 800d216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800d21a:	2e02      	cmp	r6, #2
 800d21c:	d115      	bne.n	800d24a <mqtt_message_received+0x96>
    if (client->conn_state == MQTT_CONNECTING) {
 800d21e:	7aa3      	ldrb	r3, [r4, #10]
 800d220:	2b02      	cmp	r3, #2
 800d222:	d001      	beq.n	800d228 <mqtt_message_received+0x74>
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800d224:	2500      	movs	r5, #0
}
 800d226:	e7f4      	b.n	800d212 <mqtt_message_received+0x5e>
      if (length < 2) {
 800d228:	2f01      	cmp	r7, #1
 800d22a:	d9f0      	bls.n	800d20e <mqtt_message_received+0x5a>
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 800d22c:	f898 5001 	ldrb.w	r5, [r8, #1]
      if (res == MQTT_CONNECT_ACCEPTED) {
 800d230:	2d00      	cmp	r5, #0
 800d232:	d1ee      	bne.n	800d212 <mqtt_message_received+0x5e>
        client->conn_state = MQTT_CONNECTED;
 800d234:	2303      	movs	r3, #3
        client->cyclic_tick = 0;
 800d236:	8025      	strh	r5, [r4, #0]
        client->conn_state = MQTT_CONNECTED;
 800d238:	72a3      	strb	r3, [r4, #10]
        if (client->connect_cb != 0) {
 800d23a:	6963      	ldr	r3, [r4, #20]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d0f1      	beq.n	800d224 <mqtt_message_received+0x70>
          client->connect_cb(client, client->connect_arg, res);
 800d240:	462a      	mov	r2, r5
 800d242:	6921      	ldr	r1, [r4, #16]
 800d244:	4620      	mov	r0, r4
 800d246:	4798      	blx	r3
 800d248:	e7e3      	b.n	800d212 <mqtt_message_received+0x5e>
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 800d24a:	2e0d      	cmp	r6, #13
 800d24c:	d0ea      	beq.n	800d224 <mqtt_message_received+0x70>
  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800d24e:	2e03      	cmp	r6, #3
 800d250:	d17f      	bne.n	800d352 <mqtt_message_received+0x19e>
    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800d252:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800d254:	f894 906c 	ldrb.w	r9, [r4, #108]	; 0x6c
    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800d258:	2b80      	cmp	r3, #128	; 0x80
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800d25a:	f3c9 0941 	ubfx	r9, r9, #1, #2
    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800d25e:	d875      	bhi.n	800d34c <mqtt_message_received+0x198>
      u16_t qos_len = (qos ? 2U : 0U);
 800d260:	f1b9 0f00 	cmp.w	r9, #0
 800d264:	bf14      	ite	ne
 800d266:	2202      	movne	r2, #2
 800d268:	2200      	moveq	r2, #0
      if (length < 2 + qos_len) {
 800d26a:	1c53      	adds	r3, r2, #1
 800d26c:	429f      	cmp	r7, r3
 800d26e:	ddce      	ble.n	800d20e <mqtt_message_received+0x5a>
      topic_len = var_hdr_payload[0];
 800d270:	f81b 300a 	ldrb.w	r3, [fp, sl]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800d274:	f898 b001 	ldrb.w	fp, [r8, #1]
 800d278:	eb0b 2b03 	add.w	fp, fp, r3, lsl #8
      if ((topic_len > length - (2 + qos_len)) ||
 800d27c:	1c93      	adds	r3, r2, #2
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800d27e:	fa1f fb8b 	uxth.w	fp, fp
      if ((topic_len > length - (2 + qos_len)) ||
 800d282:	1afb      	subs	r3, r7, r3
 800d284:	459b      	cmp	fp, r3
 800d286:	dcc2      	bgt.n	800d20e <mqtt_message_received+0x5a>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 800d288:	f1ca 037e 	rsb	r3, sl, #126	; 0x7e
 800d28c:	1a9b      	subs	r3, r3, r2
      if ((topic_len > length - (2 + qos_len)) ||
 800d28e:	459b      	cmp	fp, r3
 800d290:	d8bd      	bhi.n	800d20e <mqtt_message_received+0x5a>
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 800d292:	f1b9 0f00 	cmp.w	r9, #0
      after_topic = 2 + topic_len;
 800d296:	f10b 0302 	add.w	r3, fp, #2
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 800d29a:	f1ca 0a80 	rsb	sl, sl, #128	; 0x80
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 800d29e:	bf14      	ite	ne
 800d2a0:	2202      	movne	r2, #2
 800d2a2:	2201      	moveq	r2, #1
      after_topic = 2 + topic_len;
 800d2a4:	b29e      	uxth	r6, r3
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 800d2a6:	fa12 f383 	uxtah	r3, r2, r3
 800d2aa:	4553      	cmp	r3, sl
 800d2ac:	d8af      	bhi.n	800d20e <mqtt_message_received+0x5a>
      if (qos > 0) {
 800d2ae:	f1b9 0f00 	cmp.w	r9, #0
 800d2b2:	d048      	beq.n	800d346 <mqtt_message_received+0x192>
        if (length < after_topic + 2U) {
 800d2b4:	1cb3      	adds	r3, r6, #2
 800d2b6:	429f      	cmp	r7, r3
 800d2b8:	d3a9      	bcc.n	800d20e <mqtt_message_received+0x5a>
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800d2ba:	f818 2006 	ldrb.w	r2, [r8, r6]
 800d2be:	4446      	add	r6, r8
 800d2c0:	7873      	ldrb	r3, [r6, #1]
        after_topic += 2;
 800d2c2:	f10b 0604 	add.w	r6, fp, #4
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800d2c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        after_topic += 2;
 800d2ca:	b2b6      	uxth	r6, r6
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800d2cc:	8123      	strh	r3, [r4, #8]
      topic = var_hdr_payload + 2;
 800d2ce:	f108 0102 	add.w	r1, r8, #2
      payload_length = length - after_topic;
 800d2d2:	eba7 0a06 	sub.w	sl, r7, r6
      bkp = topic[topic_len];
 800d2d6:	f811 300b 	ldrb.w	r3, [r1, fp]
      payload_length = length - after_topic;
 800d2da:	fa1f fa8a 	uxth.w	sl, sl
      bkp = topic[topic_len];
 800d2de:	9300      	str	r3, [sp, #0]
      topic[topic_len] = 0;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	f801 300b 	strb.w	r3, [r1, fp]
      if (client->pub_cb != NULL) {
 800d2e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2e8:	b12b      	cbz	r3, 800d2f6 <mqtt_message_received+0x142>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 800d2ea:	eb0a 0205 	add.w	r2, sl, r5
 800d2ee:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800d2f0:	9101      	str	r1, [sp, #4]
 800d2f2:	4798      	blx	r3
 800d2f4:	9901      	ldr	r1, [sp, #4]
      topic[topic_len] = bkp;
 800d2f6:	9b00      	ldr	r3, [sp, #0]
 800d2f8:	f801 300b 	strb.w	r3, [r1, fp]
    if (payload_length > 0 || remaining_length == 0) {
 800d2fc:	f1ba 0f00 	cmp.w	sl, #0
 800d300:	d101      	bne.n	800d306 <mqtt_message_received+0x152>
 800d302:	2d00      	cmp	r5, #0
 800d304:	d18e      	bne.n	800d224 <mqtt_message_received+0x70>
      if (length < (size_t)(payload_offset + payload_length)) {
 800d306:	eb06 030a 	add.w	r3, r6, sl
 800d30a:	429f      	cmp	r7, r3
 800d30c:	f4ff af7f 	bcc.w	800d20e <mqtt_message_received+0x5a>
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800d310:	fab5 f385 	clz	r3, r5
 800d314:	6e27      	ldr	r7, [r4, #96]	; 0x60
 800d316:	4652      	mov	r2, sl
 800d318:	eb08 0106 	add.w	r1, r8, r6
 800d31c:	095b      	lsrs	r3, r3, #5
 800d31e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800d320:	47b8      	blx	r7
      if (remaining_length == 0 && qos > 0) {
 800d322:	2d00      	cmp	r5, #0
 800d324:	f47f af7e 	bne.w	800d224 <mqtt_message_received+0x70>
 800d328:	f1b9 0f00 	cmp.w	r9, #0
 800d32c:	f43f af7a 	beq.w	800d224 <mqtt_message_received+0x70>
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800d330:	f1b9 0f01 	cmp.w	r9, #1
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 800d334:	462b      	mov	r3, r5
 800d336:	8922      	ldrh	r2, [r4, #8]
 800d338:	4620      	mov	r0, r4
 800d33a:	bf0c      	ite	eq
 800d33c:	2104      	moveq	r1, #4
 800d33e:	2105      	movne	r1, #5
 800d340:	f7ff feea 	bl	800d118 <pub_ack_rec_rel_response>
 800d344:	e765      	b.n	800d212 <mqtt_message_received+0x5e>
        client->inpub_pkt_id = 0;
 800d346:	f8a4 9008 	strh.w	r9, [r4, #8]
 800d34a:	e7c0      	b.n	800d2ce <mqtt_message_received+0x11a>
    u16_t payload_length = length;
 800d34c:	46ba      	mov	sl, r7
    u16_t payload_offset = 0;
 800d34e:	2600      	movs	r6, #0
 800d350:	e7d4      	b.n	800d2fc <mqtt_message_received+0x148>
    pkt_id |= (u16_t)var_hdr_payload[1];
 800d352:	f8b8 2000 	ldrh.w	r2, [r8]
 800d356:	ba52      	rev16	r2, r2
 800d358:	b292      	uxth	r2, r2
    if (pkt_id == 0) {
 800d35a:	2a00      	cmp	r2, #0
 800d35c:	f43f af57 	beq.w	800d20e <mqtt_message_received+0x5a>
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 800d360:	2e05      	cmp	r6, #5
 800d362:	d105      	bne.n	800d370 <mqtt_message_received+0x1bc>
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800d364:	2301      	movs	r3, #1
 800d366:	2106      	movs	r1, #6
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800d368:	4620      	mov	r0, r4
 800d36a:	f7ff fed5 	bl	800d118 <pub_ack_rec_rel_response>
 800d36e:	e759      	b.n	800d224 <mqtt_message_received+0x70>
    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800d370:	2e06      	cmp	r6, #6
 800d372:	d102      	bne.n	800d37a <mqtt_message_received+0x1c6>
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800d374:	2300      	movs	r3, #0
 800d376:	2107      	movs	r1, #7
 800d378:	e7f6      	b.n	800d368 <mqtt_message_received+0x1b4>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800d37a:	2e0b      	cmp	r6, #11
 800d37c:	f63f af47 	bhi.w	800d20e <mqtt_message_received+0x5a>
 800d380:	f44f 6329 	mov.w	r3, #2704	; 0xa90
 800d384:	40f3      	lsrs	r3, r6
 800d386:	07db      	lsls	r3, r3, #31
 800d388:	f57f af41 	bpl.w	800d20e <mqtt_message_received+0x5a>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800d38c:	f104 0018 	add.w	r0, r4, #24
 800d390:	4611      	mov	r1, r2
 800d392:	f7ff fcd9 	bl	800cd48 <mqtt_take_request>
      if (r != NULL) {
 800d396:	4604      	mov	r4, r0
 800d398:	2800      	cmp	r0, #0
 800d39a:	f43f af43 	beq.w	800d224 <mqtt_message_received+0x70>
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800d39e:	2e09      	cmp	r6, #9
 800d3a0:	d10f      	bne.n	800d3c2 <mqtt_message_received+0x20e>
          if (length < 3) {
 800d3a2:	2f02      	cmp	r7, #2
 800d3a4:	f67f af33 	bls.w	800d20e <mqtt_message_received+0x5a>
  if (r->cb != NULL) {
 800d3a8:	6843      	ldr	r3, [r0, #4]
 800d3aa:	b143      	cbz	r3, 800d3be <mqtt_message_received+0x20a>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800d3ac:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d3b0:	2a03      	cmp	r2, #3
 800d3b2:	bf2c      	ite	cs
 800d3b4:	f06f 010c 	mvncs.w	r1, #12
 800d3b8:	2100      	movcc	r1, #0
          r->cb(r->arg, ERR_OK);
 800d3ba:	68a0      	ldr	r0, [r4, #8]
 800d3bc:	4798      	blx	r3
    r->next = r;
 800d3be:	6024      	str	r4, [r4, #0]
 800d3c0:	e730      	b.n	800d224 <mqtt_message_received+0x70>
        } else if (r->cb != NULL) {
 800d3c2:	6843      	ldr	r3, [r0, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d0fa      	beq.n	800d3be <mqtt_message_received+0x20a>
          r->cb(r->arg, ERR_OK);
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	e7f6      	b.n	800d3ba <mqtt_message_received+0x206>
 800d3cc:	08015a0d 	.word	0x08015a0d
 800d3d0:	08015b21 	.word	0x08015b21
 800d3d4:	08012bab 	.word	0x08012bab
 800d3d8:	08015b4e 	.word	0x08015b4e
 800d3dc:	08015b6f 	.word	0x08015b6f

0800d3e0 <mqtt_tcp_recv_cb>:
{
 800d3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e4:	460d      	mov	r5, r1
 800d3e6:	b085      	sub	sp, #20
 800d3e8:	4617      	mov	r7, r2
 800d3ea:	4699      	mov	r9, r3
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	b930      	cbnz	r0, 800d3fe <mqtt_tcp_recv_cb+0x1e>
 800d3f0:	4b5e      	ldr	r3, [pc, #376]	; (800d56c <mqtt_tcp_recv_cb+0x18c>)
 800d3f2:	f240 32a7 	movw	r2, #935	; 0x3a7
 800d3f6:	495e      	ldr	r1, [pc, #376]	; (800d570 <mqtt_tcp_recv_cb+0x190>)
 800d3f8:	485e      	ldr	r0, [pc, #376]	; (800d574 <mqtt_tcp_recv_cb+0x194>)
 800d3fa:	f000 fb49 	bl	800da90 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 800d3fe:	68e3      	ldr	r3, [r4, #12]
 800d400:	42ab      	cmp	r3, r5
 800d402:	d006      	beq.n	800d412 <mqtt_tcp_recv_cb+0x32>
 800d404:	4b59      	ldr	r3, [pc, #356]	; (800d56c <mqtt_tcp_recv_cb+0x18c>)
 800d406:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d40a:	495b      	ldr	r1, [pc, #364]	; (800d578 <mqtt_tcp_recv_cb+0x198>)
 800d40c:	4859      	ldr	r0, [pc, #356]	; (800d574 <mqtt_tcp_recv_cb+0x194>)
 800d40e:	f000 fb3f 	bl	800da90 <iprintf>
  if (p == NULL) {
 800d412:	b94f      	cbnz	r7, 800d428 <mqtt_tcp_recv_cb+0x48>
  return ERR_OK;
 800d414:	46b9      	mov	r9, r7
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800d416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d41a:	4620      	mov	r0, r4
 800d41c:	f7ff fd0a 	bl	800ce34 <mqtt_close>
}
 800d420:	4648      	mov	r0, r9
 800d422:	b005      	add	sp, #20
 800d424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (err != ERR_OK) {
 800d428:	f1b9 0f00 	cmp.w	r9, #0
 800d42c:	d003      	beq.n	800d436 <mqtt_tcp_recv_cb+0x56>
      pbuf_free(p);
 800d42e:	4638      	mov	r0, r7
 800d430:	f7fb fb22 	bl	8008a78 <pbuf_free>
      return err;
 800d434:	e7f4      	b.n	800d420 <mqtt_tcp_recv_cb+0x40>
    altcp_recved(pcb, p->tot_len);
 800d436:	4628      	mov	r0, r5
 800d438:	8939      	ldrh	r1, [r7, #8]
 800d43a:	f7fb fec9 	bl	80091d0 <tcp_recved>
  u8_t b = 0;
 800d43e:	46cb      	mov	fp, r9
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 800d440:	f104 036c 	add.w	r3, r4, #108	; 0x6c
  u8_t fixed_hdr_idx = 0;
 800d444:	464e      	mov	r6, r9
  u32_t msg_rem_len = 0;
 800d446:	464d      	mov	r5, r9
  u16_t in_offset = 0;
 800d448:	46c8      	mov	r8, r9
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 800d44a:	9302      	str	r3, [sp, #8]
  while (p->tot_len > in_offset) {
 800d44c:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 800d450:	45d0      	cmp	r8, sl
 800d452:	d311      	bcc.n	800d478 <mqtt_tcp_recv_cb+0x98>
  return MQTT_CONNECT_ACCEPTED;
 800d454:	f04f 0a00 	mov.w	sl, #0
    pbuf_free(p);
 800d458:	4638      	mov	r0, r7
 800d45a:	f7fb fb0d 	bl	8008a78 <pbuf_free>
    if (res != MQTT_CONNECT_ACCEPTED) {
 800d45e:	f1ba 0f00 	cmp.w	sl, #0
 800d462:	d003      	beq.n	800d46c <mqtt_tcp_recv_cb+0x8c>
      mqtt_close(client, res);
 800d464:	4651      	mov	r1, sl
 800d466:	4620      	mov	r0, r4
 800d468:	f7ff fce4 	bl	800ce34 <mqtt_close>
    if (client->keep_alive != 0) {
 800d46c:	8863      	ldrh	r3, [r4, #2]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d0d6      	beq.n	800d420 <mqtt_tcp_recv_cb+0x40>
      client->server_watchdog = 0;
 800d472:	2300      	movs	r3, #0
 800d474:	80a3      	strh	r3, [r4, #4]
 800d476:	e7d3      	b.n	800d420 <mqtt_tcp_recv_cb+0x40>
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 800d478:	2e01      	cmp	r6, #1
 800d47a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d47c:	d902      	bls.n	800d484 <mqtt_tcp_recv_cb+0xa4>
 800d47e:	f01b 0f80 	tst.w	fp, #128	; 0x80
 800d482:	d033      	beq.n	800d4ec <mqtt_tcp_recv_cb+0x10c>
      if (fixed_hdr_idx < client->msg_idx) {
 800d484:	42b3      	cmp	r3, r6
 800d486:	d91c      	bls.n	800d4c2 <mqtt_tcp_recv_cb+0xe2>
        b = client->rx_buffer[fixed_hdr_idx];
 800d488:	19a3      	adds	r3, r4, r6
 800d48a:	f893 b06c 	ldrb.w	fp, [r3, #108]	; 0x6c
      fixed_hdr_idx++;
 800d48e:	3601      	adds	r6, #1
 800d490:	b2f6      	uxtb	r6, r6
      if (fixed_hdr_idx >= 2) {
 800d492:	2e01      	cmp	r6, #1
 800d494:	d9da      	bls.n	800d44c <mqtt_tcp_recv_cb+0x6c>
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 800d496:	1eb2      	subs	r2, r6, #2
 800d498:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
        if ((b & 0x80) == 0) {
 800d49c:	f01b 0f80 	tst.w	fp, #128	; 0x80
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 800d4a0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800d4a4:	fa03 f302 	lsl.w	r3, r3, r2
 800d4a8:	ea45 0503 	orr.w	r5, r5, r3
        if ((b & 0x80) == 0) {
 800d4ac:	d1ce      	bne.n	800d44c <mqtt_tcp_recv_cb+0x6c>
          if (msg_rem_len == 0) {
 800d4ae:	b9cd      	cbnz	r5, 800d4e4 <mqtt_tcp_recv_cb+0x104>
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 800d4b0:	462b      	mov	r3, r5
 800d4b2:	462a      	mov	r2, r5
 800d4b4:	4631      	mov	r1, r6
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f7ff fe7c 	bl	800d1b4 <mqtt_message_received>
          fixed_hdr_idx = 0;
 800d4bc:	462e      	mov	r6, r5
          client->msg_idx = 0;
 800d4be:	66a5      	str	r5, [r4, #104]	; 0x68
          fixed_hdr_idx = 0;
 800d4c0:	e7c4      	b.n	800d44c <mqtt_tcp_recv_cb+0x6c>
        b = pbuf_get_at(p, in_offset++);
 800d4c2:	4641      	mov	r1, r8
 800d4c4:	4638      	mov	r0, r7
 800d4c6:	f7fb fd72 	bl	8008fae <pbuf_get_at>
 800d4ca:	f108 0a01 	add.w	sl, r8, #1
        client->rx_buffer[client->msg_idx++] = b;
 800d4ce:	6ea3      	ldr	r3, [r4, #104]	; 0x68
        b = pbuf_get_at(p, in_offset++);
 800d4d0:	4683      	mov	fp, r0
 800d4d2:	fa1f fa8a 	uxth.w	sl, sl
        client->rx_buffer[client->msg_idx++] = b;
 800d4d6:	1c5a      	adds	r2, r3, #1
 800d4d8:	4423      	add	r3, r4
        b = pbuf_get_at(p, in_offset++);
 800d4da:	46d0      	mov	r8, sl
        client->rx_buffer[client->msg_idx++] = b;
 800d4dc:	66a2      	str	r2, [r4, #104]	; 0x68
 800d4de:	f883 006c 	strb.w	r0, [r3, #108]	; 0x6c
 800d4e2:	e7d4      	b.n	800d48e <mqtt_tcp_recv_cb+0xae>
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 800d4e4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d4e6:	1af3      	subs	r3, r6, r3
 800d4e8:	441d      	add	r5, r3
 800d4ea:	e7af      	b.n	800d44c <mqtt_tcp_recv_cb+0x6c>
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800d4ec:	1b9b      	subs	r3, r3, r6
 800d4ee:	f1c6 0280 	rsb	r2, r6, #128	; 0x80
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800d4f2:	ebaa 0a08 	sub.w	sl, sl, r8
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 800d4f6:	9802      	ldr	r0, [sp, #8]
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800d4f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4fc:	fb02 3111 	mls	r1, r2, r1, r3
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800d500:	fa1f fa8a 	uxth.w	sl, sl
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800d504:	b28b      	uxth	r3, r1
 800d506:	fa16 f181 	uxtah	r1, r6, r1
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800d50a:	4555      	cmp	r5, sl
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800d50c:	b289      	uxth	r1, r1
 800d50e:	9301      	str	r3, [sp, #4]
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800d510:	bf98      	it	ls
 800d512:	fa1f fa85 	uxthls.w	sl, r5
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 800d516:	f1c1 0380 	rsb	r3, r1, #128	; 0x80
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 800d51a:	4401      	add	r1, r0
 800d51c:	4638      	mov	r0, r7
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 800d51e:	b29b      	uxth	r3, r3
 800d520:	4553      	cmp	r3, sl
 800d522:	9300      	str	r3, [sp, #0]
      if (cpy_len > buffer_space) {
 800d524:	bf28      	it	cs
 800d526:	4653      	movcs	r3, sl
 800d528:	461a      	mov	r2, r3
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 800d52a:	4643      	mov	r3, r8
 800d52c:	9203      	str	r2, [sp, #12]
 800d52e:	f7fb fcc9 	bl	8008ec4 <pbuf_copy_partial>
      client->msg_idx += cpy_len;
 800d532:	9a03      	ldr	r2, [sp, #12]
 800d534:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      in_offset += cpy_len;
 800d536:	4490      	add	r8, r2
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 800d538:	1aad      	subs	r5, r5, r2
      client->msg_idx += cpy_len;
 800d53a:	4413      	add	r3, r2
      in_offset += cpy_len;
 800d53c:	fa1f f888 	uxth.w	r8, r8
      client->msg_idx += cpy_len;
 800d540:	66a3      	str	r3, [r4, #104]	; 0x68
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 800d542:	d002      	beq.n	800d54a <mqtt_tcp_recv_cb+0x16a>
 800d544:	9b00      	ldr	r3, [sp, #0]
 800d546:	4553      	cmp	r3, sl
 800d548:	d880      	bhi.n	800d44c <mqtt_tcp_recv_cb+0x6c>
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 800d54a:	9b01      	ldr	r3, [sp, #4]
 800d54c:	4631      	mov	r1, r6
 800d54e:	4620      	mov	r0, r4
 800d550:	4413      	add	r3, r2
 800d552:	461a      	mov	r2, r3
 800d554:	462b      	mov	r3, r5
 800d556:	b292      	uxth	r2, r2
 800d558:	f7ff fe2c 	bl	800d1b4 <mqtt_message_received>
        if (res != MQTT_CONNECT_ACCEPTED) {
 800d55c:	4682      	mov	sl, r0
 800d55e:	2800      	cmp	r0, #0
 800d560:	f47f af7a 	bne.w	800d458 <mqtt_tcp_recv_cb+0x78>
        if (msg_rem_len == 0) {
 800d564:	2d00      	cmp	r5, #0
 800d566:	f47f af71 	bne.w	800d44c <mqtt_tcp_recv_cb+0x6c>
 800d56a:	e7a7      	b.n	800d4bc <mqtt_tcp_recv_cb+0xdc>
 800d56c:	08015a0d 	.word	0x08015a0d
 800d570:	08015b86 	.word	0x08015b86
 800d574:	08012bab 	.word	0x08012bab
 800d578:	08015ba7 	.word	0x08015ba7

0800d57c <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 800d57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d580:	ed2d 8b02 	vpush	{d8}
 800d584:	b083      	sub	sp, #12
 800d586:	4689      	mov	r9, r1
 800d588:	4693      	mov	fp, r2
 800d58a:	461f      	mov	r7, r3
 800d58c:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 800d590:	4605      	mov	r5, r0
 800d592:	b930      	cbnz	r0, 800d5a2 <mqtt_sub_unsub+0x26>
 800d594:	4b46      	ldr	r3, [pc, #280]	; (800d6b0 <mqtt_sub_unsub+0x134>)
 800d596:	f240 429f 	movw	r2, #1183	; 0x49f
 800d59a:	4946      	ldr	r1, [pc, #280]	; (800d6b4 <mqtt_sub_unsub+0x138>)
 800d59c:	4846      	ldr	r0, [pc, #280]	; (800d6b8 <mqtt_sub_unsub+0x13c>)
 800d59e:	f000 fa77 	bl	800da90 <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 800d5a2:	f1b9 0f00 	cmp.w	r9, #0
 800d5a6:	d106      	bne.n	800d5b6 <mqtt_sub_unsub+0x3a>
 800d5a8:	4b41      	ldr	r3, [pc, #260]	; (800d6b0 <mqtt_sub_unsub+0x134>)
 800d5aa:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 800d5ae:	4943      	ldr	r1, [pc, #268]	; (800d6bc <mqtt_sub_unsub+0x140>)
 800d5b0:	4841      	ldr	r0, [pc, #260]	; (800d6b8 <mqtt_sub_unsub+0x13c>)
 800d5b2:	f000 fa6d 	bl	800da90 <iprintf>

  topic_strlen = strlen(topic);
 800d5b6:	4648      	mov	r0, r9
 800d5b8:	f7f2 fe34 	bl	8000224 <strlen>
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 800d5bc:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800d5c0:	4298      	cmp	r0, r3
 800d5c2:	d90d      	bls.n	800d5e0 <mqtt_sub_unsub+0x64>
 800d5c4:	4b3a      	ldr	r3, [pc, #232]	; (800d6b0 <mqtt_sub_unsub+0x134>)
 800d5c6:	f240 42a3 	movw	r2, #1187	; 0x4a3
 800d5ca:	493d      	ldr	r1, [pc, #244]	; (800d6c0 <mqtt_sub_unsub+0x144>)
  topic_len = (u16_t)topic_strlen;
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800d5cc:	483a      	ldr	r0, [pc, #232]	; (800d6b8 <mqtt_sub_unsub+0x13c>)
 800d5ce:	f000 fa5f 	bl	800da90 <iprintf>
 800d5d2:	f06f 000f 	mvn.w	r0, #15
  }

  mqtt_append_request(&client->pend_req_queue, r);
  mqtt_output_send(&client->output, client->conn);
  return ERR_OK;
}
 800d5d6:	b003      	add	sp, #12
 800d5d8:	ecbd 8b02 	vpop	{d8}
 800d5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  total_len =  topic_len + 2 + 2 + (sub != 0);
 800d5e0:	1d04      	adds	r4, r0, #4
  topic_len = (u16_t)topic_strlen;
 800d5e2:	b283      	uxth	r3, r0
  total_len =  topic_len + 2 + 2 + (sub != 0);
 800d5e4:	f1ba 0f00 	cmp.w	sl, #0
 800d5e8:	bf18      	it	ne
 800d5ea:	3401      	addne	r4, #1
  topic_len = (u16_t)topic_strlen;
 800d5ec:	ee08 3a10 	vmov	s16, r3
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800d5f0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800d5f4:	db04      	blt.n	800d600 <mqtt_sub_unsub+0x84>
 800d5f6:	4b2e      	ldr	r3, [pc, #184]	; (800d6b0 <mqtt_sub_unsub+0x134>)
 800d5f8:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800d5fc:	4931      	ldr	r1, [pc, #196]	; (800d6c4 <mqtt_sub_unsub+0x148>)
 800d5fe:	e7e5      	b.n	800d5cc <mqtt_sub_unsub+0x50>
  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 800d600:	f1bb 0f02 	cmp.w	fp, #2
  remaining_length = (u16_t)total_len;
 800d604:	b2a4      	uxth	r4, r4
  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 800d606:	d906      	bls.n	800d616 <mqtt_sub_unsub+0x9a>
 800d608:	4b29      	ldr	r3, [pc, #164]	; (800d6b0 <mqtt_sub_unsub+0x134>)
 800d60a:	f240 42aa 	movw	r2, #1194	; 0x4aa
 800d60e:	492e      	ldr	r1, [pc, #184]	; (800d6c8 <mqtt_sub_unsub+0x14c>)
 800d610:	4829      	ldr	r0, [pc, #164]	; (800d6b8 <mqtt_sub_unsub+0x13c>)
 800d612:	f000 fa3d 	bl	800da90 <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 800d616:	7aab      	ldrb	r3, [r5, #10]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d046      	beq.n	800d6aa <mqtt_sub_unsub+0x12e>
  client->pkt_id_seq++;
 800d61c:	88ee      	ldrh	r6, [r5, #6]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 800d61e:	463a      	mov	r2, r7
 800d620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d622:	f105 001c 	add.w	r0, r5, #28
  client->pkt_id_seq++;
 800d626:	3601      	adds	r6, #1
 800d628:	b2b6      	uxth	r6, r6
 800d62a:	2e01      	cmp	r6, #1
 800d62c:	bf38      	it	cc
 800d62e:	2601      	movcc	r6, #1
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 800d630:	4631      	mov	r1, r6
 800d632:	80ee      	strh	r6, [r5, #6]
 800d634:	f7ff fbeb 	bl	800ce0e <mqtt_create_request.constprop.0>
  if (r == NULL) {
 800d638:	4680      	mov	r8, r0
 800d63a:	b140      	cbz	r0, 800d64e <mqtt_sub_unsub+0xd2>
  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800d63c:	f105 07ec 	add.w	r7, r5, #236	; 0xec
 800d640:	4621      	mov	r1, r4
 800d642:	4638      	mov	r0, r7
 800d644:	f7ff fc50 	bl	800cee8 <mqtt_output_check_space>
 800d648:	b920      	cbnz	r0, 800d654 <mqtt_sub_unsub+0xd8>
    r->next = r;
 800d64a:	f8c8 8000 	str.w	r8, [r8]
    return ERR_MEM;
 800d64e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d652:	e7c0      	b.n	800d5d6 <mqtt_sub_unsub+0x5a>
  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 800d654:	f1ba 0f00 	cmp.w	sl, #0
 800d658:	f04f 0201 	mov.w	r2, #1
 800d65c:	f04f 0300 	mov.w	r3, #0
 800d660:	4638      	mov	r0, r7
 800d662:	bf14      	ite	ne
 800d664:	2108      	movne	r1, #8
 800d666:	210a      	moveq	r1, #10
 800d668:	9400      	str	r4, [sp, #0]
 800d66a:	f7ff fbb1 	bl	800cdd0 <mqtt_output_append_fixed_header.constprop.0>
  mqtt_output_append_u16(&client->output, pkt_id);
 800d66e:	4631      	mov	r1, r6
 800d670:	4638      	mov	r0, r7
 800d672:	f7ff fb25 	bl	800ccc0 <mqtt_output_append_u16>
  mqtt_output_append_string(&client->output, topic, topic_len);
 800d676:	ee18 2a10 	vmov	r2, s16
 800d67a:	4649      	mov	r1, r9
 800d67c:	f7ff fb2a 	bl	800ccd4 <mqtt_output_append_string>
  if (sub != 0) {
 800d680:	f1ba 0f00 	cmp.w	sl, #0
 800d684:	d006      	beq.n	800d694 <mqtt_sub_unsub+0x118>
  mqtt_ringbuf_put(rb, value);
 800d686:	4659      	mov	r1, fp
 800d688:	4638      	mov	r0, r7
 800d68a:	2902      	cmp	r1, #2
 800d68c:	bf28      	it	cs
 800d68e:	2102      	movcs	r1, #2
 800d690:	f7ff fb0c 	bl	800ccac <mqtt_ringbuf_put>
  mqtt_append_request(&client->pend_req_queue, r);
 800d694:	4641      	mov	r1, r8
 800d696:	f105 0018 	add.w	r0, r5, #24
 800d69a:	f7ff fb2f 	bl	800ccfc <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800d69e:	4638      	mov	r0, r7
 800d6a0:	68e9      	ldr	r1, [r5, #12]
 800d6a2:	f7ff fcb1 	bl	800d008 <mqtt_output_send>
  return ERR_OK;
 800d6a6:	2000      	movs	r0, #0
 800d6a8:	e795      	b.n	800d5d6 <mqtt_sub_unsub+0x5a>
    return ERR_CONN;
 800d6aa:	f06f 000a 	mvn.w	r0, #10
 800d6ae:	e792      	b.n	800d5d6 <mqtt_sub_unsub+0x5a>
 800d6b0:	08015a0d 	.word	0x08015a0d
 800d6b4:	08015c6d 	.word	0x08015c6d
 800d6b8:	08012bab 	.word	0x08012bab
 800d6bc:	08015c8c 	.word	0x08015c8c
 800d6c0:	08015caa 	.word	0x08015caa
 800d6c4:	08015cd0 	.word	0x08015cd0
 800d6c8:	08015cf6 	.word	0x08015cf6

0800d6cc <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 800d6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ce:	460e      	mov	r6, r1
 800d6d0:	4617      	mov	r7, r2
 800d6d2:	461d      	mov	r5, r3
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	b930      	cbnz	r0, 800d6e6 <mqtt_set_inpub_callback+0x1a>
 800d6d8:	4b05      	ldr	r3, [pc, #20]	; (800d6f0 <mqtt_set_inpub_callback+0x24>)
 800d6da:	f240 42da 	movw	r2, #1242	; 0x4da
 800d6de:	4905      	ldr	r1, [pc, #20]	; (800d6f4 <mqtt_set_inpub_callback+0x28>)
 800d6e0:	4805      	ldr	r0, [pc, #20]	; (800d6f8 <mqtt_set_inpub_callback+0x2c>)
 800d6e2:	f000 f9d5 	bl	800da90 <iprintf>
  client->data_cb = data_cb;
  client->pub_cb = pub_cb;
  client->inpub_arg = arg;
 800d6e6:	65e5      	str	r5, [r4, #92]	; 0x5c
  client->pub_cb = pub_cb;
 800d6e8:	e9c4 7618 	strd	r7, r6, [r4, #96]	; 0x60
}
 800d6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	08015a0d 	.word	0x08015a0d
 800d6f4:	08015d0e 	.word	0x08015d0e
 800d6f8:	08012bab 	.word	0x08012bab

0800d6fc <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 800d6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d700:	ed2d 8b02 	vpush	{d8}
 800d704:	b087      	sub	sp, #28
 800d706:	4688      	mov	r8, r1
 800d708:	ee08 2a10 	vmov	s16, r2
 800d70c:	461f      	mov	r7, r3
 800d70e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
  u16_t client_user_len = 0, client_pass_len = 0;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 800d710:	4604      	mov	r4, r0
 800d712:	b930      	cbnz	r0, 800d722 <mqtt_client_connect+0x26>
 800d714:	4ba4      	ldr	r3, [pc, #656]	; (800d9a8 <mqtt_client_connect+0x2ac>)
 800d716:	f240 520f 	movw	r2, #1295	; 0x50f
 800d71a:	49a4      	ldr	r1, [pc, #656]	; (800d9ac <mqtt_client_connect+0x2b0>)
 800d71c:	48a4      	ldr	r0, [pc, #656]	; (800d9b0 <mqtt_client_connect+0x2b4>)
 800d71e:	f000 f9b7 	bl	800da90 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 800d722:	f1b8 0f00 	cmp.w	r8, #0
 800d726:	d106      	bne.n	800d736 <mqtt_client_connect+0x3a>
 800d728:	4b9f      	ldr	r3, [pc, #636]	; (800d9a8 <mqtt_client_connect+0x2ac>)
 800d72a:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 800d72e:	49a1      	ldr	r1, [pc, #644]	; (800d9b4 <mqtt_client_connect+0x2b8>)
 800d730:	489f      	ldr	r0, [pc, #636]	; (800d9b0 <mqtt_client_connect+0x2b4>)
 800d732:	f000 f9ad 	bl	800da90 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800d736:	b936      	cbnz	r6, 800d746 <mqtt_client_connect+0x4a>
 800d738:	4b9b      	ldr	r3, [pc, #620]	; (800d9a8 <mqtt_client_connect+0x2ac>)
 800d73a:	f240 5211 	movw	r2, #1297	; 0x511
 800d73e:	499e      	ldr	r1, [pc, #632]	; (800d9b8 <mqtt_client_connect+0x2bc>)
 800d740:	489b      	ldr	r0, [pc, #620]	; (800d9b0 <mqtt_client_connect+0x2b4>)
 800d742:	f000 f9a5 	bl	800da90 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800d746:	6833      	ldr	r3, [r6, #0]
 800d748:	b933      	cbnz	r3, 800d758 <mqtt_client_connect+0x5c>
 800d74a:	4b97      	ldr	r3, [pc, #604]	; (800d9a8 <mqtt_client_connect+0x2ac>)
 800d74c:	f240 5212 	movw	r2, #1298	; 0x512
 800d750:	499a      	ldr	r1, [pc, #616]	; (800d9bc <mqtt_client_connect+0x2c0>)
 800d752:	4897      	ldr	r0, [pc, #604]	; (800d9b0 <mqtt_client_connect+0x2b4>)
 800d754:	f000 f99c 	bl	800da90 <iprintf>


  if (client->conn_state != TCP_DISCONNECTED) {
 800d758:	7aa5      	ldrb	r5, [r4, #10]
 800d75a:	2d00      	cmp	r5, #0
 800d75c:	f040 8121 	bne.w	800d9a2 <mqtt_client_connect+0x2a6>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 800d760:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800d764:	4629      	mov	r1, r5
 800d766:	4620      	mov	r0, r4
 800d768:	f000 f98a 	bl	800da80 <memset>
  client->connect_arg = arg;
 800d76c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  client->connect_cb = cb;
  client->keep_alive = client_info->keep_alive;
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 800d76e:	6930      	ldr	r0, [r6, #16]
  client->connect_cb = cb;
 800d770:	e9c4 3704 	strd	r3, r7, [r4, #16]
  client->keep_alive = client_info->keep_alive;
 800d774:	89b3      	ldrh	r3, [r6, #12]
 800d776:	8063      	strh	r3, [r4, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 800d778:	f104 031c 	add.w	r3, r4, #28
    r_objs[n].next = &r_objs[n];
 800d77c:	61e3      	str	r3, [r4, #28]
 800d77e:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 800d782:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d784:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800d788:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d78a:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 800d78e:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 800d790:	2800      	cmp	r0, #0
 800d792:	d048      	beq.n	800d826 <mqtt_client_connect+0x12a>
 800d794:	f8d6 9014 	ldr.w	r9, [r6, #20]
 800d798:	f1b9 0f00 	cmp.w	r9, #0
 800d79c:	d043      	beq.n	800d826 <mqtt_client_connect+0x12a>
    flags |= MQTT_CONNECT_FLAG_WILL;
    flags |= (client_info->will_qos & 3) << 3;
 800d79e:	7e35      	ldrb	r5, [r6, #24]
    if (client_info->will_retain) {
 800d7a0:	7e73      	ldrb	r3, [r6, #25]
    flags |= (client_info->will_qos & 3) << 3;
 800d7a2:	00ed      	lsls	r5, r5, #3
 800d7a4:	f005 0518 	and.w	r5, r5, #24
 800d7a8:	f045 0504 	orr.w	r5, r5, #4
    if (client_info->will_retain) {
 800d7ac:	b10b      	cbz	r3, 800d7b2 <mqtt_client_connect+0xb6>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800d7ae:	f045 0520 	orr.w	r5, r5, #32
    }
    len = strlen(client_info->will_topic);
 800d7b2:	f7f2 fd37 	bl	8000224 <strlen>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800d7b6:	28ff      	cmp	r0, #255	; 0xff
    len = strlen(client_info->will_topic);
 800d7b8:	4607      	mov	r7, r0
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800d7ba:	d90e      	bls.n	800d7da <mqtt_client_connect+0xde>
 800d7bc:	4b7a      	ldr	r3, [pc, #488]	; (800d9a8 <mqtt_client_connect+0x2ac>)
 800d7be:	f240 5229 	movw	r2, #1321	; 0x529
 800d7c2:	497f      	ldr	r1, [pc, #508]	; (800d9c0 <mqtt_client_connect+0x2c4>)
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800d7c4:	f06f 0b05 	mvn.w	fp, #5
 800d7c8:	4879      	ldr	r0, [pc, #484]	; (800d9b0 <mqtt_client_connect+0x2b4>)
 800d7ca:	f000 f961 	bl	800da90 <iprintf>

tcp_fail:
  altcp_abort(client->conn);
  client->conn = NULL;
  return err;
}
 800d7ce:	4658      	mov	r0, fp
 800d7d0:	b007      	add	sp, #28
 800d7d2:	ecbd 8b02 	vpop	{d8}
 800d7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800d7da:	b920      	cbnz	r0, 800d7e6 <mqtt_client_connect+0xea>
 800d7dc:	4b72      	ldr	r3, [pc, #456]	; (800d9a8 <mqtt_client_connect+0x2ac>)
 800d7de:	f240 522a 	movw	r2, #1322	; 0x52a
 800d7e2:	4978      	ldr	r1, [pc, #480]	; (800d9c4 <mqtt_client_connect+0x2c8>)
 800d7e4:	e7ee      	b.n	800d7c4 <mqtt_client_connect+0xc8>
    will_topic_len = (u8_t)len;
 800d7e6:	fa5f fa80 	uxtb.w	sl, r0
    len = strlen(client_info->will_msg);
 800d7ea:	4648      	mov	r0, r9
 800d7ec:	f7f2 fd1a 	bl	8000224 <strlen>
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 800d7f0:	28ff      	cmp	r0, #255	; 0xff
 800d7f2:	d904      	bls.n	800d7fe <mqtt_client_connect+0x102>
 800d7f4:	4b6c      	ldr	r3, [pc, #432]	; (800d9a8 <mqtt_client_connect+0x2ac>)
 800d7f6:	f240 522d 	movw	r2, #1325	; 0x52d
 800d7fa:	4973      	ldr	r1, [pc, #460]	; (800d9c8 <mqtt_client_connect+0x2cc>)
 800d7fc:	e7e2      	b.n	800d7c4 <mqtt_client_connect+0xc8>
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 800d7fe:	f107 030e 	add.w	r3, r7, #14
    will_msg_len = (u8_t)len;
 800d802:	fa5f f980 	uxtb.w	r9, r0
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 800d806:	181f      	adds	r7, r3, r0
    remaining_length = (u16_t)len;
 800d808:	b2bf      	uxth	r7, r7
  if (client_info->client_user != NULL) {
 800d80a:	6870      	ldr	r0, [r6, #4]
 800d80c:	b380      	cbz	r0, 800d870 <mqtt_client_connect+0x174>
    len = strlen(client_info->client_user);
 800d80e:	f7f2 fd09 	bl	8000224 <strlen>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 800d812:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 800d816:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 800d81a:	d308      	bcc.n	800d82e <mqtt_client_connect+0x132>
 800d81c:	4b62      	ldr	r3, [pc, #392]	; (800d9a8 <mqtt_client_connect+0x2ac>)
 800d81e:	f240 5236 	movw	r2, #1334	; 0x536
 800d822:	496a      	ldr	r1, [pc, #424]	; (800d9cc <mqtt_client_connect+0x2d0>)
 800d824:	e7ce      	b.n	800d7c4 <mqtt_client_connect+0xc8>
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 800d826:	46a9      	mov	r9, r5
 800d828:	46aa      	mov	sl, r5
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 800d82a:	270a      	movs	r7, #10
 800d82c:	e7ed      	b.n	800d80a <mqtt_client_connect+0x10e>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 800d82e:	b920      	cbnz	r0, 800d83a <mqtt_client_connect+0x13e>
 800d830:	4b5d      	ldr	r3, [pc, #372]	; (800d9a8 <mqtt_client_connect+0x2ac>)
 800d832:	f240 5237 	movw	r2, #1335	; 0x537
 800d836:	4966      	ldr	r1, [pc, #408]	; (800d9d0 <mqtt_client_connect+0x2d4>)
 800d838:	e7c4      	b.n	800d7c4 <mqtt_client_connect+0xc8>
    len = remaining_length + 2 + client_user_len;
 800d83a:	3702      	adds	r7, #2
    client_user_len = (u16_t)len;
 800d83c:	b283      	uxth	r3, r0
    len = remaining_length + 2 + client_user_len;
 800d83e:	4407      	add	r7, r0
    client_user_len = (u16_t)len;
 800d840:	9303      	str	r3, [sp, #12]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800d842:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 800d846:	db04      	blt.n	800d852 <mqtt_client_connect+0x156>
 800d848:	4b57      	ldr	r3, [pc, #348]	; (800d9a8 <mqtt_client_connect+0x2ac>)
 800d84a:	f240 523a 	movw	r2, #1338	; 0x53a
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800d84e:	4961      	ldr	r1, [pc, #388]	; (800d9d4 <mqtt_client_connect+0x2d8>)
 800d850:	e7b8      	b.n	800d7c4 <mqtt_client_connect+0xc8>
    remaining_length = (u16_t)len;
 800d852:	b2bf      	uxth	r7, r7
  if (client_info->client_pass != NULL) {
 800d854:	68b0      	ldr	r0, [r6, #8]
 800d856:	b358      	cbz	r0, 800d8b0 <mqtt_client_connect+0x1b4>
    len = strlen(client_info->client_pass);
 800d858:	f7f2 fce4 	bl	8000224 <strlen>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 800d85c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 800d860:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 800d864:	d306      	bcc.n	800d874 <mqtt_client_connect+0x178>
 800d866:	4b50      	ldr	r3, [pc, #320]	; (800d9a8 <mqtt_client_connect+0x2ac>)
 800d868:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 800d86c:	495a      	ldr	r1, [pc, #360]	; (800d9d8 <mqtt_client_connect+0x2dc>)
 800d86e:	e7a9      	b.n	800d7c4 <mqtt_client_connect+0xc8>
  u16_t client_user_len = 0, client_pass_len = 0;
 800d870:	9003      	str	r0, [sp, #12]
 800d872:	e7ef      	b.n	800d854 <mqtt_client_connect+0x158>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 800d874:	b920      	cbnz	r0, 800d880 <mqtt_client_connect+0x184>
 800d876:	4b4c      	ldr	r3, [pc, #304]	; (800d9a8 <mqtt_client_connect+0x2ac>)
 800d878:	f240 5241 	movw	r2, #1345	; 0x541
 800d87c:	4957      	ldr	r1, [pc, #348]	; (800d9dc <mqtt_client_connect+0x2e0>)
 800d87e:	e7a1      	b.n	800d7c4 <mqtt_client_connect+0xc8>
    len = remaining_length + 2 + client_pass_len;
 800d880:	3702      	adds	r7, #2
    client_pass_len = (u16_t)len;
 800d882:	b283      	uxth	r3, r0
    len = remaining_length + 2 + client_pass_len;
 800d884:	4407      	add	r7, r0
    client_pass_len = (u16_t)len;
 800d886:	9304      	str	r3, [sp, #16]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800d888:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 800d88c:	db03      	blt.n	800d896 <mqtt_client_connect+0x19a>
 800d88e:	4b46      	ldr	r3, [pc, #280]	; (800d9a8 <mqtt_client_connect+0x2ac>)
 800d890:	f240 5244 	movw	r2, #1348	; 0x544
 800d894:	e7db      	b.n	800d84e <mqtt_client_connect+0x152>
    remaining_length = (u16_t)len;
 800d896:	b2bf      	uxth	r7, r7
  len = strlen(client_info->client_id);
 800d898:	6830      	ldr	r0, [r6, #0]
 800d89a:	f7f2 fcc3 	bl	8000224 <strlen>
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800d89e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(client_info->client_id);
 800d8a2:	9002      	str	r0, [sp, #8]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800d8a4:	d306      	bcc.n	800d8b4 <mqtt_client_connect+0x1b8>
 800d8a6:	4b40      	ldr	r3, [pc, #256]	; (800d9a8 <mqtt_client_connect+0x2ac>)
 800d8a8:	f240 524c 	movw	r2, #1356	; 0x54c
 800d8ac:	494c      	ldr	r1, [pc, #304]	; (800d9e0 <mqtt_client_connect+0x2e4>)
 800d8ae:	e789      	b.n	800d7c4 <mqtt_client_connect+0xc8>
  u16_t client_user_len = 0, client_pass_len = 0;
 800d8b0:	9004      	str	r0, [sp, #16]
 800d8b2:	e7f1      	b.n	800d898 <mqtt_client_connect+0x19c>
  len = remaining_length + 2 + client_id_length;
 800d8b4:	3702      	adds	r7, #2
 800d8b6:	9b02      	ldr	r3, [sp, #8]
 800d8b8:	441f      	add	r7, r3
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800d8ba:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 800d8be:	db03      	blt.n	800d8c8 <mqtt_client_connect+0x1cc>
 800d8c0:	4b39      	ldr	r3, [pc, #228]	; (800d9a8 <mqtt_client_connect+0x2ac>)
 800d8c2:	f240 524f 	movw	r2, #1359	; 0x54f
 800d8c6:	e7c2      	b.n	800d84e <mqtt_client_connect+0x152>
  remaining_length = (u16_t)len;
 800d8c8:	b2bb      	uxth	r3, r7
  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800d8ca:	f104 07ec 	add.w	r7, r4, #236	; 0xec
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	4638      	mov	r0, r7
  remaining_length = (u16_t)len;
 800d8d2:	9305      	str	r3, [sp, #20]
  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800d8d4:	f7ff fb08 	bl	800cee8 <mqtt_output_check_space>
 800d8d8:	b910      	cbnz	r0, 800d8e0 <mqtt_client_connect+0x1e4>
    return ERR_MEM;
 800d8da:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d8de:	e776      	b.n	800d7ce <mqtt_client_connect+0xd2>
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 800d8e0:	2000      	movs	r0, #0
 800d8e2:	f7fc faaf 	bl	8009e44 <tcp_new_ip_type>
 800d8e6:	60e0      	str	r0, [r4, #12]
  if (client->conn == NULL) {
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	d0f6      	beq.n	800d8da <mqtt_client_connect+0x1de>
  altcp_arg(client->conn, client);
 800d8ec:	4621      	mov	r1, r4
 800d8ee:	f7fb fcc3 	bl	8009278 <tcp_arg>
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	493b      	ldr	r1, [pc, #236]	; (800d9e4 <mqtt_client_connect+0x2e8>)
 800d8f6:	68e0      	ldr	r0, [r4, #12]
 800d8f8:	f7fb fbde 	bl	80090b8 <tcp_bind>
  if (err != ERR_OK) {
 800d8fc:	4683      	mov	fp, r0
 800d8fe:	2800      	cmp	r0, #0
 800d900:	d149      	bne.n	800d996 <mqtt_client_connect+0x29a>
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800d902:	4b39      	ldr	r3, [pc, #228]	; (800d9e8 <mqtt_client_connect+0x2ec>)
 800d904:	ee18 2a10 	vmov	r2, s16
 800d908:	4641      	mov	r1, r8
 800d90a:	68e0      	ldr	r0, [r4, #12]
 800d90c:	f7fc fad6 	bl	8009ebc <tcp_connect>
  if (err != ERR_OK) {
 800d910:	4683      	mov	fp, r0
 800d912:	2800      	cmp	r0, #0
 800d914:	d13f      	bne.n	800d996 <mqtt_client_connect+0x29a>
  altcp_err(client->conn, mqtt_tcp_err_cb);
 800d916:	4935      	ldr	r1, [pc, #212]	; (800d9ec <mqtt_client_connect+0x2f0>)
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800d918:	f045 0802 	orr.w	r8, r5, #2
  altcp_err(client->conn, mqtt_tcp_err_cb);
 800d91c:	68e0      	ldr	r0, [r4, #12]
 800d91e:	f7fb fcdd 	bl	80092dc <tcp_err>
  client->conn_state = TCP_CONNECTING;
 800d922:	2101      	movs	r1, #1
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800d924:	9b05      	ldr	r3, [sp, #20]
 800d926:	465a      	mov	r2, fp
  client->conn_state = TCP_CONNECTING;
 800d928:	72a1      	strb	r1, [r4, #10]
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800d92a:	4638      	mov	r0, r7
 800d92c:	9300      	str	r3, [sp, #0]
 800d92e:	465b      	mov	r3, fp
 800d930:	f7ff fa4e 	bl	800cdd0 <mqtt_output_append_fixed_header.constprop.0>
  mqtt_output_append_string(&client->output, "MQTT", 4);
 800d934:	2204      	movs	r2, #4
 800d936:	492e      	ldr	r1, [pc, #184]	; (800d9f0 <mqtt_client_connect+0x2f4>)
 800d938:	4638      	mov	r0, r7
 800d93a:	f7ff f9cb 	bl	800ccd4 <mqtt_output_append_string>
  mqtt_ringbuf_put(rb, value);
 800d93e:	4638      	mov	r0, r7
 800d940:	2104      	movs	r1, #4
 800d942:	f7ff f9b3 	bl	800ccac <mqtt_ringbuf_put>
 800d946:	4641      	mov	r1, r8
 800d948:	f7ff f9b0 	bl	800ccac <mqtt_ringbuf_put>
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800d94c:	89b1      	ldrh	r1, [r6, #12]
 800d94e:	f7ff f9b7 	bl	800ccc0 <mqtt_output_append_u16>
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800d952:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800d956:	6831      	ldr	r1, [r6, #0]
 800d958:	f7ff f9bc 	bl	800ccd4 <mqtt_output_append_string>
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800d95c:	076a      	lsls	r2, r5, #29
 800d95e:	d509      	bpl.n	800d974 <mqtt_client_connect+0x278>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800d960:	4652      	mov	r2, sl
 800d962:	6931      	ldr	r1, [r6, #16]
 800d964:	4638      	mov	r0, r7
 800d966:	f7ff f9b5 	bl	800ccd4 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 800d96a:	464a      	mov	r2, r9
 800d96c:	6971      	ldr	r1, [r6, #20]
 800d96e:	4638      	mov	r0, r7
 800d970:	f7ff f9b0 	bl	800ccd4 <mqtt_output_append_string>
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 800d974:	f018 0f80 	tst.w	r8, #128	; 0x80
 800d978:	d004      	beq.n	800d984 <mqtt_client_connect+0x288>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 800d97a:	9a03      	ldr	r2, [sp, #12]
 800d97c:	4638      	mov	r0, r7
 800d97e:	6871      	ldr	r1, [r6, #4]
 800d980:	f7ff f9a8 	bl	800ccd4 <mqtt_output_append_string>
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 800d984:	066b      	lsls	r3, r5, #25
 800d986:	f57f af22 	bpl.w	800d7ce <mqtt_client_connect+0xd2>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 800d98a:	9a04      	ldr	r2, [sp, #16]
 800d98c:	4638      	mov	r0, r7
 800d98e:	68b1      	ldr	r1, [r6, #8]
 800d990:	f7ff f9a0 	bl	800ccd4 <mqtt_output_append_string>
 800d994:	e71b      	b.n	800d7ce <mqtt_client_connect+0xd2>
  altcp_abort(client->conn);
 800d996:	68e0      	ldr	r0, [r4, #12]
 800d998:	f7fc f97a 	bl	8009c90 <tcp_abort>
  client->conn = NULL;
 800d99c:	2200      	movs	r2, #0
 800d99e:	60e2      	str	r2, [r4, #12]
  return err;
 800d9a0:	e715      	b.n	800d7ce <mqtt_client_connect+0xd2>
    return ERR_ISCONN;
 800d9a2:	f06f 0b09 	mvn.w	fp, #9
 800d9a6:	e712      	b.n	800d7ce <mqtt_client_connect+0xd2>
 800d9a8:	08015a0d 	.word	0x08015a0d
 800d9ac:	08015d36 	.word	0x08015d36
 800d9b0:	08012bab 	.word	0x08012bab
 800d9b4:	08015d5a 	.word	0x08015d5a
 800d9b8:	08015d7f 	.word	0x08015d7f
 800d9bc:	08015da8 	.word	0x08015da8
 800d9c0:	08015ddc 	.word	0x08015ddc
 800d9c4:	08015e19 	.word	0x08015e19
 800d9c8:	08015e59 	.word	0x08015e59
 800d9cc:	08015e94 	.word	0x08015e94
 800d9d0:	08015ed2 	.word	0x08015ed2
 800d9d4:	08015f13 	.word	0x08015f13
 800d9d8:	08015f42 	.word	0x08015f42
 800d9dc:	08015f80 	.word	0x08015f80
 800d9e0:	08015fc1 	.word	0x08015fc1
 800d9e4:	0801292c 	.word	0x0801292c
 800d9e8:	0800d15d 	.word	0x0800d15d
 800d9ec:	0800ceb5 	.word	0x0800ceb5
 800d9f0:	08012d89 	.word	0x08012d89

0800d9f4 <__errno>:
 800d9f4:	4b01      	ldr	r3, [pc, #4]	; (800d9fc <__errno+0x8>)
 800d9f6:	6818      	ldr	r0, [r3, #0]
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop
 800d9fc:	20000048 	.word	0x20000048

0800da00 <__libc_init_array>:
 800da00:	b570      	push	{r4, r5, r6, lr}
 800da02:	4d0d      	ldr	r5, [pc, #52]	; (800da38 <__libc_init_array+0x38>)
 800da04:	4c0d      	ldr	r4, [pc, #52]	; (800da3c <__libc_init_array+0x3c>)
 800da06:	1b64      	subs	r4, r4, r5
 800da08:	10a4      	asrs	r4, r4, #2
 800da0a:	2600      	movs	r6, #0
 800da0c:	42a6      	cmp	r6, r4
 800da0e:	d109      	bne.n	800da24 <__libc_init_array+0x24>
 800da10:	4d0b      	ldr	r5, [pc, #44]	; (800da40 <__libc_init_array+0x40>)
 800da12:	4c0c      	ldr	r4, [pc, #48]	; (800da44 <__libc_init_array+0x44>)
 800da14:	f001 f8d4 	bl	800ebc0 <_init>
 800da18:	1b64      	subs	r4, r4, r5
 800da1a:	10a4      	asrs	r4, r4, #2
 800da1c:	2600      	movs	r6, #0
 800da1e:	42a6      	cmp	r6, r4
 800da20:	d105      	bne.n	800da2e <__libc_init_array+0x2e>
 800da22:	bd70      	pop	{r4, r5, r6, pc}
 800da24:	f855 3b04 	ldr.w	r3, [r5], #4
 800da28:	4798      	blx	r3
 800da2a:	3601      	adds	r6, #1
 800da2c:	e7ee      	b.n	800da0c <__libc_init_array+0xc>
 800da2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800da32:	4798      	blx	r3
 800da34:	3601      	adds	r6, #1
 800da36:	e7f2      	b.n	800da1e <__libc_init_array+0x1e>
 800da38:	0801619c 	.word	0x0801619c
 800da3c:	0801619c 	.word	0x0801619c
 800da40:	0801619c 	.word	0x0801619c
 800da44:	080161a0 	.word	0x080161a0

0800da48 <memcmp>:
 800da48:	b530      	push	{r4, r5, lr}
 800da4a:	3901      	subs	r1, #1
 800da4c:	2400      	movs	r4, #0
 800da4e:	42a2      	cmp	r2, r4
 800da50:	d101      	bne.n	800da56 <memcmp+0xe>
 800da52:	2000      	movs	r0, #0
 800da54:	e005      	b.n	800da62 <memcmp+0x1a>
 800da56:	5d03      	ldrb	r3, [r0, r4]
 800da58:	3401      	adds	r4, #1
 800da5a:	5d0d      	ldrb	r5, [r1, r4]
 800da5c:	42ab      	cmp	r3, r5
 800da5e:	d0f6      	beq.n	800da4e <memcmp+0x6>
 800da60:	1b58      	subs	r0, r3, r5
 800da62:	bd30      	pop	{r4, r5, pc}

0800da64 <memcpy>:
 800da64:	440a      	add	r2, r1
 800da66:	4291      	cmp	r1, r2
 800da68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800da6c:	d100      	bne.n	800da70 <memcpy+0xc>
 800da6e:	4770      	bx	lr
 800da70:	b510      	push	{r4, lr}
 800da72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da7a:	4291      	cmp	r1, r2
 800da7c:	d1f9      	bne.n	800da72 <memcpy+0xe>
 800da7e:	bd10      	pop	{r4, pc}

0800da80 <memset>:
 800da80:	4402      	add	r2, r0
 800da82:	4603      	mov	r3, r0
 800da84:	4293      	cmp	r3, r2
 800da86:	d100      	bne.n	800da8a <memset+0xa>
 800da88:	4770      	bx	lr
 800da8a:	f803 1b01 	strb.w	r1, [r3], #1
 800da8e:	e7f9      	b.n	800da84 <memset+0x4>

0800da90 <iprintf>:
 800da90:	b40f      	push	{r0, r1, r2, r3}
 800da92:	4b0a      	ldr	r3, [pc, #40]	; (800dabc <iprintf+0x2c>)
 800da94:	b513      	push	{r0, r1, r4, lr}
 800da96:	681c      	ldr	r4, [r3, #0]
 800da98:	b124      	cbz	r4, 800daa4 <iprintf+0x14>
 800da9a:	69a3      	ldr	r3, [r4, #24]
 800da9c:	b913      	cbnz	r3, 800daa4 <iprintf+0x14>
 800da9e:	4620      	mov	r0, r4
 800daa0:	f000 fac4 	bl	800e02c <__sinit>
 800daa4:	ab05      	add	r3, sp, #20
 800daa6:	9a04      	ldr	r2, [sp, #16]
 800daa8:	68a1      	ldr	r1, [r4, #8]
 800daaa:	9301      	str	r3, [sp, #4]
 800daac:	4620      	mov	r0, r4
 800daae:	f000 fcaf 	bl	800e410 <_vfiprintf_r>
 800dab2:	b002      	add	sp, #8
 800dab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dab8:	b004      	add	sp, #16
 800daba:	4770      	bx	lr
 800dabc:	20000048 	.word	0x20000048

0800dac0 <_puts_r>:
 800dac0:	b570      	push	{r4, r5, r6, lr}
 800dac2:	460e      	mov	r6, r1
 800dac4:	4605      	mov	r5, r0
 800dac6:	b118      	cbz	r0, 800dad0 <_puts_r+0x10>
 800dac8:	6983      	ldr	r3, [r0, #24]
 800daca:	b90b      	cbnz	r3, 800dad0 <_puts_r+0x10>
 800dacc:	f000 faae 	bl	800e02c <__sinit>
 800dad0:	69ab      	ldr	r3, [r5, #24]
 800dad2:	68ac      	ldr	r4, [r5, #8]
 800dad4:	b913      	cbnz	r3, 800dadc <_puts_r+0x1c>
 800dad6:	4628      	mov	r0, r5
 800dad8:	f000 faa8 	bl	800e02c <__sinit>
 800dadc:	4b2c      	ldr	r3, [pc, #176]	; (800db90 <_puts_r+0xd0>)
 800dade:	429c      	cmp	r4, r3
 800dae0:	d120      	bne.n	800db24 <_puts_r+0x64>
 800dae2:	686c      	ldr	r4, [r5, #4]
 800dae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dae6:	07db      	lsls	r3, r3, #31
 800dae8:	d405      	bmi.n	800daf6 <_puts_r+0x36>
 800daea:	89a3      	ldrh	r3, [r4, #12]
 800daec:	0598      	lsls	r0, r3, #22
 800daee:	d402      	bmi.n	800daf6 <_puts_r+0x36>
 800daf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800daf2:	f000 fb4b 	bl	800e18c <__retarget_lock_acquire_recursive>
 800daf6:	89a3      	ldrh	r3, [r4, #12]
 800daf8:	0719      	lsls	r1, r3, #28
 800dafa:	d51d      	bpl.n	800db38 <_puts_r+0x78>
 800dafc:	6923      	ldr	r3, [r4, #16]
 800dafe:	b1db      	cbz	r3, 800db38 <_puts_r+0x78>
 800db00:	3e01      	subs	r6, #1
 800db02:	68a3      	ldr	r3, [r4, #8]
 800db04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800db08:	3b01      	subs	r3, #1
 800db0a:	60a3      	str	r3, [r4, #8]
 800db0c:	bb39      	cbnz	r1, 800db5e <_puts_r+0x9e>
 800db0e:	2b00      	cmp	r3, #0
 800db10:	da38      	bge.n	800db84 <_puts_r+0xc4>
 800db12:	4622      	mov	r2, r4
 800db14:	210a      	movs	r1, #10
 800db16:	4628      	mov	r0, r5
 800db18:	f000 f890 	bl	800dc3c <__swbuf_r>
 800db1c:	3001      	adds	r0, #1
 800db1e:	d011      	beq.n	800db44 <_puts_r+0x84>
 800db20:	250a      	movs	r5, #10
 800db22:	e011      	b.n	800db48 <_puts_r+0x88>
 800db24:	4b1b      	ldr	r3, [pc, #108]	; (800db94 <_puts_r+0xd4>)
 800db26:	429c      	cmp	r4, r3
 800db28:	d101      	bne.n	800db2e <_puts_r+0x6e>
 800db2a:	68ac      	ldr	r4, [r5, #8]
 800db2c:	e7da      	b.n	800dae4 <_puts_r+0x24>
 800db2e:	4b1a      	ldr	r3, [pc, #104]	; (800db98 <_puts_r+0xd8>)
 800db30:	429c      	cmp	r4, r3
 800db32:	bf08      	it	eq
 800db34:	68ec      	ldreq	r4, [r5, #12]
 800db36:	e7d5      	b.n	800dae4 <_puts_r+0x24>
 800db38:	4621      	mov	r1, r4
 800db3a:	4628      	mov	r0, r5
 800db3c:	f000 f8d0 	bl	800dce0 <__swsetup_r>
 800db40:	2800      	cmp	r0, #0
 800db42:	d0dd      	beq.n	800db00 <_puts_r+0x40>
 800db44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800db48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db4a:	07da      	lsls	r2, r3, #31
 800db4c:	d405      	bmi.n	800db5a <_puts_r+0x9a>
 800db4e:	89a3      	ldrh	r3, [r4, #12]
 800db50:	059b      	lsls	r3, r3, #22
 800db52:	d402      	bmi.n	800db5a <_puts_r+0x9a>
 800db54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db56:	f000 fb1a 	bl	800e18e <__retarget_lock_release_recursive>
 800db5a:	4628      	mov	r0, r5
 800db5c:	bd70      	pop	{r4, r5, r6, pc}
 800db5e:	2b00      	cmp	r3, #0
 800db60:	da04      	bge.n	800db6c <_puts_r+0xac>
 800db62:	69a2      	ldr	r2, [r4, #24]
 800db64:	429a      	cmp	r2, r3
 800db66:	dc06      	bgt.n	800db76 <_puts_r+0xb6>
 800db68:	290a      	cmp	r1, #10
 800db6a:	d004      	beq.n	800db76 <_puts_r+0xb6>
 800db6c:	6823      	ldr	r3, [r4, #0]
 800db6e:	1c5a      	adds	r2, r3, #1
 800db70:	6022      	str	r2, [r4, #0]
 800db72:	7019      	strb	r1, [r3, #0]
 800db74:	e7c5      	b.n	800db02 <_puts_r+0x42>
 800db76:	4622      	mov	r2, r4
 800db78:	4628      	mov	r0, r5
 800db7a:	f000 f85f 	bl	800dc3c <__swbuf_r>
 800db7e:	3001      	adds	r0, #1
 800db80:	d1bf      	bne.n	800db02 <_puts_r+0x42>
 800db82:	e7df      	b.n	800db44 <_puts_r+0x84>
 800db84:	6823      	ldr	r3, [r4, #0]
 800db86:	250a      	movs	r5, #10
 800db88:	1c5a      	adds	r2, r3, #1
 800db8a:	6022      	str	r2, [r4, #0]
 800db8c:	701d      	strb	r5, [r3, #0]
 800db8e:	e7db      	b.n	800db48 <_puts_r+0x88>
 800db90:	08016120 	.word	0x08016120
 800db94:	08016140 	.word	0x08016140
 800db98:	08016100 	.word	0x08016100

0800db9c <puts>:
 800db9c:	4b02      	ldr	r3, [pc, #8]	; (800dba8 <puts+0xc>)
 800db9e:	4601      	mov	r1, r0
 800dba0:	6818      	ldr	r0, [r3, #0]
 800dba2:	f7ff bf8d 	b.w	800dac0 <_puts_r>
 800dba6:	bf00      	nop
 800dba8:	20000048 	.word	0x20000048

0800dbac <rand>:
 800dbac:	4b17      	ldr	r3, [pc, #92]	; (800dc0c <rand+0x60>)
 800dbae:	b510      	push	{r4, lr}
 800dbb0:	681c      	ldr	r4, [r3, #0]
 800dbb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dbb4:	b9b3      	cbnz	r3, 800dbe4 <rand+0x38>
 800dbb6:	2018      	movs	r0, #24
 800dbb8:	f000 fb4e 	bl	800e258 <malloc>
 800dbbc:	63a0      	str	r0, [r4, #56]	; 0x38
 800dbbe:	b928      	cbnz	r0, 800dbcc <rand+0x20>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	4b13      	ldr	r3, [pc, #76]	; (800dc10 <rand+0x64>)
 800dbc4:	4813      	ldr	r0, [pc, #76]	; (800dc14 <rand+0x68>)
 800dbc6:	214e      	movs	r1, #78	; 0x4e
 800dbc8:	f000 f8f8 	bl	800ddbc <__assert_func>
 800dbcc:	4a12      	ldr	r2, [pc, #72]	; (800dc18 <rand+0x6c>)
 800dbce:	4b13      	ldr	r3, [pc, #76]	; (800dc1c <rand+0x70>)
 800dbd0:	e9c0 2300 	strd	r2, r3, [r0]
 800dbd4:	4b12      	ldr	r3, [pc, #72]	; (800dc20 <rand+0x74>)
 800dbd6:	6083      	str	r3, [r0, #8]
 800dbd8:	230b      	movs	r3, #11
 800dbda:	8183      	strh	r3, [r0, #12]
 800dbdc:	2201      	movs	r2, #1
 800dbde:	2300      	movs	r3, #0
 800dbe0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800dbe4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dbe6:	480f      	ldr	r0, [pc, #60]	; (800dc24 <rand+0x78>)
 800dbe8:	690a      	ldr	r2, [r1, #16]
 800dbea:	694b      	ldr	r3, [r1, #20]
 800dbec:	4c0e      	ldr	r4, [pc, #56]	; (800dc28 <rand+0x7c>)
 800dbee:	4350      	muls	r0, r2
 800dbf0:	fb04 0003 	mla	r0, r4, r3, r0
 800dbf4:	fba2 3404 	umull	r3, r4, r2, r4
 800dbf8:	1c5a      	adds	r2, r3, #1
 800dbfa:	4404      	add	r4, r0
 800dbfc:	f144 0000 	adc.w	r0, r4, #0
 800dc00:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800dc04:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800dc08:	bd10      	pop	{r4, pc}
 800dc0a:	bf00      	nop
 800dc0c:	20000048 	.word	0x20000048
 800dc10:	0801604c 	.word	0x0801604c
 800dc14:	08016063 	.word	0x08016063
 800dc18:	abcd330e 	.word	0xabcd330e
 800dc1c:	e66d1234 	.word	0xe66d1234
 800dc20:	0005deec 	.word	0x0005deec
 800dc24:	5851f42d 	.word	0x5851f42d
 800dc28:	4c957f2d 	.word	0x4c957f2d

0800dc2c <strcpy>:
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc32:	f803 2b01 	strb.w	r2, [r3], #1
 800dc36:	2a00      	cmp	r2, #0
 800dc38:	d1f9      	bne.n	800dc2e <strcpy+0x2>
 800dc3a:	4770      	bx	lr

0800dc3c <__swbuf_r>:
 800dc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc3e:	460e      	mov	r6, r1
 800dc40:	4614      	mov	r4, r2
 800dc42:	4605      	mov	r5, r0
 800dc44:	b118      	cbz	r0, 800dc4e <__swbuf_r+0x12>
 800dc46:	6983      	ldr	r3, [r0, #24]
 800dc48:	b90b      	cbnz	r3, 800dc4e <__swbuf_r+0x12>
 800dc4a:	f000 f9ef 	bl	800e02c <__sinit>
 800dc4e:	4b21      	ldr	r3, [pc, #132]	; (800dcd4 <__swbuf_r+0x98>)
 800dc50:	429c      	cmp	r4, r3
 800dc52:	d12b      	bne.n	800dcac <__swbuf_r+0x70>
 800dc54:	686c      	ldr	r4, [r5, #4]
 800dc56:	69a3      	ldr	r3, [r4, #24]
 800dc58:	60a3      	str	r3, [r4, #8]
 800dc5a:	89a3      	ldrh	r3, [r4, #12]
 800dc5c:	071a      	lsls	r2, r3, #28
 800dc5e:	d52f      	bpl.n	800dcc0 <__swbuf_r+0x84>
 800dc60:	6923      	ldr	r3, [r4, #16]
 800dc62:	b36b      	cbz	r3, 800dcc0 <__swbuf_r+0x84>
 800dc64:	6923      	ldr	r3, [r4, #16]
 800dc66:	6820      	ldr	r0, [r4, #0]
 800dc68:	1ac0      	subs	r0, r0, r3
 800dc6a:	6963      	ldr	r3, [r4, #20]
 800dc6c:	b2f6      	uxtb	r6, r6
 800dc6e:	4283      	cmp	r3, r0
 800dc70:	4637      	mov	r7, r6
 800dc72:	dc04      	bgt.n	800dc7e <__swbuf_r+0x42>
 800dc74:	4621      	mov	r1, r4
 800dc76:	4628      	mov	r0, r5
 800dc78:	f000 f944 	bl	800df04 <_fflush_r>
 800dc7c:	bb30      	cbnz	r0, 800dccc <__swbuf_r+0x90>
 800dc7e:	68a3      	ldr	r3, [r4, #8]
 800dc80:	3b01      	subs	r3, #1
 800dc82:	60a3      	str	r3, [r4, #8]
 800dc84:	6823      	ldr	r3, [r4, #0]
 800dc86:	1c5a      	adds	r2, r3, #1
 800dc88:	6022      	str	r2, [r4, #0]
 800dc8a:	701e      	strb	r6, [r3, #0]
 800dc8c:	6963      	ldr	r3, [r4, #20]
 800dc8e:	3001      	adds	r0, #1
 800dc90:	4283      	cmp	r3, r0
 800dc92:	d004      	beq.n	800dc9e <__swbuf_r+0x62>
 800dc94:	89a3      	ldrh	r3, [r4, #12]
 800dc96:	07db      	lsls	r3, r3, #31
 800dc98:	d506      	bpl.n	800dca8 <__swbuf_r+0x6c>
 800dc9a:	2e0a      	cmp	r6, #10
 800dc9c:	d104      	bne.n	800dca8 <__swbuf_r+0x6c>
 800dc9e:	4621      	mov	r1, r4
 800dca0:	4628      	mov	r0, r5
 800dca2:	f000 f92f 	bl	800df04 <_fflush_r>
 800dca6:	b988      	cbnz	r0, 800dccc <__swbuf_r+0x90>
 800dca8:	4638      	mov	r0, r7
 800dcaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcac:	4b0a      	ldr	r3, [pc, #40]	; (800dcd8 <__swbuf_r+0x9c>)
 800dcae:	429c      	cmp	r4, r3
 800dcb0:	d101      	bne.n	800dcb6 <__swbuf_r+0x7a>
 800dcb2:	68ac      	ldr	r4, [r5, #8]
 800dcb4:	e7cf      	b.n	800dc56 <__swbuf_r+0x1a>
 800dcb6:	4b09      	ldr	r3, [pc, #36]	; (800dcdc <__swbuf_r+0xa0>)
 800dcb8:	429c      	cmp	r4, r3
 800dcba:	bf08      	it	eq
 800dcbc:	68ec      	ldreq	r4, [r5, #12]
 800dcbe:	e7ca      	b.n	800dc56 <__swbuf_r+0x1a>
 800dcc0:	4621      	mov	r1, r4
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	f000 f80c 	bl	800dce0 <__swsetup_r>
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	d0cb      	beq.n	800dc64 <__swbuf_r+0x28>
 800dccc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dcd0:	e7ea      	b.n	800dca8 <__swbuf_r+0x6c>
 800dcd2:	bf00      	nop
 800dcd4:	08016120 	.word	0x08016120
 800dcd8:	08016140 	.word	0x08016140
 800dcdc:	08016100 	.word	0x08016100

0800dce0 <__swsetup_r>:
 800dce0:	4b32      	ldr	r3, [pc, #200]	; (800ddac <__swsetup_r+0xcc>)
 800dce2:	b570      	push	{r4, r5, r6, lr}
 800dce4:	681d      	ldr	r5, [r3, #0]
 800dce6:	4606      	mov	r6, r0
 800dce8:	460c      	mov	r4, r1
 800dcea:	b125      	cbz	r5, 800dcf6 <__swsetup_r+0x16>
 800dcec:	69ab      	ldr	r3, [r5, #24]
 800dcee:	b913      	cbnz	r3, 800dcf6 <__swsetup_r+0x16>
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	f000 f99b 	bl	800e02c <__sinit>
 800dcf6:	4b2e      	ldr	r3, [pc, #184]	; (800ddb0 <__swsetup_r+0xd0>)
 800dcf8:	429c      	cmp	r4, r3
 800dcfa:	d10f      	bne.n	800dd1c <__swsetup_r+0x3c>
 800dcfc:	686c      	ldr	r4, [r5, #4]
 800dcfe:	89a3      	ldrh	r3, [r4, #12]
 800dd00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd04:	0719      	lsls	r1, r3, #28
 800dd06:	d42c      	bmi.n	800dd62 <__swsetup_r+0x82>
 800dd08:	06dd      	lsls	r5, r3, #27
 800dd0a:	d411      	bmi.n	800dd30 <__swsetup_r+0x50>
 800dd0c:	2309      	movs	r3, #9
 800dd0e:	6033      	str	r3, [r6, #0]
 800dd10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dd14:	81a3      	strh	r3, [r4, #12]
 800dd16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd1a:	e03e      	b.n	800dd9a <__swsetup_r+0xba>
 800dd1c:	4b25      	ldr	r3, [pc, #148]	; (800ddb4 <__swsetup_r+0xd4>)
 800dd1e:	429c      	cmp	r4, r3
 800dd20:	d101      	bne.n	800dd26 <__swsetup_r+0x46>
 800dd22:	68ac      	ldr	r4, [r5, #8]
 800dd24:	e7eb      	b.n	800dcfe <__swsetup_r+0x1e>
 800dd26:	4b24      	ldr	r3, [pc, #144]	; (800ddb8 <__swsetup_r+0xd8>)
 800dd28:	429c      	cmp	r4, r3
 800dd2a:	bf08      	it	eq
 800dd2c:	68ec      	ldreq	r4, [r5, #12]
 800dd2e:	e7e6      	b.n	800dcfe <__swsetup_r+0x1e>
 800dd30:	0758      	lsls	r0, r3, #29
 800dd32:	d512      	bpl.n	800dd5a <__swsetup_r+0x7a>
 800dd34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd36:	b141      	cbz	r1, 800dd4a <__swsetup_r+0x6a>
 800dd38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd3c:	4299      	cmp	r1, r3
 800dd3e:	d002      	beq.n	800dd46 <__swsetup_r+0x66>
 800dd40:	4630      	mov	r0, r6
 800dd42:	f000 fa91 	bl	800e268 <_free_r>
 800dd46:	2300      	movs	r3, #0
 800dd48:	6363      	str	r3, [r4, #52]	; 0x34
 800dd4a:	89a3      	ldrh	r3, [r4, #12]
 800dd4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd50:	81a3      	strh	r3, [r4, #12]
 800dd52:	2300      	movs	r3, #0
 800dd54:	6063      	str	r3, [r4, #4]
 800dd56:	6923      	ldr	r3, [r4, #16]
 800dd58:	6023      	str	r3, [r4, #0]
 800dd5a:	89a3      	ldrh	r3, [r4, #12]
 800dd5c:	f043 0308 	orr.w	r3, r3, #8
 800dd60:	81a3      	strh	r3, [r4, #12]
 800dd62:	6923      	ldr	r3, [r4, #16]
 800dd64:	b94b      	cbnz	r3, 800dd7a <__swsetup_r+0x9a>
 800dd66:	89a3      	ldrh	r3, [r4, #12]
 800dd68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd70:	d003      	beq.n	800dd7a <__swsetup_r+0x9a>
 800dd72:	4621      	mov	r1, r4
 800dd74:	4630      	mov	r0, r6
 800dd76:	f000 fa2f 	bl	800e1d8 <__smakebuf_r>
 800dd7a:	89a0      	ldrh	r0, [r4, #12]
 800dd7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd80:	f010 0301 	ands.w	r3, r0, #1
 800dd84:	d00a      	beq.n	800dd9c <__swsetup_r+0xbc>
 800dd86:	2300      	movs	r3, #0
 800dd88:	60a3      	str	r3, [r4, #8]
 800dd8a:	6963      	ldr	r3, [r4, #20]
 800dd8c:	425b      	negs	r3, r3
 800dd8e:	61a3      	str	r3, [r4, #24]
 800dd90:	6923      	ldr	r3, [r4, #16]
 800dd92:	b943      	cbnz	r3, 800dda6 <__swsetup_r+0xc6>
 800dd94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd98:	d1ba      	bne.n	800dd10 <__swsetup_r+0x30>
 800dd9a:	bd70      	pop	{r4, r5, r6, pc}
 800dd9c:	0781      	lsls	r1, r0, #30
 800dd9e:	bf58      	it	pl
 800dda0:	6963      	ldrpl	r3, [r4, #20]
 800dda2:	60a3      	str	r3, [r4, #8]
 800dda4:	e7f4      	b.n	800dd90 <__swsetup_r+0xb0>
 800dda6:	2000      	movs	r0, #0
 800dda8:	e7f7      	b.n	800dd9a <__swsetup_r+0xba>
 800ddaa:	bf00      	nop
 800ddac:	20000048 	.word	0x20000048
 800ddb0:	08016120 	.word	0x08016120
 800ddb4:	08016140 	.word	0x08016140
 800ddb8:	08016100 	.word	0x08016100

0800ddbc <__assert_func>:
 800ddbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddbe:	4614      	mov	r4, r2
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	4b09      	ldr	r3, [pc, #36]	; (800dde8 <__assert_func+0x2c>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4605      	mov	r5, r0
 800ddc8:	68d8      	ldr	r0, [r3, #12]
 800ddca:	b14c      	cbz	r4, 800dde0 <__assert_func+0x24>
 800ddcc:	4b07      	ldr	r3, [pc, #28]	; (800ddec <__assert_func+0x30>)
 800ddce:	9100      	str	r1, [sp, #0]
 800ddd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddd4:	4906      	ldr	r1, [pc, #24]	; (800ddf0 <__assert_func+0x34>)
 800ddd6:	462b      	mov	r3, r5
 800ddd8:	f000 f9a6 	bl	800e128 <fiprintf>
 800dddc:	f000 fe42 	bl	800ea64 <abort>
 800dde0:	4b04      	ldr	r3, [pc, #16]	; (800ddf4 <__assert_func+0x38>)
 800dde2:	461c      	mov	r4, r3
 800dde4:	e7f3      	b.n	800ddce <__assert_func+0x12>
 800dde6:	bf00      	nop
 800dde8:	20000048 	.word	0x20000048
 800ddec:	080160c2 	.word	0x080160c2
 800ddf0:	080160cf 	.word	0x080160cf
 800ddf4:	08012da1 	.word	0x08012da1

0800ddf8 <__sflush_r>:
 800ddf8:	898a      	ldrh	r2, [r1, #12]
 800ddfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddfe:	4605      	mov	r5, r0
 800de00:	0710      	lsls	r0, r2, #28
 800de02:	460c      	mov	r4, r1
 800de04:	d458      	bmi.n	800deb8 <__sflush_r+0xc0>
 800de06:	684b      	ldr	r3, [r1, #4]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	dc05      	bgt.n	800de18 <__sflush_r+0x20>
 800de0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de0e:	2b00      	cmp	r3, #0
 800de10:	dc02      	bgt.n	800de18 <__sflush_r+0x20>
 800de12:	2000      	movs	r0, #0
 800de14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de1a:	2e00      	cmp	r6, #0
 800de1c:	d0f9      	beq.n	800de12 <__sflush_r+0x1a>
 800de1e:	2300      	movs	r3, #0
 800de20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de24:	682f      	ldr	r7, [r5, #0]
 800de26:	602b      	str	r3, [r5, #0]
 800de28:	d032      	beq.n	800de90 <__sflush_r+0x98>
 800de2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de2c:	89a3      	ldrh	r3, [r4, #12]
 800de2e:	075a      	lsls	r2, r3, #29
 800de30:	d505      	bpl.n	800de3e <__sflush_r+0x46>
 800de32:	6863      	ldr	r3, [r4, #4]
 800de34:	1ac0      	subs	r0, r0, r3
 800de36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de38:	b10b      	cbz	r3, 800de3e <__sflush_r+0x46>
 800de3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de3c:	1ac0      	subs	r0, r0, r3
 800de3e:	2300      	movs	r3, #0
 800de40:	4602      	mov	r2, r0
 800de42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de44:	6a21      	ldr	r1, [r4, #32]
 800de46:	4628      	mov	r0, r5
 800de48:	47b0      	blx	r6
 800de4a:	1c43      	adds	r3, r0, #1
 800de4c:	89a3      	ldrh	r3, [r4, #12]
 800de4e:	d106      	bne.n	800de5e <__sflush_r+0x66>
 800de50:	6829      	ldr	r1, [r5, #0]
 800de52:	291d      	cmp	r1, #29
 800de54:	d82c      	bhi.n	800deb0 <__sflush_r+0xb8>
 800de56:	4a2a      	ldr	r2, [pc, #168]	; (800df00 <__sflush_r+0x108>)
 800de58:	40ca      	lsrs	r2, r1
 800de5a:	07d6      	lsls	r6, r2, #31
 800de5c:	d528      	bpl.n	800deb0 <__sflush_r+0xb8>
 800de5e:	2200      	movs	r2, #0
 800de60:	6062      	str	r2, [r4, #4]
 800de62:	04d9      	lsls	r1, r3, #19
 800de64:	6922      	ldr	r2, [r4, #16]
 800de66:	6022      	str	r2, [r4, #0]
 800de68:	d504      	bpl.n	800de74 <__sflush_r+0x7c>
 800de6a:	1c42      	adds	r2, r0, #1
 800de6c:	d101      	bne.n	800de72 <__sflush_r+0x7a>
 800de6e:	682b      	ldr	r3, [r5, #0]
 800de70:	b903      	cbnz	r3, 800de74 <__sflush_r+0x7c>
 800de72:	6560      	str	r0, [r4, #84]	; 0x54
 800de74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de76:	602f      	str	r7, [r5, #0]
 800de78:	2900      	cmp	r1, #0
 800de7a:	d0ca      	beq.n	800de12 <__sflush_r+0x1a>
 800de7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de80:	4299      	cmp	r1, r3
 800de82:	d002      	beq.n	800de8a <__sflush_r+0x92>
 800de84:	4628      	mov	r0, r5
 800de86:	f000 f9ef 	bl	800e268 <_free_r>
 800de8a:	2000      	movs	r0, #0
 800de8c:	6360      	str	r0, [r4, #52]	; 0x34
 800de8e:	e7c1      	b.n	800de14 <__sflush_r+0x1c>
 800de90:	6a21      	ldr	r1, [r4, #32]
 800de92:	2301      	movs	r3, #1
 800de94:	4628      	mov	r0, r5
 800de96:	47b0      	blx	r6
 800de98:	1c41      	adds	r1, r0, #1
 800de9a:	d1c7      	bne.n	800de2c <__sflush_r+0x34>
 800de9c:	682b      	ldr	r3, [r5, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d0c4      	beq.n	800de2c <__sflush_r+0x34>
 800dea2:	2b1d      	cmp	r3, #29
 800dea4:	d001      	beq.n	800deaa <__sflush_r+0xb2>
 800dea6:	2b16      	cmp	r3, #22
 800dea8:	d101      	bne.n	800deae <__sflush_r+0xb6>
 800deaa:	602f      	str	r7, [r5, #0]
 800deac:	e7b1      	b.n	800de12 <__sflush_r+0x1a>
 800deae:	89a3      	ldrh	r3, [r4, #12]
 800deb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800deb4:	81a3      	strh	r3, [r4, #12]
 800deb6:	e7ad      	b.n	800de14 <__sflush_r+0x1c>
 800deb8:	690f      	ldr	r7, [r1, #16]
 800deba:	2f00      	cmp	r7, #0
 800debc:	d0a9      	beq.n	800de12 <__sflush_r+0x1a>
 800debe:	0793      	lsls	r3, r2, #30
 800dec0:	680e      	ldr	r6, [r1, #0]
 800dec2:	bf08      	it	eq
 800dec4:	694b      	ldreq	r3, [r1, #20]
 800dec6:	600f      	str	r7, [r1, #0]
 800dec8:	bf18      	it	ne
 800deca:	2300      	movne	r3, #0
 800decc:	eba6 0807 	sub.w	r8, r6, r7
 800ded0:	608b      	str	r3, [r1, #8]
 800ded2:	f1b8 0f00 	cmp.w	r8, #0
 800ded6:	dd9c      	ble.n	800de12 <__sflush_r+0x1a>
 800ded8:	6a21      	ldr	r1, [r4, #32]
 800deda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dedc:	4643      	mov	r3, r8
 800dede:	463a      	mov	r2, r7
 800dee0:	4628      	mov	r0, r5
 800dee2:	47b0      	blx	r6
 800dee4:	2800      	cmp	r0, #0
 800dee6:	dc06      	bgt.n	800def6 <__sflush_r+0xfe>
 800dee8:	89a3      	ldrh	r3, [r4, #12]
 800deea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800deee:	81a3      	strh	r3, [r4, #12]
 800def0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800def4:	e78e      	b.n	800de14 <__sflush_r+0x1c>
 800def6:	4407      	add	r7, r0
 800def8:	eba8 0800 	sub.w	r8, r8, r0
 800defc:	e7e9      	b.n	800ded2 <__sflush_r+0xda>
 800defe:	bf00      	nop
 800df00:	20400001 	.word	0x20400001

0800df04 <_fflush_r>:
 800df04:	b538      	push	{r3, r4, r5, lr}
 800df06:	690b      	ldr	r3, [r1, #16]
 800df08:	4605      	mov	r5, r0
 800df0a:	460c      	mov	r4, r1
 800df0c:	b913      	cbnz	r3, 800df14 <_fflush_r+0x10>
 800df0e:	2500      	movs	r5, #0
 800df10:	4628      	mov	r0, r5
 800df12:	bd38      	pop	{r3, r4, r5, pc}
 800df14:	b118      	cbz	r0, 800df1e <_fflush_r+0x1a>
 800df16:	6983      	ldr	r3, [r0, #24]
 800df18:	b90b      	cbnz	r3, 800df1e <_fflush_r+0x1a>
 800df1a:	f000 f887 	bl	800e02c <__sinit>
 800df1e:	4b14      	ldr	r3, [pc, #80]	; (800df70 <_fflush_r+0x6c>)
 800df20:	429c      	cmp	r4, r3
 800df22:	d11b      	bne.n	800df5c <_fflush_r+0x58>
 800df24:	686c      	ldr	r4, [r5, #4]
 800df26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d0ef      	beq.n	800df0e <_fflush_r+0xa>
 800df2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df30:	07d0      	lsls	r0, r2, #31
 800df32:	d404      	bmi.n	800df3e <_fflush_r+0x3a>
 800df34:	0599      	lsls	r1, r3, #22
 800df36:	d402      	bmi.n	800df3e <_fflush_r+0x3a>
 800df38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df3a:	f000 f927 	bl	800e18c <__retarget_lock_acquire_recursive>
 800df3e:	4628      	mov	r0, r5
 800df40:	4621      	mov	r1, r4
 800df42:	f7ff ff59 	bl	800ddf8 <__sflush_r>
 800df46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df48:	07da      	lsls	r2, r3, #31
 800df4a:	4605      	mov	r5, r0
 800df4c:	d4e0      	bmi.n	800df10 <_fflush_r+0xc>
 800df4e:	89a3      	ldrh	r3, [r4, #12]
 800df50:	059b      	lsls	r3, r3, #22
 800df52:	d4dd      	bmi.n	800df10 <_fflush_r+0xc>
 800df54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df56:	f000 f91a 	bl	800e18e <__retarget_lock_release_recursive>
 800df5a:	e7d9      	b.n	800df10 <_fflush_r+0xc>
 800df5c:	4b05      	ldr	r3, [pc, #20]	; (800df74 <_fflush_r+0x70>)
 800df5e:	429c      	cmp	r4, r3
 800df60:	d101      	bne.n	800df66 <_fflush_r+0x62>
 800df62:	68ac      	ldr	r4, [r5, #8]
 800df64:	e7df      	b.n	800df26 <_fflush_r+0x22>
 800df66:	4b04      	ldr	r3, [pc, #16]	; (800df78 <_fflush_r+0x74>)
 800df68:	429c      	cmp	r4, r3
 800df6a:	bf08      	it	eq
 800df6c:	68ec      	ldreq	r4, [r5, #12]
 800df6e:	e7da      	b.n	800df26 <_fflush_r+0x22>
 800df70:	08016120 	.word	0x08016120
 800df74:	08016140 	.word	0x08016140
 800df78:	08016100 	.word	0x08016100

0800df7c <std>:
 800df7c:	2300      	movs	r3, #0
 800df7e:	b510      	push	{r4, lr}
 800df80:	4604      	mov	r4, r0
 800df82:	e9c0 3300 	strd	r3, r3, [r0]
 800df86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df8a:	6083      	str	r3, [r0, #8]
 800df8c:	8181      	strh	r1, [r0, #12]
 800df8e:	6643      	str	r3, [r0, #100]	; 0x64
 800df90:	81c2      	strh	r2, [r0, #14]
 800df92:	6183      	str	r3, [r0, #24]
 800df94:	4619      	mov	r1, r3
 800df96:	2208      	movs	r2, #8
 800df98:	305c      	adds	r0, #92	; 0x5c
 800df9a:	f7ff fd71 	bl	800da80 <memset>
 800df9e:	4b05      	ldr	r3, [pc, #20]	; (800dfb4 <std+0x38>)
 800dfa0:	6263      	str	r3, [r4, #36]	; 0x24
 800dfa2:	4b05      	ldr	r3, [pc, #20]	; (800dfb8 <std+0x3c>)
 800dfa4:	62a3      	str	r3, [r4, #40]	; 0x28
 800dfa6:	4b05      	ldr	r3, [pc, #20]	; (800dfbc <std+0x40>)
 800dfa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dfaa:	4b05      	ldr	r3, [pc, #20]	; (800dfc0 <std+0x44>)
 800dfac:	6224      	str	r4, [r4, #32]
 800dfae:	6323      	str	r3, [r4, #48]	; 0x30
 800dfb0:	bd10      	pop	{r4, pc}
 800dfb2:	bf00      	nop
 800dfb4:	0800e9b9 	.word	0x0800e9b9
 800dfb8:	0800e9db 	.word	0x0800e9db
 800dfbc:	0800ea13 	.word	0x0800ea13
 800dfc0:	0800ea37 	.word	0x0800ea37

0800dfc4 <_cleanup_r>:
 800dfc4:	4901      	ldr	r1, [pc, #4]	; (800dfcc <_cleanup_r+0x8>)
 800dfc6:	f000 b8c1 	b.w	800e14c <_fwalk_reent>
 800dfca:	bf00      	nop
 800dfcc:	0800df05 	.word	0x0800df05

0800dfd0 <__sfmoreglue>:
 800dfd0:	b570      	push	{r4, r5, r6, lr}
 800dfd2:	1e4a      	subs	r2, r1, #1
 800dfd4:	2568      	movs	r5, #104	; 0x68
 800dfd6:	4355      	muls	r5, r2
 800dfd8:	460e      	mov	r6, r1
 800dfda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dfde:	f000 f993 	bl	800e308 <_malloc_r>
 800dfe2:	4604      	mov	r4, r0
 800dfe4:	b140      	cbz	r0, 800dff8 <__sfmoreglue+0x28>
 800dfe6:	2100      	movs	r1, #0
 800dfe8:	e9c0 1600 	strd	r1, r6, [r0]
 800dfec:	300c      	adds	r0, #12
 800dfee:	60a0      	str	r0, [r4, #8]
 800dff0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dff4:	f7ff fd44 	bl	800da80 <memset>
 800dff8:	4620      	mov	r0, r4
 800dffa:	bd70      	pop	{r4, r5, r6, pc}

0800dffc <__sfp_lock_acquire>:
 800dffc:	4801      	ldr	r0, [pc, #4]	; (800e004 <__sfp_lock_acquire+0x8>)
 800dffe:	f000 b8c5 	b.w	800e18c <__retarget_lock_acquire_recursive>
 800e002:	bf00      	nop
 800e004:	20010d3c 	.word	0x20010d3c

0800e008 <__sfp_lock_release>:
 800e008:	4801      	ldr	r0, [pc, #4]	; (800e010 <__sfp_lock_release+0x8>)
 800e00a:	f000 b8c0 	b.w	800e18e <__retarget_lock_release_recursive>
 800e00e:	bf00      	nop
 800e010:	20010d3c 	.word	0x20010d3c

0800e014 <__sinit_lock_acquire>:
 800e014:	4801      	ldr	r0, [pc, #4]	; (800e01c <__sinit_lock_acquire+0x8>)
 800e016:	f000 b8b9 	b.w	800e18c <__retarget_lock_acquire_recursive>
 800e01a:	bf00      	nop
 800e01c:	20010d37 	.word	0x20010d37

0800e020 <__sinit_lock_release>:
 800e020:	4801      	ldr	r0, [pc, #4]	; (800e028 <__sinit_lock_release+0x8>)
 800e022:	f000 b8b4 	b.w	800e18e <__retarget_lock_release_recursive>
 800e026:	bf00      	nop
 800e028:	20010d37 	.word	0x20010d37

0800e02c <__sinit>:
 800e02c:	b510      	push	{r4, lr}
 800e02e:	4604      	mov	r4, r0
 800e030:	f7ff fff0 	bl	800e014 <__sinit_lock_acquire>
 800e034:	69a3      	ldr	r3, [r4, #24]
 800e036:	b11b      	cbz	r3, 800e040 <__sinit+0x14>
 800e038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e03c:	f7ff bff0 	b.w	800e020 <__sinit_lock_release>
 800e040:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e044:	6523      	str	r3, [r4, #80]	; 0x50
 800e046:	4b13      	ldr	r3, [pc, #76]	; (800e094 <__sinit+0x68>)
 800e048:	4a13      	ldr	r2, [pc, #76]	; (800e098 <__sinit+0x6c>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e04e:	42a3      	cmp	r3, r4
 800e050:	bf04      	itt	eq
 800e052:	2301      	moveq	r3, #1
 800e054:	61a3      	streq	r3, [r4, #24]
 800e056:	4620      	mov	r0, r4
 800e058:	f000 f820 	bl	800e09c <__sfp>
 800e05c:	6060      	str	r0, [r4, #4]
 800e05e:	4620      	mov	r0, r4
 800e060:	f000 f81c 	bl	800e09c <__sfp>
 800e064:	60a0      	str	r0, [r4, #8]
 800e066:	4620      	mov	r0, r4
 800e068:	f000 f818 	bl	800e09c <__sfp>
 800e06c:	2200      	movs	r2, #0
 800e06e:	60e0      	str	r0, [r4, #12]
 800e070:	2104      	movs	r1, #4
 800e072:	6860      	ldr	r0, [r4, #4]
 800e074:	f7ff ff82 	bl	800df7c <std>
 800e078:	68a0      	ldr	r0, [r4, #8]
 800e07a:	2201      	movs	r2, #1
 800e07c:	2109      	movs	r1, #9
 800e07e:	f7ff ff7d 	bl	800df7c <std>
 800e082:	68e0      	ldr	r0, [r4, #12]
 800e084:	2202      	movs	r2, #2
 800e086:	2112      	movs	r1, #18
 800e088:	f7ff ff78 	bl	800df7c <std>
 800e08c:	2301      	movs	r3, #1
 800e08e:	61a3      	str	r3, [r4, #24]
 800e090:	e7d2      	b.n	800e038 <__sinit+0xc>
 800e092:	bf00      	nop
 800e094:	08016048 	.word	0x08016048
 800e098:	0800dfc5 	.word	0x0800dfc5

0800e09c <__sfp>:
 800e09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e09e:	4607      	mov	r7, r0
 800e0a0:	f7ff ffac 	bl	800dffc <__sfp_lock_acquire>
 800e0a4:	4b1e      	ldr	r3, [pc, #120]	; (800e120 <__sfp+0x84>)
 800e0a6:	681e      	ldr	r6, [r3, #0]
 800e0a8:	69b3      	ldr	r3, [r6, #24]
 800e0aa:	b913      	cbnz	r3, 800e0b2 <__sfp+0x16>
 800e0ac:	4630      	mov	r0, r6
 800e0ae:	f7ff ffbd 	bl	800e02c <__sinit>
 800e0b2:	3648      	adds	r6, #72	; 0x48
 800e0b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	d503      	bpl.n	800e0c4 <__sfp+0x28>
 800e0bc:	6833      	ldr	r3, [r6, #0]
 800e0be:	b30b      	cbz	r3, 800e104 <__sfp+0x68>
 800e0c0:	6836      	ldr	r6, [r6, #0]
 800e0c2:	e7f7      	b.n	800e0b4 <__sfp+0x18>
 800e0c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e0c8:	b9d5      	cbnz	r5, 800e100 <__sfp+0x64>
 800e0ca:	4b16      	ldr	r3, [pc, #88]	; (800e124 <__sfp+0x88>)
 800e0cc:	60e3      	str	r3, [r4, #12]
 800e0ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e0d2:	6665      	str	r5, [r4, #100]	; 0x64
 800e0d4:	f000 f859 	bl	800e18a <__retarget_lock_init_recursive>
 800e0d8:	f7ff ff96 	bl	800e008 <__sfp_lock_release>
 800e0dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e0e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e0e4:	6025      	str	r5, [r4, #0]
 800e0e6:	61a5      	str	r5, [r4, #24]
 800e0e8:	2208      	movs	r2, #8
 800e0ea:	4629      	mov	r1, r5
 800e0ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e0f0:	f7ff fcc6 	bl	800da80 <memset>
 800e0f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e0f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e100:	3468      	adds	r4, #104	; 0x68
 800e102:	e7d9      	b.n	800e0b8 <__sfp+0x1c>
 800e104:	2104      	movs	r1, #4
 800e106:	4638      	mov	r0, r7
 800e108:	f7ff ff62 	bl	800dfd0 <__sfmoreglue>
 800e10c:	4604      	mov	r4, r0
 800e10e:	6030      	str	r0, [r6, #0]
 800e110:	2800      	cmp	r0, #0
 800e112:	d1d5      	bne.n	800e0c0 <__sfp+0x24>
 800e114:	f7ff ff78 	bl	800e008 <__sfp_lock_release>
 800e118:	230c      	movs	r3, #12
 800e11a:	603b      	str	r3, [r7, #0]
 800e11c:	e7ee      	b.n	800e0fc <__sfp+0x60>
 800e11e:	bf00      	nop
 800e120:	08016048 	.word	0x08016048
 800e124:	ffff0001 	.word	0xffff0001

0800e128 <fiprintf>:
 800e128:	b40e      	push	{r1, r2, r3}
 800e12a:	b503      	push	{r0, r1, lr}
 800e12c:	4601      	mov	r1, r0
 800e12e:	ab03      	add	r3, sp, #12
 800e130:	4805      	ldr	r0, [pc, #20]	; (800e148 <fiprintf+0x20>)
 800e132:	f853 2b04 	ldr.w	r2, [r3], #4
 800e136:	6800      	ldr	r0, [r0, #0]
 800e138:	9301      	str	r3, [sp, #4]
 800e13a:	f000 f969 	bl	800e410 <_vfiprintf_r>
 800e13e:	b002      	add	sp, #8
 800e140:	f85d eb04 	ldr.w	lr, [sp], #4
 800e144:	b003      	add	sp, #12
 800e146:	4770      	bx	lr
 800e148:	20000048 	.word	0x20000048

0800e14c <_fwalk_reent>:
 800e14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e150:	4606      	mov	r6, r0
 800e152:	4688      	mov	r8, r1
 800e154:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e158:	2700      	movs	r7, #0
 800e15a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e15e:	f1b9 0901 	subs.w	r9, r9, #1
 800e162:	d505      	bpl.n	800e170 <_fwalk_reent+0x24>
 800e164:	6824      	ldr	r4, [r4, #0]
 800e166:	2c00      	cmp	r4, #0
 800e168:	d1f7      	bne.n	800e15a <_fwalk_reent+0xe>
 800e16a:	4638      	mov	r0, r7
 800e16c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e170:	89ab      	ldrh	r3, [r5, #12]
 800e172:	2b01      	cmp	r3, #1
 800e174:	d907      	bls.n	800e186 <_fwalk_reent+0x3a>
 800e176:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e17a:	3301      	adds	r3, #1
 800e17c:	d003      	beq.n	800e186 <_fwalk_reent+0x3a>
 800e17e:	4629      	mov	r1, r5
 800e180:	4630      	mov	r0, r6
 800e182:	47c0      	blx	r8
 800e184:	4307      	orrs	r7, r0
 800e186:	3568      	adds	r5, #104	; 0x68
 800e188:	e7e9      	b.n	800e15e <_fwalk_reent+0x12>

0800e18a <__retarget_lock_init_recursive>:
 800e18a:	4770      	bx	lr

0800e18c <__retarget_lock_acquire_recursive>:
 800e18c:	4770      	bx	lr

0800e18e <__retarget_lock_release_recursive>:
 800e18e:	4770      	bx	lr

0800e190 <__swhatbuf_r>:
 800e190:	b570      	push	{r4, r5, r6, lr}
 800e192:	460e      	mov	r6, r1
 800e194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e198:	2900      	cmp	r1, #0
 800e19a:	b096      	sub	sp, #88	; 0x58
 800e19c:	4614      	mov	r4, r2
 800e19e:	461d      	mov	r5, r3
 800e1a0:	da07      	bge.n	800e1b2 <__swhatbuf_r+0x22>
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	602b      	str	r3, [r5, #0]
 800e1a6:	89b3      	ldrh	r3, [r6, #12]
 800e1a8:	061a      	lsls	r2, r3, #24
 800e1aa:	d410      	bmi.n	800e1ce <__swhatbuf_r+0x3e>
 800e1ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1b0:	e00e      	b.n	800e1d0 <__swhatbuf_r+0x40>
 800e1b2:	466a      	mov	r2, sp
 800e1b4:	f000 fc6e 	bl	800ea94 <_fstat_r>
 800e1b8:	2800      	cmp	r0, #0
 800e1ba:	dbf2      	blt.n	800e1a2 <__swhatbuf_r+0x12>
 800e1bc:	9a01      	ldr	r2, [sp, #4]
 800e1be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e1c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e1c6:	425a      	negs	r2, r3
 800e1c8:	415a      	adcs	r2, r3
 800e1ca:	602a      	str	r2, [r5, #0]
 800e1cc:	e7ee      	b.n	800e1ac <__swhatbuf_r+0x1c>
 800e1ce:	2340      	movs	r3, #64	; 0x40
 800e1d0:	2000      	movs	r0, #0
 800e1d2:	6023      	str	r3, [r4, #0]
 800e1d4:	b016      	add	sp, #88	; 0x58
 800e1d6:	bd70      	pop	{r4, r5, r6, pc}

0800e1d8 <__smakebuf_r>:
 800e1d8:	898b      	ldrh	r3, [r1, #12]
 800e1da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1dc:	079d      	lsls	r5, r3, #30
 800e1de:	4606      	mov	r6, r0
 800e1e0:	460c      	mov	r4, r1
 800e1e2:	d507      	bpl.n	800e1f4 <__smakebuf_r+0x1c>
 800e1e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1e8:	6023      	str	r3, [r4, #0]
 800e1ea:	6123      	str	r3, [r4, #16]
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	6163      	str	r3, [r4, #20]
 800e1f0:	b002      	add	sp, #8
 800e1f2:	bd70      	pop	{r4, r5, r6, pc}
 800e1f4:	ab01      	add	r3, sp, #4
 800e1f6:	466a      	mov	r2, sp
 800e1f8:	f7ff ffca 	bl	800e190 <__swhatbuf_r>
 800e1fc:	9900      	ldr	r1, [sp, #0]
 800e1fe:	4605      	mov	r5, r0
 800e200:	4630      	mov	r0, r6
 800e202:	f000 f881 	bl	800e308 <_malloc_r>
 800e206:	b948      	cbnz	r0, 800e21c <__smakebuf_r+0x44>
 800e208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e20c:	059a      	lsls	r2, r3, #22
 800e20e:	d4ef      	bmi.n	800e1f0 <__smakebuf_r+0x18>
 800e210:	f023 0303 	bic.w	r3, r3, #3
 800e214:	f043 0302 	orr.w	r3, r3, #2
 800e218:	81a3      	strh	r3, [r4, #12]
 800e21a:	e7e3      	b.n	800e1e4 <__smakebuf_r+0xc>
 800e21c:	4b0d      	ldr	r3, [pc, #52]	; (800e254 <__smakebuf_r+0x7c>)
 800e21e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e220:	89a3      	ldrh	r3, [r4, #12]
 800e222:	6020      	str	r0, [r4, #0]
 800e224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e228:	81a3      	strh	r3, [r4, #12]
 800e22a:	9b00      	ldr	r3, [sp, #0]
 800e22c:	6163      	str	r3, [r4, #20]
 800e22e:	9b01      	ldr	r3, [sp, #4]
 800e230:	6120      	str	r0, [r4, #16]
 800e232:	b15b      	cbz	r3, 800e24c <__smakebuf_r+0x74>
 800e234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e238:	4630      	mov	r0, r6
 800e23a:	f000 fc3d 	bl	800eab8 <_isatty_r>
 800e23e:	b128      	cbz	r0, 800e24c <__smakebuf_r+0x74>
 800e240:	89a3      	ldrh	r3, [r4, #12]
 800e242:	f023 0303 	bic.w	r3, r3, #3
 800e246:	f043 0301 	orr.w	r3, r3, #1
 800e24a:	81a3      	strh	r3, [r4, #12]
 800e24c:	89a0      	ldrh	r0, [r4, #12]
 800e24e:	4305      	orrs	r5, r0
 800e250:	81a5      	strh	r5, [r4, #12]
 800e252:	e7cd      	b.n	800e1f0 <__smakebuf_r+0x18>
 800e254:	0800dfc5 	.word	0x0800dfc5

0800e258 <malloc>:
 800e258:	4b02      	ldr	r3, [pc, #8]	; (800e264 <malloc+0xc>)
 800e25a:	4601      	mov	r1, r0
 800e25c:	6818      	ldr	r0, [r3, #0]
 800e25e:	f000 b853 	b.w	800e308 <_malloc_r>
 800e262:	bf00      	nop
 800e264:	20000048 	.word	0x20000048

0800e268 <_free_r>:
 800e268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e26a:	2900      	cmp	r1, #0
 800e26c:	d048      	beq.n	800e300 <_free_r+0x98>
 800e26e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e272:	9001      	str	r0, [sp, #4]
 800e274:	2b00      	cmp	r3, #0
 800e276:	f1a1 0404 	sub.w	r4, r1, #4
 800e27a:	bfb8      	it	lt
 800e27c:	18e4      	addlt	r4, r4, r3
 800e27e:	f000 fc3d 	bl	800eafc <__malloc_lock>
 800e282:	4a20      	ldr	r2, [pc, #128]	; (800e304 <_free_r+0x9c>)
 800e284:	9801      	ldr	r0, [sp, #4]
 800e286:	6813      	ldr	r3, [r2, #0]
 800e288:	4615      	mov	r5, r2
 800e28a:	b933      	cbnz	r3, 800e29a <_free_r+0x32>
 800e28c:	6063      	str	r3, [r4, #4]
 800e28e:	6014      	str	r4, [r2, #0]
 800e290:	b003      	add	sp, #12
 800e292:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e296:	f000 bc37 	b.w	800eb08 <__malloc_unlock>
 800e29a:	42a3      	cmp	r3, r4
 800e29c:	d90b      	bls.n	800e2b6 <_free_r+0x4e>
 800e29e:	6821      	ldr	r1, [r4, #0]
 800e2a0:	1862      	adds	r2, r4, r1
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	bf04      	itt	eq
 800e2a6:	681a      	ldreq	r2, [r3, #0]
 800e2a8:	685b      	ldreq	r3, [r3, #4]
 800e2aa:	6063      	str	r3, [r4, #4]
 800e2ac:	bf04      	itt	eq
 800e2ae:	1852      	addeq	r2, r2, r1
 800e2b0:	6022      	streq	r2, [r4, #0]
 800e2b2:	602c      	str	r4, [r5, #0]
 800e2b4:	e7ec      	b.n	800e290 <_free_r+0x28>
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	b10b      	cbz	r3, 800e2c0 <_free_r+0x58>
 800e2bc:	42a3      	cmp	r3, r4
 800e2be:	d9fa      	bls.n	800e2b6 <_free_r+0x4e>
 800e2c0:	6811      	ldr	r1, [r2, #0]
 800e2c2:	1855      	adds	r5, r2, r1
 800e2c4:	42a5      	cmp	r5, r4
 800e2c6:	d10b      	bne.n	800e2e0 <_free_r+0x78>
 800e2c8:	6824      	ldr	r4, [r4, #0]
 800e2ca:	4421      	add	r1, r4
 800e2cc:	1854      	adds	r4, r2, r1
 800e2ce:	42a3      	cmp	r3, r4
 800e2d0:	6011      	str	r1, [r2, #0]
 800e2d2:	d1dd      	bne.n	800e290 <_free_r+0x28>
 800e2d4:	681c      	ldr	r4, [r3, #0]
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	6053      	str	r3, [r2, #4]
 800e2da:	4421      	add	r1, r4
 800e2dc:	6011      	str	r1, [r2, #0]
 800e2de:	e7d7      	b.n	800e290 <_free_r+0x28>
 800e2e0:	d902      	bls.n	800e2e8 <_free_r+0x80>
 800e2e2:	230c      	movs	r3, #12
 800e2e4:	6003      	str	r3, [r0, #0]
 800e2e6:	e7d3      	b.n	800e290 <_free_r+0x28>
 800e2e8:	6825      	ldr	r5, [r4, #0]
 800e2ea:	1961      	adds	r1, r4, r5
 800e2ec:	428b      	cmp	r3, r1
 800e2ee:	bf04      	itt	eq
 800e2f0:	6819      	ldreq	r1, [r3, #0]
 800e2f2:	685b      	ldreq	r3, [r3, #4]
 800e2f4:	6063      	str	r3, [r4, #4]
 800e2f6:	bf04      	itt	eq
 800e2f8:	1949      	addeq	r1, r1, r5
 800e2fa:	6021      	streq	r1, [r4, #0]
 800e2fc:	6054      	str	r4, [r2, #4]
 800e2fe:	e7c7      	b.n	800e290 <_free_r+0x28>
 800e300:	b003      	add	sp, #12
 800e302:	bd30      	pop	{r4, r5, pc}
 800e304:	20006990 	.word	0x20006990

0800e308 <_malloc_r>:
 800e308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e30a:	1ccd      	adds	r5, r1, #3
 800e30c:	f025 0503 	bic.w	r5, r5, #3
 800e310:	3508      	adds	r5, #8
 800e312:	2d0c      	cmp	r5, #12
 800e314:	bf38      	it	cc
 800e316:	250c      	movcc	r5, #12
 800e318:	2d00      	cmp	r5, #0
 800e31a:	4606      	mov	r6, r0
 800e31c:	db01      	blt.n	800e322 <_malloc_r+0x1a>
 800e31e:	42a9      	cmp	r1, r5
 800e320:	d903      	bls.n	800e32a <_malloc_r+0x22>
 800e322:	230c      	movs	r3, #12
 800e324:	6033      	str	r3, [r6, #0]
 800e326:	2000      	movs	r0, #0
 800e328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e32a:	f000 fbe7 	bl	800eafc <__malloc_lock>
 800e32e:	4921      	ldr	r1, [pc, #132]	; (800e3b4 <_malloc_r+0xac>)
 800e330:	680a      	ldr	r2, [r1, #0]
 800e332:	4614      	mov	r4, r2
 800e334:	b99c      	cbnz	r4, 800e35e <_malloc_r+0x56>
 800e336:	4f20      	ldr	r7, [pc, #128]	; (800e3b8 <_malloc_r+0xb0>)
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	b923      	cbnz	r3, 800e346 <_malloc_r+0x3e>
 800e33c:	4621      	mov	r1, r4
 800e33e:	4630      	mov	r0, r6
 800e340:	f000 fb2a 	bl	800e998 <_sbrk_r>
 800e344:	6038      	str	r0, [r7, #0]
 800e346:	4629      	mov	r1, r5
 800e348:	4630      	mov	r0, r6
 800e34a:	f000 fb25 	bl	800e998 <_sbrk_r>
 800e34e:	1c43      	adds	r3, r0, #1
 800e350:	d123      	bne.n	800e39a <_malloc_r+0x92>
 800e352:	230c      	movs	r3, #12
 800e354:	6033      	str	r3, [r6, #0]
 800e356:	4630      	mov	r0, r6
 800e358:	f000 fbd6 	bl	800eb08 <__malloc_unlock>
 800e35c:	e7e3      	b.n	800e326 <_malloc_r+0x1e>
 800e35e:	6823      	ldr	r3, [r4, #0]
 800e360:	1b5b      	subs	r3, r3, r5
 800e362:	d417      	bmi.n	800e394 <_malloc_r+0x8c>
 800e364:	2b0b      	cmp	r3, #11
 800e366:	d903      	bls.n	800e370 <_malloc_r+0x68>
 800e368:	6023      	str	r3, [r4, #0]
 800e36a:	441c      	add	r4, r3
 800e36c:	6025      	str	r5, [r4, #0]
 800e36e:	e004      	b.n	800e37a <_malloc_r+0x72>
 800e370:	6863      	ldr	r3, [r4, #4]
 800e372:	42a2      	cmp	r2, r4
 800e374:	bf0c      	ite	eq
 800e376:	600b      	streq	r3, [r1, #0]
 800e378:	6053      	strne	r3, [r2, #4]
 800e37a:	4630      	mov	r0, r6
 800e37c:	f000 fbc4 	bl	800eb08 <__malloc_unlock>
 800e380:	f104 000b 	add.w	r0, r4, #11
 800e384:	1d23      	adds	r3, r4, #4
 800e386:	f020 0007 	bic.w	r0, r0, #7
 800e38a:	1ac2      	subs	r2, r0, r3
 800e38c:	d0cc      	beq.n	800e328 <_malloc_r+0x20>
 800e38e:	1a1b      	subs	r3, r3, r0
 800e390:	50a3      	str	r3, [r4, r2]
 800e392:	e7c9      	b.n	800e328 <_malloc_r+0x20>
 800e394:	4622      	mov	r2, r4
 800e396:	6864      	ldr	r4, [r4, #4]
 800e398:	e7cc      	b.n	800e334 <_malloc_r+0x2c>
 800e39a:	1cc4      	adds	r4, r0, #3
 800e39c:	f024 0403 	bic.w	r4, r4, #3
 800e3a0:	42a0      	cmp	r0, r4
 800e3a2:	d0e3      	beq.n	800e36c <_malloc_r+0x64>
 800e3a4:	1a21      	subs	r1, r4, r0
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	f000 faf6 	bl	800e998 <_sbrk_r>
 800e3ac:	3001      	adds	r0, #1
 800e3ae:	d1dd      	bne.n	800e36c <_malloc_r+0x64>
 800e3b0:	e7cf      	b.n	800e352 <_malloc_r+0x4a>
 800e3b2:	bf00      	nop
 800e3b4:	20006990 	.word	0x20006990
 800e3b8:	20006994 	.word	0x20006994

0800e3bc <__sfputc_r>:
 800e3bc:	6893      	ldr	r3, [r2, #8]
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	b410      	push	{r4}
 800e3c4:	6093      	str	r3, [r2, #8]
 800e3c6:	da08      	bge.n	800e3da <__sfputc_r+0x1e>
 800e3c8:	6994      	ldr	r4, [r2, #24]
 800e3ca:	42a3      	cmp	r3, r4
 800e3cc:	db01      	blt.n	800e3d2 <__sfputc_r+0x16>
 800e3ce:	290a      	cmp	r1, #10
 800e3d0:	d103      	bne.n	800e3da <__sfputc_r+0x1e>
 800e3d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3d6:	f7ff bc31 	b.w	800dc3c <__swbuf_r>
 800e3da:	6813      	ldr	r3, [r2, #0]
 800e3dc:	1c58      	adds	r0, r3, #1
 800e3de:	6010      	str	r0, [r2, #0]
 800e3e0:	7019      	strb	r1, [r3, #0]
 800e3e2:	4608      	mov	r0, r1
 800e3e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3e8:	4770      	bx	lr

0800e3ea <__sfputs_r>:
 800e3ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ec:	4606      	mov	r6, r0
 800e3ee:	460f      	mov	r7, r1
 800e3f0:	4614      	mov	r4, r2
 800e3f2:	18d5      	adds	r5, r2, r3
 800e3f4:	42ac      	cmp	r4, r5
 800e3f6:	d101      	bne.n	800e3fc <__sfputs_r+0x12>
 800e3f8:	2000      	movs	r0, #0
 800e3fa:	e007      	b.n	800e40c <__sfputs_r+0x22>
 800e3fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e400:	463a      	mov	r2, r7
 800e402:	4630      	mov	r0, r6
 800e404:	f7ff ffda 	bl	800e3bc <__sfputc_r>
 800e408:	1c43      	adds	r3, r0, #1
 800e40a:	d1f3      	bne.n	800e3f4 <__sfputs_r+0xa>
 800e40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e410 <_vfiprintf_r>:
 800e410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e414:	460d      	mov	r5, r1
 800e416:	b09d      	sub	sp, #116	; 0x74
 800e418:	4614      	mov	r4, r2
 800e41a:	4698      	mov	r8, r3
 800e41c:	4606      	mov	r6, r0
 800e41e:	b118      	cbz	r0, 800e428 <_vfiprintf_r+0x18>
 800e420:	6983      	ldr	r3, [r0, #24]
 800e422:	b90b      	cbnz	r3, 800e428 <_vfiprintf_r+0x18>
 800e424:	f7ff fe02 	bl	800e02c <__sinit>
 800e428:	4b89      	ldr	r3, [pc, #548]	; (800e650 <_vfiprintf_r+0x240>)
 800e42a:	429d      	cmp	r5, r3
 800e42c:	d11b      	bne.n	800e466 <_vfiprintf_r+0x56>
 800e42e:	6875      	ldr	r5, [r6, #4]
 800e430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e432:	07d9      	lsls	r1, r3, #31
 800e434:	d405      	bmi.n	800e442 <_vfiprintf_r+0x32>
 800e436:	89ab      	ldrh	r3, [r5, #12]
 800e438:	059a      	lsls	r2, r3, #22
 800e43a:	d402      	bmi.n	800e442 <_vfiprintf_r+0x32>
 800e43c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e43e:	f7ff fea5 	bl	800e18c <__retarget_lock_acquire_recursive>
 800e442:	89ab      	ldrh	r3, [r5, #12]
 800e444:	071b      	lsls	r3, r3, #28
 800e446:	d501      	bpl.n	800e44c <_vfiprintf_r+0x3c>
 800e448:	692b      	ldr	r3, [r5, #16]
 800e44a:	b9eb      	cbnz	r3, 800e488 <_vfiprintf_r+0x78>
 800e44c:	4629      	mov	r1, r5
 800e44e:	4630      	mov	r0, r6
 800e450:	f7ff fc46 	bl	800dce0 <__swsetup_r>
 800e454:	b1c0      	cbz	r0, 800e488 <_vfiprintf_r+0x78>
 800e456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e458:	07dc      	lsls	r4, r3, #31
 800e45a:	d50e      	bpl.n	800e47a <_vfiprintf_r+0x6a>
 800e45c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e460:	b01d      	add	sp, #116	; 0x74
 800e462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e466:	4b7b      	ldr	r3, [pc, #492]	; (800e654 <_vfiprintf_r+0x244>)
 800e468:	429d      	cmp	r5, r3
 800e46a:	d101      	bne.n	800e470 <_vfiprintf_r+0x60>
 800e46c:	68b5      	ldr	r5, [r6, #8]
 800e46e:	e7df      	b.n	800e430 <_vfiprintf_r+0x20>
 800e470:	4b79      	ldr	r3, [pc, #484]	; (800e658 <_vfiprintf_r+0x248>)
 800e472:	429d      	cmp	r5, r3
 800e474:	bf08      	it	eq
 800e476:	68f5      	ldreq	r5, [r6, #12]
 800e478:	e7da      	b.n	800e430 <_vfiprintf_r+0x20>
 800e47a:	89ab      	ldrh	r3, [r5, #12]
 800e47c:	0598      	lsls	r0, r3, #22
 800e47e:	d4ed      	bmi.n	800e45c <_vfiprintf_r+0x4c>
 800e480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e482:	f7ff fe84 	bl	800e18e <__retarget_lock_release_recursive>
 800e486:	e7e9      	b.n	800e45c <_vfiprintf_r+0x4c>
 800e488:	2300      	movs	r3, #0
 800e48a:	9309      	str	r3, [sp, #36]	; 0x24
 800e48c:	2320      	movs	r3, #32
 800e48e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e492:	f8cd 800c 	str.w	r8, [sp, #12]
 800e496:	2330      	movs	r3, #48	; 0x30
 800e498:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e65c <_vfiprintf_r+0x24c>
 800e49c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4a0:	f04f 0901 	mov.w	r9, #1
 800e4a4:	4623      	mov	r3, r4
 800e4a6:	469a      	mov	sl, r3
 800e4a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4ac:	b10a      	cbz	r2, 800e4b2 <_vfiprintf_r+0xa2>
 800e4ae:	2a25      	cmp	r2, #37	; 0x25
 800e4b0:	d1f9      	bne.n	800e4a6 <_vfiprintf_r+0x96>
 800e4b2:	ebba 0b04 	subs.w	fp, sl, r4
 800e4b6:	d00b      	beq.n	800e4d0 <_vfiprintf_r+0xc0>
 800e4b8:	465b      	mov	r3, fp
 800e4ba:	4622      	mov	r2, r4
 800e4bc:	4629      	mov	r1, r5
 800e4be:	4630      	mov	r0, r6
 800e4c0:	f7ff ff93 	bl	800e3ea <__sfputs_r>
 800e4c4:	3001      	adds	r0, #1
 800e4c6:	f000 80aa 	beq.w	800e61e <_vfiprintf_r+0x20e>
 800e4ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4cc:	445a      	add	r2, fp
 800e4ce:	9209      	str	r2, [sp, #36]	; 0x24
 800e4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f000 80a2 	beq.w	800e61e <_vfiprintf_r+0x20e>
 800e4da:	2300      	movs	r3, #0
 800e4dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e4e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4e4:	f10a 0a01 	add.w	sl, sl, #1
 800e4e8:	9304      	str	r3, [sp, #16]
 800e4ea:	9307      	str	r3, [sp, #28]
 800e4ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4f0:	931a      	str	r3, [sp, #104]	; 0x68
 800e4f2:	4654      	mov	r4, sl
 800e4f4:	2205      	movs	r2, #5
 800e4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4fa:	4858      	ldr	r0, [pc, #352]	; (800e65c <_vfiprintf_r+0x24c>)
 800e4fc:	f7f1 fea0 	bl	8000240 <memchr>
 800e500:	9a04      	ldr	r2, [sp, #16]
 800e502:	b9d8      	cbnz	r0, 800e53c <_vfiprintf_r+0x12c>
 800e504:	06d1      	lsls	r1, r2, #27
 800e506:	bf44      	itt	mi
 800e508:	2320      	movmi	r3, #32
 800e50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e50e:	0713      	lsls	r3, r2, #28
 800e510:	bf44      	itt	mi
 800e512:	232b      	movmi	r3, #43	; 0x2b
 800e514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e518:	f89a 3000 	ldrb.w	r3, [sl]
 800e51c:	2b2a      	cmp	r3, #42	; 0x2a
 800e51e:	d015      	beq.n	800e54c <_vfiprintf_r+0x13c>
 800e520:	9a07      	ldr	r2, [sp, #28]
 800e522:	4654      	mov	r4, sl
 800e524:	2000      	movs	r0, #0
 800e526:	f04f 0c0a 	mov.w	ip, #10
 800e52a:	4621      	mov	r1, r4
 800e52c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e530:	3b30      	subs	r3, #48	; 0x30
 800e532:	2b09      	cmp	r3, #9
 800e534:	d94e      	bls.n	800e5d4 <_vfiprintf_r+0x1c4>
 800e536:	b1b0      	cbz	r0, 800e566 <_vfiprintf_r+0x156>
 800e538:	9207      	str	r2, [sp, #28]
 800e53a:	e014      	b.n	800e566 <_vfiprintf_r+0x156>
 800e53c:	eba0 0308 	sub.w	r3, r0, r8
 800e540:	fa09 f303 	lsl.w	r3, r9, r3
 800e544:	4313      	orrs	r3, r2
 800e546:	9304      	str	r3, [sp, #16]
 800e548:	46a2      	mov	sl, r4
 800e54a:	e7d2      	b.n	800e4f2 <_vfiprintf_r+0xe2>
 800e54c:	9b03      	ldr	r3, [sp, #12]
 800e54e:	1d19      	adds	r1, r3, #4
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	9103      	str	r1, [sp, #12]
 800e554:	2b00      	cmp	r3, #0
 800e556:	bfbb      	ittet	lt
 800e558:	425b      	neglt	r3, r3
 800e55a:	f042 0202 	orrlt.w	r2, r2, #2
 800e55e:	9307      	strge	r3, [sp, #28]
 800e560:	9307      	strlt	r3, [sp, #28]
 800e562:	bfb8      	it	lt
 800e564:	9204      	strlt	r2, [sp, #16]
 800e566:	7823      	ldrb	r3, [r4, #0]
 800e568:	2b2e      	cmp	r3, #46	; 0x2e
 800e56a:	d10c      	bne.n	800e586 <_vfiprintf_r+0x176>
 800e56c:	7863      	ldrb	r3, [r4, #1]
 800e56e:	2b2a      	cmp	r3, #42	; 0x2a
 800e570:	d135      	bne.n	800e5de <_vfiprintf_r+0x1ce>
 800e572:	9b03      	ldr	r3, [sp, #12]
 800e574:	1d1a      	adds	r2, r3, #4
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	9203      	str	r2, [sp, #12]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	bfb8      	it	lt
 800e57e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e582:	3402      	adds	r4, #2
 800e584:	9305      	str	r3, [sp, #20]
 800e586:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e66c <_vfiprintf_r+0x25c>
 800e58a:	7821      	ldrb	r1, [r4, #0]
 800e58c:	2203      	movs	r2, #3
 800e58e:	4650      	mov	r0, sl
 800e590:	f7f1 fe56 	bl	8000240 <memchr>
 800e594:	b140      	cbz	r0, 800e5a8 <_vfiprintf_r+0x198>
 800e596:	2340      	movs	r3, #64	; 0x40
 800e598:	eba0 000a 	sub.w	r0, r0, sl
 800e59c:	fa03 f000 	lsl.w	r0, r3, r0
 800e5a0:	9b04      	ldr	r3, [sp, #16]
 800e5a2:	4303      	orrs	r3, r0
 800e5a4:	3401      	adds	r4, #1
 800e5a6:	9304      	str	r3, [sp, #16]
 800e5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5ac:	482c      	ldr	r0, [pc, #176]	; (800e660 <_vfiprintf_r+0x250>)
 800e5ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5b2:	2206      	movs	r2, #6
 800e5b4:	f7f1 fe44 	bl	8000240 <memchr>
 800e5b8:	2800      	cmp	r0, #0
 800e5ba:	d03f      	beq.n	800e63c <_vfiprintf_r+0x22c>
 800e5bc:	4b29      	ldr	r3, [pc, #164]	; (800e664 <_vfiprintf_r+0x254>)
 800e5be:	bb1b      	cbnz	r3, 800e608 <_vfiprintf_r+0x1f8>
 800e5c0:	9b03      	ldr	r3, [sp, #12]
 800e5c2:	3307      	adds	r3, #7
 800e5c4:	f023 0307 	bic.w	r3, r3, #7
 800e5c8:	3308      	adds	r3, #8
 800e5ca:	9303      	str	r3, [sp, #12]
 800e5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5ce:	443b      	add	r3, r7
 800e5d0:	9309      	str	r3, [sp, #36]	; 0x24
 800e5d2:	e767      	b.n	800e4a4 <_vfiprintf_r+0x94>
 800e5d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5d8:	460c      	mov	r4, r1
 800e5da:	2001      	movs	r0, #1
 800e5dc:	e7a5      	b.n	800e52a <_vfiprintf_r+0x11a>
 800e5de:	2300      	movs	r3, #0
 800e5e0:	3401      	adds	r4, #1
 800e5e2:	9305      	str	r3, [sp, #20]
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	f04f 0c0a 	mov.w	ip, #10
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5f0:	3a30      	subs	r2, #48	; 0x30
 800e5f2:	2a09      	cmp	r2, #9
 800e5f4:	d903      	bls.n	800e5fe <_vfiprintf_r+0x1ee>
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d0c5      	beq.n	800e586 <_vfiprintf_r+0x176>
 800e5fa:	9105      	str	r1, [sp, #20]
 800e5fc:	e7c3      	b.n	800e586 <_vfiprintf_r+0x176>
 800e5fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800e602:	4604      	mov	r4, r0
 800e604:	2301      	movs	r3, #1
 800e606:	e7f0      	b.n	800e5ea <_vfiprintf_r+0x1da>
 800e608:	ab03      	add	r3, sp, #12
 800e60a:	9300      	str	r3, [sp, #0]
 800e60c:	462a      	mov	r2, r5
 800e60e:	4b16      	ldr	r3, [pc, #88]	; (800e668 <_vfiprintf_r+0x258>)
 800e610:	a904      	add	r1, sp, #16
 800e612:	4630      	mov	r0, r6
 800e614:	f3af 8000 	nop.w
 800e618:	4607      	mov	r7, r0
 800e61a:	1c78      	adds	r0, r7, #1
 800e61c:	d1d6      	bne.n	800e5cc <_vfiprintf_r+0x1bc>
 800e61e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e620:	07d9      	lsls	r1, r3, #31
 800e622:	d405      	bmi.n	800e630 <_vfiprintf_r+0x220>
 800e624:	89ab      	ldrh	r3, [r5, #12]
 800e626:	059a      	lsls	r2, r3, #22
 800e628:	d402      	bmi.n	800e630 <_vfiprintf_r+0x220>
 800e62a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e62c:	f7ff fdaf 	bl	800e18e <__retarget_lock_release_recursive>
 800e630:	89ab      	ldrh	r3, [r5, #12]
 800e632:	065b      	lsls	r3, r3, #25
 800e634:	f53f af12 	bmi.w	800e45c <_vfiprintf_r+0x4c>
 800e638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e63a:	e711      	b.n	800e460 <_vfiprintf_r+0x50>
 800e63c:	ab03      	add	r3, sp, #12
 800e63e:	9300      	str	r3, [sp, #0]
 800e640:	462a      	mov	r2, r5
 800e642:	4b09      	ldr	r3, [pc, #36]	; (800e668 <_vfiprintf_r+0x258>)
 800e644:	a904      	add	r1, sp, #16
 800e646:	4630      	mov	r0, r6
 800e648:	f000 f880 	bl	800e74c <_printf_i>
 800e64c:	e7e4      	b.n	800e618 <_vfiprintf_r+0x208>
 800e64e:	bf00      	nop
 800e650:	08016120 	.word	0x08016120
 800e654:	08016140 	.word	0x08016140
 800e658:	08016100 	.word	0x08016100
 800e65c:	08016160 	.word	0x08016160
 800e660:	0801616a 	.word	0x0801616a
 800e664:	00000000 	.word	0x00000000
 800e668:	0800e3eb 	.word	0x0800e3eb
 800e66c:	08016166 	.word	0x08016166

0800e670 <_printf_common>:
 800e670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e674:	4616      	mov	r6, r2
 800e676:	4699      	mov	r9, r3
 800e678:	688a      	ldr	r2, [r1, #8]
 800e67a:	690b      	ldr	r3, [r1, #16]
 800e67c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e680:	4293      	cmp	r3, r2
 800e682:	bfb8      	it	lt
 800e684:	4613      	movlt	r3, r2
 800e686:	6033      	str	r3, [r6, #0]
 800e688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e68c:	4607      	mov	r7, r0
 800e68e:	460c      	mov	r4, r1
 800e690:	b10a      	cbz	r2, 800e696 <_printf_common+0x26>
 800e692:	3301      	adds	r3, #1
 800e694:	6033      	str	r3, [r6, #0]
 800e696:	6823      	ldr	r3, [r4, #0]
 800e698:	0699      	lsls	r1, r3, #26
 800e69a:	bf42      	ittt	mi
 800e69c:	6833      	ldrmi	r3, [r6, #0]
 800e69e:	3302      	addmi	r3, #2
 800e6a0:	6033      	strmi	r3, [r6, #0]
 800e6a2:	6825      	ldr	r5, [r4, #0]
 800e6a4:	f015 0506 	ands.w	r5, r5, #6
 800e6a8:	d106      	bne.n	800e6b8 <_printf_common+0x48>
 800e6aa:	f104 0a19 	add.w	sl, r4, #25
 800e6ae:	68e3      	ldr	r3, [r4, #12]
 800e6b0:	6832      	ldr	r2, [r6, #0]
 800e6b2:	1a9b      	subs	r3, r3, r2
 800e6b4:	42ab      	cmp	r3, r5
 800e6b6:	dc26      	bgt.n	800e706 <_printf_common+0x96>
 800e6b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e6bc:	1e13      	subs	r3, r2, #0
 800e6be:	6822      	ldr	r2, [r4, #0]
 800e6c0:	bf18      	it	ne
 800e6c2:	2301      	movne	r3, #1
 800e6c4:	0692      	lsls	r2, r2, #26
 800e6c6:	d42b      	bmi.n	800e720 <_printf_common+0xb0>
 800e6c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e6cc:	4649      	mov	r1, r9
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	47c0      	blx	r8
 800e6d2:	3001      	adds	r0, #1
 800e6d4:	d01e      	beq.n	800e714 <_printf_common+0xa4>
 800e6d6:	6823      	ldr	r3, [r4, #0]
 800e6d8:	68e5      	ldr	r5, [r4, #12]
 800e6da:	6832      	ldr	r2, [r6, #0]
 800e6dc:	f003 0306 	and.w	r3, r3, #6
 800e6e0:	2b04      	cmp	r3, #4
 800e6e2:	bf08      	it	eq
 800e6e4:	1aad      	subeq	r5, r5, r2
 800e6e6:	68a3      	ldr	r3, [r4, #8]
 800e6e8:	6922      	ldr	r2, [r4, #16]
 800e6ea:	bf0c      	ite	eq
 800e6ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6f0:	2500      	movne	r5, #0
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	bfc4      	itt	gt
 800e6f6:	1a9b      	subgt	r3, r3, r2
 800e6f8:	18ed      	addgt	r5, r5, r3
 800e6fa:	2600      	movs	r6, #0
 800e6fc:	341a      	adds	r4, #26
 800e6fe:	42b5      	cmp	r5, r6
 800e700:	d11a      	bne.n	800e738 <_printf_common+0xc8>
 800e702:	2000      	movs	r0, #0
 800e704:	e008      	b.n	800e718 <_printf_common+0xa8>
 800e706:	2301      	movs	r3, #1
 800e708:	4652      	mov	r2, sl
 800e70a:	4649      	mov	r1, r9
 800e70c:	4638      	mov	r0, r7
 800e70e:	47c0      	blx	r8
 800e710:	3001      	adds	r0, #1
 800e712:	d103      	bne.n	800e71c <_printf_common+0xac>
 800e714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e71c:	3501      	adds	r5, #1
 800e71e:	e7c6      	b.n	800e6ae <_printf_common+0x3e>
 800e720:	18e1      	adds	r1, r4, r3
 800e722:	1c5a      	adds	r2, r3, #1
 800e724:	2030      	movs	r0, #48	; 0x30
 800e726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e72a:	4422      	add	r2, r4
 800e72c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e734:	3302      	adds	r3, #2
 800e736:	e7c7      	b.n	800e6c8 <_printf_common+0x58>
 800e738:	2301      	movs	r3, #1
 800e73a:	4622      	mov	r2, r4
 800e73c:	4649      	mov	r1, r9
 800e73e:	4638      	mov	r0, r7
 800e740:	47c0      	blx	r8
 800e742:	3001      	adds	r0, #1
 800e744:	d0e6      	beq.n	800e714 <_printf_common+0xa4>
 800e746:	3601      	adds	r6, #1
 800e748:	e7d9      	b.n	800e6fe <_printf_common+0x8e>
	...

0800e74c <_printf_i>:
 800e74c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e750:	460c      	mov	r4, r1
 800e752:	4691      	mov	r9, r2
 800e754:	7e27      	ldrb	r7, [r4, #24]
 800e756:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e758:	2f78      	cmp	r7, #120	; 0x78
 800e75a:	4680      	mov	r8, r0
 800e75c:	469a      	mov	sl, r3
 800e75e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e762:	d807      	bhi.n	800e774 <_printf_i+0x28>
 800e764:	2f62      	cmp	r7, #98	; 0x62
 800e766:	d80a      	bhi.n	800e77e <_printf_i+0x32>
 800e768:	2f00      	cmp	r7, #0
 800e76a:	f000 80d8 	beq.w	800e91e <_printf_i+0x1d2>
 800e76e:	2f58      	cmp	r7, #88	; 0x58
 800e770:	f000 80a3 	beq.w	800e8ba <_printf_i+0x16e>
 800e774:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e77c:	e03a      	b.n	800e7f4 <_printf_i+0xa8>
 800e77e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e782:	2b15      	cmp	r3, #21
 800e784:	d8f6      	bhi.n	800e774 <_printf_i+0x28>
 800e786:	a001      	add	r0, pc, #4	; (adr r0, 800e78c <_printf_i+0x40>)
 800e788:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e78c:	0800e7e5 	.word	0x0800e7e5
 800e790:	0800e7f9 	.word	0x0800e7f9
 800e794:	0800e775 	.word	0x0800e775
 800e798:	0800e775 	.word	0x0800e775
 800e79c:	0800e775 	.word	0x0800e775
 800e7a0:	0800e775 	.word	0x0800e775
 800e7a4:	0800e7f9 	.word	0x0800e7f9
 800e7a8:	0800e775 	.word	0x0800e775
 800e7ac:	0800e775 	.word	0x0800e775
 800e7b0:	0800e775 	.word	0x0800e775
 800e7b4:	0800e775 	.word	0x0800e775
 800e7b8:	0800e905 	.word	0x0800e905
 800e7bc:	0800e829 	.word	0x0800e829
 800e7c0:	0800e8e7 	.word	0x0800e8e7
 800e7c4:	0800e775 	.word	0x0800e775
 800e7c8:	0800e775 	.word	0x0800e775
 800e7cc:	0800e927 	.word	0x0800e927
 800e7d0:	0800e775 	.word	0x0800e775
 800e7d4:	0800e829 	.word	0x0800e829
 800e7d8:	0800e775 	.word	0x0800e775
 800e7dc:	0800e775 	.word	0x0800e775
 800e7e0:	0800e8ef 	.word	0x0800e8ef
 800e7e4:	680b      	ldr	r3, [r1, #0]
 800e7e6:	1d1a      	adds	r2, r3, #4
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	600a      	str	r2, [r1, #0]
 800e7ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e7f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	e0a3      	b.n	800e940 <_printf_i+0x1f4>
 800e7f8:	6825      	ldr	r5, [r4, #0]
 800e7fa:	6808      	ldr	r0, [r1, #0]
 800e7fc:	062e      	lsls	r6, r5, #24
 800e7fe:	f100 0304 	add.w	r3, r0, #4
 800e802:	d50a      	bpl.n	800e81a <_printf_i+0xce>
 800e804:	6805      	ldr	r5, [r0, #0]
 800e806:	600b      	str	r3, [r1, #0]
 800e808:	2d00      	cmp	r5, #0
 800e80a:	da03      	bge.n	800e814 <_printf_i+0xc8>
 800e80c:	232d      	movs	r3, #45	; 0x2d
 800e80e:	426d      	negs	r5, r5
 800e810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e814:	485e      	ldr	r0, [pc, #376]	; (800e990 <_printf_i+0x244>)
 800e816:	230a      	movs	r3, #10
 800e818:	e019      	b.n	800e84e <_printf_i+0x102>
 800e81a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e81e:	6805      	ldr	r5, [r0, #0]
 800e820:	600b      	str	r3, [r1, #0]
 800e822:	bf18      	it	ne
 800e824:	b22d      	sxthne	r5, r5
 800e826:	e7ef      	b.n	800e808 <_printf_i+0xbc>
 800e828:	680b      	ldr	r3, [r1, #0]
 800e82a:	6825      	ldr	r5, [r4, #0]
 800e82c:	1d18      	adds	r0, r3, #4
 800e82e:	6008      	str	r0, [r1, #0]
 800e830:	0628      	lsls	r0, r5, #24
 800e832:	d501      	bpl.n	800e838 <_printf_i+0xec>
 800e834:	681d      	ldr	r5, [r3, #0]
 800e836:	e002      	b.n	800e83e <_printf_i+0xf2>
 800e838:	0669      	lsls	r1, r5, #25
 800e83a:	d5fb      	bpl.n	800e834 <_printf_i+0xe8>
 800e83c:	881d      	ldrh	r5, [r3, #0]
 800e83e:	4854      	ldr	r0, [pc, #336]	; (800e990 <_printf_i+0x244>)
 800e840:	2f6f      	cmp	r7, #111	; 0x6f
 800e842:	bf0c      	ite	eq
 800e844:	2308      	moveq	r3, #8
 800e846:	230a      	movne	r3, #10
 800e848:	2100      	movs	r1, #0
 800e84a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e84e:	6866      	ldr	r6, [r4, #4]
 800e850:	60a6      	str	r6, [r4, #8]
 800e852:	2e00      	cmp	r6, #0
 800e854:	bfa2      	ittt	ge
 800e856:	6821      	ldrge	r1, [r4, #0]
 800e858:	f021 0104 	bicge.w	r1, r1, #4
 800e85c:	6021      	strge	r1, [r4, #0]
 800e85e:	b90d      	cbnz	r5, 800e864 <_printf_i+0x118>
 800e860:	2e00      	cmp	r6, #0
 800e862:	d04d      	beq.n	800e900 <_printf_i+0x1b4>
 800e864:	4616      	mov	r6, r2
 800e866:	fbb5 f1f3 	udiv	r1, r5, r3
 800e86a:	fb03 5711 	mls	r7, r3, r1, r5
 800e86e:	5dc7      	ldrb	r7, [r0, r7]
 800e870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e874:	462f      	mov	r7, r5
 800e876:	42bb      	cmp	r3, r7
 800e878:	460d      	mov	r5, r1
 800e87a:	d9f4      	bls.n	800e866 <_printf_i+0x11a>
 800e87c:	2b08      	cmp	r3, #8
 800e87e:	d10b      	bne.n	800e898 <_printf_i+0x14c>
 800e880:	6823      	ldr	r3, [r4, #0]
 800e882:	07df      	lsls	r7, r3, #31
 800e884:	d508      	bpl.n	800e898 <_printf_i+0x14c>
 800e886:	6923      	ldr	r3, [r4, #16]
 800e888:	6861      	ldr	r1, [r4, #4]
 800e88a:	4299      	cmp	r1, r3
 800e88c:	bfde      	ittt	le
 800e88e:	2330      	movle	r3, #48	; 0x30
 800e890:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e894:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800e898:	1b92      	subs	r2, r2, r6
 800e89a:	6122      	str	r2, [r4, #16]
 800e89c:	f8cd a000 	str.w	sl, [sp]
 800e8a0:	464b      	mov	r3, r9
 800e8a2:	aa03      	add	r2, sp, #12
 800e8a4:	4621      	mov	r1, r4
 800e8a6:	4640      	mov	r0, r8
 800e8a8:	f7ff fee2 	bl	800e670 <_printf_common>
 800e8ac:	3001      	adds	r0, #1
 800e8ae:	d14c      	bne.n	800e94a <_printf_i+0x1fe>
 800e8b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8b4:	b004      	add	sp, #16
 800e8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8ba:	4835      	ldr	r0, [pc, #212]	; (800e990 <_printf_i+0x244>)
 800e8bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e8c0:	6823      	ldr	r3, [r4, #0]
 800e8c2:	680e      	ldr	r6, [r1, #0]
 800e8c4:	061f      	lsls	r7, r3, #24
 800e8c6:	f856 5b04 	ldr.w	r5, [r6], #4
 800e8ca:	600e      	str	r6, [r1, #0]
 800e8cc:	d514      	bpl.n	800e8f8 <_printf_i+0x1ac>
 800e8ce:	07d9      	lsls	r1, r3, #31
 800e8d0:	bf44      	itt	mi
 800e8d2:	f043 0320 	orrmi.w	r3, r3, #32
 800e8d6:	6023      	strmi	r3, [r4, #0]
 800e8d8:	b91d      	cbnz	r5, 800e8e2 <_printf_i+0x196>
 800e8da:	6823      	ldr	r3, [r4, #0]
 800e8dc:	f023 0320 	bic.w	r3, r3, #32
 800e8e0:	6023      	str	r3, [r4, #0]
 800e8e2:	2310      	movs	r3, #16
 800e8e4:	e7b0      	b.n	800e848 <_printf_i+0xfc>
 800e8e6:	6823      	ldr	r3, [r4, #0]
 800e8e8:	f043 0320 	orr.w	r3, r3, #32
 800e8ec:	6023      	str	r3, [r4, #0]
 800e8ee:	2378      	movs	r3, #120	; 0x78
 800e8f0:	4828      	ldr	r0, [pc, #160]	; (800e994 <_printf_i+0x248>)
 800e8f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e8f6:	e7e3      	b.n	800e8c0 <_printf_i+0x174>
 800e8f8:	065e      	lsls	r6, r3, #25
 800e8fa:	bf48      	it	mi
 800e8fc:	b2ad      	uxthmi	r5, r5
 800e8fe:	e7e6      	b.n	800e8ce <_printf_i+0x182>
 800e900:	4616      	mov	r6, r2
 800e902:	e7bb      	b.n	800e87c <_printf_i+0x130>
 800e904:	680b      	ldr	r3, [r1, #0]
 800e906:	6826      	ldr	r6, [r4, #0]
 800e908:	6960      	ldr	r0, [r4, #20]
 800e90a:	1d1d      	adds	r5, r3, #4
 800e90c:	600d      	str	r5, [r1, #0]
 800e90e:	0635      	lsls	r5, r6, #24
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	d501      	bpl.n	800e918 <_printf_i+0x1cc>
 800e914:	6018      	str	r0, [r3, #0]
 800e916:	e002      	b.n	800e91e <_printf_i+0x1d2>
 800e918:	0671      	lsls	r1, r6, #25
 800e91a:	d5fb      	bpl.n	800e914 <_printf_i+0x1c8>
 800e91c:	8018      	strh	r0, [r3, #0]
 800e91e:	2300      	movs	r3, #0
 800e920:	6123      	str	r3, [r4, #16]
 800e922:	4616      	mov	r6, r2
 800e924:	e7ba      	b.n	800e89c <_printf_i+0x150>
 800e926:	680b      	ldr	r3, [r1, #0]
 800e928:	1d1a      	adds	r2, r3, #4
 800e92a:	600a      	str	r2, [r1, #0]
 800e92c:	681e      	ldr	r6, [r3, #0]
 800e92e:	6862      	ldr	r2, [r4, #4]
 800e930:	2100      	movs	r1, #0
 800e932:	4630      	mov	r0, r6
 800e934:	f7f1 fc84 	bl	8000240 <memchr>
 800e938:	b108      	cbz	r0, 800e93e <_printf_i+0x1f2>
 800e93a:	1b80      	subs	r0, r0, r6
 800e93c:	6060      	str	r0, [r4, #4]
 800e93e:	6863      	ldr	r3, [r4, #4]
 800e940:	6123      	str	r3, [r4, #16]
 800e942:	2300      	movs	r3, #0
 800e944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e948:	e7a8      	b.n	800e89c <_printf_i+0x150>
 800e94a:	6923      	ldr	r3, [r4, #16]
 800e94c:	4632      	mov	r2, r6
 800e94e:	4649      	mov	r1, r9
 800e950:	4640      	mov	r0, r8
 800e952:	47d0      	blx	sl
 800e954:	3001      	adds	r0, #1
 800e956:	d0ab      	beq.n	800e8b0 <_printf_i+0x164>
 800e958:	6823      	ldr	r3, [r4, #0]
 800e95a:	079b      	lsls	r3, r3, #30
 800e95c:	d413      	bmi.n	800e986 <_printf_i+0x23a>
 800e95e:	68e0      	ldr	r0, [r4, #12]
 800e960:	9b03      	ldr	r3, [sp, #12]
 800e962:	4298      	cmp	r0, r3
 800e964:	bfb8      	it	lt
 800e966:	4618      	movlt	r0, r3
 800e968:	e7a4      	b.n	800e8b4 <_printf_i+0x168>
 800e96a:	2301      	movs	r3, #1
 800e96c:	4632      	mov	r2, r6
 800e96e:	4649      	mov	r1, r9
 800e970:	4640      	mov	r0, r8
 800e972:	47d0      	blx	sl
 800e974:	3001      	adds	r0, #1
 800e976:	d09b      	beq.n	800e8b0 <_printf_i+0x164>
 800e978:	3501      	adds	r5, #1
 800e97a:	68e3      	ldr	r3, [r4, #12]
 800e97c:	9903      	ldr	r1, [sp, #12]
 800e97e:	1a5b      	subs	r3, r3, r1
 800e980:	42ab      	cmp	r3, r5
 800e982:	dcf2      	bgt.n	800e96a <_printf_i+0x21e>
 800e984:	e7eb      	b.n	800e95e <_printf_i+0x212>
 800e986:	2500      	movs	r5, #0
 800e988:	f104 0619 	add.w	r6, r4, #25
 800e98c:	e7f5      	b.n	800e97a <_printf_i+0x22e>
 800e98e:	bf00      	nop
 800e990:	08016171 	.word	0x08016171
 800e994:	08016182 	.word	0x08016182

0800e998 <_sbrk_r>:
 800e998:	b538      	push	{r3, r4, r5, lr}
 800e99a:	4d06      	ldr	r5, [pc, #24]	; (800e9b4 <_sbrk_r+0x1c>)
 800e99c:	2300      	movs	r3, #0
 800e99e:	4604      	mov	r4, r0
 800e9a0:	4608      	mov	r0, r1
 800e9a2:	602b      	str	r3, [r5, #0]
 800e9a4:	f7f1 fe42 	bl	800062c <_sbrk>
 800e9a8:	1c43      	adds	r3, r0, #1
 800e9aa:	d102      	bne.n	800e9b2 <_sbrk_r+0x1a>
 800e9ac:	682b      	ldr	r3, [r5, #0]
 800e9ae:	b103      	cbz	r3, 800e9b2 <_sbrk_r+0x1a>
 800e9b0:	6023      	str	r3, [r4, #0]
 800e9b2:	bd38      	pop	{r3, r4, r5, pc}
 800e9b4:	20010d2c 	.word	0x20010d2c

0800e9b8 <__sread>:
 800e9b8:	b510      	push	{r4, lr}
 800e9ba:	460c      	mov	r4, r1
 800e9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9c0:	f000 f8a8 	bl	800eb14 <_read_r>
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	bfab      	itete	ge
 800e9c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e9ca:	89a3      	ldrhlt	r3, [r4, #12]
 800e9cc:	181b      	addge	r3, r3, r0
 800e9ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e9d2:	bfac      	ite	ge
 800e9d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e9d6:	81a3      	strhlt	r3, [r4, #12]
 800e9d8:	bd10      	pop	{r4, pc}

0800e9da <__swrite>:
 800e9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9de:	461f      	mov	r7, r3
 800e9e0:	898b      	ldrh	r3, [r1, #12]
 800e9e2:	05db      	lsls	r3, r3, #23
 800e9e4:	4605      	mov	r5, r0
 800e9e6:	460c      	mov	r4, r1
 800e9e8:	4616      	mov	r6, r2
 800e9ea:	d505      	bpl.n	800e9f8 <__swrite+0x1e>
 800e9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9f0:	2302      	movs	r3, #2
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f000 f870 	bl	800ead8 <_lseek_r>
 800e9f8:	89a3      	ldrh	r3, [r4, #12]
 800e9fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea02:	81a3      	strh	r3, [r4, #12]
 800ea04:	4632      	mov	r2, r6
 800ea06:	463b      	mov	r3, r7
 800ea08:	4628      	mov	r0, r5
 800ea0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea0e:	f000 b817 	b.w	800ea40 <_write_r>

0800ea12 <__sseek>:
 800ea12:	b510      	push	{r4, lr}
 800ea14:	460c      	mov	r4, r1
 800ea16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea1a:	f000 f85d 	bl	800ead8 <_lseek_r>
 800ea1e:	1c43      	adds	r3, r0, #1
 800ea20:	89a3      	ldrh	r3, [r4, #12]
 800ea22:	bf15      	itete	ne
 800ea24:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea2e:	81a3      	strheq	r3, [r4, #12]
 800ea30:	bf18      	it	ne
 800ea32:	81a3      	strhne	r3, [r4, #12]
 800ea34:	bd10      	pop	{r4, pc}

0800ea36 <__sclose>:
 800ea36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea3a:	f000 b81b 	b.w	800ea74 <_close_r>
	...

0800ea40 <_write_r>:
 800ea40:	b538      	push	{r3, r4, r5, lr}
 800ea42:	4d07      	ldr	r5, [pc, #28]	; (800ea60 <_write_r+0x20>)
 800ea44:	4604      	mov	r4, r0
 800ea46:	4608      	mov	r0, r1
 800ea48:	4611      	mov	r1, r2
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	602a      	str	r2, [r5, #0]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	f7f1 fe1c 	bl	800068c <_write>
 800ea54:	1c43      	adds	r3, r0, #1
 800ea56:	d102      	bne.n	800ea5e <_write_r+0x1e>
 800ea58:	682b      	ldr	r3, [r5, #0]
 800ea5a:	b103      	cbz	r3, 800ea5e <_write_r+0x1e>
 800ea5c:	6023      	str	r3, [r4, #0]
 800ea5e:	bd38      	pop	{r3, r4, r5, pc}
 800ea60:	20010d2c 	.word	0x20010d2c

0800ea64 <abort>:
 800ea64:	b508      	push	{r3, lr}
 800ea66:	2006      	movs	r0, #6
 800ea68:	f000 f88e 	bl	800eb88 <raise>
 800ea6c:	2001      	movs	r0, #1
 800ea6e:	f7f1 fe07 	bl	8000680 <_exit>
	...

0800ea74 <_close_r>:
 800ea74:	b538      	push	{r3, r4, r5, lr}
 800ea76:	4d06      	ldr	r5, [pc, #24]	; (800ea90 <_close_r+0x1c>)
 800ea78:	2300      	movs	r3, #0
 800ea7a:	4604      	mov	r4, r0
 800ea7c:	4608      	mov	r0, r1
 800ea7e:	602b      	str	r3, [r5, #0]
 800ea80:	f7f1 fe11 	bl	80006a6 <_close>
 800ea84:	1c43      	adds	r3, r0, #1
 800ea86:	d102      	bne.n	800ea8e <_close_r+0x1a>
 800ea88:	682b      	ldr	r3, [r5, #0]
 800ea8a:	b103      	cbz	r3, 800ea8e <_close_r+0x1a>
 800ea8c:	6023      	str	r3, [r4, #0]
 800ea8e:	bd38      	pop	{r3, r4, r5, pc}
 800ea90:	20010d2c 	.word	0x20010d2c

0800ea94 <_fstat_r>:
 800ea94:	b538      	push	{r3, r4, r5, lr}
 800ea96:	4d07      	ldr	r5, [pc, #28]	; (800eab4 <_fstat_r+0x20>)
 800ea98:	2300      	movs	r3, #0
 800ea9a:	4604      	mov	r4, r0
 800ea9c:	4608      	mov	r0, r1
 800ea9e:	4611      	mov	r1, r2
 800eaa0:	602b      	str	r3, [r5, #0]
 800eaa2:	f7f1 fe03 	bl	80006ac <_fstat>
 800eaa6:	1c43      	adds	r3, r0, #1
 800eaa8:	d102      	bne.n	800eab0 <_fstat_r+0x1c>
 800eaaa:	682b      	ldr	r3, [r5, #0]
 800eaac:	b103      	cbz	r3, 800eab0 <_fstat_r+0x1c>
 800eaae:	6023      	str	r3, [r4, #0]
 800eab0:	bd38      	pop	{r3, r4, r5, pc}
 800eab2:	bf00      	nop
 800eab4:	20010d2c 	.word	0x20010d2c

0800eab8 <_isatty_r>:
 800eab8:	b538      	push	{r3, r4, r5, lr}
 800eaba:	4d06      	ldr	r5, [pc, #24]	; (800ead4 <_isatty_r+0x1c>)
 800eabc:	2300      	movs	r3, #0
 800eabe:	4604      	mov	r4, r0
 800eac0:	4608      	mov	r0, r1
 800eac2:	602b      	str	r3, [r5, #0]
 800eac4:	f7f1 fdf7 	bl	80006b6 <_isatty>
 800eac8:	1c43      	adds	r3, r0, #1
 800eaca:	d102      	bne.n	800ead2 <_isatty_r+0x1a>
 800eacc:	682b      	ldr	r3, [r5, #0]
 800eace:	b103      	cbz	r3, 800ead2 <_isatty_r+0x1a>
 800ead0:	6023      	str	r3, [r4, #0]
 800ead2:	bd38      	pop	{r3, r4, r5, pc}
 800ead4:	20010d2c 	.word	0x20010d2c

0800ead8 <_lseek_r>:
 800ead8:	b538      	push	{r3, r4, r5, lr}
 800eada:	4d07      	ldr	r5, [pc, #28]	; (800eaf8 <_lseek_r+0x20>)
 800eadc:	4604      	mov	r4, r0
 800eade:	4608      	mov	r0, r1
 800eae0:	4611      	mov	r1, r2
 800eae2:	2200      	movs	r2, #0
 800eae4:	602a      	str	r2, [r5, #0]
 800eae6:	461a      	mov	r2, r3
 800eae8:	f7f1 fde7 	bl	80006ba <_lseek>
 800eaec:	1c43      	adds	r3, r0, #1
 800eaee:	d102      	bne.n	800eaf6 <_lseek_r+0x1e>
 800eaf0:	682b      	ldr	r3, [r5, #0]
 800eaf2:	b103      	cbz	r3, 800eaf6 <_lseek_r+0x1e>
 800eaf4:	6023      	str	r3, [r4, #0]
 800eaf6:	bd38      	pop	{r3, r4, r5, pc}
 800eaf8:	20010d2c 	.word	0x20010d2c

0800eafc <__malloc_lock>:
 800eafc:	4801      	ldr	r0, [pc, #4]	; (800eb04 <__malloc_lock+0x8>)
 800eafe:	f7ff bb45 	b.w	800e18c <__retarget_lock_acquire_recursive>
 800eb02:	bf00      	nop
 800eb04:	20010d38 	.word	0x20010d38

0800eb08 <__malloc_unlock>:
 800eb08:	4801      	ldr	r0, [pc, #4]	; (800eb10 <__malloc_unlock+0x8>)
 800eb0a:	f7ff bb40 	b.w	800e18e <__retarget_lock_release_recursive>
 800eb0e:	bf00      	nop
 800eb10:	20010d38 	.word	0x20010d38

0800eb14 <_read_r>:
 800eb14:	b538      	push	{r3, r4, r5, lr}
 800eb16:	4d07      	ldr	r5, [pc, #28]	; (800eb34 <_read_r+0x20>)
 800eb18:	4604      	mov	r4, r0
 800eb1a:	4608      	mov	r0, r1
 800eb1c:	4611      	mov	r1, r2
 800eb1e:	2200      	movs	r2, #0
 800eb20:	602a      	str	r2, [r5, #0]
 800eb22:	461a      	mov	r2, r3
 800eb24:	f7f1 fdcb 	bl	80006be <_read>
 800eb28:	1c43      	adds	r3, r0, #1
 800eb2a:	d102      	bne.n	800eb32 <_read_r+0x1e>
 800eb2c:	682b      	ldr	r3, [r5, #0]
 800eb2e:	b103      	cbz	r3, 800eb32 <_read_r+0x1e>
 800eb30:	6023      	str	r3, [r4, #0]
 800eb32:	bd38      	pop	{r3, r4, r5, pc}
 800eb34:	20010d2c 	.word	0x20010d2c

0800eb38 <_raise_r>:
 800eb38:	291f      	cmp	r1, #31
 800eb3a:	b538      	push	{r3, r4, r5, lr}
 800eb3c:	4604      	mov	r4, r0
 800eb3e:	460d      	mov	r5, r1
 800eb40:	d904      	bls.n	800eb4c <_raise_r+0x14>
 800eb42:	2316      	movs	r3, #22
 800eb44:	6003      	str	r3, [r0, #0]
 800eb46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb4a:	bd38      	pop	{r3, r4, r5, pc}
 800eb4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eb4e:	b112      	cbz	r2, 800eb56 <_raise_r+0x1e>
 800eb50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb54:	b94b      	cbnz	r3, 800eb6a <_raise_r+0x32>
 800eb56:	4620      	mov	r0, r4
 800eb58:	f000 f830 	bl	800ebbc <_getpid_r>
 800eb5c:	462a      	mov	r2, r5
 800eb5e:	4601      	mov	r1, r0
 800eb60:	4620      	mov	r0, r4
 800eb62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb66:	f000 b817 	b.w	800eb98 <_kill_r>
 800eb6a:	2b01      	cmp	r3, #1
 800eb6c:	d00a      	beq.n	800eb84 <_raise_r+0x4c>
 800eb6e:	1c59      	adds	r1, r3, #1
 800eb70:	d103      	bne.n	800eb7a <_raise_r+0x42>
 800eb72:	2316      	movs	r3, #22
 800eb74:	6003      	str	r3, [r0, #0]
 800eb76:	2001      	movs	r0, #1
 800eb78:	e7e7      	b.n	800eb4a <_raise_r+0x12>
 800eb7a:	2400      	movs	r4, #0
 800eb7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb80:	4628      	mov	r0, r5
 800eb82:	4798      	blx	r3
 800eb84:	2000      	movs	r0, #0
 800eb86:	e7e0      	b.n	800eb4a <_raise_r+0x12>

0800eb88 <raise>:
 800eb88:	4b02      	ldr	r3, [pc, #8]	; (800eb94 <raise+0xc>)
 800eb8a:	4601      	mov	r1, r0
 800eb8c:	6818      	ldr	r0, [r3, #0]
 800eb8e:	f7ff bfd3 	b.w	800eb38 <_raise_r>
 800eb92:	bf00      	nop
 800eb94:	20000048 	.word	0x20000048

0800eb98 <_kill_r>:
 800eb98:	b538      	push	{r3, r4, r5, lr}
 800eb9a:	4d07      	ldr	r5, [pc, #28]	; (800ebb8 <_kill_r+0x20>)
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	4604      	mov	r4, r0
 800eba0:	4608      	mov	r0, r1
 800eba2:	4611      	mov	r1, r2
 800eba4:	602b      	str	r3, [r5, #0]
 800eba6:	f7f1 fd63 	bl	8000670 <_kill>
 800ebaa:	1c43      	adds	r3, r0, #1
 800ebac:	d102      	bne.n	800ebb4 <_kill_r+0x1c>
 800ebae:	682b      	ldr	r3, [r5, #0]
 800ebb0:	b103      	cbz	r3, 800ebb4 <_kill_r+0x1c>
 800ebb2:	6023      	str	r3, [r4, #0]
 800ebb4:	bd38      	pop	{r3, r4, r5, pc}
 800ebb6:	bf00      	nop
 800ebb8:	20010d2c 	.word	0x20010d2c

0800ebbc <_getpid_r>:
 800ebbc:	f7f1 bd56 	b.w	800066c <_getpid>

0800ebc0 <_init>:
 800ebc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebc2:	bf00      	nop
 800ebc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebc6:	bc08      	pop	{r3}
 800ebc8:	469e      	mov	lr, r3
 800ebca:	4770      	bx	lr

0800ebcc <_fini>:
 800ebcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebce:	bf00      	nop
 800ebd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebd2:	bc08      	pop	{r3}
 800ebd4:	469e      	mov	lr, r3
 800ebd6:	4770      	bx	lr
